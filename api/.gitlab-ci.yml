stages:
  - test
  - sonarqube
  - build
  - sentry
  - deploy
  
variables:
  FF_GITLAB_REGISTRY_HELPER_IMAGE: 1

#include:
#all-code-sast
  #- local.remote: https://git.edenfarm.id/anakbawang/ci-template/raw/master/analyzer-code/analyzer.yml
#  - template: SAST.gitlab-ci.yml
#code_quality
  #- local.remote: https://git.edenfarm.id/anakbawang/ci-template/raw/master/quality-code/quality.yml
#  - template: Code-Quality.gitlab-ci.yml
  #- url: https://git.edenfarm.id/anakbawang/dockerfile/-/raw/master/api-sales/Dockerfile

#code_quality:
#  stage: test
#  artifacts:
#    paths: [gl-code-quality-report.json]

#sast:
#  stage: test
#  variables:
#    BUILD_REPO_PATH: ./src
#    COMPILE: "false"
#  artifacts:
#    reports:
#      sast: gl-sast-report.json

#coverage:
#  image: $CI_REGISTRY/image/golang-edenfarm/master:latest
#  stage: test
#  before_script:
#    - git config --global url."https://$GITLAB_CI_ACCESS:$GITLAB_CI_TOKEN@git.edenfarm.id/".insteadOf "https://git.edenfarm.id/"
#    - git clone --single-branch --branch $CI_COMMIT_BRANCH $CI_REPOSITORY_URL $REPO_DIR/api
#    - git clone --single-branch --branch $CI_COMMIT_BRANCH https://$GITLAB_CI_ACCESS:$GITLAB_CI_TOKEN@git.edenfarm.id/project-version2/datamodel.git $REPO_DIR/datamodel
#    - cd $REPO_DIR/api
#    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
#    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
#    - aws configure set default.region $AWS_DEFAULT_REGION
#    - aws configure set output json
#    - aws s3 cp s3://$S3_BUCKET_NAME/$BASE_ENV_COREAPI/$CI_COMMIT_BRANCH/.env ./
#  script:
#    - go test ./... -coverprofile=coverage.out
#  artifacts:
#    expire_in: 1 week
#    paths:
#    - coverage.out
#  allow_failure: true
#  only:
#   - staging

#Sonar Scanner:
#  image: $CI_REGISTRY/image/sonar-scanner-cli/master:latest
#  stage: sonarqube
#  script:
#    - sonar-scanner
#      -Dsonar.host.url=$SONARQUBE_URL
#      -Dsonar.projectKey=$SONARQUBE_PROJECT_KEY
#      -Dsonar.login=$SONARQUBE_TOKEN
#      -Dsonar.projectName=Project-Core-$CI_PROJECT_NAME
#      -Dsonar.sources=./src
#      -Dsonar.go.coverage.reportPaths=coverage.out
#  allow_failure: true
#  only:
#    - staging

Sonar Scan:
  stage: test
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker  
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "gitlab-ci-token" "${CI_JOB_TOKEN}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --build-arg CI_REGISTRY=${CI_REGISTRY}
      --build-arg AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      --build-arg AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      --build-arg GITLAB_CI_ACCESS=${GITLAB_CI_ACCESS}
      --build-arg GITLAB_CI_TOKEN=${GITLAB_CI_TOKEN}
      --build-arg S3_BUCKET_NAME=${S3_BUCKET_NAME}
      --build-arg AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      --build-arg CI_COMMIT_BRANCH=${CI_COMMIT_BRANCH}
      --build-arg REPO_DIR=${REPO_DIR}
      --build-arg CI_REPOSITORY_URL=${CI_REPOSITORY_URL}
      --build-arg BASE_ENV_COREAPI=${BASE_ENV_COREAPI}
      --build-arg CI_PROJECT_NAME=${CI_PROJECT_NAME}
      --build-arg SONARQUBE_URL=${SONARQUBE_URL}
      --build-arg SONARQUBE_PROJECT_KEY=${SONARQUBE_PROJECT_KEY}
      --build-arg SONARQUBE_TOKEN=${SONARQUBE_TOKEN}
      --context "${CI_PROJECT_DIR}"
      --dockerfile docker/sonar.dockerfile
      --no-push
      --cache=false
  allow_failure: true
  only:
    - staging

Build Image:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker  
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "gitlab-ci-token" "${CI_JOB_TOKEN}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --build-arg CI_REGISTRY=${CI_REGISTRY}
      --build-arg AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      --build-arg AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      --build-arg GITLAB_CI_ACCESS=${GITLAB_CI_ACCESS}
      --build-arg GITLAB_CI_TOKEN=${GITLAB_CI_TOKEN}
      --build-arg S3_BUCKET_NAME=${S3_BUCKET_NAME}
      --build-arg AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      --build-arg CI_COMMIT_BRANCH=${CI_COMMIT_BRANCH}
      --build-arg REPO_DIR=${REPO_DIR}
      --build-arg CI_REPOSITORY_URL=${CI_REPOSITORY_URL}
      --build-arg BASE_ENV_COREAPI=${BASE_ENV_COREAPI}
      --context "${CI_PROJECT_DIR}"
      --dockerfile docker/Dockerfile
      --destination $CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH
      --destination $CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH:$CI_COMMIT_SHORT_SHA
      --cache=false
  only:
    - rnd
    - dev
    - staging

image_gen2:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker  
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "gitlab-ci-token" "${CI_JOB_TOKEN}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --build-arg CI_REGISTRY=${CI_REGISTRY}
      --build-arg AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      --build-arg AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      --build-arg GITLAB_CI_ACCESS=${GITLAB_CI_ACCESS}
      --build-arg GITLAB_CI_TOKEN=${GITLAB_CI_TOKEN}
      --build-arg S3_BUCKET_NAME=${S3_BUCKET_NAME}
      --build-arg AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      --build-arg CI_COMMIT_BRANCH=${CI_COMMIT_BRANCH}
      --build-arg REPO_DIR=${REPO_DIR}
      --build-arg CI_REPOSITORY_URL=${CI_REPOSITORY_URL}
      --build-arg BASE_ENV_COREAPI=${BASE_ENV_COREAPI}
      --context "${CI_PROJECT_DIR}"
      --dockerfile docker/gen2.dockerfile
      --destination $CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH
      --destination $CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH:$CI_COMMIT_SHORT_SHA
      --cache=false
  only:
    - master

#Build Tag-Image:
#  stage: build
#  rules:
#    - if: $CI_COMMIT_TAG
#  image:
#    name: gcr.io/kaniko-project/executor:debug
#    entrypoint: [""]
#  script:
#    - mkdir -p /kaniko/.docker
#    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "gitlab-ci-token" "${CI_JOB_TOKEN}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
#    - >-
#      /kaniko/executor
#      --build-arg AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
#      --build-arg AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
#      --build-arg GITLAB_CI_ACCESS=${GITLAB_CI_ACCESS}
#      --build-arg GITLAB_CI_TOKEN=${GITLAB_CI_TOKEN}
#      --build-arg S3_BUCKET_NAME=${S3_BUCKET_NAME}
#      --build-arg AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
#      --build-arg CI_DEFAULT_BRANCH=${CI_DEFAULT_BRANCH}
#      --build-arg CI_COMMIT_TAG=${CI_COMMIT_TAG}
#      --context "${CI_PROJECT_DIR}"
#      --dockerfile docker/tag.dockerfile
#      --destination $CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH
#      --destination $CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH:$CI_COMMIT_TAG
#      --cache=false

#Sentry:
#  stage: sentry
#  rules:
#    - if: $CI_COMMIT_TAG
#  image: $CI_REGISTRY/image/sentry-cli/master:latest
#  script:
#    - export SENTRY_RELEASE_VERSION="${CI_PROJECT_NAME}@${CI_COMMIT_TAG}"
#    - export SENTRY_AUTH_TOKEN=$SENTRY_GIT_AUTH_TOKEN
#    - export SENTRY_ORG=$SENTRY_GIT_ORG
#    - export SENTRY_PROJECT=$SENTRY_GIT_PROJECT
#    - echo "Create a new release $SENTRY_RELEASE_VERSION"
#    - sentry-cli releases new $SENTRY_RELEASE_VERSION
#    - sentry-cli releases set-commits --auto $SENTRY_RELEASE_VERSION
#    - sentry-cli releases files $SENTRY_RELEASE_VERSION upload-sourcemaps --validate $CI_PROJECT_DIR/api
#    - sentry-cli releases finalize $SENTRY_RELEASE_VERSION
#    - echo "Finalized release for $SENTRY_RELEASE_VERSION"

Deploy RND:
  stage: deploy
  image: $CI_REGISTRY/image/helm-edenfarm/master:latest
  before_script:
    - aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $AWS_DEV_CLUSTER_NAME
  script:
    - sed -i "s/<VERSION>/${CI_COMMIT_SHORT_SHA}/g" kubernetes/deploy_rnd.yaml
    - kubectl apply -f kubernetes/deploy_rnd.yaml
  only:
    - rnd
  tags:
    - deploy_to_dev

Deploy Dev:
  stage: deploy
  image: $CI_REGISTRY/image/helm-edenfarm/master:latest
  before_script:
    - aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $AWS_DEV_CLUSTER_NAME
  script:
    - sed -i "s/<VERSION>/${CI_COMMIT_SHORT_SHA}/g" kubernetes/deploy_dev.yaml
    - kubectl apply -f kubernetes/deploy_dev.yaml
  only:
    - dev
  tags:
    - deploy_to_dev

Deploy Staging:
  stage: deploy
  image: $CI_REGISTRY/image/helm-edenfarm/master:latest
  before_script:
    - aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $AWS_STAGING_CLUSTER_NAME
  script:
    - sed -i "s/<VERSION>/${CI_COMMIT_SHORT_SHA}/g" kubernetes/deploy_staging.yaml
    - kubectl apply -f kubernetes/deploy_staging.yaml
  only:
    - staging
  tags:
    - deploy_to_staging

#Deploy Pre-Production:
#  stage: deploy
#  image: alpine:latest
#  script:
#    - apk update && apk add git curl bash
#    - curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
#    - mv kustomize /usr/bin
#    - mkdir manifest && cd manifest
#    - git config --global user.email "${CI_COMMIT_BRANCH}@deploy.com"
#    - git config --global user.name "api-core"
#    - git config --global url."https://$PREPROD_CI_USER:$PREPROD_CI_TOKEN@git.edenfarm.id/".insteadOf "https://git.edenfarm.id/"
#    - git clone -b master https://$PREPROD_CI_USER:$PREPROD_CI_TOKEN@git.edenfarm.id/k8s-script/pre-production.git .
#    - cd api-core && kustomize edit set image $CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH:$CI_COMMIT_SHORT_SHA
#    - git add . && git commit -m "[${CI_COMMIT_BRANCH}-${CI_PIPELINE_IID}] ${CI_COMMIT_MESSAGE}"
#    - git push origin master
#  only:
#    - master
#  tags:
#    - deploy_to_production
    
#Build Production:
#  image: $CI_REGISTRY/image/golang-edenfarm/master:latest
#  stage: build
#  before_script:
#   - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
#    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
#    - aws configure set default.region $AWS_DEFAULT_REGION
#    - aws configure set output json
#    - mkdir /go/src/git.edenfarm.id
#    - mkdir /go/src/git.edenfarm.id/project-version2
#    - git config --global url."https://$GITLAB_CI_ACCESS:$GITLAB_CI_TOKEN@git.edenfarm.id/".insteadOf "https://git.edenfarm.id/"
#    - git clone https://$GITLAB_CI_ACCESS:$GITLAB_CI_TOKEN@git.edenfarm.id/project-version2/datamodel.git /go/src/git.edenfarm.id/project-version2/datamodel
#    - cd /go/src/git.edenfarm.id/project-version2/datamodel && git checkout master && git add . && git stash && git pull origin master
#  script:
#    - git clone https://$GITLAB_CI_ACCESS:$GITLAB_CI_TOKEN@git.edenfarm.id/project-version2/api.git /go/src/git.edenfarm.id/project-version2/api
#    - cd /go/src/git.edenfarm.id/project-version2/api
#    - git checkout master && git add . && git stash && git pull origin master
#    - go mod vendor
#    - go build -o api
#  artifacts:
#    expire_in: 1 week
#    paths:
#      - api
#  only:
#    - master

Build Tag:
  image: git.edenfarm.id:5050/image/golang16:latest
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - curl -sL https://sentry.io/get-cli/ | bash
    - git config --global url."https://$GITLAB_CI_ACCESS:$GITLAB_CI_TOKEN@git.edenfarm.id/".insteadOf "https://git.edenfarm.id/"
    - git clone https://$GITLAB_CI_ACCESS:$GITLAB_CI_TOKEN@git.edenfarm.id/project-version2/datamodel.git /go/src/git.edenfarm.id/project-version2/datamodel
    - cd /go/src/git.edenfarm.id/project-version2/datamodel && git checkout master && git add . && git stash && git pull origin master
    - git clone https://$GITLAB_CI_ACCESS:$GITLAB_CI_TOKEN@git.edenfarm.id/project-version2/api.git /go/src/git.edenfarm.id/project-version2/api2
    - cd /go/src/git.edenfarm.id/project-version2/api2 && git checkout master && git add . && git stash && git pull origin master
  script:
    - go mod vendor
    - aws s3 cp s3://$S3_BUCKET_NAME/$BASE_ENV/.env ./
    - sed -i "s/<VERSION>/${CI_COMMIT_TAG}/g" .env
    - go build -o api
    - export SENTRY_RELEASE_VERSION="${CI_PROJECT_NAME}@${CI_COMMIT_TAG}"
    - export SENTRY_AUTH_TOKEN=$SENTRY_GIT_AUTH_TOKEN
    - export SENTRY_ORG=$SENTRY_GIT_ORG
    - export SENTRY_PROJECT=$SENTRY_GIT_PROJECT
    - echo "Create a new release $SENTRY_RELEASE_VERSION"
    - sentry-cli releases new $SENTRY_RELEASE_VERSION
    - sentry-cli releases set-commits --auto $SENTRY_RELEASE_VERSION
    - sentry-cli releases files $SENTRY_RELEASE_VERSION upload-sourcemaps $CI_PROJECT_DIR
    - sentry-cli releases finalize $SENTRY_RELEASE_VERSION
    - echo "Finalized release for $SENTRY_RELEASE_VERSION"
    - aws s3 rm s3://$S3_BUCKET_NAME/$PRODUCTION_BUCKET_PATH/ --recursive
    - aws s3 cp api s3://$S3_BUCKET_NAME/$PRODUCTION_BUCKET_PATH/ --no-progress
  artifacts:
    expire_in: 1 week
    paths:
      - api

#manual Deploy only master/production
Deploy Tag:
  image: $CI_REGISTRY/image/golang-edenfarm/master:latest
  stage: deploy
  script:
    - sshpass -p $PRIVATE_KEY ssh -p $PORT -o StrictHostKeyChecking=no $USER_SERVER@$DEPLOY_SERVER "sh $DEPLOY_PRODUCTION"
  only:
    - tags
  except:
    - master
  when: manual
  tags:
    - deploy_to_production