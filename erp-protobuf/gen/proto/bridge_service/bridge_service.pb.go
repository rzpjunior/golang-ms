// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.4
// source: proto/bridge_service/bridge_service.proto

package bridge_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code             string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	CustomerName     string                 `protobuf:"bytes,3,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty"`
	ArchetypeId      int64                  `protobuf:"varint,4,opt,name=archetype_id,json=archetypeId,proto3" json:"archetype_id,omitempty"`
	AdmDivisionId    int64                  `protobuf:"varint,5,opt,name=adm_division_id,json=admDivisionId,proto3" json:"adm_division_id,omitempty"`
	SiteId           int64                  `protobuf:"varint,6,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	SalespersonId    int64                  `protobuf:"varint,7,opt,name=salesperson_id,json=salespersonId,proto3" json:"salesperson_id,omitempty"`
	TerritoryId      int64                  `protobuf:"varint,8,opt,name=territory_id,json=territoryId,proto3" json:"territory_id,omitempty"`
	AddressCode      string                 `protobuf:"bytes,9,opt,name=address_code,json=addressCode,proto3" json:"address_code,omitempty"`
	AddressName      string                 `protobuf:"bytes,10,opt,name=address_name,json=addressName,proto3" json:"address_name,omitempty"`
	ContactPerson    string                 `protobuf:"bytes,11,opt,name=contact_person,json=contactPerson,proto3" json:"contact_person,omitempty"`
	City             string                 `protobuf:"bytes,12,opt,name=city,proto3" json:"city,omitempty"`
	State            string                 `protobuf:"bytes,13,opt,name=state,proto3" json:"state,omitempty"`
	ZipCode          string                 `protobuf:"bytes,14,opt,name=zip_code,json=zipCode,proto3" json:"zip_code,omitempty"`
	CountryCode      string                 `protobuf:"bytes,15,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	Country          string                 `protobuf:"bytes,16,opt,name=country,proto3" json:"country,omitempty"`
	Latitude         *float64               `protobuf:"fixed64,17,opt,name=latitude,proto3,oneof" json:"latitude,omitempty"`
	Longitude        *float64               `protobuf:"fixed64,18,opt,name=longitude,proto3,oneof" json:"longitude,omitempty"`
	UpsZone          string                 `protobuf:"bytes,19,opt,name=ups_zone,json=upsZone,proto3" json:"ups_zone,omitempty"`
	ShippingMethod   string                 `protobuf:"bytes,20,opt,name=shipping_method,json=shippingMethod,proto3" json:"shipping_method,omitempty"`
	TaxScheduleId    int64                  `protobuf:"varint,21,opt,name=tax_schedule_id,json=taxScheduleId,proto3" json:"tax_schedule_id,omitempty"`
	PrintPhoneNumber int32                  `protobuf:"varint,22,opt,name=print_phone_number,json=printPhoneNumber,proto3" json:"print_phone_number,omitempty"`
	Phone_1          string                 `protobuf:"bytes,23,opt,name=phone_1,json=phone1,proto3" json:"phone_1,omitempty"`
	Phone_2          string                 `protobuf:"bytes,24,opt,name=phone_2,json=phone2,proto3" json:"phone_2,omitempty"`
	Phone_3          string                 `protobuf:"bytes,25,opt,name=phone_3,json=phone3,proto3" json:"phone_3,omitempty"`
	FaxNumber        string                 `protobuf:"bytes,26,opt,name=fax_number,json=faxNumber,proto3" json:"fax_number,omitempty"`
	ShippingAddress  string                 `protobuf:"bytes,27,opt,name=shipping_address,json=shippingAddress,proto3" json:"shipping_address,omitempty"`
	BcaVa            string                 `protobuf:"bytes,28,opt,name=bca_va,json=bcaVa,proto3" json:"bca_va,omitempty"`
	OtherVa          string                 `protobuf:"bytes,29,opt,name=other_va,json=otherVa,proto3" json:"other_va,omitempty"`
	Note             string                 `protobuf:"bytes,30,opt,name=note,proto3" json:"note,omitempty"`
	Status           int32                  `protobuf:"varint,31,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,33,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DistrictId       int64                  `protobuf:"varint,34,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{0}
}

func (x *Address) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Address) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Address) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *Address) GetArchetypeId() int64 {
	if x != nil {
		return x.ArchetypeId
	}
	return 0
}

func (x *Address) GetAdmDivisionId() int64 {
	if x != nil {
		return x.AdmDivisionId
	}
	return 0
}

func (x *Address) GetSiteId() int64 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *Address) GetSalespersonId() int64 {
	if x != nil {
		return x.SalespersonId
	}
	return 0
}

func (x *Address) GetTerritoryId() int64 {
	if x != nil {
		return x.TerritoryId
	}
	return 0
}

func (x *Address) GetAddressCode() string {
	if x != nil {
		return x.AddressCode
	}
	return ""
}

func (x *Address) GetAddressName() string {
	if x != nil {
		return x.AddressName
	}
	return ""
}

func (x *Address) GetContactPerson() string {
	if x != nil {
		return x.ContactPerson
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Address) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *Address) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *Address) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Address) GetLatitude() float64 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *Address) GetLongitude() float64 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *Address) GetUpsZone() string {
	if x != nil {
		return x.UpsZone
	}
	return ""
}

func (x *Address) GetShippingMethod() string {
	if x != nil {
		return x.ShippingMethod
	}
	return ""
}

func (x *Address) GetTaxScheduleId() int64 {
	if x != nil {
		return x.TaxScheduleId
	}
	return 0
}

func (x *Address) GetPrintPhoneNumber() int32 {
	if x != nil {
		return x.PrintPhoneNumber
	}
	return 0
}

func (x *Address) GetPhone_1() string {
	if x != nil {
		return x.Phone_1
	}
	return ""
}

func (x *Address) GetPhone_2() string {
	if x != nil {
		return x.Phone_2
	}
	return ""
}

func (x *Address) GetPhone_3() string {
	if x != nil {
		return x.Phone_3
	}
	return ""
}

func (x *Address) GetFaxNumber() string {
	if x != nil {
		return x.FaxNumber
	}
	return ""
}

func (x *Address) GetShippingAddress() string {
	if x != nil {
		return x.ShippingAddress
	}
	return ""
}

func (x *Address) GetBcaVa() string {
	if x != nil {
		return x.BcaVa
	}
	return ""
}

func (x *Address) GetOtherVa() string {
	if x != nil {
		return x.OtherVa
	}
	return ""
}

func (x *Address) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *Address) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Address) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Address) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Address) GetDistrictId() int64 {
	if x != nil {
		return x.DistrictId
	}
	return 0
}

type AdmDivision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code          string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	ProvinceId    int64                  `protobuf:"varint,3,opt,name=province_id,json=provinceId,proto3" json:"province_id,omitempty"`
	CityId        int64                  `protobuf:"varint,4,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	DistrictId    int64                  `protobuf:"varint,5,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`
	SubDistrictId int64                  `protobuf:"varint,6,opt,name=sub_district_id,json=subDistrictId,proto3" json:"sub_district_id,omitempty"`
	RegionId      int64                  `protobuf:"varint,7,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	PostalCode    string                 `protobuf:"bytes,8,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	Province      string                 `protobuf:"bytes,9,opt,name=province,proto3" json:"province,omitempty"`
	City          string                 `protobuf:"bytes,10,opt,name=city,proto3" json:"city,omitempty"`
	District      string                 `protobuf:"bytes,11,opt,name=district,proto3" json:"district,omitempty"`
	Region        string                 `protobuf:"bytes,12,opt,name=region,proto3" json:"region,omitempty"`
	Status        int32                  `protobuf:"varint,13,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *AdmDivision) Reset() {
	*x = AdmDivision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdmDivision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdmDivision) ProtoMessage() {}

func (x *AdmDivision) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdmDivision.ProtoReflect.Descriptor instead.
func (*AdmDivision) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{1}
}

func (x *AdmDivision) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AdmDivision) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AdmDivision) GetProvinceId() int64 {
	if x != nil {
		return x.ProvinceId
	}
	return 0
}

func (x *AdmDivision) GetCityId() int64 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *AdmDivision) GetDistrictId() int64 {
	if x != nil {
		return x.DistrictId
	}
	return 0
}

func (x *AdmDivision) GetSubDistrictId() int64 {
	if x != nil {
		return x.SubDistrictId
	}
	return 0
}

func (x *AdmDivision) GetRegionId() int64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *AdmDivision) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *AdmDivision) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *AdmDivision) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *AdmDivision) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *AdmDivision) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AdmDivision) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AdmDivision) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AdmDivision) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type AdmDivisionGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Region      string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	State       string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	City        string `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	District    string `protobuf:"bytes,5,opt,name=district,proto3" json:"district,omitempty"`
	Subdistrict string `protobuf:"bytes,6,opt,name=subdistrict,proto3" json:"subdistrict,omitempty"`
	Zipcode     string `protobuf:"bytes,7,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
}

func (x *AdmDivisionGP) Reset() {
	*x = AdmDivisionGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdmDivisionGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdmDivisionGP) ProtoMessage() {}

func (x *AdmDivisionGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdmDivisionGP.ProtoReflect.Descriptor instead.
func (*AdmDivisionGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{2}
}

func (x *AdmDivisionGP) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AdmDivisionGP) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AdmDivisionGP) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *AdmDivisionGP) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *AdmDivisionGP) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *AdmDivisionGP) GetSubdistrict() string {
	if x != nil {
		return x.Subdistrict
	}
	return ""
}

func (x *AdmDivisionGP) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

type Archetype struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code           string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	CustomerTypeId int64                  `protobuf:"varint,3,opt,name=customer_type_id,json=customerTypeId,proto3" json:"customer_type_id,omitempty"`
	Description    string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Status         int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Archetype) Reset() {
	*x = Archetype{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Archetype) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Archetype) ProtoMessage() {}

func (x *Archetype) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Archetype.ProtoReflect.Descriptor instead.
func (*Archetype) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{3}
}

func (x *Archetype) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Archetype) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Archetype) GetCustomerTypeId() int64 {
	if x != nil {
		return x.CustomerTypeId
	}
	return 0
}

func (x *Archetype) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Archetype) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Archetype) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Archetype) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CustomerType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code         string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Description  string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	GroupType    string                 `protobuf:"bytes,4,opt,name=group_type,json=groupType,proto3" json:"group_type,omitempty"`
	Abbreviation string                 `protobuf:"bytes,5,opt,name=abbreviation,proto3" json:"abbreviation,omitempty"`
	Status       int32                  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *CustomerType) Reset() {
	*x = CustomerType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerType) ProtoMessage() {}

func (x *CustomerType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerType.ProtoReflect.Descriptor instead.
func (*CustomerType) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{4}
}

func (x *CustomerType) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CustomerType) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CustomerType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CustomerType) GetGroupType() string {
	if x != nil {
		return x.GroupType
	}
	return ""
}

func (x *CustomerType) GetAbbreviation() string {
	if x != nil {
		return x.Abbreviation
	}
	return ""
}

func (x *CustomerType) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CustomerType) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CustomerType) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Class struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code        string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Status      int32                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Class) Reset() {
	*x = Class{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Class) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Class) ProtoMessage() {}

func (x *Class) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Class.ProtoReflect.Descriptor instead.
func (*Class) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{5}
}

func (x *Class) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Class) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Class) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Class) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Class) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Class) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type OrderType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code        string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Status      int32                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *OrderType) Reset() {
	*x = OrderType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderType) ProtoMessage() {}

func (x *OrderType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderType.ProtoReflect.Descriptor instead.
func (*OrderType) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{6}
}

func (x *OrderType) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderType) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *OrderType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OrderType) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OrderType) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OrderType) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type SalesPaymentTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code        string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Status      int32                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *SalesPaymentTerm) Reset() {
	*x = SalesPaymentTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesPaymentTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesPaymentTerm) ProtoMessage() {}

func (x *SalesPaymentTerm) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesPaymentTerm.ProtoReflect.Descriptor instead.
func (*SalesPaymentTerm) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{7}
}

func (x *SalesPaymentTerm) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SalesPaymentTerm) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SalesPaymentTerm) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SalesPaymentTerm) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SalesPaymentTerm) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SalesPaymentTerm) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code                    string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	UomId                   int64                  `protobuf:"varint,3,opt,name=uom_id,json=uomId,proto3" json:"uom_id,omitempty"`
	ClassId                 int64                  `protobuf:"varint,4,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	ItemCategoryId          int64                  `protobuf:"varint,5,opt,name=item_category_id,json=itemCategoryId,proto3" json:"item_category_id,omitempty"`
	Description             string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	UnitWeightConversion    float64                `protobuf:"fixed64,7,opt,name=unit_weight_conversion,json=unitWeightConversion,proto3" json:"unit_weight_conversion,omitempty"`
	OrderMinQty             float64                `protobuf:"fixed64,8,opt,name=order_min_qty,json=orderMinQty,proto3" json:"order_min_qty,omitempty"`
	OrderMaxQty             float64                `protobuf:"fixed64,9,opt,name=order_max_qty,json=orderMaxQty,proto3" json:"order_max_qty,omitempty"`
	ItemType                string                 `protobuf:"bytes,10,opt,name=item_type,json=itemType,proto3" json:"item_type,omitempty"`
	Packability             string                 `protobuf:"bytes,11,opt,name=packability,proto3" json:"packability,omitempty"`
	Capitalize              string                 `protobuf:"bytes,12,opt,name=capitalize,proto3" json:"capitalize,omitempty"`
	Note                    string                 `protobuf:"bytes,13,opt,name=note,proto3" json:"note,omitempty"`
	ExcludeArchetype        string                 `protobuf:"bytes,14,opt,name=exclude_archetype,json=excludeArchetype,proto3" json:"exclude_archetype,omitempty"`
	MaxDayDeliveryDate      int32                  `protobuf:"varint,15,opt,name=max_day_delivery_date,json=maxDayDeliveryDate,proto3" json:"max_day_delivery_date,omitempty"`
	FragileGoods            string                 `protobuf:"bytes,16,opt,name=fragile_goods,json=fragileGoods,proto3" json:"fragile_goods,omitempty"`
	Taxable                 string                 `protobuf:"bytes,17,opt,name=taxable,proto3" json:"taxable,omitempty"`
	OrderChannelRestriction string                 `protobuf:"bytes,18,opt,name=order_channel_restriction,json=orderChannelRestriction,proto3" json:"order_channel_restriction,omitempty"`
	Status                  int32                  `protobuf:"varint,19,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt               *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt               *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Uom                     *Uom                   `protobuf:"bytes,22,opt,name=uom,proto3" json:"uom,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{8}
}

func (x *Item) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Item) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Item) GetUomId() int64 {
	if x != nil {
		return x.UomId
	}
	return 0
}

func (x *Item) GetClassId() int64 {
	if x != nil {
		return x.ClassId
	}
	return 0
}

func (x *Item) GetItemCategoryId() int64 {
	if x != nil {
		return x.ItemCategoryId
	}
	return 0
}

func (x *Item) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Item) GetUnitWeightConversion() float64 {
	if x != nil {
		return x.UnitWeightConversion
	}
	return 0
}

func (x *Item) GetOrderMinQty() float64 {
	if x != nil {
		return x.OrderMinQty
	}
	return 0
}

func (x *Item) GetOrderMaxQty() float64 {
	if x != nil {
		return x.OrderMaxQty
	}
	return 0
}

func (x *Item) GetItemType() string {
	if x != nil {
		return x.ItemType
	}
	return ""
}

func (x *Item) GetPackability() string {
	if x != nil {
		return x.Packability
	}
	return ""
}

func (x *Item) GetCapitalize() string {
	if x != nil {
		return x.Capitalize
	}
	return ""
}

func (x *Item) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *Item) GetExcludeArchetype() string {
	if x != nil {
		return x.ExcludeArchetype
	}
	return ""
}

func (x *Item) GetMaxDayDeliveryDate() int32 {
	if x != nil {
		return x.MaxDayDeliveryDate
	}
	return 0
}

func (x *Item) GetFragileGoods() string {
	if x != nil {
		return x.FragileGoods
	}
	return ""
}

func (x *Item) GetTaxable() string {
	if x != nil {
		return x.Taxable
	}
	return ""
}

func (x *Item) GetOrderChannelRestriction() string {
	if x != nil {
		return x.OrderChannelRestriction
	}
	return ""
}

func (x *Item) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Item) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Item) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Item) GetUom() *Uom {
	if x != nil {
		return x.Uom
	}
	return nil
}

type ItemGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemnmbr               string  `protobuf:"bytes,1,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	Itemdesc               string  `protobuf:"bytes,2,opt,name=itemdesc,proto3" json:"itemdesc,omitempty"`
	Itmshnam               string  `protobuf:"bytes,3,opt,name=itmshnam,proto3" json:"itmshnam,omitempty"`
	Itemtype               int32   `protobuf:"varint,4,opt,name=itemtype,proto3" json:"itemtype,omitempty"`
	ItemTypeDesc           string  `protobuf:"bytes,5,opt,name=item_type_desc,json=itemTypeDesc,proto3" json:"item_type_desc,omitempty"`
	Itmgedsc               string  `protobuf:"bytes,6,opt,name=itmgedsc,proto3" json:"itmgedsc,omitempty"`
	Stndcost               float64 `protobuf:"fixed64,7,opt,name=stndcost,proto3" json:"stndcost,omitempty"`
	Currcost               float64 `protobuf:"fixed64,8,opt,name=currcost,proto3" json:"currcost,omitempty"`
	Itemshwt               float64 `protobuf:"fixed64,9,opt,name=itemshwt,proto3" json:"itemshwt,omitempty"`
	Decplqty               int32   `protobuf:"varint,10,opt,name=decplqty,proto3" json:"decplqty,omitempty"`
	Decplcur               int32   `protobuf:"varint,11,opt,name=decplcur,proto3" json:"decplcur,omitempty"`
	Taxoptns               int32   `protobuf:"varint,12,opt,name=taxoptns,proto3" json:"taxoptns,omitempty"`
	PurchaseTaxOptionDesc  string  `protobuf:"bytes,13,opt,name=purchase_tax_option_desc,json=purchaseTaxOptionDesc,proto3" json:"purchase_tax_option_desc,omitempty"`
	Uomschdl               string  `protobuf:"bytes,14,opt,name=uomschdl,proto3" json:"uomschdl,omitempty"`
	GnlCbCapitalitem       int32   `protobuf:"varint,15,opt,name=gnl_cb_capitalitem,json=gnlCbCapitalitem,proto3" json:"gnl_cb_capitalitem,omitempty"`
	GnlCbCapitalitemDesc   string  `protobuf:"bytes,16,opt,name=gnl_cb_capitalitem_desc,json=gnlCbCapitalitemDesc,proto3" json:"gnl_cb_capitalitem_desc,omitempty"`
	GnlCbAllowdirectpo     int32   `protobuf:"varint,17,opt,name=gnl_cb_allowdirectpo,json=gnlCbAllowdirectpo,proto3" json:"gnl_cb_allowdirectpo,omitempty"`
	GnlCbAllowdirectpoDesc string  `protobuf:"bytes,18,opt,name=gnl_cb_allowdirectpo_desc,json=gnlCbAllowdirectpoDesc,proto3" json:"gnl_cb_allowdirectpo_desc,omitempty"`
	GnlWeighttolerance     float64 `protobuf:"fixed64,19,opt,name=gnl_weighttolerance,json=gnlWeighttolerance,proto3" json:"gnl_weighttolerance,omitempty"`
	Inactive               int32   `protobuf:"varint,20,opt,name=inactive,proto3" json:"inactive,omitempty"`
	InactiveDesc           string  `protobuf:"bytes,21,opt,name=inactive_desc,json=inactiveDesc,proto3" json:"inactive_desc,omitempty"`
	Itmclscd               string  `protobuf:"bytes,22,opt,name=itmclscd,proto3" json:"itmclscd,omitempty"`
	Minorqty               float64 `protobuf:"fixed64,23,opt,name=minorqty,proto3" json:"minorqty,omitempty"`
	Maxordqty              float64 `protobuf:"fixed64,24,opt,name=maxordqty,proto3" json:"maxordqty,omitempty"`
}

func (x *ItemGP) Reset() {
	*x = ItemGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemGP) ProtoMessage() {}

func (x *ItemGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemGP.ProtoReflect.Descriptor instead.
func (*ItemGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{9}
}

func (x *ItemGP) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *ItemGP) GetItemdesc() string {
	if x != nil {
		return x.Itemdesc
	}
	return ""
}

func (x *ItemGP) GetItmshnam() string {
	if x != nil {
		return x.Itmshnam
	}
	return ""
}

func (x *ItemGP) GetItemtype() int32 {
	if x != nil {
		return x.Itemtype
	}
	return 0
}

func (x *ItemGP) GetItemTypeDesc() string {
	if x != nil {
		return x.ItemTypeDesc
	}
	return ""
}

func (x *ItemGP) GetItmgedsc() string {
	if x != nil {
		return x.Itmgedsc
	}
	return ""
}

func (x *ItemGP) GetStndcost() float64 {
	if x != nil {
		return x.Stndcost
	}
	return 0
}

func (x *ItemGP) GetCurrcost() float64 {
	if x != nil {
		return x.Currcost
	}
	return 0
}

func (x *ItemGP) GetItemshwt() float64 {
	if x != nil {
		return x.Itemshwt
	}
	return 0
}

func (x *ItemGP) GetDecplqty() int32 {
	if x != nil {
		return x.Decplqty
	}
	return 0
}

func (x *ItemGP) GetDecplcur() int32 {
	if x != nil {
		return x.Decplcur
	}
	return 0
}

func (x *ItemGP) GetTaxoptns() int32 {
	if x != nil {
		return x.Taxoptns
	}
	return 0
}

func (x *ItemGP) GetPurchaseTaxOptionDesc() string {
	if x != nil {
		return x.PurchaseTaxOptionDesc
	}
	return ""
}

func (x *ItemGP) GetUomschdl() string {
	if x != nil {
		return x.Uomschdl
	}
	return ""
}

func (x *ItemGP) GetGnlCbCapitalitem() int32 {
	if x != nil {
		return x.GnlCbCapitalitem
	}
	return 0
}

func (x *ItemGP) GetGnlCbCapitalitemDesc() string {
	if x != nil {
		return x.GnlCbCapitalitemDesc
	}
	return ""
}

func (x *ItemGP) GetGnlCbAllowdirectpo() int32 {
	if x != nil {
		return x.GnlCbAllowdirectpo
	}
	return 0
}

func (x *ItemGP) GetGnlCbAllowdirectpoDesc() string {
	if x != nil {
		return x.GnlCbAllowdirectpoDesc
	}
	return ""
}

func (x *ItemGP) GetGnlWeighttolerance() float64 {
	if x != nil {
		return x.GnlWeighttolerance
	}
	return 0
}

func (x *ItemGP) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *ItemGP) GetInactiveDesc() string {
	if x != nil {
		return x.InactiveDesc
	}
	return ""
}

func (x *ItemGP) GetItmclscd() string {
	if x != nil {
		return x.Itmclscd
	}
	return ""
}

func (x *ItemGP) GetMinorqty() float64 {
	if x != nil {
		return x.Minorqty
	}
	return 0
}

func (x *ItemGP) GetMaxordqty() float64 {
	if x != nil {
		return x.Maxordqty
	}
	return 0
}

type ItemMasterComplexGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemnmbr           string                              `protobuf:"bytes,1,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	Itemdesc           string                              `protobuf:"bytes,2,opt,name=itemdesc,proto3" json:"itemdesc,omitempty"`
	Uomschdl           string                              `protobuf:"bytes,3,opt,name=uomschdl,proto3" json:"uomschdl,omitempty"`
	Minorqty           float64                             `protobuf:"fixed64,4,opt,name=minorqty,proto3" json:"minorqty,omitempty"`
	Maxordqty          float64                             `protobuf:"fixed64,5,opt,name=maxordqty,proto3" json:"maxordqty,omitempty"`
	Itemshwt           float64                             `protobuf:"fixed64,6,opt,name=itemshwt,proto3" json:"itemshwt,omitempty"`
	Itmclscd           string                              `protobuf:"bytes,7,opt,name=itmclscd,proto3" json:"itmclscd,omitempty"`
	Inactive           int32                               `protobuf:"varint,8,opt,name=inactive,proto3" json:"inactive,omitempty"`
	InactiveDesc       string                              `protobuf:"bytes,9,opt,name=inactive_desc,json=inactiveDesc,proto3" json:"inactive_desc,omitempty"`
	PriceLevel         []*ItemMasterComplexGP_PriceLevel   `protobuf:"bytes,10,rep,name=price_level,json=priceLevel,proto3" json:"price_level,omitempty"`
	Site               []*ItemMasterComplexGP_Site         `protobuf:"bytes,11,rep,name=site,proto3" json:"site,omitempty"`
	GnlWeightwolerance float64                             `protobuf:"fixed64,12,opt,name=gnl_weightwolerance,json=gnlWeightwolerance,proto3" json:"gnl_weightwolerance,omitempty"`
	PriceTiering       []*ItemMasterComplexGP_PriceTiering `protobuf:"bytes,13,rep,name=price_tiering,json=priceTiering,proto3" json:"price_tiering,omitempty"`
}

func (x *ItemMasterComplexGP) Reset() {
	*x = ItemMasterComplexGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemMasterComplexGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemMasterComplexGP) ProtoMessage() {}

func (x *ItemMasterComplexGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemMasterComplexGP.ProtoReflect.Descriptor instead.
func (*ItemMasterComplexGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{10}
}

func (x *ItemMasterComplexGP) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *ItemMasterComplexGP) GetItemdesc() string {
	if x != nil {
		return x.Itemdesc
	}
	return ""
}

func (x *ItemMasterComplexGP) GetUomschdl() string {
	if x != nil {
		return x.Uomschdl
	}
	return ""
}

func (x *ItemMasterComplexGP) GetMinorqty() float64 {
	if x != nil {
		return x.Minorqty
	}
	return 0
}

func (x *ItemMasterComplexGP) GetMaxordqty() float64 {
	if x != nil {
		return x.Maxordqty
	}
	return 0
}

func (x *ItemMasterComplexGP) GetItemshwt() float64 {
	if x != nil {
		return x.Itemshwt
	}
	return 0
}

func (x *ItemMasterComplexGP) GetItmclscd() string {
	if x != nil {
		return x.Itmclscd
	}
	return ""
}

func (x *ItemMasterComplexGP) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *ItemMasterComplexGP) GetInactiveDesc() string {
	if x != nil {
		return x.InactiveDesc
	}
	return ""
}

func (x *ItemMasterComplexGP) GetPriceLevel() []*ItemMasterComplexGP_PriceLevel {
	if x != nil {
		return x.PriceLevel
	}
	return nil
}

func (x *ItemMasterComplexGP) GetSite() []*ItemMasterComplexGP_Site {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *ItemMasterComplexGP) GetGnlWeightwolerance() float64 {
	if x != nil {
		return x.GnlWeightwolerance
	}
	return 0
}

func (x *ItemMasterComplexGP) GetPriceTiering() []*ItemMasterComplexGP_PriceTiering {
	if x != nil {
		return x.PriceTiering
	}
	return nil
}

type Region struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code        string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Status      int32                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Region) Reset() {
	*x = Region{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Region) ProtoMessage() {}

func (x *Region) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Region.ProtoReflect.Descriptor instead.
func (*Region) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{11}
}

func (x *Region) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Region) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Region) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Region) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Region) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Region) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Salesperson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code       string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Firstname  string                 `protobuf:"bytes,3,opt,name=firstname,proto3" json:"firstname,omitempty"`
	Middlename string                 `protobuf:"bytes,4,opt,name=middlename,proto3" json:"middlename,omitempty"`
	Lastname   string                 `protobuf:"bytes,5,opt,name=lastname,proto3" json:"lastname,omitempty"`
	Status     int32                  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Salesperson) Reset() {
	*x = Salesperson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Salesperson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Salesperson) ProtoMessage() {}

func (x *Salesperson) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Salesperson.ProtoReflect.Descriptor instead.
func (*Salesperson) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{12}
}

func (x *Salesperson) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Salesperson) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Salesperson) GetFirstname() string {
	if x != nil {
		return x.Firstname
	}
	return ""
}

func (x *Salesperson) GetMiddlename() string {
	if x != nil {
		return x.Middlename
	}
	return ""
}

func (x *Salesperson) GetLastname() string {
	if x != nil {
		return x.Lastname
	}
	return ""
}

func (x *Salesperson) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Salesperson) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Salesperson) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Site struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code        string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Status      int32                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Region      *Region                `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *Site) Reset() {
	*x = Site{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Site) ProtoMessage() {}

func (x *Site) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Site.ProtoReflect.Descriptor instead.
func (*Site) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{13}
}

func (x *Site) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Site) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Site) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Site) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Site) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Site) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Site) GetRegion() *Region {
	if x != nil {
		return x.Region
	}
	return nil
}

type SiteGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locncode              string `protobuf:"bytes,1,opt,name=locncode,proto3" json:"locncode,omitempty"`
	GnlSiteTypeId         string `protobuf:"bytes,2,opt,name=gnl_site_type_id,json=gnlSiteTypeId,proto3" json:"gnl_site_type_id,omitempty"`
	Locndscr              string `protobuf:"bytes,3,opt,name=locndscr,proto3" json:"locndscr,omitempty"`
	AddresS1              string `protobuf:"bytes,4,opt,name=addresS1,proto3" json:"addresS1,omitempty"`
	AddresS2              string `protobuf:"bytes,5,opt,name=addresS2,proto3" json:"addresS2,omitempty"`
	AddresS3              string `protobuf:"bytes,6,opt,name=addresS3,proto3" json:"addresS3,omitempty"`
	PhonE1                string `protobuf:"bytes,7,opt,name=phonE1,proto3" json:"phonE1,omitempty"`
	PhonE2                string `protobuf:"bytes,8,opt,name=phonE2,proto3" json:"phonE2,omitempty"`
	PhonE3                string `protobuf:"bytes,9,opt,name=phonE3,proto3" json:"phonE3,omitempty"`
	City                  string `protobuf:"bytes,10,opt,name=city,proto3" json:"city,omitempty"`
	State                 string `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	Faxnumbr              string `protobuf:"bytes,12,opt,name=faxnumbr,proto3" json:"faxnumbr,omitempty"`
	Zipcode               string `protobuf:"bytes,13,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	Ccode                 string `protobuf:"bytes,14,opt,name=ccode,proto3" json:"ccode,omitempty"`
	Country               string `protobuf:"bytes,15,opt,name=country,proto3" json:"country,omitempty"`
	Staxschd              string `protobuf:"bytes,16,opt,name=staxschd,proto3" json:"staxschd,omitempty"`
	Pctaxsch              string `protobuf:"bytes,17,opt,name=pctaxsch,proto3" json:"pctaxsch,omitempty"`
	LocationSegment       string `protobuf:"bytes,18,opt,name=location_segment,json=locationSegment,proto3" json:"location_segment,omitempty"`
	GnlAdministrativeCode string `protobuf:"bytes,19,opt,name=gnl_administrative_code,json=gnlAdministrativeCode,proto3" json:"gnl_administrative_code,omitempty"`
	Inactive              int32  `protobuf:"varint,20,opt,name=inactive,proto3" json:"inactive,omitempty"`
	InactiveDesc          string `protobuf:"bytes,21,opt,name=inactive_desc,json=inactiveDesc,proto3" json:"inactive_desc,omitempty"`
}

func (x *SiteGP) Reset() {
	*x = SiteGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiteGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiteGP) ProtoMessage() {}

func (x *SiteGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiteGP.ProtoReflect.Descriptor instead.
func (*SiteGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{14}
}

func (x *SiteGP) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *SiteGP) GetGnlSiteTypeId() string {
	if x != nil {
		return x.GnlSiteTypeId
	}
	return ""
}

func (x *SiteGP) GetLocndscr() string {
	if x != nil {
		return x.Locndscr
	}
	return ""
}

func (x *SiteGP) GetAddresS1() string {
	if x != nil {
		return x.AddresS1
	}
	return ""
}

func (x *SiteGP) GetAddresS2() string {
	if x != nil {
		return x.AddresS2
	}
	return ""
}

func (x *SiteGP) GetAddresS3() string {
	if x != nil {
		return x.AddresS3
	}
	return ""
}

func (x *SiteGP) GetPhonE1() string {
	if x != nil {
		return x.PhonE1
	}
	return ""
}

func (x *SiteGP) GetPhonE2() string {
	if x != nil {
		return x.PhonE2
	}
	return ""
}

func (x *SiteGP) GetPhonE3() string {
	if x != nil {
		return x.PhonE3
	}
	return ""
}

func (x *SiteGP) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *SiteGP) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SiteGP) GetFaxnumbr() string {
	if x != nil {
		return x.Faxnumbr
	}
	return ""
}

func (x *SiteGP) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *SiteGP) GetCcode() string {
	if x != nil {
		return x.Ccode
	}
	return ""
}

func (x *SiteGP) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *SiteGP) GetStaxschd() string {
	if x != nil {
		return x.Staxschd
	}
	return ""
}

func (x *SiteGP) GetPctaxsch() string {
	if x != nil {
		return x.Pctaxsch
	}
	return ""
}

func (x *SiteGP) GetLocationSegment() string {
	if x != nil {
		return x.LocationSegment
	}
	return ""
}

func (x *SiteGP) GetGnlAdministrativeCode() string {
	if x != nil {
		return x.GnlAdministrativeCode
	}
	return ""
}

func (x *SiteGP) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *SiteGP) GetInactiveDesc() string {
	if x != nil {
		return x.InactiveDesc
	}
	return ""
}

type SubDistrict struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code        string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Status      int32                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *SubDistrict) Reset() {
	*x = SubDistrict{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubDistrict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubDistrict) ProtoMessage() {}

func (x *SubDistrict) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubDistrict.ProtoReflect.Descriptor instead.
func (*SubDistrict) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{15}
}

func (x *SubDistrict) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubDistrict) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SubDistrict) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SubDistrict) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SubDistrict) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SubDistrict) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Territory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code           string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	RegionId       int64                  `protobuf:"varint,4,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	SalespersonId  int64                  `protobuf:"varint,5,opt,name=salesperson_id,json=salespersonId,proto3" json:"salesperson_id,omitempty"`
	CustomerTypeId int64                  `protobuf:"varint,6,opt,name=customer_type_id,json=customerTypeId,proto3" json:"customer_type_id,omitempty"`
	SubDistrictId  int64                  `protobuf:"varint,7,opt,name=sub_district_id,json=subDistrictId,proto3" json:"sub_district_id,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Territory) Reset() {
	*x = Territory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Territory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Territory) ProtoMessage() {}

func (x *Territory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Territory.ProtoReflect.Descriptor instead.
func (*Territory) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{16}
}

func (x *Territory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Territory) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Territory) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Territory) GetRegionId() int64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *Territory) GetSalespersonId() int64 {
	if x != nil {
		return x.SalespersonId
	}
	return 0
}

func (x *Territory) GetCustomerTypeId() int64 {
	if x != nil {
		return x.CustomerTypeId
	}
	return 0
}

func (x *Territory) GetSubDistrictId() int64 {
	if x != nil {
		return x.SubDistrictId
	}
	return 0
}

func (x *Territory) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Territory) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Uom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code           string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Status         int32                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DecimalEnabled int32                  `protobuf:"varint,7,opt,name=decimal_enabled,json=decimalEnabled,proto3" json:"decimal_enabled,omitempty"`
}

func (x *Uom) Reset() {
	*x = Uom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uom) ProtoMessage() {}

func (x *Uom) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uom.ProtoReflect.Descriptor instead.
func (*Uom) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{17}
}

func (x *Uom) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Uom) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Uom) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Uom) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Uom) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Uom) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Uom) GetDecimalEnabled() int32 {
	if x != nil {
		return x.DecimalEnabled
	}
	return 0
}

type SalesOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code          string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	DocNumber     string                 `protobuf:"bytes,3,opt,name=doc_number,json=docNumber,proto3" json:"doc_number,omitempty"`
	AddressId     string                 `protobuf:"bytes,4,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	CustomerId    string                 `protobuf:"bytes,5,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	SalespersonId string                 `protobuf:"bytes,6,opt,name=salesperson_id,json=salespersonId,proto3" json:"salesperson_id,omitempty"`
	WrtId         string                 `protobuf:"bytes,7,opt,name=wrt_id,json=wrtId,proto3" json:"wrt_id,omitempty"`
	Application   int32                  `protobuf:"varint,8,opt,name=application,proto3" json:"application,omitempty"`
	Status        int32                  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	OrderTypeId   int64                  `protobuf:"varint,10,opt,name=order_type_id,json=orderTypeId,proto3" json:"order_type_id,omitempty"`
	OrderDate     *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`
	Total         float64                `protobuf:"fixed64,12,opt,name=total,proto3" json:"total,omitempty"`
	CreatedDate   *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	ModifiedDate  *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=modified_date,json=modifiedDate,proto3" json:"modified_date,omitempty"`
	FinishedDate  *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=finished_date,json=finishedDate,proto3" json:"finished_date,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	SiteId        string                 `protobuf:"bytes,18,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
}

func (x *SalesOrder) Reset() {
	*x = SalesOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesOrder) ProtoMessage() {}

func (x *SalesOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesOrder.ProtoReflect.Descriptor instead.
func (*SalesOrder) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{18}
}

func (x *SalesOrder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SalesOrder) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SalesOrder) GetDocNumber() string {
	if x != nil {
		return x.DocNumber
	}
	return ""
}

func (x *SalesOrder) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

func (x *SalesOrder) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *SalesOrder) GetSalespersonId() string {
	if x != nil {
		return x.SalespersonId
	}
	return ""
}

func (x *SalesOrder) GetWrtId() string {
	if x != nil {
		return x.WrtId
	}
	return ""
}

func (x *SalesOrder) GetApplication() int32 {
	if x != nil {
		return x.Application
	}
	return 0
}

func (x *SalesOrder) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SalesOrder) GetOrderTypeId() int64 {
	if x != nil {
		return x.OrderTypeId
	}
	return 0
}

func (x *SalesOrder) GetOrderDate() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderDate
	}
	return nil
}

func (x *SalesOrder) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SalesOrder) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *SalesOrder) GetModifiedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedDate
	}
	return nil
}

func (x *SalesOrder) GetFinishedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedDate
	}
	return nil
}

func (x *SalesOrder) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SalesOrder) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SalesOrder) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

type SalesOrderItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SalesOrderId  int64                  `protobuf:"varint,2,opt,name=sales_order_id,json=salesOrderId,proto3" json:"sales_order_id,omitempty"`
	ItemId        string                 `protobuf:"bytes,3,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OrderQty      float64                `protobuf:"fixed64,4,opt,name=order_qty,json=orderQty,proto3" json:"order_qty,omitempty"`
	DefaultPrice  float64                `protobuf:"fixed64,5,opt,name=default_price,json=defaultPrice,proto3" json:"default_price,omitempty"`
	UnitPrice     float64                `protobuf:"fixed64,6,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	TaxableItem   int32                  `protobuf:"varint,7,opt,name=taxable_item,json=taxableItem,proto3" json:"taxable_item,omitempty"`
	TaxPercentage float64                `protobuf:"fixed64,8,opt,name=tax_percentage,json=taxPercentage,proto3" json:"tax_percentage,omitempty"`
	ShadowPrice   float64                `protobuf:"fixed64,9,opt,name=shadow_price,json=shadowPrice,proto3" json:"shadow_price,omitempty"`
	Subtotal      float64                `protobuf:"fixed64,10,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	Weight        float64                `protobuf:"fixed64,11,opt,name=weight,proto3" json:"weight,omitempty"`
	Note          string                 `protobuf:"bytes,12,opt,name=note,proto3" json:"note,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *SalesOrderItem) Reset() {
	*x = SalesOrderItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesOrderItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesOrderItem) ProtoMessage() {}

func (x *SalesOrderItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesOrderItem.ProtoReflect.Descriptor instead.
func (*SalesOrderItem) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{19}
}

func (x *SalesOrderItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SalesOrderItem) GetSalesOrderId() int64 {
	if x != nil {
		return x.SalesOrderId
	}
	return 0
}

func (x *SalesOrderItem) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *SalesOrderItem) GetOrderQty() float64 {
	if x != nil {
		return x.OrderQty
	}
	return 0
}

func (x *SalesOrderItem) GetDefaultPrice() float64 {
	if x != nil {
		return x.DefaultPrice
	}
	return 0
}

func (x *SalesOrderItem) GetUnitPrice() float64 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *SalesOrderItem) GetTaxableItem() int32 {
	if x != nil {
		return x.TaxableItem
	}
	return 0
}

func (x *SalesOrderItem) GetTaxPercentage() float64 {
	if x != nil {
		return x.TaxPercentage
	}
	return 0
}

func (x *SalesOrderItem) GetShadowPrice() float64 {
	if x != nil {
		return x.ShadowPrice
	}
	return 0
}

func (x *SalesOrderItem) GetSubtotal() float64 {
	if x != nil {
		return x.Subtotal
	}
	return 0
}

func (x *SalesOrderItem) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *SalesOrderItem) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *SalesOrderItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SalesOrderItem) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type TransactionListGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SopTypeId        string  `protobuf:"bytes,1,opt,name=sop_type_id,json=sopTypeId,proto3" json:"sop_type_id,omitempty"`
	SopTypeDesc      string  `protobuf:"bytes,2,opt,name=sop_type_desc,json=sopTypeDesc,proto3" json:"sop_type_desc,omitempty"`
	SopNumber        string  `protobuf:"bytes,3,opt,name=sop_number,json=sopNumber,proto3" json:"sop_number,omitempty"`
	CustomerId       string  `protobuf:"bytes,4,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	CustomerName     string  `protobuf:"bytes,5,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty"`
	AddressId        string  `protobuf:"bytes,6,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	RegionDesc       string  `protobuf:"bytes,7,opt,name=region_desc,json=regionDesc,proto3" json:"region_desc,omitempty"`
	DocDate          string  `protobuf:"bytes,8,opt,name=doc_date,json=docDate,proto3" json:"doc_date,omitempty"`
	RequestShipDate  string  `protobuf:"bytes,9,opt,name=request_ship_date,json=requestShipDate,proto3" json:"request_ship_date,omitempty"`
	WrtId            string  `protobuf:"bytes,10,opt,name=wrt_id,json=wrtId,proto3" json:"wrt_id,omitempty"`
	ArchetypeId      string  `protobuf:"bytes,11,opt,name=archetype_id,json=archetypeId,proto3" json:"archetype_id,omitempty"`
	OrderChannelId   string  `protobuf:"bytes,12,opt,name=order_channel_id,json=orderChannelId,proto3" json:"order_channel_id,omitempty"`
	SalesOrderCode   string  `protobuf:"bytes,13,opt,name=sales_order_code,json=salesOrderCode,proto3" json:"sales_order_code,omitempty"`
	BatchId          string  `protobuf:"bytes,14,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	DefaultSiteId    string  `protobuf:"bytes,15,opt,name=default_site_id,json=defaultSiteId,proto3" json:"default_site_id,omitempty"`
	CustomerPoNumber string  `protobuf:"bytes,16,opt,name=customer_po_number,json=customerPoNumber,proto3" json:"customer_po_number,omitempty"`
	CurrencyId       string  `protobuf:"bytes,17,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`
	AmountReceived   float64 `protobuf:"fixed64,18,opt,name=amount_received,json=amountReceived,proto3" json:"amount_received,omitempty"`
	TermsDiscTaken   float64 `protobuf:"fixed64,19,opt,name=terms_disc_taken,json=termsDiscTaken,proto3" json:"terms_disc_taken,omitempty"`
	OnAccount        float64 `protobuf:"fixed64,20,opt,name=on_account,json=onAccount,proto3" json:"on_account,omitempty"`
	CommentId        string  `protobuf:"bytes,21,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	TotalWeight      float64 `protobuf:"fixed64,22,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
	Subtotal         float64 `protobuf:"fixed64,23,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	TradeDisc        float64 `protobuf:"fixed64,24,opt,name=trade_disc,json=tradeDisc,proto3" json:"trade_disc,omitempty"`
	Freight          float64 `protobuf:"fixed64,25,opt,name=freight,proto3" json:"freight,omitempty"`
	Miscellaneous    float64 `protobuf:"fixed64,26,opt,name=miscellaneous,proto3" json:"miscellaneous,omitempty"`
	Tax              float64 `protobuf:"fixed64,27,opt,name=tax,proto3" json:"tax,omitempty"`
	Total            float64 `protobuf:"fixed64,28,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *TransactionListGP) Reset() {
	*x = TransactionListGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionListGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionListGP) ProtoMessage() {}

func (x *TransactionListGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionListGP.ProtoReflect.Descriptor instead.
func (*TransactionListGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{20}
}

func (x *TransactionListGP) GetSopTypeId() string {
	if x != nil {
		return x.SopTypeId
	}
	return ""
}

func (x *TransactionListGP) GetSopTypeDesc() string {
	if x != nil {
		return x.SopTypeDesc
	}
	return ""
}

func (x *TransactionListGP) GetSopNumber() string {
	if x != nil {
		return x.SopNumber
	}
	return ""
}

func (x *TransactionListGP) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *TransactionListGP) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *TransactionListGP) GetAddressId() string {
	if x != nil {
		return x.AddressId
	}
	return ""
}

func (x *TransactionListGP) GetRegionDesc() string {
	if x != nil {
		return x.RegionDesc
	}
	return ""
}

func (x *TransactionListGP) GetDocDate() string {
	if x != nil {
		return x.DocDate
	}
	return ""
}

func (x *TransactionListGP) GetRequestShipDate() string {
	if x != nil {
		return x.RequestShipDate
	}
	return ""
}

func (x *TransactionListGP) GetWrtId() string {
	if x != nil {
		return x.WrtId
	}
	return ""
}

func (x *TransactionListGP) GetArchetypeId() string {
	if x != nil {
		return x.ArchetypeId
	}
	return ""
}

func (x *TransactionListGP) GetOrderChannelId() string {
	if x != nil {
		return x.OrderChannelId
	}
	return ""
}

func (x *TransactionListGP) GetSalesOrderCode() string {
	if x != nil {
		return x.SalesOrderCode
	}
	return ""
}

func (x *TransactionListGP) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *TransactionListGP) GetDefaultSiteId() string {
	if x != nil {
		return x.DefaultSiteId
	}
	return ""
}

func (x *TransactionListGP) GetCustomerPoNumber() string {
	if x != nil {
		return x.CustomerPoNumber
	}
	return ""
}

func (x *TransactionListGP) GetCurrencyId() string {
	if x != nil {
		return x.CurrencyId
	}
	return ""
}

func (x *TransactionListGP) GetAmountReceived() float64 {
	if x != nil {
		return x.AmountReceived
	}
	return 0
}

func (x *TransactionListGP) GetTermsDiscTaken() float64 {
	if x != nil {
		return x.TermsDiscTaken
	}
	return 0
}

func (x *TransactionListGP) GetOnAccount() float64 {
	if x != nil {
		return x.OnAccount
	}
	return 0
}

func (x *TransactionListGP) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

func (x *TransactionListGP) GetTotalWeight() float64 {
	if x != nil {
		return x.TotalWeight
	}
	return 0
}

func (x *TransactionListGP) GetSubtotal() float64 {
	if x != nil {
		return x.Subtotal
	}
	return 0
}

func (x *TransactionListGP) GetTradeDisc() float64 {
	if x != nil {
		return x.TradeDisc
	}
	return 0
}

func (x *TransactionListGP) GetFreight() float64 {
	if x != nil {
		return x.Freight
	}
	return 0
}

func (x *TransactionListGP) GetMiscellaneous() float64 {
	if x != nil {
		return x.Miscellaneous
	}
	return 0
}

func (x *TransactionListGP) GetTax() float64 {
	if x != nil {
		return x.Tax
	}
	return 0
}

func (x *TransactionListGP) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TransactionDetailGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SopNumber      string  `protobuf:"bytes,1,opt,name=sop_number,json=sopNumber,proto3" json:"sop_number,omitempty"`
	ItemNumber     string  `protobuf:"bytes,2,opt,name=item_number,json=itemNumber,proto3" json:"item_number,omitempty"`
	UomId          string  `protobuf:"bytes,3,opt,name=uom_id,json=uomId,proto3" json:"uom_id,omitempty"`
	OrderQuantity  float64 `protobuf:"fixed64,4,opt,name=order_quantity,json=orderQuantity,proto3" json:"order_quantity,omitempty"`
	UnitPrice      float64 `protobuf:"fixed64,5,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	ExtendedPrice  float64 `protobuf:"fixed64,6,opt,name=extended_price,json=extendedPrice,proto3" json:"extended_price,omitempty"`
	ItemDesc       string  `protobuf:"bytes,7,opt,name=item_desc,json=itemDesc,proto3" json:"item_desc,omitempty"`
	Markdown       float64 `protobuf:"fixed64,8,opt,name=markdown,proto3" json:"markdown,omitempty"`
	UnitCost       float64 `protobuf:"fixed64,9,opt,name=unit_cost,json=unitCost,proto3" json:"unit_cost,omitempty"`
	ReqShipDate    string  `protobuf:"bytes,10,opt,name=req_ship_date,json=reqShipDate,proto3" json:"req_ship_date,omitempty"`
	DateShipped    string  `protobuf:"bytes,11,opt,name=date_shipped,json=dateShipped,proto3" json:"date_shipped,omitempty"`
	ProductPush    bool    `protobuf:"varint,12,opt,name=product_push,json=productPush,proto3" json:"product_push,omitempty"`
	QtyOrdered     float64 `protobuf:"fixed64,13,opt,name=qty_ordered,json=qtyOrdered,proto3" json:"qty_ordered,omitempty"`
	QtyFulfilled   float64 `protobuf:"fixed64,14,opt,name=qty_fulfilled,json=qtyFulfilled,proto3" json:"qty_fulfilled,omitempty"`
	QtyCanceled    float64 `protobuf:"fixed64,15,opt,name=qty_canceled,json=qtyCanceled,proto3" json:"qty_canceled,omitempty"`
	QtyBackOrder   float64 `protobuf:"fixed64,16,opt,name=qty_back_order,json=qtyBackOrder,proto3" json:"qty_back_order,omitempty"`
	TotalWeight    float64 `protobuf:"fixed64,17,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
	SiteId         string  `protobuf:"bytes,18,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	PriceLevelId   string  `protobuf:"bytes,19,opt,name=price_level_id,json=priceLevelId,proto3" json:"price_level_id,omitempty"`
	ShipToAddress  string  `protobuf:"bytes,20,opt,name=ship_to_address,json=shipToAddress,proto3" json:"ship_to_address,omitempty"`
	ShippingMethod string  `protobuf:"bytes,21,opt,name=shipping_method,json=shippingMethod,proto3" json:"shipping_method,omitempty"`
	QtyAvailable   float64 `protobuf:"fixed64,22,opt,name=qty_available,json=qtyAvailable,proto3" json:"qty_available,omitempty"`
}

func (x *TransactionDetailGP) Reset() {
	*x = TransactionDetailGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionDetailGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionDetailGP) ProtoMessage() {}

func (x *TransactionDetailGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionDetailGP.ProtoReflect.Descriptor instead.
func (*TransactionDetailGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{21}
}

func (x *TransactionDetailGP) GetSopNumber() string {
	if x != nil {
		return x.SopNumber
	}
	return ""
}

func (x *TransactionDetailGP) GetItemNumber() string {
	if x != nil {
		return x.ItemNumber
	}
	return ""
}

func (x *TransactionDetailGP) GetUomId() string {
	if x != nil {
		return x.UomId
	}
	return ""
}

func (x *TransactionDetailGP) GetOrderQuantity() float64 {
	if x != nil {
		return x.OrderQuantity
	}
	return 0
}

func (x *TransactionDetailGP) GetUnitPrice() float64 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *TransactionDetailGP) GetExtendedPrice() float64 {
	if x != nil {
		return x.ExtendedPrice
	}
	return 0
}

func (x *TransactionDetailGP) GetItemDesc() string {
	if x != nil {
		return x.ItemDesc
	}
	return ""
}

func (x *TransactionDetailGP) GetMarkdown() float64 {
	if x != nil {
		return x.Markdown
	}
	return 0
}

func (x *TransactionDetailGP) GetUnitCost() float64 {
	if x != nil {
		return x.UnitCost
	}
	return 0
}

func (x *TransactionDetailGP) GetReqShipDate() string {
	if x != nil {
		return x.ReqShipDate
	}
	return ""
}

func (x *TransactionDetailGP) GetDateShipped() string {
	if x != nil {
		return x.DateShipped
	}
	return ""
}

func (x *TransactionDetailGP) GetProductPush() bool {
	if x != nil {
		return x.ProductPush
	}
	return false
}

func (x *TransactionDetailGP) GetQtyOrdered() float64 {
	if x != nil {
		return x.QtyOrdered
	}
	return 0
}

func (x *TransactionDetailGP) GetQtyFulfilled() float64 {
	if x != nil {
		return x.QtyFulfilled
	}
	return 0
}

func (x *TransactionDetailGP) GetQtyCanceled() float64 {
	if x != nil {
		return x.QtyCanceled
	}
	return 0
}

func (x *TransactionDetailGP) GetQtyBackOrder() float64 {
	if x != nil {
		return x.QtyBackOrder
	}
	return 0
}

func (x *TransactionDetailGP) GetTotalWeight() float64 {
	if x != nil {
		return x.TotalWeight
	}
	return 0
}

func (x *TransactionDetailGP) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

func (x *TransactionDetailGP) GetPriceLevelId() string {
	if x != nil {
		return x.PriceLevelId
	}
	return ""
}

func (x *TransactionDetailGP) GetShipToAddress() string {
	if x != nil {
		return x.ShipToAddress
	}
	return ""
}

func (x *TransactionDetailGP) GetShippingMethod() string {
	if x != nil {
		return x.ShippingMethod
	}
	return ""
}

func (x *TransactionDetailGP) GetQtyAvailable() float64 {
	if x != nil {
		return x.QtyAvailable
	}
	return 0
}

type Wrt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RegionId  int64   `protobuf:"varint,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Code      string  `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	StartTime string  `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   string  `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Region    *Region `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *Wrt) Reset() {
	*x = Wrt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wrt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wrt) ProtoMessage() {}

func (x *Wrt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wrt.ProtoReflect.Descriptor instead.
func (*Wrt) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{22}
}

func (x *Wrt) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Wrt) GetRegionId() int64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *Wrt) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Wrt) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *Wrt) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *Wrt) GetRegion() *Region {
	if x != nil {
		return x.Region
	}
	return nil
}

type Courier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RoleId            int64                  `protobuf:"varint,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	UserId            int64                  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Code              string                 `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Name              string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	PhoneNumber       string                 `protobuf:"bytes,6,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	VehicleProfileId  int64                  `protobuf:"varint,7,opt,name=vehicle_profile_id,json=vehicleProfileId,proto3" json:"vehicle_profile_id,omitempty"`
	LicensePlate      string                 `protobuf:"bytes,8,opt,name=license_plate,json=licensePlate,proto3" json:"license_plate,omitempty"`
	EmergencyMode     int32                  `protobuf:"varint,9,opt,name=emergency_mode,json=emergencyMode,proto3" json:"emergency_mode,omitempty"`
	LastEmergencyTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_emergency_time,json=lastEmergencyTime,proto3" json:"last_emergency_time,omitempty"`
	Status            int32                  `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Courier) Reset() {
	*x = Courier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Courier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Courier) ProtoMessage() {}

func (x *Courier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Courier.ProtoReflect.Descriptor instead.
func (*Courier) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{23}
}

func (x *Courier) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Courier) GetRoleId() int64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *Courier) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Courier) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Courier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Courier) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *Courier) GetVehicleProfileId() int64 {
	if x != nil {
		return x.VehicleProfileId
	}
	return 0
}

func (x *Courier) GetLicensePlate() string {
	if x != nil {
		return x.LicensePlate
	}
	return ""
}

func (x *Courier) GetEmergencyMode() int32 {
	if x != nil {
		return x.EmergencyMode
	}
	return 0
}

func (x *Courier) GetLastEmergencyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEmergencyTime
	}
	return nil
}

func (x *Courier) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type CourierGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnlCourierId        string `protobuf:"bytes,1,opt,name=gnl_courier_id,json=gnlCourierId,proto3" json:"gnl_courier_id,omitempty"`
	GnlCourierName      string `protobuf:"bytes,2,opt,name=gnl_courier_name,json=gnlCourierName,proto3" json:"gnl_courier_name,omitempty"`
	Phonname            string `protobuf:"bytes,3,opt,name=phonname,proto3" json:"phonname,omitempty"`
	Email               string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Password            string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	GnlVehicleProfileId string `protobuf:"bytes,6,opt,name=gnl_vehicle_profile_id,json=gnlVehicleProfileId,proto3" json:"gnl_vehicle_profile_id,omitempty"`
	GnlLicensePlate     string `protobuf:"bytes,7,opt,name=gnl_license_plate,json=gnlLicensePlate,proto3" json:"gnl_license_plate,omitempty"`
	Inactive            int32  `protobuf:"varint,8,opt,name=inactive,proto3" json:"inactive,omitempty"`
	InactivE_DESC       string `protobuf:"bytes,9,opt,name=inactivE_DESC,json=inactivEDESC,proto3" json:"inactivE_DESC,omitempty"`
	GnlEmergencymode    *int32 `protobuf:"varint,10,opt,name=gnl_emergencymode,json=gnlEmergencymode,proto3,oneof" json:"gnl_emergencymode,omitempty"`
	GnlEmergencydate    string `protobuf:"bytes,11,opt,name=gnl_emergencydate,json=gnlEmergencydate,proto3" json:"gnl_emergencydate,omitempty"`
	GnlEmergencytime    string `protobuf:"bytes,12,opt,name=gnl_emergencytime,json=gnlEmergencytime,proto3" json:"gnl_emergencytime,omitempty"`
}

func (x *CourierGP) Reset() {
	*x = CourierGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourierGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourierGP) ProtoMessage() {}

func (x *CourierGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourierGP.ProtoReflect.Descriptor instead.
func (*CourierGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{24}
}

func (x *CourierGP) GetGnlCourierId() string {
	if x != nil {
		return x.GnlCourierId
	}
	return ""
}

func (x *CourierGP) GetGnlCourierName() string {
	if x != nil {
		return x.GnlCourierName
	}
	return ""
}

func (x *CourierGP) GetPhonname() string {
	if x != nil {
		return x.Phonname
	}
	return ""
}

func (x *CourierGP) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CourierGP) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CourierGP) GetGnlVehicleProfileId() string {
	if x != nil {
		return x.GnlVehicleProfileId
	}
	return ""
}

func (x *CourierGP) GetGnlLicensePlate() string {
	if x != nil {
		return x.GnlLicensePlate
	}
	return ""
}

func (x *CourierGP) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *CourierGP) GetInactivE_DESC() string {
	if x != nil {
		return x.InactivE_DESC
	}
	return ""
}

func (x *CourierGP) GetGnlEmergencymode() int32 {
	if x != nil && x.GnlEmergencymode != nil {
		return *x.GnlEmergencymode
	}
	return 0
}

func (x *CourierGP) GetGnlEmergencydate() string {
	if x != nil {
		return x.GnlEmergencydate
	}
	return ""
}

func (x *CourierGP) GetGnlEmergencytime() string {
	if x != nil {
		return x.GnlEmergencytime
	}
	return ""
}

type CourierVendor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SiteId int64  `protobuf:"varint,2,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	Code   string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Name   string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Note   string `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
	Status int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CourierVendor) Reset() {
	*x = CourierVendor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourierVendor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourierVendor) ProtoMessage() {}

func (x *CourierVendor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourierVendor.ProtoReflect.Descriptor instead.
func (*CourierVendor) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{25}
}

func (x *CourierVendor) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CourierVendor) GetSiteId() int64 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *CourierVendor) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CourierVendor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CourierVendor) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CourierVendor) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type CourierVendorGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnlCourierVendorId   string `protobuf:"bytes,1,opt,name=gnl_courier_vendor_id,json=gnlCourierVendorId,proto3" json:"gnl_courier_vendor_id,omitempty"`
	GnlCourierVendorName string `protobuf:"bytes,2,opt,name=gnl_courier_vendor_name,json=gnlCourierVendorName,proto3" json:"gnl_courier_vendor_name,omitempty"`
	Locncode             string `protobuf:"bytes,3,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Inactive             int32  `protobuf:"varint,4,opt,name=inactive,proto3" json:"inactive,omitempty"`
	InactivE_DESC        string `protobuf:"bytes,5,opt,name=inactivE_DESC,json=inactivEDESC,proto3" json:"inactivE_DESC,omitempty"`
}

func (x *CourierVendorGP) Reset() {
	*x = CourierVendorGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourierVendorGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourierVendorGP) ProtoMessage() {}

func (x *CourierVendorGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourierVendorGP.ProtoReflect.Descriptor instead.
func (*CourierVendorGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{26}
}

func (x *CourierVendorGP) GetGnlCourierVendorId() string {
	if x != nil {
		return x.GnlCourierVendorId
	}
	return ""
}

func (x *CourierVendorGP) GetGnlCourierVendorName() string {
	if x != nil {
		return x.GnlCourierVendorName
	}
	return ""
}

func (x *CourierVendorGP) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *CourierVendorGP) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *CourierVendorGP) GetInactivE_DESC() string {
	if x != nil {
		return x.InactivE_DESC
	}
	return ""
}

type VehicleProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CourierVendorId     int64   `protobuf:"varint,2,opt,name=courier_vendor_id,json=courierVendorId,proto3" json:"courier_vendor_id,omitempty"`
	Code                string  `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Name                string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	MaxKoli             float64 `protobuf:"fixed64,5,opt,name=max_koli,json=maxKoli,proto3" json:"max_koli,omitempty"`
	MaxWeight           float64 `protobuf:"fixed64,6,opt,name=max_weight,json=maxWeight,proto3" json:"max_weight,omitempty"`
	MaxFragile          float64 `protobuf:"fixed64,7,opt,name=max_fragile,json=maxFragile,proto3" json:"max_fragile,omitempty"`
	SpeedFactor         float64 `protobuf:"fixed64,8,opt,name=speed_factor,json=speedFactor,proto3" json:"speed_factor,omitempty"`
	RoutingProfile      int32   `protobuf:"varint,9,opt,name=routing_profile,json=routingProfile,proto3" json:"routing_profile,omitempty"`
	Status              int32   `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	Skills              string  `protobuf:"bytes,11,opt,name=skills,proto3" json:"skills,omitempty"`
	InitialCost         float64 `protobuf:"fixed64,12,opt,name=initial_cost,json=initialCost,proto3" json:"initial_cost,omitempty"`
	SubsequentCost      float64 `protobuf:"fixed64,13,opt,name=subsequent_cost,json=subsequentCost,proto3" json:"subsequent_cost,omitempty"`
	MaxAvailableVehicle int64   `protobuf:"varint,14,opt,name=max_available_vehicle,json=maxAvailableVehicle,proto3" json:"max_available_vehicle,omitempty"`
}

func (x *VehicleProfile) Reset() {
	*x = VehicleProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleProfile) ProtoMessage() {}

func (x *VehicleProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleProfile.ProtoReflect.Descriptor instead.
func (*VehicleProfile) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{27}
}

func (x *VehicleProfile) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VehicleProfile) GetCourierVendorId() int64 {
	if x != nil {
		return x.CourierVendorId
	}
	return 0
}

func (x *VehicleProfile) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *VehicleProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VehicleProfile) GetMaxKoli() float64 {
	if x != nil {
		return x.MaxKoli
	}
	return 0
}

func (x *VehicleProfile) GetMaxWeight() float64 {
	if x != nil {
		return x.MaxWeight
	}
	return 0
}

func (x *VehicleProfile) GetMaxFragile() float64 {
	if x != nil {
		return x.MaxFragile
	}
	return 0
}

func (x *VehicleProfile) GetSpeedFactor() float64 {
	if x != nil {
		return x.SpeedFactor
	}
	return 0
}

func (x *VehicleProfile) GetRoutingProfile() int32 {
	if x != nil {
		return x.RoutingProfile
	}
	return 0
}

func (x *VehicleProfile) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *VehicleProfile) GetSkills() string {
	if x != nil {
		return x.Skills
	}
	return ""
}

func (x *VehicleProfile) GetInitialCost() float64 {
	if x != nil {
		return x.InitialCost
	}
	return 0
}

func (x *VehicleProfile) GetSubsequentCost() float64 {
	if x != nil {
		return x.SubsequentCost
	}
	return 0
}

func (x *VehicleProfile) GetMaxAvailableVehicle() int64 {
	if x != nil {
		return x.MaxAvailableVehicle
	}
	return 0
}

type VehicleProfileGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnlVehicleProfileId string  `protobuf:"bytes,1,opt,name=gnl_vehicle_profile_id,json=gnlVehicleProfileId,proto3" json:"gnl_vehicle_profile_id,omitempty"`
	GnlDescription100   string  `protobuf:"bytes,2,opt,name=gnl_description100,json=gnlDescription100,proto3" json:"gnl_description100,omitempty"`
	GnlCourierVendorId  string  `protobuf:"bytes,3,opt,name=gnl_courier_vendor_id,json=gnlCourierVendorId,proto3" json:"gnl_courier_vendor_id,omitempty"`
	GnlMaxKoli          float64 `protobuf:"fixed64,4,opt,name=gnl_max_koli,json=gnlMaxKoli,proto3" json:"gnl_max_koli,omitempty"`
	GnlMaxWeight        float64 `protobuf:"fixed64,5,opt,name=gnl_max_weight,json=gnlMaxWeight,proto3" json:"gnl_max_weight,omitempty"`
	GnlMaxFragile       float64 `protobuf:"fixed64,6,opt,name=gnl_max_fragile,json=gnlMaxFragile,proto3" json:"gnl_max_fragile,omitempty"`
	GnlSpeedFactor      float64 `protobuf:"fixed64,7,opt,name=gnl_speed_factor,json=gnlSpeedFactor,proto3" json:"gnl_speed_factor,omitempty"`
	GnlRoutingProfile   string  `protobuf:"bytes,8,opt,name=gnl_routing_profile,json=gnlRoutingProfile,proto3" json:"gnl_routing_profile,omitempty"`
	GnlSkills           string  `protobuf:"bytes,9,opt,name=gnl_skills,json=gnlSkills,proto3" json:"gnl_skills,omitempty"`
	GnlInitialCost      float64 `protobuf:"fixed64,10,opt,name=gnl_initial_cost,json=gnlInitialCost,proto3" json:"gnl_initial_cost,omitempty"`
	GnlSubsequent_Cost  float64 `protobuf:"fixed64,11,opt,name=gnl_subsequent_Cost,json=gnlSubsequentCost,proto3" json:"gnl_subsequent_Cost,omitempty"`
	GnlMaxAvailVehicle  float64 `protobuf:"fixed64,12,opt,name=gnl_max_avail_vehicle,json=gnlMaxAvailVehicle,proto3" json:"gnl_max_avail_vehicle,omitempty"`
	Locncode            string  `protobuf:"bytes,13,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Inactive            int32   `protobuf:"varint,14,opt,name=inactive,proto3" json:"inactive,omitempty"`
	InactivE_DESC       string  `protobuf:"bytes,15,opt,name=inactivE_DESC,json=inactivEDESC,proto3" json:"inactivE_DESC,omitempty"`
}

func (x *VehicleProfileGP) Reset() {
	*x = VehicleProfileGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleProfileGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleProfileGP) ProtoMessage() {}

func (x *VehicleProfileGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleProfileGP.ProtoReflect.Descriptor instead.
func (*VehicleProfileGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{28}
}

func (x *VehicleProfileGP) GetGnlVehicleProfileId() string {
	if x != nil {
		return x.GnlVehicleProfileId
	}
	return ""
}

func (x *VehicleProfileGP) GetGnlDescription100() string {
	if x != nil {
		return x.GnlDescription100
	}
	return ""
}

func (x *VehicleProfileGP) GetGnlCourierVendorId() string {
	if x != nil {
		return x.GnlCourierVendorId
	}
	return ""
}

func (x *VehicleProfileGP) GetGnlMaxKoli() float64 {
	if x != nil {
		return x.GnlMaxKoli
	}
	return 0
}

func (x *VehicleProfileGP) GetGnlMaxWeight() float64 {
	if x != nil {
		return x.GnlMaxWeight
	}
	return 0
}

func (x *VehicleProfileGP) GetGnlMaxFragile() float64 {
	if x != nil {
		return x.GnlMaxFragile
	}
	return 0
}

func (x *VehicleProfileGP) GetGnlSpeedFactor() float64 {
	if x != nil {
		return x.GnlSpeedFactor
	}
	return 0
}

func (x *VehicleProfileGP) GetGnlRoutingProfile() string {
	if x != nil {
		return x.GnlRoutingProfile
	}
	return ""
}

func (x *VehicleProfileGP) GetGnlSkills() string {
	if x != nil {
		return x.GnlSkills
	}
	return ""
}

func (x *VehicleProfileGP) GetGnlInitialCost() float64 {
	if x != nil {
		return x.GnlInitialCost
	}
	return 0
}

func (x *VehicleProfileGP) GetGnlSubsequent_Cost() float64 {
	if x != nil {
		return x.GnlSubsequent_Cost
	}
	return 0
}

func (x *VehicleProfileGP) GetGnlMaxAvailVehicle() float64 {
	if x != nil {
		return x.GnlMaxAvailVehicle
	}
	return 0
}

func (x *VehicleProfileGP) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *VehicleProfileGP) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *VehicleProfileGP) GetInactivE_DESC() string {
	if x != nil {
		return x.InactivE_DESC
	}
	return ""
}

type Vendor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code                   string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	VendorOrganizationId   int64                  `protobuf:"varint,3,opt,name=vendor_organization_id,json=vendorOrganizationId,proto3" json:"vendor_organization_id,omitempty"`
	VendorClassificationId int64                  `protobuf:"varint,4,opt,name=vendor_classification_id,json=vendorClassificationId,proto3" json:"vendor_classification_id,omitempty"`
	SubDistrictId          int64                  `protobuf:"varint,5,opt,name=sub_district_id,json=subDistrictId,proto3" json:"sub_district_id,omitempty"`
	PicName                string                 `protobuf:"bytes,6,opt,name=pic_name,json=picName,proto3" json:"pic_name,omitempty"`
	Email                  string                 `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	PhoneNumber            string                 `protobuf:"bytes,8,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PaymentTermId          int64                  `protobuf:"varint,9,opt,name=payment_term_id,json=paymentTermId,proto3" json:"payment_term_id,omitempty"`
	Rejectable             int32                  `protobuf:"varint,10,opt,name=rejectable,proto3" json:"rejectable,omitempty"`
	Returnable             int32                  `protobuf:"varint,11,opt,name=returnable,proto3" json:"returnable,omitempty"`
	Address                string                 `protobuf:"bytes,12,opt,name=address,proto3" json:"address,omitempty"`
	Note                   string                 `protobuf:"bytes,13,opt,name=note,proto3" json:"note,omitempty"`
	Status                 int32                  `protobuf:"varint,14,opt,name=status,proto3" json:"status,omitempty"`
	Latitude               string                 `protobuf:"bytes,15,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude              string                 `protobuf:"bytes,16,opt,name=longitude,proto3" json:"longitude,omitempty"`
	CreatedAt              *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy              int64                  `protobuf:"varint,18,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
}

func (x *Vendor) Reset() {
	*x = Vendor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vendor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vendor) ProtoMessage() {}

func (x *Vendor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vendor.ProtoReflect.Descriptor instead.
func (*Vendor) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{29}
}

func (x *Vendor) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Vendor) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Vendor) GetVendorOrganizationId() int64 {
	if x != nil {
		return x.VendorOrganizationId
	}
	return 0
}

func (x *Vendor) GetVendorClassificationId() int64 {
	if x != nil {
		return x.VendorClassificationId
	}
	return 0
}

func (x *Vendor) GetSubDistrictId() int64 {
	if x != nil {
		return x.SubDistrictId
	}
	return 0
}

func (x *Vendor) GetPicName() string {
	if x != nil {
		return x.PicName
	}
	return ""
}

func (x *Vendor) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Vendor) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *Vendor) GetPaymentTermId() int64 {
	if x != nil {
		return x.PaymentTermId
	}
	return 0
}

func (x *Vendor) GetRejectable() int32 {
	if x != nil {
		return x.Rejectable
	}
	return 0
}

func (x *Vendor) GetReturnable() int32 {
	if x != nil {
		return x.Returnable
	}
	return 0
}

func (x *Vendor) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Vendor) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *Vendor) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Vendor) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *Vendor) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *Vendor) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Vendor) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

type VendorOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code                   string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	VendorClassificationId int64  `protobuf:"varint,3,opt,name=vendor_classification_id,json=vendorClassificationId,proto3" json:"vendor_classification_id,omitempty"`
	SubDistrictId          int64  `protobuf:"varint,4,opt,name=sub_district_id,json=subDistrictId,proto3" json:"sub_district_id,omitempty"`
	PaymentTermId          int64  `protobuf:"varint,5,opt,name=payment_term_id,json=paymentTermId,proto3" json:"payment_term_id,omitempty"`
	Name                   string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Address                string `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	Note                   string `protobuf:"bytes,8,opt,name=note,proto3" json:"note,omitempty"`
	Status                 int32  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *VendorOrganization) Reset() {
	*x = VendorOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOrganization) ProtoMessage() {}

func (x *VendorOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOrganization.ProtoReflect.Descriptor instead.
func (*VendorOrganization) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{30}
}

func (x *VendorOrganization) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VendorOrganization) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *VendorOrganization) GetVendorClassificationId() int64 {
	if x != nil {
		return x.VendorClassificationId
	}
	return 0
}

func (x *VendorOrganization) GetSubDistrictId() int64 {
	if x != nil {
		return x.SubDistrictId
	}
	return 0
}

func (x *VendorOrganization) GetPaymentTermId() int64 {
	if x != nil {
		return x.PaymentTermId
	}
	return 0
}

func (x *VendorOrganization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VendorOrganization) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *VendorOrganization) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *VendorOrganization) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type VendorClassification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CommodityCode string `protobuf:"bytes,2,opt,name=commodity_code,json=commodityCode,proto3" json:"commodity_code,omitempty"`
	CommodityName string `protobuf:"bytes,3,opt,name=commodity_name,json=commodityName,proto3" json:"commodity_name,omitempty"`
	BadgeCode     string `protobuf:"bytes,4,opt,name=badge_code,json=badgeCode,proto3" json:"badge_code,omitempty"`
	BadgeName     string `protobuf:"bytes,5,opt,name=badge_name,json=badgeName,proto3" json:"badge_name,omitempty"`
	TypeCode      string `protobuf:"bytes,6,opt,name=type_code,json=typeCode,proto3" json:"type_code,omitempty"`
	TypeName      string `protobuf:"bytes,7,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
}

func (x *VendorClassification) Reset() {
	*x = VendorClassification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorClassification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorClassification) ProtoMessage() {}

func (x *VendorClassification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorClassification.ProtoReflect.Descriptor instead.
func (*VendorClassification) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{31}
}

func (x *VendorClassification) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VendorClassification) GetCommodityCode() string {
	if x != nil {
		return x.CommodityCode
	}
	return ""
}

func (x *VendorClassification) GetCommodityName() string {
	if x != nil {
		return x.CommodityName
	}
	return ""
}

func (x *VendorClassification) GetBadgeCode() string {
	if x != nil {
		return x.BadgeCode
	}
	return ""
}

func (x *VendorClassification) GetBadgeName() string {
	if x != nil {
		return x.BadgeName
	}
	return ""
}

func (x *VendorClassification) GetTypeCode() string {
	if x != nil {
		return x.TypeCode
	}
	return ""
}

func (x *VendorClassification) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

type PurchasePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code                 string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	VendorOrganizationId int64                  `protobuf:"varint,3,opt,name=vendor_organization_id,json=vendorOrganizationId,proto3" json:"vendor_organization_id,omitempty"`
	SiteId               int64                  `protobuf:"varint,4,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	RecognitionDate      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=recognition_date,json=recognitionDate,proto3" json:"recognition_date,omitempty"`
	EtaDate              *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=eta_date,json=etaDate,proto3" json:"eta_date,omitempty"`
	EtaTime              string                 `protobuf:"bytes,7,opt,name=eta_time,json=etaTime,proto3" json:"eta_time,omitempty"`
	TotalPrice           float64                `protobuf:"fixed64,8,opt,name=total_price,json=totalPrice,proto3" json:"total_price,omitempty"`
	TotalWeight          float64                `protobuf:"fixed64,9,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
	TotalPurchasePlanQty float64                `protobuf:"fixed64,10,opt,name=total_purchase_plan_qty,json=totalPurchasePlanQty,proto3" json:"total_purchase_plan_qty,omitempty"`
	TotalPurchaseQty     float64                `protobuf:"fixed64,11,opt,name=total_purchase_qty,json=totalPurchaseQty,proto3" json:"total_purchase_qty,omitempty"`
	Note                 string                 `protobuf:"bytes,12,opt,name=note,proto3" json:"note,omitempty"`
	Status               int32                  `protobuf:"varint,13,opt,name=status,proto3" json:"status,omitempty"`
	AssignedTo           int64                  `protobuf:"varint,14,opt,name=assigned_to,json=assignedTo,proto3" json:"assigned_to,omitempty"`
	AssignedBy           int64                  `protobuf:"varint,15,opt,name=assigned_by,json=assignedBy,proto3" json:"assigned_by,omitempty"`
	AssignedAt           *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=assigned_at,json=assignedAt,proto3" json:"assigned_at,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy            int64                  `protobuf:"varint,18,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
}

func (x *PurchasePlan) Reset() {
	*x = PurchasePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchasePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchasePlan) ProtoMessage() {}

func (x *PurchasePlan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchasePlan.ProtoReflect.Descriptor instead.
func (*PurchasePlan) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{32}
}

func (x *PurchasePlan) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PurchasePlan) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PurchasePlan) GetVendorOrganizationId() int64 {
	if x != nil {
		return x.VendorOrganizationId
	}
	return 0
}

func (x *PurchasePlan) GetSiteId() int64 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *PurchasePlan) GetRecognitionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RecognitionDate
	}
	return nil
}

func (x *PurchasePlan) GetEtaDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EtaDate
	}
	return nil
}

func (x *PurchasePlan) GetEtaTime() string {
	if x != nil {
		return x.EtaTime
	}
	return ""
}

func (x *PurchasePlan) GetTotalPrice() float64 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

func (x *PurchasePlan) GetTotalWeight() float64 {
	if x != nil {
		return x.TotalWeight
	}
	return 0
}

func (x *PurchasePlan) GetTotalPurchasePlanQty() float64 {
	if x != nil {
		return x.TotalPurchasePlanQty
	}
	return 0
}

func (x *PurchasePlan) GetTotalPurchaseQty() float64 {
	if x != nil {
		return x.TotalPurchaseQty
	}
	return 0
}

func (x *PurchasePlan) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *PurchasePlan) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PurchasePlan) GetAssignedTo() int64 {
	if x != nil {
		return x.AssignedTo
	}
	return 0
}

func (x *PurchasePlan) GetAssignedBy() int64 {
	if x != nil {
		return x.AssignedBy
	}
	return 0
}

func (x *PurchasePlan) GetAssignedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AssignedAt
	}
	return nil
}

func (x *PurchasePlan) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PurchasePlan) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

type PurchasePlanItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PurchasePlanId  int64   `protobuf:"varint,2,opt,name=purchase_plan_id,json=purchasePlanId,proto3" json:"purchase_plan_id,omitempty"`
	ItemId          int64   `protobuf:"varint,3,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	PurchasePlanQty float64 `protobuf:"fixed64,4,opt,name=purchase_plan_qty,json=purchasePlanQty,proto3" json:"purchase_plan_qty,omitempty"`
	PurchaseQty     float64 `protobuf:"fixed64,5,opt,name=purchase_qty,json=purchaseQty,proto3" json:"purchase_qty,omitempty"`
	UnitPrice       float64 `protobuf:"fixed64,6,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	Subtotal        float64 `protobuf:"fixed64,7,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	Weight          float64 `protobuf:"fixed64,8,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *PurchasePlanItem) Reset() {
	*x = PurchasePlanItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchasePlanItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchasePlanItem) ProtoMessage() {}

func (x *PurchasePlanItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchasePlanItem.ProtoReflect.Descriptor instead.
func (*PurchasePlanItem) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{33}
}

func (x *PurchasePlanItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PurchasePlanItem) GetPurchasePlanId() int64 {
	if x != nil {
		return x.PurchasePlanId
	}
	return 0
}

func (x *PurchasePlanItem) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *PurchasePlanItem) GetPurchasePlanQty() float64 {
	if x != nil {
		return x.PurchasePlanQty
	}
	return 0
}

func (x *PurchasePlanItem) GetPurchaseQty() float64 {
	if x != nil {
		return x.PurchaseQty
	}
	return 0
}

func (x *PurchasePlanItem) GetUnitPrice() float64 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *PurchasePlanItem) GetSubtotal() float64 {
	if x != nil {
		return x.Subtotal
	}
	return 0
}

func (x *PurchasePlanItem) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type PurchaseOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int64                            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code                   string                           `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	VendorId               int64                            `protobuf:"varint,3,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	SiteId                 int64                            `protobuf:"varint,4,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	TermPaymentPurId       int64                            `protobuf:"varint,5,opt,name=term_payment_pur_id,json=termPaymentPurId,proto3" json:"term_payment_pur_id,omitempty"`
	VendorClassificationId int64                            `protobuf:"varint,6,opt,name=vendor_classification_id,json=vendorClassificationId,proto3" json:"vendor_classification_id,omitempty"`
	PurchasePlanId         int64                            `protobuf:"varint,7,opt,name=purchase_plan_id,json=purchasePlanId,proto3" json:"purchase_plan_id,omitempty"`
	ConsolidatedShipmentId int64                            `protobuf:"varint,8,opt,name=consolidated_shipment_id,json=consolidatedShipmentId,proto3" json:"consolidated_shipment_id,omitempty"`
	Status                 int32                            `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	RecognitionDate        *timestamppb.Timestamp           `protobuf:"bytes,10,opt,name=recognition_date,json=recognitionDate,proto3" json:"recognition_date,omitempty"`
	EtaDate                *timestamppb.Timestamp           `protobuf:"bytes,11,opt,name=eta_date,json=etaDate,proto3" json:"eta_date,omitempty"`
	SiteAddress            string                           `protobuf:"bytes,12,opt,name=site_address,json=siteAddress,proto3" json:"site_address,omitempty"`
	EtaTime                string                           `protobuf:"bytes,13,opt,name=eta_time,json=etaTime,proto3" json:"eta_time,omitempty"`
	TaxPct                 float64                          `protobuf:"fixed64,14,opt,name=tax_pct,json=taxPct,proto3" json:"tax_pct,omitempty"`
	DeliveryFee            float64                          `protobuf:"fixed64,15,opt,name=delivery_fee,json=deliveryFee,proto3" json:"delivery_fee,omitempty"`
	TotalPrice             float64                          `protobuf:"fixed64,16,opt,name=total_price,json=totalPrice,proto3" json:"total_price,omitempty"`
	TaxAmount              float64                          `protobuf:"fixed64,17,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	TotalCharge            float64                          `protobuf:"fixed64,18,opt,name=total_charge,json=totalCharge,proto3" json:"total_charge,omitempty"`
	TotalInvoice           float64                          `protobuf:"fixed64,19,opt,name=total_invoice,json=totalInvoice,proto3" json:"total_invoice,omitempty"`
	TotalWeight            float64                          `protobuf:"fixed64,20,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
	Note                   string                           `protobuf:"bytes,21,opt,name=note,proto3" json:"note,omitempty"`
	DeltaPrint             int32                            `protobuf:"varint,22,opt,name=delta_print,json=deltaPrint,proto3" json:"delta_print,omitempty"`
	Latitude               float64                          `protobuf:"fixed64,23,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude              float64                          `protobuf:"fixed64,24,opt,name=longitude,proto3" json:"longitude,omitempty"`
	UpdatedAt              *timestamppb.Timestamp           `protobuf:"bytes,25,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy              int64                            `protobuf:"varint,26,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	CreatedFrom            int32                            `protobuf:"varint,27,opt,name=created_from,json=createdFrom,proto3" json:"created_from,omitempty"`
	HasFinishedGr          int32                            `protobuf:"varint,28,opt,name=has_finished_gr,json=hasFinishedGr,proto3" json:"has_finished_gr,omitempty"`
	CreatedAt              *timestamppb.Timestamp           `protobuf:"bytes,29,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy              int64                            `protobuf:"varint,30,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CommittedAt            *timestamppb.Timestamp           `protobuf:"bytes,31,opt,name=committed_at,json=committedAt,proto3" json:"committed_at,omitempty"`
	CommittedBy            int64                            `protobuf:"varint,32,opt,name=committed_by,json=committedBy,proto3" json:"committed_by,omitempty"`
	AssignedTo             int64                            `protobuf:"varint,33,opt,name=assigned_to,json=assignedTo,proto3" json:"assigned_to,omitempty"`
	AssignedBy             int64                            `protobuf:"varint,34,opt,name=assigned_by,json=assignedBy,proto3" json:"assigned_by,omitempty"`
	AssignedAt             *timestamppb.Timestamp           `protobuf:"bytes,35,opt,name=assigned_at,json=assignedAt,proto3" json:"assigned_at,omitempty"`
	Locked                 int32                            `protobuf:"varint,36,opt,name=locked,proto3" json:"locked,omitempty"`
	LockedBy               int64                            `protobuf:"varint,37,opt,name=locked_by,json=lockedBy,proto3" json:"locked_by,omitempty"`
	PurchaseOrderItems     []*PurchaseOrderItem             `protobuf:"bytes,38,rep,name=PurchaseOrderItems,proto3" json:"PurchaseOrderItems,omitempty"`
	Receiving              []*ReceivingListinDetailResponse `protobuf:"bytes,39,rep,name=receiving,proto3" json:"receiving,omitempty"`
}

func (x *PurchaseOrder) Reset() {
	*x = PurchaseOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseOrder) ProtoMessage() {}

func (x *PurchaseOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseOrder.ProtoReflect.Descriptor instead.
func (*PurchaseOrder) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{34}
}

func (x *PurchaseOrder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PurchaseOrder) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PurchaseOrder) GetVendorId() int64 {
	if x != nil {
		return x.VendorId
	}
	return 0
}

func (x *PurchaseOrder) GetSiteId() int64 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *PurchaseOrder) GetTermPaymentPurId() int64 {
	if x != nil {
		return x.TermPaymentPurId
	}
	return 0
}

func (x *PurchaseOrder) GetVendorClassificationId() int64 {
	if x != nil {
		return x.VendorClassificationId
	}
	return 0
}

func (x *PurchaseOrder) GetPurchasePlanId() int64 {
	if x != nil {
		return x.PurchasePlanId
	}
	return 0
}

func (x *PurchaseOrder) GetConsolidatedShipmentId() int64 {
	if x != nil {
		return x.ConsolidatedShipmentId
	}
	return 0
}

func (x *PurchaseOrder) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PurchaseOrder) GetRecognitionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RecognitionDate
	}
	return nil
}

func (x *PurchaseOrder) GetEtaDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EtaDate
	}
	return nil
}

func (x *PurchaseOrder) GetSiteAddress() string {
	if x != nil {
		return x.SiteAddress
	}
	return ""
}

func (x *PurchaseOrder) GetEtaTime() string {
	if x != nil {
		return x.EtaTime
	}
	return ""
}

func (x *PurchaseOrder) GetTaxPct() float64 {
	if x != nil {
		return x.TaxPct
	}
	return 0
}

func (x *PurchaseOrder) GetDeliveryFee() float64 {
	if x != nil {
		return x.DeliveryFee
	}
	return 0
}

func (x *PurchaseOrder) GetTotalPrice() float64 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

func (x *PurchaseOrder) GetTaxAmount() float64 {
	if x != nil {
		return x.TaxAmount
	}
	return 0
}

func (x *PurchaseOrder) GetTotalCharge() float64 {
	if x != nil {
		return x.TotalCharge
	}
	return 0
}

func (x *PurchaseOrder) GetTotalInvoice() float64 {
	if x != nil {
		return x.TotalInvoice
	}
	return 0
}

func (x *PurchaseOrder) GetTotalWeight() float64 {
	if x != nil {
		return x.TotalWeight
	}
	return 0
}

func (x *PurchaseOrder) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *PurchaseOrder) GetDeltaPrint() int32 {
	if x != nil {
		return x.DeltaPrint
	}
	return 0
}

func (x *PurchaseOrder) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *PurchaseOrder) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *PurchaseOrder) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PurchaseOrder) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *PurchaseOrder) GetCreatedFrom() int32 {
	if x != nil {
		return x.CreatedFrom
	}
	return 0
}

func (x *PurchaseOrder) GetHasFinishedGr() int32 {
	if x != nil {
		return x.HasFinishedGr
	}
	return 0
}

func (x *PurchaseOrder) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PurchaseOrder) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *PurchaseOrder) GetCommittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CommittedAt
	}
	return nil
}

func (x *PurchaseOrder) GetCommittedBy() int64 {
	if x != nil {
		return x.CommittedBy
	}
	return 0
}

func (x *PurchaseOrder) GetAssignedTo() int64 {
	if x != nil {
		return x.AssignedTo
	}
	return 0
}

func (x *PurchaseOrder) GetAssignedBy() int64 {
	if x != nil {
		return x.AssignedBy
	}
	return 0
}

func (x *PurchaseOrder) GetAssignedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AssignedAt
	}
	return nil
}

func (x *PurchaseOrder) GetLocked() int32 {
	if x != nil {
		return x.Locked
	}
	return 0
}

func (x *PurchaseOrder) GetLockedBy() int64 {
	if x != nil {
		return x.LockedBy
	}
	return 0
}

func (x *PurchaseOrder) GetPurchaseOrderItems() []*PurchaseOrderItem {
	if x != nil {
		return x.PurchaseOrderItems
	}
	return nil
}

func (x *PurchaseOrder) GetReceiving() []*ReceivingListinDetailResponse {
	if x != nil {
		return x.Receiving
	}
	return nil
}

type PurchaseOrderItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PurchaseOrderId    int64   `protobuf:"varint,2,opt,name=purchase_order_id,json=purchaseOrderId,proto3" json:"purchase_order_id,omitempty"`
	PurchasePlanItemId int64   `protobuf:"varint,3,opt,name=purchase_plan_item_id,json=purchasePlanItemId,proto3" json:"purchase_plan_item_id,omitempty"`
	ItemId             int64   `protobuf:"varint,4,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OrderQty           float64 `protobuf:"fixed64,5,opt,name=order_qty,json=orderQty,proto3" json:"order_qty,omitempty"`
	UnitPrice          float64 `protobuf:"fixed64,6,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	TaxableItem        int32   `protobuf:"varint,7,opt,name=taxable_item,json=taxableItem,proto3" json:"taxable_item,omitempty"`
	IncludeTax         int32   `protobuf:"varint,8,opt,name=include_tax,json=includeTax,proto3" json:"include_tax,omitempty"`
	TaxPercentage      float64 `protobuf:"fixed64,9,opt,name=tax_percentage,json=taxPercentage,proto3" json:"tax_percentage,omitempty"`
	TaxAmount          float64 `protobuf:"fixed64,10,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	UnitPriceTax       float64 `protobuf:"fixed64,11,opt,name=unit_price_tax,json=unitPriceTax,proto3" json:"unit_price_tax,omitempty"`
	Subtotal           float64 `protobuf:"fixed64,12,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	Weight             float64 `protobuf:"fixed64,13,opt,name=weight,proto3" json:"weight,omitempty"`
	Note               string  `protobuf:"bytes,14,opt,name=note,proto3" json:"note,omitempty"`
	PurchaseQty        float64 `protobuf:"fixed64,15,opt,name=purchase_qty,json=purchaseQty,proto3" json:"purchase_qty,omitempty"`
	Item               *Item   `protobuf:"bytes,16,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *PurchaseOrderItem) Reset() {
	*x = PurchaseOrderItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseOrderItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseOrderItem) ProtoMessage() {}

func (x *PurchaseOrderItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseOrderItem.ProtoReflect.Descriptor instead.
func (*PurchaseOrderItem) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{35}
}

func (x *PurchaseOrderItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PurchaseOrderItem) GetPurchaseOrderId() int64 {
	if x != nil {
		return x.PurchaseOrderId
	}
	return 0
}

func (x *PurchaseOrderItem) GetPurchasePlanItemId() int64 {
	if x != nil {
		return x.PurchasePlanItemId
	}
	return 0
}

func (x *PurchaseOrderItem) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *PurchaseOrderItem) GetOrderQty() float64 {
	if x != nil {
		return x.OrderQty
	}
	return 0
}

func (x *PurchaseOrderItem) GetUnitPrice() float64 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *PurchaseOrderItem) GetTaxableItem() int32 {
	if x != nil {
		return x.TaxableItem
	}
	return 0
}

func (x *PurchaseOrderItem) GetIncludeTax() int32 {
	if x != nil {
		return x.IncludeTax
	}
	return 0
}

func (x *PurchaseOrderItem) GetTaxPercentage() float64 {
	if x != nil {
		return x.TaxPercentage
	}
	return 0
}

func (x *PurchaseOrderItem) GetTaxAmount() float64 {
	if x != nil {
		return x.TaxAmount
	}
	return 0
}

func (x *PurchaseOrderItem) GetUnitPriceTax() float64 {
	if x != nil {
		return x.UnitPriceTax
	}
	return 0
}

func (x *PurchaseOrderItem) GetSubtotal() float64 {
	if x != nil {
		return x.Subtotal
	}
	return 0
}

func (x *PurchaseOrderItem) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *PurchaseOrderItem) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *PurchaseOrderItem) GetPurchaseQty() float64 {
	if x != nil {
		return x.PurchaseQty
	}
	return 0
}

func (x *PurchaseOrderItem) GetItem() *Item {
	if x != nil {
		return x.Item
	}
	return nil
}

type GetAddressListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit         int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status        int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search        string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy       string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	ArchetypeId   int64  `protobuf:"varint,6,opt,name=archetype_id,json=archetypeId,proto3" json:"archetype_id,omitempty"`
	AdmDivisionId int64  `protobuf:"varint,7,opt,name=adm_division_id,json=admDivisionId,proto3" json:"adm_division_id,omitempty"`
	SiteId        int64  `protobuf:"varint,8,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	SalespersonId int64  `protobuf:"varint,9,opt,name=salesperson_id,json=salespersonId,proto3" json:"salesperson_id,omitempty"`
	TerritoryId   int64  `protobuf:"varint,10,opt,name=territory_id,json=territoryId,proto3" json:"territory_id,omitempty"`
	TaxScheduleId int64  `protobuf:"varint,11,opt,name=tax_schedule_id,json=taxScheduleId,proto3" json:"tax_schedule_id,omitempty"`
	CustomerId    int64  `protobuf:"varint,12,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *GetAddressListRequest) Reset() {
	*x = GetAddressListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressListRequest) ProtoMessage() {}

func (x *GetAddressListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressListRequest.ProtoReflect.Descriptor instead.
func (*GetAddressListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{36}
}

func (x *GetAddressListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAddressListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAddressListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetAddressListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetAddressListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetAddressListRequest) GetArchetypeId() int64 {
	if x != nil {
		return x.ArchetypeId
	}
	return 0
}

func (x *GetAddressListRequest) GetAdmDivisionId() int64 {
	if x != nil {
		return x.AdmDivisionId
	}
	return 0
}

func (x *GetAddressListRequest) GetSiteId() int64 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *GetAddressListRequest) GetSalespersonId() int64 {
	if x != nil {
		return x.SalespersonId
	}
	return 0
}

func (x *GetAddressListRequest) GetTerritoryId() int64 {
	if x != nil {
		return x.TerritoryId
	}
	return 0
}

func (x *GetAddressListRequest) GetTaxScheduleId() int64 {
	if x != nil {
		return x.TaxScheduleId
	}
	return 0
}

func (x *GetAddressListRequest) GetCustomerId() int64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

type GetAddressListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*Address `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAddressListResponse) Reset() {
	*x = GetAddressListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressListResponse) ProtoMessage() {}

func (x *GetAddressListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressListResponse.ProtoReflect.Descriptor instead.
func (*GetAddressListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{37}
}

func (x *GetAddressListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAddressListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetAddressListResponse) GetData() []*Address {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAddressDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code       string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	CustomerId int64  `protobuf:"varint,3,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *GetAddressDetailRequest) Reset() {
	*x = GetAddressDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressDetailRequest) ProtoMessage() {}

func (x *GetAddressDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressDetailRequest.ProtoReflect.Descriptor instead.
func (*GetAddressDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{38}
}

func (x *GetAddressDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetAddressDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetAddressDetailRequest) GetCustomerId() int64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

type GetAddressDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Address `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAddressDetailResponse) Reset() {
	*x = GetAddressDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressDetailResponse) ProtoMessage() {}

func (x *GetAddressDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressDetailResponse.ProtoReflect.Descriptor instead.
func (*GetAddressDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{39}
}

func (x *GetAddressDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAddressDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetAddressDetailResponse) GetData() *Address {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAdmDivisionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit         int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status        int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search        string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy       string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	RegionId      int64  `protobuf:"varint,6,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	SubDistrictId int64  `protobuf:"varint,7,opt,name=sub_district_id,json=subDistrictId,proto3" json:"sub_district_id,omitempty"`
	ProvinceId    int64  `protobuf:"varint,8,opt,name=province_id,json=provinceId,proto3" json:"province_id,omitempty"`
	CityId        int64  `protobuf:"varint,9,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	DistrictId    int64  `protobuf:"varint,10,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`
}

func (x *GetAdmDivisionListRequest) Reset() {
	*x = GetAdmDivisionListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdmDivisionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdmDivisionListRequest) ProtoMessage() {}

func (x *GetAdmDivisionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdmDivisionListRequest.ProtoReflect.Descriptor instead.
func (*GetAdmDivisionListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{40}
}

func (x *GetAdmDivisionListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAdmDivisionListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAdmDivisionListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetAdmDivisionListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetAdmDivisionListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetAdmDivisionListRequest) GetRegionId() int64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *GetAdmDivisionListRequest) GetSubDistrictId() int64 {
	if x != nil {
		return x.SubDistrictId
	}
	return 0
}

func (x *GetAdmDivisionListRequest) GetProvinceId() int64 {
	if x != nil {
		return x.ProvinceId
	}
	return 0
}

func (x *GetAdmDivisionListRequest) GetCityId() int64 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *GetAdmDivisionListRequest) GetDistrictId() int64 {
	if x != nil {
		return x.DistrictId
	}
	return 0
}

type GetAdmDivisionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*AdmDivision `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAdmDivisionListResponse) Reset() {
	*x = GetAdmDivisionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdmDivisionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdmDivisionListResponse) ProtoMessage() {}

func (x *GetAdmDivisionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdmDivisionListResponse.ProtoReflect.Descriptor instead.
func (*GetAdmDivisionListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{41}
}

func (x *GetAdmDivisionListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAdmDivisionListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetAdmDivisionListResponse) GetData() []*AdmDivision {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAdmDivisionDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code          string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	RegionId      int64  `protobuf:"varint,3,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	SubDistrictId int64  `protobuf:"varint,4,opt,name=sub_district_id,json=subDistrictId,proto3" json:"sub_district_id,omitempty"`
	ProvinceId    int64  `protobuf:"varint,5,opt,name=province_id,json=provinceId,proto3" json:"province_id,omitempty"`
	CityId        int64  `protobuf:"varint,6,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	DistrictId    int64  `protobuf:"varint,7,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`
}

func (x *GetAdmDivisionDetailRequest) Reset() {
	*x = GetAdmDivisionDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdmDivisionDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdmDivisionDetailRequest) ProtoMessage() {}

func (x *GetAdmDivisionDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdmDivisionDetailRequest.ProtoReflect.Descriptor instead.
func (*GetAdmDivisionDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{42}
}

func (x *GetAdmDivisionDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetAdmDivisionDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetAdmDivisionDetailRequest) GetRegionId() int64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *GetAdmDivisionDetailRequest) GetSubDistrictId() int64 {
	if x != nil {
		return x.SubDistrictId
	}
	return 0
}

func (x *GetAdmDivisionDetailRequest) GetProvinceId() int64 {
	if x != nil {
		return x.ProvinceId
	}
	return 0
}

func (x *GetAdmDivisionDetailRequest) GetCityId() int64 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *GetAdmDivisionDetailRequest) GetDistrictId() int64 {
	if x != nil {
		return x.DistrictId
	}
	return 0
}

type GetAdmDivisionDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *AdmDivision `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAdmDivisionDetailResponse) Reset() {
	*x = GetAdmDivisionDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdmDivisionDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdmDivisionDetailResponse) ProtoMessage() {}

func (x *GetAdmDivisionDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdmDivisionDetailResponse.ProtoReflect.Descriptor instead.
func (*GetAdmDivisionDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{43}
}

func (x *GetAdmDivisionDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAdmDivisionDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetAdmDivisionDetailResponse) GetData() *AdmDivision {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAdmDivisionGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit           int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset          int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	AdmDivisionCode string `protobuf:"bytes,3,opt,name=adm_division_code,json=admDivisionCode,proto3" json:"adm_division_code,omitempty"`
	Region          string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	State           string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	City            string `protobuf:"bytes,6,opt,name=city,proto3" json:"city,omitempty"`
	District        string `protobuf:"bytes,7,opt,name=district,proto3" json:"district,omitempty"`
	SubDistrict     string `protobuf:"bytes,8,opt,name=sub_district,json=subDistrict,proto3" json:"sub_district,omitempty"`
}

func (x *GetAdmDivisionGPListRequest) Reset() {
	*x = GetAdmDivisionGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdmDivisionGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdmDivisionGPListRequest) ProtoMessage() {}

func (x *GetAdmDivisionGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdmDivisionGPListRequest.ProtoReflect.Descriptor instead.
func (*GetAdmDivisionGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{44}
}

func (x *GetAdmDivisionGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAdmDivisionGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAdmDivisionGPListRequest) GetAdmDivisionCode() string {
	if x != nil {
		return x.AdmDivisionCode
	}
	return ""
}

func (x *GetAdmDivisionGPListRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetAdmDivisionGPListRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GetAdmDivisionGPListRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *GetAdmDivisionGPListRequest) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *GetAdmDivisionGPListRequest) GetSubDistrict() string {
	if x != nil {
		return x.SubDistrict
	}
	return ""
}

type GetAdmDivisionGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type            string  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Limit           float64 `protobuf:"fixed64,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset          float64 `protobuf:"fixed64,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Code            string  `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	Region          string  `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	State           string  `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	City            string  `protobuf:"bytes,8,opt,name=city,proto3" json:"city,omitempty"`
	District        string  `protobuf:"bytes,9,opt,name=district,proto3" json:"district,omitempty"`
	Subdistrict     string  `protobuf:"bytes,10,opt,name=subdistrict,proto3" json:"subdistrict,omitempty"`
	RegionLike      string  `protobuf:"bytes,11,opt,name=region_like,json=regionLike,proto3" json:"region_like,omitempty"`
	StateLike       string  `protobuf:"bytes,12,opt,name=state_like,json=stateLike,proto3" json:"state_like,omitempty"`
	CityLike        string  `protobuf:"bytes,13,opt,name=city_like,json=cityLike,proto3" json:"city_like,omitempty"`
	DistrictLike    string  `protobuf:"bytes,14,opt,name=district_like,json=districtLike,proto3" json:"district_like,omitempty"`
	SubdistrictLike string  `protobuf:"bytes,15,opt,name=subdistrict_like,json=subdistrictLike,proto3" json:"subdistrict_like,omitempty"`
	RegionOthers    string  `protobuf:"bytes,16,opt,name=region_others,json=regionOthers,proto3" json:"region_others,omitempty"`
}

func (x *GetAdmDivisionGPDetailRequest) Reset() {
	*x = GetAdmDivisionGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdmDivisionGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdmDivisionGPDetailRequest) ProtoMessage() {}

func (x *GetAdmDivisionGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdmDivisionGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetAdmDivisionGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{45}
}

func (x *GetAdmDivisionGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetAdmDivisionGPDetailRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetAdmDivisionGPDetailRequest) GetLimit() float64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAdmDivisionGPDetailRequest) GetOffset() float64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAdmDivisionGPDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetAdmDivisionGPDetailRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetAdmDivisionGPDetailRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GetAdmDivisionGPDetailRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *GetAdmDivisionGPDetailRequest) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *GetAdmDivisionGPDetailRequest) GetSubdistrict() string {
	if x != nil {
		return x.Subdistrict
	}
	return ""
}

func (x *GetAdmDivisionGPDetailRequest) GetRegionLike() string {
	if x != nil {
		return x.RegionLike
	}
	return ""
}

func (x *GetAdmDivisionGPDetailRequest) GetStateLike() string {
	if x != nil {
		return x.StateLike
	}
	return ""
}

func (x *GetAdmDivisionGPDetailRequest) GetCityLike() string {
	if x != nil {
		return x.CityLike
	}
	return ""
}

func (x *GetAdmDivisionGPDetailRequest) GetDistrictLike() string {
	if x != nil {
		return x.DistrictLike
	}
	return ""
}

func (x *GetAdmDivisionGPDetailRequest) GetSubdistrictLike() string {
	if x != nil {
		return x.SubdistrictLike
	}
	return ""
}

func (x *GetAdmDivisionGPDetailRequest) GetRegionOthers() string {
	if x != nil {
		return x.RegionOthers
	}
	return ""
}

type GetAdmDivisionGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32            `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32            `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32            `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32            `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*AdmDivisionGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool             `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string         `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string           `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetAdmDivisionGPResponse) Reset() {
	*x = GetAdmDivisionGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdmDivisionGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdmDivisionGPResponse) ProtoMessage() {}

func (x *GetAdmDivisionGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdmDivisionGPResponse.ProtoReflect.Descriptor instead.
func (*GetAdmDivisionGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{46}
}

func (x *GetAdmDivisionGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetAdmDivisionGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetAdmDivisionGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetAdmDivisionGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetAdmDivisionGPResponse) GetData() []*AdmDivisionGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAdmDivisionGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetAdmDivisionGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetAdmDivisionGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetArchetypeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit          int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset         int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status         int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search         string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy        string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	CustomerTypeId int64  `protobuf:"varint,6,opt,name=customer_type_id,json=customerTypeId,proto3" json:"customer_type_id,omitempty"`
}

func (x *GetArchetypeListRequest) Reset() {
	*x = GetArchetypeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArchetypeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArchetypeListRequest) ProtoMessage() {}

func (x *GetArchetypeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArchetypeListRequest.ProtoReflect.Descriptor instead.
func (*GetArchetypeListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{47}
}

func (x *GetArchetypeListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetArchetypeListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetArchetypeListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetArchetypeListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetArchetypeListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetArchetypeListRequest) GetCustomerTypeId() int64 {
	if x != nil {
		return x.CustomerTypeId
	}
	return 0
}

type GetArchetypeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*Archetype `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetArchetypeListResponse) Reset() {
	*x = GetArchetypeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArchetypeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArchetypeListResponse) ProtoMessage() {}

func (x *GetArchetypeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArchetypeListResponse.ProtoReflect.Descriptor instead.
func (*GetArchetypeListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{48}
}

func (x *GetArchetypeListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetArchetypeListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetArchetypeListResponse) GetData() []*Archetype {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetArchetypeDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetArchetypeDetailRequest) Reset() {
	*x = GetArchetypeDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArchetypeDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArchetypeDetailRequest) ProtoMessage() {}

func (x *GetArchetypeDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArchetypeDetailRequest.ProtoReflect.Descriptor instead.
func (*GetArchetypeDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{49}
}

func (x *GetArchetypeDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetArchetypeDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetArchetypeDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Archetype `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetArchetypeDetailResponse) Reset() {
	*x = GetArchetypeDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArchetypeDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArchetypeDetailResponse) ProtoMessage() {}

func (x *GetArchetypeDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArchetypeDetailResponse.ProtoReflect.Descriptor instead.
func (*GetArchetypeDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{50}
}

func (x *GetArchetypeDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetArchetypeDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetArchetypeDetailResponse) GetData() *Archetype {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCustomerTypeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search  string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetCustomerTypeListRequest) Reset() {
	*x = GetCustomerTypeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerTypeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerTypeListRequest) ProtoMessage() {}

func (x *GetCustomerTypeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerTypeListRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerTypeListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{51}
}

func (x *GetCustomerTypeListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCustomerTypeListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCustomerTypeListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetCustomerTypeListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetCustomerTypeListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetCustomerTypeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*CustomerType `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCustomerTypeListResponse) Reset() {
	*x = GetCustomerTypeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerTypeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerTypeListResponse) ProtoMessage() {}

func (x *GetCustomerTypeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerTypeListResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerTypeListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{52}
}

func (x *GetCustomerTypeListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCustomerTypeListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCustomerTypeListResponse) GetData() []*CustomerType {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCustomerTypeDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetCustomerTypeDetailRequest) Reset() {
	*x = GetCustomerTypeDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerTypeDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerTypeDetailRequest) ProtoMessage() {}

func (x *GetCustomerTypeDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerTypeDetailRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerTypeDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{53}
}

func (x *GetCustomerTypeDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetCustomerTypeDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetCustomerTypeDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *CustomerType `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCustomerTypeDetailResponse) Reset() {
	*x = GetCustomerTypeDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerTypeDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerTypeDetailResponse) ProtoMessage() {}

func (x *GetCustomerTypeDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerTypeDetailResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerTypeDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{54}
}

func (x *GetCustomerTypeDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCustomerTypeDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCustomerTypeDetailResponse) GetData() *CustomerType {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateCustomerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Customer `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateCustomerRequest) Reset() {
	*x = UpdateCustomerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomerRequest) ProtoMessage() {}

func (x *UpdateCustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomerRequest.ProtoReflect.Descriptor instead.
func (*UpdateCustomerRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{55}
}

func (x *UpdateCustomerRequest) GetData() *Customer {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateCustomerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Customer `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateCustomerResponse) Reset() {
	*x = UpdateCustomerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomerResponse) ProtoMessage() {}

func (x *UpdateCustomerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomerResponse.ProtoReflect.Descriptor instead.
func (*UpdateCustomerResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{56}
}

func (x *UpdateCustomerResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateCustomerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateCustomerResponse) GetData() *Customer {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetClassListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search  string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetClassListRequest) Reset() {
	*x = GetClassListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClassListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassListRequest) ProtoMessage() {}

func (x *GetClassListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassListRequest.ProtoReflect.Descriptor instead.
func (*GetClassListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{57}
}

func (x *GetClassListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetClassListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetClassListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetClassListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetClassListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetClassListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*Class `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetClassListResponse) Reset() {
	*x = GetClassListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClassListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassListResponse) ProtoMessage() {}

func (x *GetClassListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassListResponse.ProtoReflect.Descriptor instead.
func (*GetClassListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{58}
}

func (x *GetClassListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetClassListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetClassListResponse) GetData() []*Class {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetClassDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetClassDetailRequest) Reset() {
	*x = GetClassDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClassDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassDetailRequest) ProtoMessage() {}

func (x *GetClassDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassDetailRequest.ProtoReflect.Descriptor instead.
func (*GetClassDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{59}
}

func (x *GetClassDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetClassDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetClassDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Class `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetClassDetailResponse) Reset() {
	*x = GetClassDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClassDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassDetailResponse) ProtoMessage() {}

func (x *GetClassDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassDetailResponse.ProtoReflect.Descriptor instead.
func (*GetClassDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{60}
}

func (x *GetClassDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetClassDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetClassDetailResponse) GetData() *Class {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetItemListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit          int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset         int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status         int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search         string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy        string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	UomId          int64  `protobuf:"varint,6,opt,name=uom_id,json=uomId,proto3" json:"uom_id,omitempty"`
	ClassId        int64  `protobuf:"varint,7,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	ItemCategoryId int64  `protobuf:"varint,8,opt,name=item_category_id,json=itemCategoryId,proto3" json:"item_category_id,omitempty"`
}

func (x *GetItemListRequest) Reset() {
	*x = GetItemListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemListRequest) ProtoMessage() {}

func (x *GetItemListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemListRequest.ProtoReflect.Descriptor instead.
func (*GetItemListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{61}
}

func (x *GetItemListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetItemListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetItemListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetItemListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetItemListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetItemListRequest) GetUomId() int64 {
	if x != nil {
		return x.UomId
	}
	return 0
}

func (x *GetItemListRequest) GetClassId() int64 {
	if x != nil {
		return x.ClassId
	}
	return 0
}

func (x *GetItemListRequest) GetItemCategoryId() int64 {
	if x != nil {
		return x.ItemCategoryId
	}
	return 0
}

type GetItemListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*Item `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetItemListResponse) Reset() {
	*x = GetItemListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemListResponse) ProtoMessage() {}

func (x *GetItemListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemListResponse.ProtoReflect.Descriptor instead.
func (*GetItemListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{62}
}

func (x *GetItemListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetItemListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetItemListResponse) GetData() []*Item {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetItemDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetItemDetailRequest) Reset() {
	*x = GetItemDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemDetailRequest) ProtoMessage() {}

func (x *GetItemDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemDetailRequest.ProtoReflect.Descriptor instead.
func (*GetItemDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{63}
}

func (x *GetItemDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetItemDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetItemDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Item  `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetItemDetailResponse) Reset() {
	*x = GetItemDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemDetailResponse) ProtoMessage() {}

func (x *GetItemDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemDetailResponse.ProtoReflect.Descriptor instead.
func (*GetItemDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{64}
}

func (x *GetItemDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetItemDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetItemDetailResponse) GetData() *Item {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetItemGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit       int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset      int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	ItemNumber  string `protobuf:"bytes,3,opt,name=item_number,json=itemNumber,proto3" json:"item_number,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	ClassId     string `protobuf:"bytes,5,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	UomId       string `protobuf:"bytes,6,opt,name=uom_id,json=uomId,proto3" json:"uom_id,omitempty"`
	Inactive    string `protobuf:"bytes,7,opt,name=inactive,proto3" json:"inactive,omitempty"`
}

func (x *GetItemGPListRequest) Reset() {
	*x = GetItemGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemGPListRequest) ProtoMessage() {}

func (x *GetItemGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemGPListRequest.ProtoReflect.Descriptor instead.
func (*GetItemGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{65}
}

func (x *GetItemGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetItemGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetItemGPListRequest) GetItemNumber() string {
	if x != nil {
		return x.ItemNumber
	}
	return ""
}

func (x *GetItemGPListRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetItemGPListRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *GetItemGPListRequest) GetUomId() string {
	if x != nil {
		return x.UomId
	}
	return ""
}

func (x *GetItemGPListRequest) GetInactive() string {
	if x != nil {
		return x.Inactive
	}
	return ""
}

type GetItemMasterComplexGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit          int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset         int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	ItemNumber     string `protobuf:"bytes,3,opt,name=item_number,json=itemNumber,proto3" json:"item_number,omitempty"`
	Description    string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	ClassId        string `protobuf:"bytes,5,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	UomId          string `protobuf:"bytes,6,opt,name=uom_id,json=uomId,proto3" json:"uom_id,omitempty"`
	Inactive       string `protobuf:"bytes,7,opt,name=inactive,proto3" json:"inactive,omitempty"`
	Locncode       string `protobuf:"bytes,8,opt,name=locncode,proto3" json:"locncode,omitempty"`
	GnlRegion      string `protobuf:"bytes,9,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	GnlSalability  string `protobuf:"bytes,10,opt,name=gnl_salability,json=gnlSalability,proto3" json:"gnl_salability,omitempty"`
	GnlCustTypeId  string `protobuf:"bytes,11,opt,name=gnl_cust_type_id,json=gnlCustTypeId,proto3" json:"gnl_cust_type_id,omitempty"`
	Prclevel       string `protobuf:"bytes,12,opt,name=prclevel,proto3" json:"prclevel,omitempty"`
	GnlStorability string `protobuf:"bytes,13,opt,name=gnl_storability,json=gnlStorability,proto3" json:"gnl_storability,omitempty"`
	OrderBy        string `protobuf:"bytes,14,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetItemMasterComplexGPListRequest) Reset() {
	*x = GetItemMasterComplexGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemMasterComplexGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemMasterComplexGPListRequest) ProtoMessage() {}

func (x *GetItemMasterComplexGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemMasterComplexGPListRequest.ProtoReflect.Descriptor instead.
func (*GetItemMasterComplexGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{66}
}

func (x *GetItemMasterComplexGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetItemMasterComplexGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetItemMasterComplexGPListRequest) GetItemNumber() string {
	if x != nil {
		return x.ItemNumber
	}
	return ""
}

func (x *GetItemMasterComplexGPListRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetItemMasterComplexGPListRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *GetItemMasterComplexGPListRequest) GetUomId() string {
	if x != nil {
		return x.UomId
	}
	return ""
}

func (x *GetItemMasterComplexGPListRequest) GetInactive() string {
	if x != nil {
		return x.Inactive
	}
	return ""
}

func (x *GetItemMasterComplexGPListRequest) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *GetItemMasterComplexGPListRequest) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *GetItemMasterComplexGPListRequest) GetGnlSalability() string {
	if x != nil {
		return x.GnlSalability
	}
	return ""
}

func (x *GetItemMasterComplexGPListRequest) GetGnlCustTypeId() string {
	if x != nil {
		return x.GnlCustTypeId
	}
	return ""
}

func (x *GetItemMasterComplexGPListRequest) GetPrclevel() string {
	if x != nil {
		return x.Prclevel
	}
	return ""
}

func (x *GetItemMasterComplexGPListRequest) GetGnlStorability() string {
	if x != nil {
		return x.GnlStorability
	}
	return ""
}

func (x *GetItemMasterComplexGPListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetItemGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetItemGPDetailRequest) Reset() {
	*x = GetItemGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemGPDetailRequest) ProtoMessage() {}

func (x *GetItemGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetItemGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{67}
}

func (x *GetItemGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetItemGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32     `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32     `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32     `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32     `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*ItemGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool      `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string  `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string    `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetItemGPResponse) Reset() {
	*x = GetItemGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemGPResponse) ProtoMessage() {}

func (x *GetItemGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemGPResponse.ProtoReflect.Descriptor instead.
func (*GetItemGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{68}
}

func (x *GetItemGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetItemGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetItemGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetItemGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetItemGPResponse) GetData() []*ItemGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetItemGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetItemGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetItemGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetItemMasterComplexGPListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32                  `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32                  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32                  `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32                  `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*ItemMasterComplexGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool                   `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string               `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string                 `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetItemMasterComplexGPListResponse) Reset() {
	*x = GetItemMasterComplexGPListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemMasterComplexGPListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemMasterComplexGPListResponse) ProtoMessage() {}

func (x *GetItemMasterComplexGPListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemMasterComplexGPListResponse.ProtoReflect.Descriptor instead.
func (*GetItemMasterComplexGPListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{69}
}

func (x *GetItemMasterComplexGPListResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetItemMasterComplexGPListResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetItemMasterComplexGPListResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetItemMasterComplexGPListResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetItemMasterComplexGPListResponse) GetData() []*ItemMasterComplexGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetItemMasterComplexGPListResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetItemMasterComplexGPListResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetItemMasterComplexGPListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateItemPackableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Packable bool  `protobuf:"varint,2,opt,name=packable,proto3" json:"packable,omitempty"`
}

func (x *UpdateItemPackableRequest) Reset() {
	*x = UpdateItemPackableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateItemPackableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateItemPackableRequest) ProtoMessage() {}

func (x *UpdateItemPackableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateItemPackableRequest.ProtoReflect.Descriptor instead.
func (*UpdateItemPackableRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{70}
}

func (x *UpdateItemPackableRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateItemPackableRequest) GetPackable() bool {
	if x != nil {
		return x.Packable
	}
	return false
}

type UpdateItemPackableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateItemPackableResponse) Reset() {
	*x = UpdateItemPackableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateItemPackableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateItemPackableResponse) ProtoMessage() {}

func (x *UpdateItemPackableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateItemPackableResponse.ProtoReflect.Descriptor instead.
func (*UpdateItemPackableResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{71}
}

func (x *UpdateItemPackableResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateItemPackableResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateItemFragileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Fragile bool  `protobuf:"varint,2,opt,name=fragile,proto3" json:"fragile,omitempty"`
}

func (x *UpdateItemFragileRequest) Reset() {
	*x = UpdateItemFragileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateItemFragileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateItemFragileRequest) ProtoMessage() {}

func (x *UpdateItemFragileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateItemFragileRequest.ProtoReflect.Descriptor instead.
func (*UpdateItemFragileRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{72}
}

func (x *UpdateItemFragileRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateItemFragileRequest) GetFragile() bool {
	if x != nil {
		return x.Fragile
	}
	return false
}

type UpdateItemFragileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateItemFragileResponse) Reset() {
	*x = UpdateItemFragileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateItemFragileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateItemFragileResponse) ProtoMessage() {}

func (x *UpdateItemFragileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateItemFragileResponse.ProtoReflect.Descriptor instead.
func (*UpdateItemFragileResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{73}
}

func (x *UpdateItemFragileResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateItemFragileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetRegionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search  string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetRegionListRequest) Reset() {
	*x = GetRegionListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegionListRequest) ProtoMessage() {}

func (x *GetRegionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegionListRequest.ProtoReflect.Descriptor instead.
func (*GetRegionListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{74}
}

func (x *GetRegionListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetRegionListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetRegionListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetRegionListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetRegionListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetRegionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*Region `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetRegionListResponse) Reset() {
	*x = GetRegionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegionListResponse) ProtoMessage() {}

func (x *GetRegionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegionListResponse.ProtoReflect.Descriptor instead.
func (*GetRegionListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{75}
}

func (x *GetRegionListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetRegionListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetRegionListResponse) GetData() []*Region {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetRegionDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetRegionDetailRequest) Reset() {
	*x = GetRegionDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegionDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegionDetailRequest) ProtoMessage() {}

func (x *GetRegionDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegionDetailRequest.ProtoReflect.Descriptor instead.
func (*GetRegionDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{76}
}

func (x *GetRegionDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetRegionDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetRegionDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Region `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetRegionDetailResponse) Reset() {
	*x = GetRegionDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegionDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegionDetailResponse) ProtoMessage() {}

func (x *GetRegionDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegionDetailResponse.ProtoReflect.Descriptor instead.
func (*GetRegionDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{77}
}

func (x *GetRegionDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetRegionDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetRegionDetailResponse) GetData() *Region {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSalespersonListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search  string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetSalespersonListRequest) Reset() {
	*x = GetSalespersonListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalespersonListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalespersonListRequest) ProtoMessage() {}

func (x *GetSalespersonListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalespersonListRequest.ProtoReflect.Descriptor instead.
func (*GetSalespersonListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{78}
}

func (x *GetSalespersonListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSalespersonListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSalespersonListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetSalespersonListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetSalespersonListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetSalespersonListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*Salesperson `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSalespersonListResponse) Reset() {
	*x = GetSalespersonListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalespersonListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalespersonListResponse) ProtoMessage() {}

func (x *GetSalespersonListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalespersonListResponse.ProtoReflect.Descriptor instead.
func (*GetSalespersonListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{79}
}

func (x *GetSalespersonListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSalespersonListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSalespersonListResponse) GetData() []*Salesperson {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSalespersonDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetSalespersonDetailRequest) Reset() {
	*x = GetSalespersonDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalespersonDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalespersonDetailRequest) ProtoMessage() {}

func (x *GetSalespersonDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalespersonDetailRequest.ProtoReflect.Descriptor instead.
func (*GetSalespersonDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{80}
}

func (x *GetSalespersonDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetSalespersonDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetSalespersonDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Salesperson `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSalespersonDetailResponse) Reset() {
	*x = GetSalespersonDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalespersonDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalespersonDetailResponse) ProtoMessage() {}

func (x *GetSalespersonDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalespersonDetailResponse.ProtoReflect.Descriptor instead.
func (*GetSalespersonDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{81}
}

func (x *GetSalespersonDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSalespersonDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSalespersonDetailResponse) GetData() *Salesperson {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSiteListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search  string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetSiteListRequest) Reset() {
	*x = GetSiteListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSiteListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSiteListRequest) ProtoMessage() {}

func (x *GetSiteListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSiteListRequest.ProtoReflect.Descriptor instead.
func (*GetSiteListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{82}
}

func (x *GetSiteListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSiteListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSiteListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetSiteListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetSiteListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetSiteInIdsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32   `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32   `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Ids     []int64 `protobuf:"varint,4,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	OrderBy string  `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetSiteInIdsListRequest) Reset() {
	*x = GetSiteInIdsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSiteInIdsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSiteInIdsListRequest) ProtoMessage() {}

func (x *GetSiteInIdsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSiteInIdsListRequest.ProtoReflect.Descriptor instead.
func (*GetSiteInIdsListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{83}
}

func (x *GetSiteInIdsListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSiteInIdsListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSiteInIdsListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetSiteInIdsListRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetSiteInIdsListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetSiteListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*Site `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSiteListResponse) Reset() {
	*x = GetSiteListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSiteListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSiteListResponse) ProtoMessage() {}

func (x *GetSiteListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSiteListResponse.ProtoReflect.Descriptor instead.
func (*GetSiteListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{84}
}

func (x *GetSiteListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSiteListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSiteListResponse) GetData() []*Site {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSiteDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetSiteDetailRequest) Reset() {
	*x = GetSiteDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSiteDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSiteDetailRequest) ProtoMessage() {}

func (x *GetSiteDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSiteDetailRequest.ProtoReflect.Descriptor instead.
func (*GetSiteDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{85}
}

func (x *GetSiteDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetSiteDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetSiteDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Site  `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSiteDetailResponse) Reset() {
	*x = GetSiteDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSiteDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSiteDetailResponse) ProtoMessage() {}

func (x *GetSiteDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSiteDetailResponse.ProtoReflect.Descriptor instead.
func (*GetSiteDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{86}
}

func (x *GetSiteDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSiteDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSiteDetailResponse) GetData() *Site {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSiteGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit                 int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset                int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	SiteId                string `protobuf:"bytes,3,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	SiteType              string `protobuf:"bytes,4,opt,name=site_type,json=siteType,proto3" json:"site_type,omitempty"`
	Description           string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	AdmDivId              string `protobuf:"bytes,6,opt,name=adm_div_id,json=admDivId,proto3" json:"adm_div_id,omitempty"`
	Locncode              string `protobuf:"bytes,7,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Locndscr              string `protobuf:"bytes,8,opt,name=locndscr,proto3" json:"locndscr,omitempty"`
	GnlSiteTypeId         string `protobuf:"bytes,9,opt,name=gnl_site_type_id,json=gnlSiteTypeId,proto3" json:"gnl_site_type_id,omitempty"`
	GnlAdministrativeCode string `protobuf:"bytes,10,opt,name=gnl_administrative_code,json=gnlAdministrativeCode,proto3" json:"gnl_administrative_code,omitempty"`
	Inactive              int32  `protobuf:"varint,11,opt,name=inactive,proto3" json:"inactive,omitempty"`
}

func (x *GetSiteGPListRequest) Reset() {
	*x = GetSiteGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSiteGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSiteGPListRequest) ProtoMessage() {}

func (x *GetSiteGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSiteGPListRequest.ProtoReflect.Descriptor instead.
func (*GetSiteGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{87}
}

func (x *GetSiteGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSiteGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSiteGPListRequest) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

func (x *GetSiteGPListRequest) GetSiteType() string {
	if x != nil {
		return x.SiteType
	}
	return ""
}

func (x *GetSiteGPListRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetSiteGPListRequest) GetAdmDivId() string {
	if x != nil {
		return x.AdmDivId
	}
	return ""
}

func (x *GetSiteGPListRequest) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *GetSiteGPListRequest) GetLocndscr() string {
	if x != nil {
		return x.Locndscr
	}
	return ""
}

func (x *GetSiteGPListRequest) GetGnlSiteTypeId() string {
	if x != nil {
		return x.GnlSiteTypeId
	}
	return ""
}

func (x *GetSiteGPListRequest) GetGnlAdministrativeCode() string {
	if x != nil {
		return x.GnlAdministrativeCode
	}
	return ""
}

func (x *GetSiteGPListRequest) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

type GetSiteGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSiteGPDetailRequest) Reset() {
	*x = GetSiteGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSiteGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSiteGPDetailRequest) ProtoMessage() {}

func (x *GetSiteGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSiteGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetSiteGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{88}
}

func (x *GetSiteGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSiteGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32     `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32     `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32     `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32     `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*SiteGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool      `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string  `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string    `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetSiteGPResponse) Reset() {
	*x = GetSiteGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSiteGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSiteGPResponse) ProtoMessage() {}

func (x *GetSiteGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSiteGPResponse.ProtoReflect.Descriptor instead.
func (*GetSiteGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{89}
}

func (x *GetSiteGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetSiteGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetSiteGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetSiteGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetSiteGPResponse) GetData() []*SiteGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetSiteGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetSiteGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetSiteGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetSubDistrictListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search  string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetSubDistrictListRequest) Reset() {
	*x = GetSubDistrictListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubDistrictListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubDistrictListRequest) ProtoMessage() {}

func (x *GetSubDistrictListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubDistrictListRequest.ProtoReflect.Descriptor instead.
func (*GetSubDistrictListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{90}
}

func (x *GetSubDistrictListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSubDistrictListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSubDistrictListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetSubDistrictListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetSubDistrictListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetSubDistrictListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*SubDistrict `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSubDistrictListResponse) Reset() {
	*x = GetSubDistrictListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubDistrictListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubDistrictListResponse) ProtoMessage() {}

func (x *GetSubDistrictListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubDistrictListResponse.ProtoReflect.Descriptor instead.
func (*GetSubDistrictListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{91}
}

func (x *GetSubDistrictListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSubDistrictListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSubDistrictListResponse) GetData() []*SubDistrict {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSubDistrictDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetSubDistrictDetailRequest) Reset() {
	*x = GetSubDistrictDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubDistrictDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubDistrictDetailRequest) ProtoMessage() {}

func (x *GetSubDistrictDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubDistrictDetailRequest.ProtoReflect.Descriptor instead.
func (*GetSubDistrictDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{92}
}

func (x *GetSubDistrictDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetSubDistrictDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetSubDistrictDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *SubDistrict `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSubDistrictDetailResponse) Reset() {
	*x = GetSubDistrictDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubDistrictDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubDistrictDetailResponse) ProtoMessage() {}

func (x *GetSubDistrictDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubDistrictDetailResponse.ProtoReflect.Descriptor instead.
func (*GetSubDistrictDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{93}
}

func (x *GetSubDistrictDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSubDistrictDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSubDistrictDetailResponse) GetData() *SubDistrict {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetTerritoryListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit          int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset         int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status         int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search         string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy        string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	RegionId       int64  `protobuf:"varint,8,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	SalespersonId  int64  `protobuf:"varint,9,opt,name=salesperson_id,json=salespersonId,proto3" json:"salesperson_id,omitempty"`
	CustomerTypeId int64  `protobuf:"varint,10,opt,name=customer_type_id,json=customerTypeId,proto3" json:"customer_type_id,omitempty"`
	SubDistrictId  int64  `protobuf:"varint,11,opt,name=sub_district_id,json=subDistrictId,proto3" json:"sub_district_id,omitempty"`
}

func (x *GetTerritoryListRequest) Reset() {
	*x = GetTerritoryListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTerritoryListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTerritoryListRequest) ProtoMessage() {}

func (x *GetTerritoryListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTerritoryListRequest.ProtoReflect.Descriptor instead.
func (*GetTerritoryListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{94}
}

func (x *GetTerritoryListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetTerritoryListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetTerritoryListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetTerritoryListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetTerritoryListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetTerritoryListRequest) GetRegionId() int64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *GetTerritoryListRequest) GetSalespersonId() int64 {
	if x != nil {
		return x.SalespersonId
	}
	return 0
}

func (x *GetTerritoryListRequest) GetCustomerTypeId() int64 {
	if x != nil {
		return x.CustomerTypeId
	}
	return 0
}

func (x *GetTerritoryListRequest) GetSubDistrictId() int64 {
	if x != nil {
		return x.SubDistrictId
	}
	return 0
}

type GetTerritoryListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*Territory `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTerritoryListResponse) Reset() {
	*x = GetTerritoryListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTerritoryListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTerritoryListResponse) ProtoMessage() {}

func (x *GetTerritoryListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTerritoryListResponse.ProtoReflect.Descriptor instead.
func (*GetTerritoryListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{95}
}

func (x *GetTerritoryListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetTerritoryListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetTerritoryListResponse) GetData() []*Territory {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetTerritoryDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code          string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	SalespersonId int64  `protobuf:"varint,3,opt,name=salesperson_id,json=salespersonId,proto3" json:"salesperson_id,omitempty"`
}

func (x *GetTerritoryDetailRequest) Reset() {
	*x = GetTerritoryDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTerritoryDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTerritoryDetailRequest) ProtoMessage() {}

func (x *GetTerritoryDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTerritoryDetailRequest.ProtoReflect.Descriptor instead.
func (*GetTerritoryDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{96}
}

func (x *GetTerritoryDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetTerritoryDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetTerritoryDetailRequest) GetSalespersonId() int64 {
	if x != nil {
		return x.SalespersonId
	}
	return 0
}

type GetTerritoryDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Territory `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTerritoryDetailResponse) Reset() {
	*x = GetTerritoryDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTerritoryDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTerritoryDetailResponse) ProtoMessage() {}

func (x *GetTerritoryDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTerritoryDetailResponse.ProtoReflect.Descriptor instead.
func (*GetTerritoryDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{97}
}

func (x *GetTerritoryDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetTerritoryDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetTerritoryDetailResponse) GetData() *Territory {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetUomListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search  string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetUomListRequest) Reset() {
	*x = GetUomListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUomListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUomListRequest) ProtoMessage() {}

func (x *GetUomListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUomListRequest.ProtoReflect.Descriptor instead.
func (*GetUomListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{98}
}

func (x *GetUomListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetUomListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetUomListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetUomListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetUomListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetUomListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*Uom `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetUomListResponse) Reset() {
	*x = GetUomListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUomListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUomListResponse) ProtoMessage() {}

func (x *GetUomListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUomListResponse.ProtoReflect.Descriptor instead.
func (*GetUomListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{99}
}

func (x *GetUomListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetUomListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetUomListResponse) GetData() []*Uom {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetUomDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetUomDetailRequest) Reset() {
	*x = GetUomDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUomDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUomDetailRequest) ProtoMessage() {}

func (x *GetUomDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUomDetailRequest.ProtoReflect.Descriptor instead.
func (*GetUomDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{100}
}

func (x *GetUomDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetUomDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetUomDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Uom   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetUomDetailResponse) Reset() {
	*x = GetUomDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUomDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUomDetailResponse) ProtoMessage() {}

func (x *GetUomDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUomDetailResponse.ProtoReflect.Descriptor instead.
func (*GetUomDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{101}
}

func (x *GetUomDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetUomDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetUomDetailResponse) GetData() *Uom {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSalesOrderListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit         int32                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status        int32                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search        string                 `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy       string                 `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	AddressId     int64                  `protobuf:"varint,6,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	CustomerId    int64                  `protobuf:"varint,7,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	SalespersonId int64                  `protobuf:"varint,8,opt,name=salesperson_id,json=salespersonId,proto3" json:"salesperson_id,omitempty"`
	SiteId        int64                  `protobuf:"varint,9,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	OrderDateFrom *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=order_date_from,json=orderDateFrom,proto3" json:"order_date_from,omitempty"`
	OrderDateTo   *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=order_date_to,json=orderDateTo,proto3" json:"order_date_to,omitempty"`
}

func (x *GetSalesOrderListRequest) Reset() {
	*x = GetSalesOrderListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesOrderListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesOrderListRequest) ProtoMessage() {}

func (x *GetSalesOrderListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesOrderListRequest.ProtoReflect.Descriptor instead.
func (*GetSalesOrderListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{102}
}

func (x *GetSalesOrderListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSalesOrderListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSalesOrderListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetSalesOrderListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetSalesOrderListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetSalesOrderListRequest) GetAddressId() int64 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

func (x *GetSalesOrderListRequest) GetCustomerId() int64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *GetSalesOrderListRequest) GetSalespersonId() int64 {
	if x != nil {
		return x.SalespersonId
	}
	return 0
}

func (x *GetSalesOrderListRequest) GetSiteId() int64 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *GetSalesOrderListRequest) GetOrderDateFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderDateFrom
	}
	return nil
}

func (x *GetSalesOrderListRequest) GetOrderDateTo() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderDateTo
	}
	return nil
}

type GetSalesOrderListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*SalesOrder `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSalesOrderListResponse) Reset() {
	*x = GetSalesOrderListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesOrderListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesOrderListResponse) ProtoMessage() {}

func (x *GetSalesOrderListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesOrderListResponse.ProtoReflect.Descriptor instead.
func (*GetSalesOrderListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{103}
}

func (x *GetSalesOrderListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSalesOrderListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSalesOrderListResponse) GetData() []*SalesOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSalesOrderDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetSalesOrderDetailRequest) Reset() {
	*x = GetSalesOrderDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesOrderDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesOrderDetailRequest) ProtoMessage() {}

func (x *GetSalesOrderDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesOrderDetailRequest.ProtoReflect.Descriptor instead.
func (*GetSalesOrderDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{104}
}

func (x *GetSalesOrderDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetSalesOrderDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetSalesOrderDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *SalesOrder `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSalesOrderDetailResponse) Reset() {
	*x = GetSalesOrderDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesOrderDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesOrderDetailResponse) ProtoMessage() {}

func (x *GetSalesOrderDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesOrderDetailResponse.ProtoReflect.Descriptor instead.
func (*GetSalesOrderDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{105}
}

func (x *GetSalesOrderDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSalesOrderDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSalesOrderDetailResponse) GetData() *SalesOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateSalesOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     *SalesOrder       `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Dataitem []*SalesOrderItem `protobuf:"bytes,2,rep,name=dataitem,proto3" json:"dataitem,omitempty"`
}

func (x *CreateSalesOrderRequest) Reset() {
	*x = CreateSalesOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSalesOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSalesOrderRequest) ProtoMessage() {}

func (x *CreateSalesOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSalesOrderRequest.ProtoReflect.Descriptor instead.
func (*CreateSalesOrderRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{106}
}

func (x *CreateSalesOrderRequest) GetData() *SalesOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateSalesOrderRequest) GetDataitem() []*SalesOrderItem {
	if x != nil {
		return x.Dataitem
	}
	return nil
}

type CreateSalesOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *SalesOrder `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateSalesOrderResponse) Reset() {
	*x = CreateSalesOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSalesOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSalesOrderResponse) ProtoMessage() {}

func (x *CreateSalesOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSalesOrderResponse.ProtoReflect.Descriptor instead.
func (*CreateSalesOrderResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{107}
}

func (x *CreateSalesOrderResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateSalesOrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateSalesOrderResponse) GetData() *SalesOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCourierListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit            int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset           int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status           int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search           string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy          string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	VehicleProfileId int64  `protobuf:"varint,6,opt,name=vehicle_profile_id,json=vehicleProfileId,proto3" json:"vehicle_profile_id,omitempty"`
	EmergencyMode    int64  `protobuf:"varint,7,opt,name=emergency_mode,json=emergencyMode,proto3" json:"emergency_mode,omitempty"`
}

func (x *GetCourierListRequest) Reset() {
	*x = GetCourierListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCourierListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourierListRequest) ProtoMessage() {}

func (x *GetCourierListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourierListRequest.ProtoReflect.Descriptor instead.
func (*GetCourierListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{108}
}

func (x *GetCourierListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCourierListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCourierListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetCourierListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetCourierListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetCourierListRequest) GetVehicleProfileId() int64 {
	if x != nil {
		return x.VehicleProfileId
	}
	return 0
}

func (x *GetCourierListRequest) GetEmergencyMode() int64 {
	if x != nil {
		return x.EmergencyMode
	}
	return 0
}

type GetCourierListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*Courier `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCourierListResponse) Reset() {
	*x = GetCourierListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCourierListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourierListResponse) ProtoMessage() {}

func (x *GetCourierListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourierListResponse.ProtoReflect.Descriptor instead.
func (*GetCourierListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{109}
}

func (x *GetCourierListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCourierListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCourierListResponse) GetData() []*Courier {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCourierDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code   string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	UserId int64  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetCourierDetailRequest) Reset() {
	*x = GetCourierDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCourierDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourierDetailRequest) ProtoMessage() {}

func (x *GetCourierDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourierDetailRequest.ProtoReflect.Descriptor instead.
func (*GetCourierDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{110}
}

func (x *GetCourierDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetCourierDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetCourierDetailRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetCourierDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Courier `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCourierDetailResponse) Reset() {
	*x = GetCourierDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCourierDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourierDetailResponse) ProtoMessage() {}

func (x *GetCourierDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourierDetailResponse.ProtoReflect.Descriptor instead.
func (*GetCourierDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{111}
}

func (x *GetCourierDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCourierDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCourierDetailResponse) GetData() *Courier {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCourierGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit               int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset              int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Orderby             string `protobuf:"bytes,3,opt,name=orderby,proto3" json:"orderby,omitempty"`
	GnlCourierVendorId  string `protobuf:"bytes,4,opt,name=gnl_courier_vendor_id,json=gnlCourierVendorId,proto3" json:"gnl_courier_vendor_id,omitempty"`
	GnlVehicleProfileId string `protobuf:"bytes,5,opt,name=gnl_vehicle_profile_id,json=gnlVehicleProfileId,proto3" json:"gnl_vehicle_profile_id,omitempty"`
	GnlCourierId        string `protobuf:"bytes,6,opt,name=gnl_courier_id,json=gnlCourierId,proto3" json:"gnl_courier_id,omitempty"`
	GnlCourierName      string `protobuf:"bytes,7,opt,name=gnl_courier_name,json=gnlCourierName,proto3" json:"gnl_courier_name,omitempty"`
	Phonname            string `protobuf:"bytes,8,opt,name=phonname,proto3" json:"phonname,omitempty"`
	Inactive            int32  `protobuf:"varint,9,opt,name=inactive,proto3" json:"inactive,omitempty"`
}

func (x *GetCourierGPListRequest) Reset() {
	*x = GetCourierGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCourierGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourierGPListRequest) ProtoMessage() {}

func (x *GetCourierGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourierGPListRequest.ProtoReflect.Descriptor instead.
func (*GetCourierGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{112}
}

func (x *GetCourierGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCourierGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCourierGPListRequest) GetOrderby() string {
	if x != nil {
		return x.Orderby
	}
	return ""
}

func (x *GetCourierGPListRequest) GetGnlCourierVendorId() string {
	if x != nil {
		return x.GnlCourierVendorId
	}
	return ""
}

func (x *GetCourierGPListRequest) GetGnlVehicleProfileId() string {
	if x != nil {
		return x.GnlVehicleProfileId
	}
	return ""
}

func (x *GetCourierGPListRequest) GetGnlCourierId() string {
	if x != nil {
		return x.GnlCourierId
	}
	return ""
}

func (x *GetCourierGPListRequest) GetGnlCourierName() string {
	if x != nil {
		return x.GnlCourierName
	}
	return ""
}

func (x *GetCourierGPListRequest) GetPhonname() string {
	if x != nil {
		return x.Phonname
	}
	return ""
}

func (x *GetCourierGPListRequest) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

type GetCourierGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCourierGPDetailRequest) Reset() {
	*x = GetCourierGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCourierGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourierGPDetailRequest) ProtoMessage() {}

func (x *GetCourierGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourierGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetCourierGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{113}
}

func (x *GetCourierGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetCourierGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32        `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32        `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32        `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32        `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*CourierGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool         `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string     `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string       `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetCourierGPResponse) Reset() {
	*x = GetCourierGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCourierGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourierGPResponse) ProtoMessage() {}

func (x *GetCourierGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourierGPResponse.ProtoReflect.Descriptor instead.
func (*GetCourierGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{114}
}

func (x *GetCourierGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetCourierGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetCourierGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetCourierGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetCourierGPResponse) GetData() []*CourierGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetCourierGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetCourierGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetCourierGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetSalesOrderItemListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit        int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset       int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status       int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search       string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy      string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	SalesOrderId int64  `protobuf:"varint,6,opt,name=sales_order_id,json=salesOrderId,proto3" json:"sales_order_id,omitempty"`
	ItemId       int64  `protobuf:"varint,7,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *GetSalesOrderItemListRequest) Reset() {
	*x = GetSalesOrderItemListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesOrderItemListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesOrderItemListRequest) ProtoMessage() {}

func (x *GetSalesOrderItemListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesOrderItemListRequest.ProtoReflect.Descriptor instead.
func (*GetSalesOrderItemListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{115}
}

func (x *GetSalesOrderItemListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSalesOrderItemListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSalesOrderItemListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetSalesOrderItemListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetSalesOrderItemListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetSalesOrderItemListRequest) GetSalesOrderId() int64 {
	if x != nil {
		return x.SalesOrderId
	}
	return 0
}

func (x *GetSalesOrderItemListRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

type GetSalesOrderItemListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*SalesOrderItem `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSalesOrderItemListResponse) Reset() {
	*x = GetSalesOrderItemListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesOrderItemListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesOrderItemListResponse) ProtoMessage() {}

func (x *GetSalesOrderItemListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesOrderItemListResponse.ProtoReflect.Descriptor instead.
func (*GetSalesOrderItemListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{116}
}

func (x *GetSalesOrderItemListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSalesOrderItemListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSalesOrderItemListResponse) GetData() []*SalesOrderItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSalesOrderItemDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetSalesOrderItemDetailRequest) Reset() {
	*x = GetSalesOrderItemDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesOrderItemDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesOrderItemDetailRequest) ProtoMessage() {}

func (x *GetSalesOrderItemDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesOrderItemDetailRequest.ProtoReflect.Descriptor instead.
func (*GetSalesOrderItemDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{117}
}

func (x *GetSalesOrderItemDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetSalesOrderItemDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetSalesOrderItemDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *SalesOrderItem `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSalesOrderItemDetailResponse) Reset() {
	*x = GetSalesOrderItemDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesOrderItemDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesOrderItemDetailResponse) ProtoMessage() {}

func (x *GetSalesOrderItemDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesOrderItemDetailResponse.ProtoReflect.Descriptor instead.
func (*GetSalesOrderItemDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{118}
}

func (x *GetSalesOrderItemDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSalesOrderItemDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSalesOrderItemDetailResponse) GetData() *SalesOrderItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetTransactionListGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Type   string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GetTransactionListGPListRequest) Reset() {
	*x = GetTransactionListGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionListGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionListGPListRequest) ProtoMessage() {}

func (x *GetTransactionListGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionListGPListRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionListGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{119}
}

func (x *GetTransactionListGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetTransactionListGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetTransactionListGPListRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GetTransactionListGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTransactionListGPDetailRequest) Reset() {
	*x = GetTransactionListGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionListGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionListGPDetailRequest) ProtoMessage() {}

func (x *GetTransactionListGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionListGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionListGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{120}
}

func (x *GetTransactionListGPDetailRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetTransactionListGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTransactionListGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32                `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32                `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32                `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32                `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*TransactionListGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool                 `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string             `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string               `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetTransactionListGPResponse) Reset() {
	*x = GetTransactionListGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionListGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionListGPResponse) ProtoMessage() {}

func (x *GetTransactionListGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionListGPResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionListGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{121}
}

func (x *GetTransactionListGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetTransactionListGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetTransactionListGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetTransactionListGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetTransactionListGPResponse) GetData() []*TransactionListGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetTransactionListGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetTransactionListGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetTransactionListGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetTransactionDetailGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	SopNumber string `protobuf:"bytes,3,opt,name=sop_number,json=sopNumber,proto3" json:"sop_number,omitempty"`
}

func (x *GetTransactionDetailGPListRequest) Reset() {
	*x = GetTransactionDetailGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionDetailGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionDetailGPListRequest) ProtoMessage() {}

func (x *GetTransactionDetailGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionDetailGPListRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionDetailGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{122}
}

func (x *GetTransactionDetailGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetTransactionDetailGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetTransactionDetailGPListRequest) GetSopNumber() string {
	if x != nil {
		return x.SopNumber
	}
	return ""
}

type GetTransactionDetailGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTransactionDetailGPDetailRequest) Reset() {
	*x = GetTransactionDetailGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionDetailGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionDetailGPDetailRequest) ProtoMessage() {}

func (x *GetTransactionDetailGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionDetailGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionDetailGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{123}
}

func (x *GetTransactionDetailGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTransactionDetailGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32                  `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32                  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32                  `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32                  `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*TransactionDetailGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool                   `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string               `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string                 `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetTransactionDetailGPResponse) Reset() {
	*x = GetTransactionDetailGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionDetailGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionDetailGPResponse) ProtoMessage() {}

func (x *GetTransactionDetailGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionDetailGPResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionDetailGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{124}
}

func (x *GetTransactionDetailGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetTransactionDetailGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetTransactionDetailGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetTransactionDetailGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetTransactionDetailGPResponse) GetData() []*TransactionDetailGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetTransactionDetailGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetTransactionDetailGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetTransactionDetailGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetCourierVendorListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search  string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	SiteId  int64  `protobuf:"varint,6,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
}

func (x *GetCourierVendorListRequest) Reset() {
	*x = GetCourierVendorListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCourierVendorListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourierVendorListRequest) ProtoMessage() {}

func (x *GetCourierVendorListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourierVendorListRequest.ProtoReflect.Descriptor instead.
func (*GetCourierVendorListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{125}
}

func (x *GetCourierVendorListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCourierVendorListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCourierVendorListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetCourierVendorListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetCourierVendorListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetCourierVendorListRequest) GetSiteId() int64 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

type GetCourierVendorListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*CourierVendor `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCourierVendorListResponse) Reset() {
	*x = GetCourierVendorListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCourierVendorListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourierVendorListResponse) ProtoMessage() {}

func (x *GetCourierVendorListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourierVendorListResponse.ProtoReflect.Descriptor instead.
func (*GetCourierVendorListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{126}
}

func (x *GetCourierVendorListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCourierVendorListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCourierVendorListResponse) GetData() []*CourierVendor {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCourierVendorDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetCourierVendorDetailRequest) Reset() {
	*x = GetCourierVendorDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCourierVendorDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourierVendorDetailRequest) ProtoMessage() {}

func (x *GetCourierVendorDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourierVendorDetailRequest.ProtoReflect.Descriptor instead.
func (*GetCourierVendorDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{127}
}

func (x *GetCourierVendorDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetCourierVendorDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetCourierVendorDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *CourierVendor `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCourierVendorDetailResponse) Reset() {
	*x = GetCourierVendorDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCourierVendorDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourierVendorDetailResponse) ProtoMessage() {}

func (x *GetCourierVendorDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourierVendorDetailResponse.ProtoReflect.Descriptor instead.
func (*GetCourierVendorDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{128}
}

func (x *GetCourierVendorDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCourierVendorDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCourierVendorDetailResponse) GetData() *CourierVendor {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCourierVendorGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit                int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status               int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search               string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy              string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Locncode             string `protobuf:"bytes,6,opt,name=locncode,proto3" json:"locncode,omitempty"`
	GnlCourierVendorId   string `protobuf:"bytes,7,opt,name=gnl_courier_vendor_id,json=gnlCourierVendorId,proto3" json:"gnl_courier_vendor_id,omitempty"`
	GnlCourierVendorName string `protobuf:"bytes,8,opt,name=gnl_courier_vendor_name,json=gnlCourierVendorName,proto3" json:"gnl_courier_vendor_name,omitempty"`
	Inactive             int32  `protobuf:"varint,9,opt,name=inactive,proto3" json:"inactive,omitempty"`
}

func (x *GetCourierVendorGPListRequest) Reset() {
	*x = GetCourierVendorGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCourierVendorGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourierVendorGPListRequest) ProtoMessage() {}

func (x *GetCourierVendorGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourierVendorGPListRequest.ProtoReflect.Descriptor instead.
func (*GetCourierVendorGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{129}
}

func (x *GetCourierVendorGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCourierVendorGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCourierVendorGPListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetCourierVendorGPListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetCourierVendorGPListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetCourierVendorGPListRequest) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *GetCourierVendorGPListRequest) GetGnlCourierVendorId() string {
	if x != nil {
		return x.GnlCourierVendorId
	}
	return ""
}

func (x *GetCourierVendorGPListRequest) GetGnlCourierVendorName() string {
	if x != nil {
		return x.GnlCourierVendorName
	}
	return ""
}

func (x *GetCourierVendorGPListRequest) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

type GetCourierVendorGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCourierVendorGPDetailRequest) Reset() {
	*x = GetCourierVendorGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCourierVendorGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourierVendorGPDetailRequest) ProtoMessage() {}

func (x *GetCourierVendorGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourierVendorGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetCourierVendorGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{130}
}

func (x *GetCourierVendorGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetCourierVendorGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32              `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32              `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32              `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32              `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*CourierVendorGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool               `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string           `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string             `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetCourierVendorGPResponse) Reset() {
	*x = GetCourierVendorGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCourierVendorGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourierVendorGPResponse) ProtoMessage() {}

func (x *GetCourierVendorGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourierVendorGPResponse.ProtoReflect.Descriptor instead.
func (*GetCourierVendorGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{131}
}

func (x *GetCourierVendorGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetCourierVendorGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetCourierVendorGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetCourierVendorGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetCourierVendorGPResponse) GetData() []*CourierVendorGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetCourierVendorGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetCourierVendorGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetCourierVendorGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetWrtListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit    int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Search   string `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
	RegionId int64  `protobuf:"varint,4,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (x *GetWrtListRequest) Reset() {
	*x = GetWrtListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWrtListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWrtListRequest) ProtoMessage() {}

func (x *GetWrtListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWrtListRequest.ProtoReflect.Descriptor instead.
func (*GetWrtListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{132}
}

func (x *GetWrtListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetWrtListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetWrtListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetWrtListRequest) GetRegionId() int64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

type GetWrtListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*Wrt `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetWrtListResponse) Reset() {
	*x = GetWrtListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWrtListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWrtListResponse) ProtoMessage() {}

func (x *GetWrtListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWrtListResponse.ProtoReflect.Descriptor instead.
func (*GetWrtListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{133}
}

func (x *GetWrtListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetWrtListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetWrtListResponse) GetData() []*Wrt {
	if x != nil {
		return x.Data
	}
	return nil
}

type Customer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code                       string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	ReferralCode               string                 `protobuf:"bytes,3,opt,name=referral_code,json=referralCode,proto3" json:"referral_code,omitempty"`
	Name                       string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Gender                     int32                  `protobuf:"varint,5,opt,name=Gender,proto3" json:"Gender,omitempty"`
	BirthDate                  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	PicName                    string                 `protobuf:"bytes,7,opt,name=pic_name,json=picName,proto3" json:"pic_name,omitempty"`
	PhoneNumber                string                 `protobuf:"bytes,8,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	AltPhoneNumber             string                 `protobuf:"bytes,9,opt,name=alt_phone_number,json=altPhoneNumber,proto3" json:"alt_phone_number,omitempty"`
	Email                      string                 `protobuf:"bytes,10,opt,name=email,proto3" json:"email,omitempty"`
	Password                   string                 `protobuf:"bytes,11,opt,name=password,proto3" json:"password,omitempty"`
	BillingAddress             string                 `protobuf:"bytes,12,opt,name=billing_address,json=billingAddress,proto3" json:"billing_address,omitempty"`
	Note                       string                 `protobuf:"bytes,13,opt,name=Note,proto3" json:"Note,omitempty"`
	ReferenceInfo              string                 `protobuf:"bytes,14,opt,name=reference_info,json=referenceInfo,proto3" json:"reference_info,omitempty"`
	TagCustomer                string                 `protobuf:"bytes,15,opt,name=tag_customer,json=tagCustomer,proto3" json:"tag_customer,omitempty"`
	Status                     int32                  `protobuf:"varint,16,opt,name=status,proto3" json:"status,omitempty"`
	Suspended                  int32                  `protobuf:"varint,17,opt,name=suspended,proto3" json:"suspended,omitempty"`
	UpgradeStatus              int32                  `protobuf:"varint,18,opt,name=upgrade_status,json=upgradeStatus,proto3" json:"upgrade_status,omitempty"`
	CustomerGroup              int32                  `protobuf:"varint,19,opt,name=customer_group,json=customerGroup,proto3" json:"customer_group,omitempty"`
	TagCustomerName            string                 `protobuf:"bytes,20,opt,name=tag_customer_name,json=tagCustomerName,proto3" json:"tag_customer_name,omitempty"`
	ReferrerCode               string                 `protobuf:"bytes,21,opt,name=referrer_code,json=referrerCode,proto3" json:"referrer_code,omitempty"`
	CreatedAt                  *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CreatedBy                  int64                  `protobuf:"varint,23,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	LastUpdatedAt              *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=last_updated_at,json=lastUpdatedAt,proto3" json:"last_updated_at,omitempty"`
	LastUpdatedBy              int64                  `protobuf:"varint,25,opt,name=last_updated_by,json=lastUpdatedBy,proto3" json:"last_updated_by,omitempty"`
	TotalPoint                 float64                `protobuf:"fixed64,26,opt,name=total_point,json=totalPoint,proto3" json:"total_point,omitempty"`
	CustomerTypeCreditLimit    int32                  `protobuf:"varint,27,opt,name=customer_type_credit_limit,json=customerTypeCreditLimit,proto3" json:"customer_type_credit_limit,omitempty"`
	EarnedPoint                float64                `protobuf:"fixed64,28,opt,name=earned_point,json=earnedPoint,proto3" json:"earned_point,omitempty"`
	RedeemedPoint              float64                `protobuf:"fixed64,29,opt,name=redeemed_point,json=redeemedPoint,proto3" json:"redeemed_point,omitempty"`
	CustomCreditLimit          int32                  `protobuf:"varint,30,opt,name=custom_credit_limit,json=customCreditLimit,proto3" json:"custom_credit_limit,omitempty"`
	CreditLimitAmount          float64                `protobuf:"fixed64,31,opt,name=credit_limit_amount,json=creditLimitAmount,proto3" json:"credit_limit_amount,omitempty"`
	ProfileCode                string                 `protobuf:"bytes,32,opt,name=profile_code,json=profileCode,proto3" json:"profile_code,omitempty"`
	RemainingCreditLimitAmount float64                `protobuf:"fixed64,33,opt,name=remaining_credit_limit_amount,json=remainingCreditLimitAmount,proto3" json:"remaining_credit_limit_amount,omitempty"`
	AverageSales               float64                `protobuf:"fixed64,34,opt,name=average_sales,json=averageSales,proto3" json:"average_sales,omitempty"`
	RemainingOutstanding       float64                `protobuf:"fixed64,35,opt,name=remaining_outstanding,json=remainingOutstanding,proto3" json:"remaining_outstanding,omitempty"`
	OverdueDebt                float64                `protobuf:"fixed64,36,opt,name=OverdueDebt,proto3" json:"OverdueDebt,omitempty"`
	KTPPhotosUrl               string                 `protobuf:"bytes,37,opt,name=KTPPhotosUrl,proto3" json:"KTPPhotosUrl,omitempty"`
	MerchantPhotosUrl          string                 `protobuf:"bytes,38,opt,name=MerchantPhotosUrl,proto3" json:"MerchantPhotosUrl,omitempty"`
	KTPPhotosUrlArr            []string               `protobuf:"bytes,39,rep,name=KTPPhotosUrlArr,proto3" json:"KTPPhotosUrlArr,omitempty"`
	MerchantPhotosUrlArr       []string               `protobuf:"bytes,40,rep,name=MerchantPhotosUrlArr,proto3" json:"MerchantPhotosUrlArr,omitempty"`
	MembershipLevelID          int64                  `protobuf:"varint,41,opt,name=MembershipLevelID,proto3" json:"MembershipLevelID,omitempty"`
	MembershipCheckpointID     int64                  `protobuf:"varint,42,opt,name=MembershipCheckpointID,proto3" json:"MembershipCheckpointID,omitempty"`
	MembershipRewardID         int64                  `protobuf:"varint,43,opt,name=MembershipRewardID,proto3" json:"MembershipRewardID,omitempty"`
	MembershipRewardAmount     float64                `protobuf:"fixed64,44,opt,name=MembershipRewardAmount,proto3" json:"MembershipRewardAmount,omitempty"`
	TermPaymentSlsId           int64                  `protobuf:"varint,45,opt,name=term_payment_sls_id,json=termPaymentSlsId,proto3" json:"term_payment_sls_id,omitempty"`
	BirthDateString            string                 `protobuf:"bytes,46,opt,name=birth_date_string,json=birthDateString,proto3" json:"birth_date_string,omitempty"`
	CustomerTypeId             string                 `protobuf:"bytes,47,opt,name=customer_type_id,json=customerTypeId,proto3" json:"customer_type_id,omitempty"`
}

func (x *Customer) Reset() {
	*x = Customer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Customer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Customer) ProtoMessage() {}

func (x *Customer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Customer.ProtoReflect.Descriptor instead.
func (*Customer) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{134}
}

func (x *Customer) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Customer) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Customer) GetReferralCode() string {
	if x != nil {
		return x.ReferralCode
	}
	return ""
}

func (x *Customer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Customer) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *Customer) GetBirthDate() *timestamppb.Timestamp {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

func (x *Customer) GetPicName() string {
	if x != nil {
		return x.PicName
	}
	return ""
}

func (x *Customer) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *Customer) GetAltPhoneNumber() string {
	if x != nil {
		return x.AltPhoneNumber
	}
	return ""
}

func (x *Customer) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Customer) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Customer) GetBillingAddress() string {
	if x != nil {
		return x.BillingAddress
	}
	return ""
}

func (x *Customer) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *Customer) GetReferenceInfo() string {
	if x != nil {
		return x.ReferenceInfo
	}
	return ""
}

func (x *Customer) GetTagCustomer() string {
	if x != nil {
		return x.TagCustomer
	}
	return ""
}

func (x *Customer) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Customer) GetSuspended() int32 {
	if x != nil {
		return x.Suspended
	}
	return 0
}

func (x *Customer) GetUpgradeStatus() int32 {
	if x != nil {
		return x.UpgradeStatus
	}
	return 0
}

func (x *Customer) GetCustomerGroup() int32 {
	if x != nil {
		return x.CustomerGroup
	}
	return 0
}

func (x *Customer) GetTagCustomerName() string {
	if x != nil {
		return x.TagCustomerName
	}
	return ""
}

func (x *Customer) GetReferrerCode() string {
	if x != nil {
		return x.ReferrerCode
	}
	return ""
}

func (x *Customer) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Customer) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *Customer) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *Customer) GetLastUpdatedBy() int64 {
	if x != nil {
		return x.LastUpdatedBy
	}
	return 0
}

func (x *Customer) GetTotalPoint() float64 {
	if x != nil {
		return x.TotalPoint
	}
	return 0
}

func (x *Customer) GetCustomerTypeCreditLimit() int32 {
	if x != nil {
		return x.CustomerTypeCreditLimit
	}
	return 0
}

func (x *Customer) GetEarnedPoint() float64 {
	if x != nil {
		return x.EarnedPoint
	}
	return 0
}

func (x *Customer) GetRedeemedPoint() float64 {
	if x != nil {
		return x.RedeemedPoint
	}
	return 0
}

func (x *Customer) GetCustomCreditLimit() int32 {
	if x != nil {
		return x.CustomCreditLimit
	}
	return 0
}

func (x *Customer) GetCreditLimitAmount() float64 {
	if x != nil {
		return x.CreditLimitAmount
	}
	return 0
}

func (x *Customer) GetProfileCode() string {
	if x != nil {
		return x.ProfileCode
	}
	return ""
}

func (x *Customer) GetRemainingCreditLimitAmount() float64 {
	if x != nil {
		return x.RemainingCreditLimitAmount
	}
	return 0
}

func (x *Customer) GetAverageSales() float64 {
	if x != nil {
		return x.AverageSales
	}
	return 0
}

func (x *Customer) GetRemainingOutstanding() float64 {
	if x != nil {
		return x.RemainingOutstanding
	}
	return 0
}

func (x *Customer) GetOverdueDebt() float64 {
	if x != nil {
		return x.OverdueDebt
	}
	return 0
}

func (x *Customer) GetKTPPhotosUrl() string {
	if x != nil {
		return x.KTPPhotosUrl
	}
	return ""
}

func (x *Customer) GetMerchantPhotosUrl() string {
	if x != nil {
		return x.MerchantPhotosUrl
	}
	return ""
}

func (x *Customer) GetKTPPhotosUrlArr() []string {
	if x != nil {
		return x.KTPPhotosUrlArr
	}
	return nil
}

func (x *Customer) GetMerchantPhotosUrlArr() []string {
	if x != nil {
		return x.MerchantPhotosUrlArr
	}
	return nil
}

func (x *Customer) GetMembershipLevelID() int64 {
	if x != nil {
		return x.MembershipLevelID
	}
	return 0
}

func (x *Customer) GetMembershipCheckpointID() int64 {
	if x != nil {
		return x.MembershipCheckpointID
	}
	return 0
}

func (x *Customer) GetMembershipRewardID() int64 {
	if x != nil {
		return x.MembershipRewardID
	}
	return 0
}

func (x *Customer) GetMembershipRewardAmount() float64 {
	if x != nil {
		return x.MembershipRewardAmount
	}
	return 0
}

func (x *Customer) GetTermPaymentSlsId() int64 {
	if x != nil {
		return x.TermPaymentSlsId
	}
	return 0
}

func (x *Customer) GetBirthDateString() string {
	if x != nil {
		return x.BirthDateString
	}
	return ""
}

func (x *Customer) GetCustomerTypeId() string {
	if x != nil {
		return x.CustomerTypeId
	}
	return ""
}

type GetCustomerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit          int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset         int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status         int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search         string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy        string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	CustomerTypeId int64  `protobuf:"varint,6,opt,name=customer_type_id,json=customerTypeId,proto3" json:"customer_type_id,omitempty"`
	ReferrerId     int64  `protobuf:"varint,7,opt,name=referrer_id,json=referrerId,proto3" json:"referrer_id,omitempty"`
}

func (x *GetCustomerListRequest) Reset() {
	*x = GetCustomerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerListRequest) ProtoMessage() {}

func (x *GetCustomerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerListRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{135}
}

func (x *GetCustomerListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCustomerListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCustomerListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetCustomerListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetCustomerListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetCustomerListRequest) GetCustomerTypeId() int64 {
	if x != nil {
		return x.CustomerTypeId
	}
	return 0
}

func (x *GetCustomerListRequest) GetReferrerId() int64 {
	if x != nil {
		return x.ReferrerId
	}
	return 0
}

type GetVehicleProfileListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit           int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset          int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status          int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search          string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy         string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	CourierVendorId int64  `protobuf:"varint,6,opt,name=courier_vendor_id,json=courierVendorId,proto3" json:"courier_vendor_id,omitempty"`
}

func (x *GetVehicleProfileListRequest) Reset() {
	*x = GetVehicleProfileListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVehicleProfileListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVehicleProfileListRequest) ProtoMessage() {}

func (x *GetVehicleProfileListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVehicleProfileListRequest.ProtoReflect.Descriptor instead.
func (*GetVehicleProfileListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{136}
}

func (x *GetVehicleProfileListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetVehicleProfileListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetVehicleProfileListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetVehicleProfileListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetVehicleProfileListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetVehicleProfileListRequest) GetCourierVendorId() int64 {
	if x != nil {
		return x.CourierVendorId
	}
	return 0
}

type GetVehicleProfileListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*VehicleProfile `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetVehicleProfileListResponse) Reset() {
	*x = GetVehicleProfileListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVehicleProfileListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVehicleProfileListResponse) ProtoMessage() {}

func (x *GetVehicleProfileListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVehicleProfileListResponse.ProtoReflect.Descriptor instead.
func (*GetVehicleProfileListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{137}
}

func (x *GetVehicleProfileListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetVehicleProfileListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetVehicleProfileListResponse) GetData() []*VehicleProfile {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetVehicleProfileDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetVehicleProfileDetailRequest) Reset() {
	*x = GetVehicleProfileDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVehicleProfileDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVehicleProfileDetailRequest) ProtoMessage() {}

func (x *GetVehicleProfileDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVehicleProfileDetailRequest.ProtoReflect.Descriptor instead.
func (*GetVehicleProfileDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{138}
}

func (x *GetVehicleProfileDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetVehicleProfileDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetVehicleProfileDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *VehicleProfile `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetVehicleProfileDetailResponse) Reset() {
	*x = GetVehicleProfileDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVehicleProfileDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVehicleProfileDetailResponse) ProtoMessage() {}

func (x *GetVehicleProfileDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVehicleProfileDetailResponse.ProtoReflect.Descriptor instead.
func (*GetVehicleProfileDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{139}
}

func (x *GetVehicleProfileDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetVehicleProfileDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetVehicleProfileDetailResponse) GetData() *VehicleProfile {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetVehicleProfileGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit              int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset             int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	GnlCourierVendorId string `protobuf:"bytes,3,opt,name=gnl_courier_vendor_id,json=gnlCourierVendorId,proto3" json:"gnl_courier_vendor_id,omitempty"`
	Orderby            string `protobuf:"bytes,4,opt,name=orderby,proto3" json:"orderby,omitempty"`
	Locncode           string `protobuf:"bytes,5,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Inactive           int32  `protobuf:"varint,6,opt,name=inactive,proto3" json:"inactive,omitempty"`
	GnlDescription100  string `protobuf:"bytes,7,opt,name=gnl_description100,json=gnlDescription100,proto3" json:"gnl_description100,omitempty"`
}

func (x *GetVehicleProfileGPListRequest) Reset() {
	*x = GetVehicleProfileGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVehicleProfileGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVehicleProfileGPListRequest) ProtoMessage() {}

func (x *GetVehicleProfileGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVehicleProfileGPListRequest.ProtoReflect.Descriptor instead.
func (*GetVehicleProfileGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{140}
}

func (x *GetVehicleProfileGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetVehicleProfileGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetVehicleProfileGPListRequest) GetGnlCourierVendorId() string {
	if x != nil {
		return x.GnlCourierVendorId
	}
	return ""
}

func (x *GetVehicleProfileGPListRequest) GetOrderby() string {
	if x != nil {
		return x.Orderby
	}
	return ""
}

func (x *GetVehicleProfileGPListRequest) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *GetVehicleProfileGPListRequest) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *GetVehicleProfileGPListRequest) GetGnlDescription100() string {
	if x != nil {
		return x.GnlDescription100
	}
	return ""
}

type GetVehicleProfileGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetVehicleProfileGPDetailRequest) Reset() {
	*x = GetVehicleProfileGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVehicleProfileGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVehicleProfileGPDetailRequest) ProtoMessage() {}

func (x *GetVehicleProfileGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVehicleProfileGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetVehicleProfileGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{141}
}

func (x *GetVehicleProfileGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetVehicleProfileGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32               `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32               `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32               `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32               `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*VehicleProfileGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool                `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string            `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string              `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetVehicleProfileGPResponse) Reset() {
	*x = GetVehicleProfileGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVehicleProfileGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVehicleProfileGPResponse) ProtoMessage() {}

func (x *GetVehicleProfileGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVehicleProfileGPResponse.ProtoReflect.Descriptor instead.
func (*GetVehicleProfileGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{142}
}

func (x *GetVehicleProfileGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetVehicleProfileGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetVehicleProfileGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetVehicleProfileGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetVehicleProfileGPResponse) GetData() []*VehicleProfileGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetVehicleProfileGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetVehicleProfileGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetVehicleProfileGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetCustomerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*Customer `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCustomerListResponse) Reset() {
	*x = GetCustomerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerListResponse) ProtoMessage() {}

func (x *GetCustomerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerListResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{143}
}

func (x *GetCustomerListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCustomerListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCustomerListResponse) GetData() []*Customer {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCustomerDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code        string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Limit       int32  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset      int32  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Status      int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Search      string `protobuf:"bytes,6,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy     string `protobuf:"bytes,7,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	PhoneNumber string `protobuf:"bytes,8,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (x *GetCustomerDetailRequest) Reset() {
	*x = GetCustomerDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerDetailRequest) ProtoMessage() {}

func (x *GetCustomerDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerDetailRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{144}
}

func (x *GetCustomerDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetCustomerDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetCustomerDetailRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCustomerDetailRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCustomerDetailRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetCustomerDetailRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetCustomerDetailRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetCustomerDetailRequest) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

type GetCustomerDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Customer `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCustomerDetailResponse) Reset() {
	*x = GetCustomerDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerDetailResponse) ProtoMessage() {}

func (x *GetCustomerDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerDetailResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{145}
}

func (x *GetCustomerDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCustomerDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCustomerDetailResponse) GetData() *Customer {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetWrtDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetWrtDetailRequest) Reset() {
	*x = GetWrtDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWrtDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWrtDetailRequest) ProtoMessage() {}

func (x *GetWrtDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWrtDetailRequest.ProtoReflect.Descriptor instead.
func (*GetWrtDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{146}
}

func (x *GetWrtDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetWrtDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Wrt   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetWrtDetailResponse) Reset() {
	*x = GetWrtDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWrtDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWrtDetailResponse) ProtoMessage() {}

func (x *GetWrtDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWrtDetailResponse.ProtoReflect.Descriptor instead.
func (*GetWrtDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{147}
}

func (x *GetWrtDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetWrtDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetWrtDetailResponse) GetData() *Wrt {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetOrderTypeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search  string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetOrderTypeListRequest) Reset() {
	*x = GetOrderTypeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderTypeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderTypeListRequest) ProtoMessage() {}

func (x *GetOrderTypeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderTypeListRequest.ProtoReflect.Descriptor instead.
func (*GetOrderTypeListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{148}
}

func (x *GetOrderTypeListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetOrderTypeListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetOrderTypeListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetOrderTypeListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetOrderTypeListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetOrderTypeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*OrderType `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetOrderTypeListResponse) Reset() {
	*x = GetOrderTypeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderTypeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderTypeListResponse) ProtoMessage() {}

func (x *GetOrderTypeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderTypeListResponse.ProtoReflect.Descriptor instead.
func (*GetOrderTypeListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{149}
}

func (x *GetOrderTypeListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetOrderTypeListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetOrderTypeListResponse) GetData() []*OrderType {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetOrderTypeDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetOrderTypeDetailRequest) Reset() {
	*x = GetOrderTypeDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderTypeDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderTypeDetailRequest) ProtoMessage() {}

func (x *GetOrderTypeDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderTypeDetailRequest.ProtoReflect.Descriptor instead.
func (*GetOrderTypeDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{150}
}

func (x *GetOrderTypeDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetOrderTypeDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetOrderTypeDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *OrderType `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetOrderTypeDetailResponse) Reset() {
	*x = GetOrderTypeDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderTypeDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderTypeDetailResponse) ProtoMessage() {}

func (x *GetOrderTypeDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderTypeDetailResponse.ProtoReflect.Descriptor instead.
func (*GetOrderTypeDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{151}
}

func (x *GetOrderTypeDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetOrderTypeDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetOrderTypeDetailResponse) GetData() *OrderType {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSalesPaymentTermListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search  string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetSalesPaymentTermListRequest) Reset() {
	*x = GetSalesPaymentTermListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaymentTermListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaymentTermListRequest) ProtoMessage() {}

func (x *GetSalesPaymentTermListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaymentTermListRequest.ProtoReflect.Descriptor instead.
func (*GetSalesPaymentTermListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{152}
}

func (x *GetSalesPaymentTermListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSalesPaymentTermListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSalesPaymentTermListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetSalesPaymentTermListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetSalesPaymentTermListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetSalesPaymentTermListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*SalesPaymentTerm `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSalesPaymentTermListResponse) Reset() {
	*x = GetSalesPaymentTermListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaymentTermListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaymentTermListResponse) ProtoMessage() {}

func (x *GetSalesPaymentTermListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaymentTermListResponse.ProtoReflect.Descriptor instead.
func (*GetSalesPaymentTermListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{153}
}

func (x *GetSalesPaymentTermListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSalesPaymentTermListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSalesPaymentTermListResponse) GetData() []*SalesPaymentTerm {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSalesPaymentTermDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetSalesPaymentTermDetailRequest) Reset() {
	*x = GetSalesPaymentTermDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaymentTermDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaymentTermDetailRequest) ProtoMessage() {}

func (x *GetSalesPaymentTermDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaymentTermDetailRequest.ProtoReflect.Descriptor instead.
func (*GetSalesPaymentTermDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{154}
}

func (x *GetSalesPaymentTermDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetSalesPaymentTermDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetSalesPaymentTermDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *SalesPaymentTerm `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSalesPaymentTermDetailResponse) Reset() {
	*x = GetSalesPaymentTermDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaymentTermDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaymentTermDetailResponse) ProtoMessage() {}

func (x *GetSalesPaymentTermDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaymentTermDetailResponse.ProtoReflect.Descriptor instead.
func (*GetSalesPaymentTermDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{155}
}

func (x *GetSalesPaymentTermDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSalesPaymentTermDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSalesPaymentTermDetailResponse) GetData() *SalesPaymentTerm {
	if x != nil {
		return x.Data
	}
	return nil
}

type EmergencyCourierRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EmergencyCourierRequest) Reset() {
	*x = EmergencyCourierRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmergencyCourierRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmergencyCourierRequest) ProtoMessage() {}

func (x *EmergencyCourierRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmergencyCourierRequest.ProtoReflect.Descriptor instead.
func (*EmergencyCourierRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{156}
}

func (x *EmergencyCourierRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type EmergencyCourierResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code             int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	GnlEmergencymode int32  `protobuf:"varint,2,opt,name=gnl_emergencymode,json=gnlEmergencymode,proto3" json:"gnl_emergencymode,omitempty"`
	Message          string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EmergencyCourierResponse) Reset() {
	*x = EmergencyCourierResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmergencyCourierResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmergencyCourierResponse) ProtoMessage() {}

func (x *EmergencyCourierResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmergencyCourierResponse.ProtoReflect.Descriptor instead.
func (*EmergencyCourierResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{157}
}

func (x *EmergencyCourierResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *EmergencyCourierResponse) GetGnlEmergencymode() int32 {
	if x != nil {
		return x.GnlEmergencymode
	}
	return 0
}

func (x *EmergencyCourierResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Division struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code   string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Note   string `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
	Status int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Division) Reset() {
	*x = Division{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Division) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Division) ProtoMessage() {}

func (x *Division) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Division.ProtoReflect.Descriptor instead.
func (*Division) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{158}
}

func (x *Division) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Division) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Division) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Division) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *Division) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type GetDivisionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search  string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetDivisionListRequest) Reset() {
	*x = GetDivisionListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDivisionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDivisionListRequest) ProtoMessage() {}

func (x *GetDivisionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDivisionListRequest.ProtoReflect.Descriptor instead.
func (*GetDivisionListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{159}
}

func (x *GetDivisionListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetDivisionListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetDivisionListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetDivisionListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetDivisionListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetDivisionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*Division `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDivisionListResponse) Reset() {
	*x = GetDivisionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDivisionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDivisionListResponse) ProtoMessage() {}

func (x *GetDivisionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDivisionListResponse.ProtoReflect.Descriptor instead.
func (*GetDivisionListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{160}
}

func (x *GetDivisionListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetDivisionListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetDivisionListResponse) GetData() []*Division {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetDivisionDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetDivisionDetailRequest) Reset() {
	*x = GetDivisionDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDivisionDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDivisionDetailRequest) ProtoMessage() {}

func (x *GetDivisionDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDivisionDetailRequest.ProtoReflect.Descriptor instead.
func (*GetDivisionDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{161}
}

func (x *GetDivisionDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetDivisionDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetDivisionDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Division `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDivisionDetailResponse) Reset() {
	*x = GetDivisionDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDivisionDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDivisionDetailResponse) ProtoMessage() {}

func (x *GetDivisionDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDivisionDetailResponse.ProtoReflect.Descriptor instead.
func (*GetDivisionDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{162}
}

func (x *GetDivisionDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetDivisionDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetDivisionDetailResponse) GetData() *Division {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAddressListWithExcludedIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit         int32   `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status        int32   `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search        string  `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy       string  `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	ArchetypeId   int64   `protobuf:"varint,6,opt,name=archetype_id,json=archetypeId,proto3" json:"archetype_id,omitempty"`
	AdmDivisionId int64   `protobuf:"varint,7,opt,name=adm_division_id,json=admDivisionId,proto3" json:"adm_division_id,omitempty"`
	SiteId        int64   `protobuf:"varint,8,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	SalespersonId int64   `protobuf:"varint,9,opt,name=salesperson_id,json=salespersonId,proto3" json:"salesperson_id,omitempty"`
	TerritoryId   int64   `protobuf:"varint,10,opt,name=territory_id,json=territoryId,proto3" json:"territory_id,omitempty"`
	TaxScheduleId int64   `protobuf:"varint,11,opt,name=tax_schedule_id,json=taxScheduleId,proto3" json:"tax_schedule_id,omitempty"`
	ExcludedIds   []int64 `protobuf:"varint,12,rep,packed,name=excluded_ids,json=excludedIds,proto3" json:"excluded_ids,omitempty"`
}

func (x *GetAddressListWithExcludedIdsRequest) Reset() {
	*x = GetAddressListWithExcludedIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressListWithExcludedIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressListWithExcludedIdsRequest) ProtoMessage() {}

func (x *GetAddressListWithExcludedIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressListWithExcludedIdsRequest.ProtoReflect.Descriptor instead.
func (*GetAddressListWithExcludedIdsRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{163}
}

func (x *GetAddressListWithExcludedIdsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAddressListWithExcludedIdsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAddressListWithExcludedIdsRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetAddressListWithExcludedIdsRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetAddressListWithExcludedIdsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetAddressListWithExcludedIdsRequest) GetArchetypeId() int64 {
	if x != nil {
		return x.ArchetypeId
	}
	return 0
}

func (x *GetAddressListWithExcludedIdsRequest) GetAdmDivisionId() int64 {
	if x != nil {
		return x.AdmDivisionId
	}
	return 0
}

func (x *GetAddressListWithExcludedIdsRequest) GetSiteId() int64 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *GetAddressListWithExcludedIdsRequest) GetSalespersonId() int64 {
	if x != nil {
		return x.SalespersonId
	}
	return 0
}

func (x *GetAddressListWithExcludedIdsRequest) GetTerritoryId() int64 {
	if x != nil {
		return x.TerritoryId
	}
	return 0
}

func (x *GetAddressListWithExcludedIdsRequest) GetTaxScheduleId() int64 {
	if x != nil {
		return x.TaxScheduleId
	}
	return 0
}

func (x *GetAddressListWithExcludedIdsRequest) GetExcludedIds() []int64 {
	if x != nil {
		return x.ExcludedIds
	}
	return nil
}

type District struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code          string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Value         string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Name          string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Note          string `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
	Status        int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	StatusConvert string `protobuf:"bytes,7,opt,name=status_convert,json=statusConvert,proto3" json:"status_convert,omitempty"`
}

func (x *District) Reset() {
	*x = District{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *District) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*District) ProtoMessage() {}

func (x *District) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use District.ProtoReflect.Descriptor instead.
func (*District) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{164}
}

func (x *District) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *District) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *District) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *District) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *District) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *District) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *District) GetStatusConvert() string {
	if x != nil {
		return x.StatusConvert
	}
	return ""
}

type GetDistrictListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search  string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetDistrictListRequest) Reset() {
	*x = GetDistrictListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDistrictListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDistrictListRequest) ProtoMessage() {}

func (x *GetDistrictListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDistrictListRequest.ProtoReflect.Descriptor instead.
func (*GetDistrictListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{165}
}

func (x *GetDistrictListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetDistrictListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetDistrictListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetDistrictListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetDistrictListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetDistrictListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*District `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDistrictListResponse) Reset() {
	*x = GetDistrictListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDistrictListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDistrictListResponse) ProtoMessage() {}

func (x *GetDistrictListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDistrictListResponse.ProtoReflect.Descriptor instead.
func (*GetDistrictListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{166}
}

func (x *GetDistrictListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetDistrictListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetDistrictListResponse) GetData() []*District {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetDistrictDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetDistrictDetailRequest) Reset() {
	*x = GetDistrictDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDistrictDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDistrictDetailRequest) ProtoMessage() {}

func (x *GetDistrictDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDistrictDetailRequest.ProtoReflect.Descriptor instead.
func (*GetDistrictDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{167}
}

func (x *GetDistrictDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetDistrictDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetDistrictDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *District `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDistrictDetailResponse) Reset() {
	*x = GetDistrictDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDistrictDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDistrictDetailResponse) ProtoMessage() {}

func (x *GetDistrictDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDistrictDetailResponse.ProtoReflect.Descriptor instead.
func (*GetDistrictDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{168}
}

func (x *GetDistrictDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetDistrictDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetDistrictDetailResponse) GetData() *District {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetDistrictInIdsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids     []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Limit   int32   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32   `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32   `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Search  string  `protobuf:"bytes,5,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string  `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetDistrictInIdsListRequest) Reset() {
	*x = GetDistrictInIdsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDistrictInIdsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDistrictInIdsListRequest) ProtoMessage() {}

func (x *GetDistrictInIdsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDistrictInIdsListRequest.ProtoReflect.Descriptor instead.
func (*GetDistrictInIdsListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{169}
}

func (x *GetDistrictInIdsListRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetDistrictInIdsListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetDistrictInIdsListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetDistrictInIdsListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetDistrictInIdsListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetDistrictInIdsListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type Bank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code            string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name            string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Note            string `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
	Status          int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Value           string `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	ImageUrl        string `protobuf:"bytes,7,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	PaymentGuideUrl string `protobuf:"bytes,8,opt,name=payment_guide_url,json=paymentGuideUrl,proto3" json:"payment_guide_url,omitempty"`
	PublishIva      int32  `protobuf:"varint,9,opt,name=publish_iva,json=publishIva,proto3" json:"publish_iva,omitempty"`
	PublishFva      int32  `protobuf:"varint,10,opt,name=publish_fva,json=publishFva,proto3" json:"publish_fva,omitempty"`
}

func (x *Bank) Reset() {
	*x = Bank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bank) ProtoMessage() {}

func (x *Bank) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bank.ProtoReflect.Descriptor instead.
func (*Bank) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{170}
}

func (x *Bank) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Bank) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Bank) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Bank) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *Bank) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Bank) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Bank) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Bank) GetPaymentGuideUrl() string {
	if x != nil {
		return x.PaymentGuideUrl
	}
	return ""
}

func (x *Bank) GetPublishIva() int32 {
	if x != nil {
		return x.PublishIva
	}
	return 0
}

func (x *Bank) GetPublishFva() int32 {
	if x != nil {
		return x.PublishFva
	}
	return 0
}

type GetBankListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32   `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  []int32 `protobuf:"varint,3,rep,packed,name=status,proto3" json:"status,omitempty"`
	Search  string  `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string  `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetBankListRequest) Reset() {
	*x = GetBankListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBankListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBankListRequest) ProtoMessage() {}

func (x *GetBankListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBankListRequest.ProtoReflect.Descriptor instead.
func (*GetBankListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{171}
}

func (x *GetBankListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetBankListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetBankListRequest) GetStatus() []int32 {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetBankListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetBankListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetBankListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*Bank `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetBankListResponse) Reset() {
	*x = GetBankListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBankListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBankListResponse) ProtoMessage() {}

func (x *GetBankListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBankListResponse.ProtoReflect.Descriptor instead.
func (*GetBankListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{172}
}

func (x *GetBankListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetBankListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetBankListResponse) GetData() []*Bank {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetBankDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetBankDetailRequest) Reset() {
	*x = GetBankDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBankDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBankDetailRequest) ProtoMessage() {}

func (x *GetBankDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBankDetailRequest.ProtoReflect.Descriptor instead.
func (*GetBankDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{173}
}

func (x *GetBankDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetBankDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetBankDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Bank  `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetBankDetailResponse) Reset() {
	*x = GetBankDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBankDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBankDetailResponse) ProtoMessage() {}

func (x *GetBankDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBankDetailResponse.ProtoReflect.Descriptor instead.
func (*GetBankDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{174}
}

func (x *GetBankDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetBankDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetBankDetailResponse) GetData() *Bank {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeliveryFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code           string  `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name           string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Note           string  `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
	Status         int32   `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	MinimumOrder   float64 `protobuf:"fixed64,6,opt,name=minimum_order,json=minimumOrder,proto3" json:"minimum_order,omitempty"`
	DeliveryFee    float64 `protobuf:"fixed64,7,opt,name=delivery_fee,json=deliveryFee,proto3" json:"delivery_fee,omitempty"`
	RegionId       int64   `protobuf:"varint,8,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	CustomerTypeId string  `protobuf:"bytes,9,opt,name=customer_type_id,json=customerTypeId,proto3" json:"customer_type_id,omitempty"`
}

func (x *DeliveryFee) Reset() {
	*x = DeliveryFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryFee) ProtoMessage() {}

func (x *DeliveryFee) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryFee.ProtoReflect.Descriptor instead.
func (*DeliveryFee) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{175}
}

func (x *DeliveryFee) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeliveryFee) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DeliveryFee) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeliveryFee) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *DeliveryFee) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DeliveryFee) GetMinimumOrder() float64 {
	if x != nil {
		return x.MinimumOrder
	}
	return 0
}

func (x *DeliveryFee) GetDeliveryFee() float64 {
	if x != nil {
		return x.DeliveryFee
	}
	return 0
}

func (x *DeliveryFee) GetRegionId() int64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *DeliveryFee) GetCustomerTypeId() string {
	if x != nil {
		return x.CustomerTypeId
	}
	return ""
}

type GetDeliveryFeeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit          int32   `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset         int32   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status         []int32 `protobuf:"varint,3,rep,packed,name=status,proto3" json:"status,omitempty"`
	Search         string  `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy        string  `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	RegionId       int64   `protobuf:"varint,6,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	CustomerTypeId string  `protobuf:"bytes,7,opt,name=customer_type_id,json=customerTypeId,proto3" json:"customer_type_id,omitempty"`
}

func (x *GetDeliveryFeeListRequest) Reset() {
	*x = GetDeliveryFeeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeliveryFeeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeliveryFeeListRequest) ProtoMessage() {}

func (x *GetDeliveryFeeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeliveryFeeListRequest.ProtoReflect.Descriptor instead.
func (*GetDeliveryFeeListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{176}
}

func (x *GetDeliveryFeeListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetDeliveryFeeListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetDeliveryFeeListRequest) GetStatus() []int32 {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetDeliveryFeeListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetDeliveryFeeListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetDeliveryFeeListRequest) GetRegionId() int64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *GetDeliveryFeeListRequest) GetCustomerTypeId() string {
	if x != nil {
		return x.CustomerTypeId
	}
	return ""
}

type GetDeliveryFeeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*DeliveryFee `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDeliveryFeeListResponse) Reset() {
	*x = GetDeliveryFeeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeliveryFeeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeliveryFeeListResponse) ProtoMessage() {}

func (x *GetDeliveryFeeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeliveryFeeListResponse.ProtoReflect.Descriptor instead.
func (*GetDeliveryFeeListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{177}
}

func (x *GetDeliveryFeeListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetDeliveryFeeListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetDeliveryFeeListResponse) GetData() []*DeliveryFee {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeliveryFeeGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnlRegion      string  `protobuf:"bytes,1,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	GnlCustTypeId  string  `protobuf:"bytes,2,opt,name=gnl_cust_type_id,json=gnlCustTypeId,proto3" json:"gnl_cust_type_id,omitempty"`
	Minorqty       int64   `protobuf:"varint,3,opt,name=minorqty,proto3" json:"minorqty,omitempty"`
	GnlDeliveryFee float64 `protobuf:"fixed64,4,opt,name=gnl_delivery_fee,json=gnlDeliveryFee,proto3" json:"gnl_delivery_fee,omitempty"`
}

func (x *DeliveryFeeGP) Reset() {
	*x = DeliveryFeeGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryFeeGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryFeeGP) ProtoMessage() {}

func (x *DeliveryFeeGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryFeeGP.ProtoReflect.Descriptor instead.
func (*DeliveryFeeGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{178}
}

func (x *DeliveryFeeGP) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *DeliveryFeeGP) GetGnlCustTypeId() string {
	if x != nil {
		return x.GnlCustTypeId
	}
	return ""
}

func (x *DeliveryFeeGP) GetMinorqty() int64 {
	if x != nil {
		return x.Minorqty
	}
	return 0
}

func (x *DeliveryFeeGP) GetGnlDeliveryFee() float64 {
	if x != nil {
		return x.GnlDeliveryFee
	}
	return 0
}

type GetDeliveryFeeGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit          int32   `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset         int32   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	GnlRegion      string  `protobuf:"bytes,3,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	GnlCustTypeId  string  `protobuf:"bytes,4,opt,name=gnl_cust_type_id,json=gnlCustTypeId,proto3" json:"gnl_cust_type_id,omitempty"`
	Minorqty       int64   `protobuf:"varint,5,opt,name=minorqty,proto3" json:"minorqty,omitempty"`
	GnlDeliveryFee float64 `protobuf:"fixed64,6,opt,name=gnl_delivery_fee,json=gnlDeliveryFee,proto3" json:"gnl_delivery_fee,omitempty"`
}

func (x *GetDeliveryFeeGPListRequest) Reset() {
	*x = GetDeliveryFeeGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeliveryFeeGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeliveryFeeGPListRequest) ProtoMessage() {}

func (x *GetDeliveryFeeGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeliveryFeeGPListRequest.ProtoReflect.Descriptor instead.
func (*GetDeliveryFeeGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{179}
}

func (x *GetDeliveryFeeGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetDeliveryFeeGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetDeliveryFeeGPListRequest) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *GetDeliveryFeeGPListRequest) GetGnlCustTypeId() string {
	if x != nil {
		return x.GnlCustTypeId
	}
	return ""
}

func (x *GetDeliveryFeeGPListRequest) GetMinorqty() int64 {
	if x != nil {
		return x.Minorqty
	}
	return 0
}

func (x *GetDeliveryFeeGPListRequest) GetGnlDeliveryFee() float64 {
	if x != nil {
		return x.GnlDeliveryFee
	}
	return 0
}

type GetDeliveryFeeGPListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*DeliveryFeeGP `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDeliveryFeeGPListResponse) Reset() {
	*x = GetDeliveryFeeGPListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeliveryFeeGPListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeliveryFeeGPListResponse) ProtoMessage() {}

func (x *GetDeliveryFeeGPListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeliveryFeeGPListResponse.ProtoReflect.Descriptor instead.
func (*GetDeliveryFeeGPListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{180}
}

func (x *GetDeliveryFeeGPListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetDeliveryFeeGPListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetDeliveryFeeGPListResponse) GetData() []*DeliveryFeeGP {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetDeliveryFeeDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code           string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	RegionId       int64  `protobuf:"varint,3,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	CustomerTypeId string `protobuf:"bytes,4,opt,name=customer_type_id,json=customerTypeId,proto3" json:"customer_type_id,omitempty"`
}

func (x *GetDeliveryFeeDetailRequest) Reset() {
	*x = GetDeliveryFeeDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeliveryFeeDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeliveryFeeDetailRequest) ProtoMessage() {}

func (x *GetDeliveryFeeDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeliveryFeeDetailRequest.ProtoReflect.Descriptor instead.
func (*GetDeliveryFeeDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{181}
}

func (x *GetDeliveryFeeDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetDeliveryFeeDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetDeliveryFeeDetailRequest) GetRegionId() int64 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *GetDeliveryFeeDetailRequest) GetCustomerTypeId() string {
	if x != nil {
		return x.CustomerTypeId
	}
	return ""
}

type GetDeliveryFeeDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *DeliveryFee `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDeliveryFeeDetailResponse) Reset() {
	*x = GetDeliveryFeeDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeliveryFeeDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeliveryFeeDetailResponse) ProtoMessage() {}

func (x *GetDeliveryFeeDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeliveryFeeDetailResponse.ProtoReflect.Descriptor instead.
func (*GetDeliveryFeeDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{182}
}

func (x *GetDeliveryFeeDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetDeliveryFeeDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetDeliveryFeeDetailResponse) GetData() *DeliveryFee {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetVendorListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search  string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetVendorListRequest) Reset() {
	*x = GetVendorListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorListRequest) ProtoMessage() {}

func (x *GetVendorListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorListRequest.ProtoReflect.Descriptor instead.
func (*GetVendorListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{183}
}

func (x *GetVendorListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetVendorListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetVendorListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetVendorListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetVendorListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetVendorListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*Vendor `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetVendorListResponse) Reset() {
	*x = GetVendorListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorListResponse) ProtoMessage() {}

func (x *GetVendorListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorListResponse.ProtoReflect.Descriptor instead.
func (*GetVendorListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{184}
}

func (x *GetVendorListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetVendorListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetVendorListResponse) GetData() []*Vendor {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetVendorDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetVendorDetailRequest) Reset() {
	*x = GetVendorDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorDetailRequest) ProtoMessage() {}

func (x *GetVendorDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorDetailRequest.ProtoReflect.Descriptor instead.
func (*GetVendorDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{185}
}

func (x *GetVendorDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetVendorDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetVendorDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Vendor `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetVendorDetailResponse) Reset() {
	*x = GetVendorDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorDetailResponse) ProtoMessage() {}

func (x *GetVendorDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorDetailResponse.ProtoReflect.Descriptor instead.
func (*GetVendorDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{186}
}

func (x *GetVendorDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetVendorDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetVendorDetailResponse) GetData() *Vendor {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetVendorOrganizationListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search  string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetVendorOrganizationListRequest) Reset() {
	*x = GetVendorOrganizationListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorOrganizationListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorOrganizationListRequest) ProtoMessage() {}

func (x *GetVendorOrganizationListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorOrganizationListRequest.ProtoReflect.Descriptor instead.
func (*GetVendorOrganizationListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{187}
}

func (x *GetVendorOrganizationListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetVendorOrganizationListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetVendorOrganizationListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetVendorOrganizationListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetVendorOrganizationListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetVendorOrganizationListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*VendorOrganization `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetVendorOrganizationListResponse) Reset() {
	*x = GetVendorOrganizationListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorOrganizationListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorOrganizationListResponse) ProtoMessage() {}

func (x *GetVendorOrganizationListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorOrganizationListResponse.ProtoReflect.Descriptor instead.
func (*GetVendorOrganizationListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{188}
}

func (x *GetVendorOrganizationListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetVendorOrganizationListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetVendorOrganizationListResponse) GetData() []*VendorOrganization {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetVendorOrganizationDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetVendorOrganizationDetailRequest) Reset() {
	*x = GetVendorOrganizationDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorOrganizationDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorOrganizationDetailRequest) ProtoMessage() {}

func (x *GetVendorOrganizationDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorOrganizationDetailRequest.ProtoReflect.Descriptor instead.
func (*GetVendorOrganizationDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{189}
}

func (x *GetVendorOrganizationDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetVendorOrganizationDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetVendorOrganizationDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *VendorOrganization `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetVendorOrganizationDetailResponse) Reset() {
	*x = GetVendorOrganizationDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorOrganizationDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorOrganizationDetailResponse) ProtoMessage() {}

func (x *GetVendorOrganizationDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorOrganizationDetailResponse.ProtoReflect.Descriptor instead.
func (*GetVendorOrganizationDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{190}
}

func (x *GetVendorOrganizationDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetVendorOrganizationDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetVendorOrganizationDetailResponse) GetData() *VendorOrganization {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetVendorClassificationListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search  string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetVendorClassificationListRequest) Reset() {
	*x = GetVendorClassificationListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorClassificationListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorClassificationListRequest) ProtoMessage() {}

func (x *GetVendorClassificationListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorClassificationListRequest.ProtoReflect.Descriptor instead.
func (*GetVendorClassificationListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{191}
}

func (x *GetVendorClassificationListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetVendorClassificationListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetVendorClassificationListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetVendorClassificationListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetVendorClassificationListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetVendorClassificationListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*VendorClassification `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetVendorClassificationListResponse) Reset() {
	*x = GetVendorClassificationListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorClassificationListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorClassificationListResponse) ProtoMessage() {}

func (x *GetVendorClassificationListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorClassificationListResponse.ProtoReflect.Descriptor instead.
func (*GetVendorClassificationListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{192}
}

func (x *GetVendorClassificationListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetVendorClassificationListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetVendorClassificationListResponse) GetData() []*VendorClassification {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetVendorClassificationDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetVendorClassificationDetailRequest) Reset() {
	*x = GetVendorClassificationDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorClassificationDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorClassificationDetailRequest) ProtoMessage() {}

func (x *GetVendorClassificationDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorClassificationDetailRequest.ProtoReflect.Descriptor instead.
func (*GetVendorClassificationDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{193}
}

func (x *GetVendorClassificationDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetVendorClassificationDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetVendorClassificationDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *VendorClassification `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetVendorClassificationDetailResponse) Reset() {
	*x = GetVendorClassificationDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorClassificationDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorClassificationDetailResponse) ProtoMessage() {}

func (x *GetVendorClassificationDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorClassificationDetailResponse.ProtoReflect.Descriptor instead.
func (*GetVendorClassificationDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{194}
}

func (x *GetVendorClassificationDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetVendorClassificationDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetVendorClassificationDetailResponse) GetData() *VendorClassification {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetPurchasePlanListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search  string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetPurchasePlanListRequest) Reset() {
	*x = GetPurchasePlanListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchasePlanListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchasePlanListRequest) ProtoMessage() {}

func (x *GetPurchasePlanListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchasePlanListRequest.ProtoReflect.Descriptor instead.
func (*GetPurchasePlanListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{195}
}

func (x *GetPurchasePlanListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetPurchasePlanListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetPurchasePlanListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetPurchasePlanListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetPurchasePlanListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetPurchasePlanListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*PurchasePlan `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPurchasePlanListResponse) Reset() {
	*x = GetPurchasePlanListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchasePlanListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchasePlanListResponse) ProtoMessage() {}

func (x *GetPurchasePlanListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchasePlanListResponse.ProtoReflect.Descriptor instead.
func (*GetPurchasePlanListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{196}
}

func (x *GetPurchasePlanListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPurchasePlanListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetPurchasePlanListResponse) GetData() []*PurchasePlan {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetPurchasePlanDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetPurchasePlanDetailRequest) Reset() {
	*x = GetPurchasePlanDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchasePlanDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchasePlanDetailRequest) ProtoMessage() {}

func (x *GetPurchasePlanDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchasePlanDetailRequest.ProtoReflect.Descriptor instead.
func (*GetPurchasePlanDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{197}
}

func (x *GetPurchasePlanDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetPurchasePlanDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetPurchasePlanDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *PurchasePlan `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPurchasePlanDetailResponse) Reset() {
	*x = GetPurchasePlanDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchasePlanDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchasePlanDetailResponse) ProtoMessage() {}

func (x *GetPurchasePlanDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchasePlanDetailResponse.ProtoReflect.Descriptor instead.
func (*GetPurchasePlanDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{198}
}

func (x *GetPurchasePlanDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPurchasePlanDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetPurchasePlanDetailResponse) GetData() *PurchasePlan {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetPurchasePlanItemListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search  string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetPurchasePlanItemListRequest) Reset() {
	*x = GetPurchasePlanItemListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchasePlanItemListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchasePlanItemListRequest) ProtoMessage() {}

func (x *GetPurchasePlanItemListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchasePlanItemListRequest.ProtoReflect.Descriptor instead.
func (*GetPurchasePlanItemListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{199}
}

func (x *GetPurchasePlanItemListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetPurchasePlanItemListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetPurchasePlanItemListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetPurchasePlanItemListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetPurchasePlanItemListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetPurchasePlanItemListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*PurchasePlanItem `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPurchasePlanItemListResponse) Reset() {
	*x = GetPurchasePlanItemListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchasePlanItemListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchasePlanItemListResponse) ProtoMessage() {}

func (x *GetPurchasePlanItemListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchasePlanItemListResponse.ProtoReflect.Descriptor instead.
func (*GetPurchasePlanItemListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{200}
}

func (x *GetPurchasePlanItemListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPurchasePlanItemListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetPurchasePlanItemListResponse) GetData() []*PurchasePlanItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetPurchasePlanItemDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetPurchasePlanItemDetailRequest) Reset() {
	*x = GetPurchasePlanItemDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchasePlanItemDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchasePlanItemDetailRequest) ProtoMessage() {}

func (x *GetPurchasePlanItemDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchasePlanItemDetailRequest.ProtoReflect.Descriptor instead.
func (*GetPurchasePlanItemDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{201}
}

func (x *GetPurchasePlanItemDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetPurchasePlanItemDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetPurchasePlanItemDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *PurchasePlanItem `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPurchasePlanItemDetailResponse) Reset() {
	*x = GetPurchasePlanItemDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchasePlanItemDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchasePlanItemDetailResponse) ProtoMessage() {}

func (x *GetPurchasePlanItemDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchasePlanItemDetailResponse.ProtoReflect.Descriptor instead.
func (*GetPurchasePlanItemDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{202}
}

func (x *GetPurchasePlanItemDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPurchasePlanItemDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetPurchasePlanItemDetailResponse) GetData() *PurchasePlanItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetPurchaseOrderListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search  string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetPurchaseOrderListRequest) Reset() {
	*x = GetPurchaseOrderListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseOrderListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseOrderListRequest) ProtoMessage() {}

func (x *GetPurchaseOrderListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseOrderListRequest.ProtoReflect.Descriptor instead.
func (*GetPurchaseOrderListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{203}
}

func (x *GetPurchaseOrderListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetPurchaseOrderListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetPurchaseOrderListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetPurchaseOrderListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetPurchaseOrderListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetPurchaseOrderListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*PurchaseOrder `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPurchaseOrderListResponse) Reset() {
	*x = GetPurchaseOrderListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseOrderListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseOrderListResponse) ProtoMessage() {}

func (x *GetPurchaseOrderListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseOrderListResponse.ProtoReflect.Descriptor instead.
func (*GetPurchaseOrderListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{204}
}

func (x *GetPurchaseOrderListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPurchaseOrderListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetPurchaseOrderListResponse) GetData() []*PurchaseOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetPurchaseOrderDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetPurchaseOrderDetailRequest) Reset() {
	*x = GetPurchaseOrderDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseOrderDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseOrderDetailRequest) ProtoMessage() {}

func (x *GetPurchaseOrderDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseOrderDetailRequest.ProtoReflect.Descriptor instead.
func (*GetPurchaseOrderDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{205}
}

func (x *GetPurchaseOrderDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetPurchaseOrderDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetPurchaseOrderDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *PurchaseOrder `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPurchaseOrderDetailResponse) Reset() {
	*x = GetPurchaseOrderDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseOrderDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseOrderDetailResponse) ProtoMessage() {}

func (x *GetPurchaseOrderDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseOrderDetailResponse.ProtoReflect.Descriptor instead.
func (*GetPurchaseOrderDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{206}
}

func (x *GetPurchaseOrderDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPurchaseOrderDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetPurchaseOrderDetailResponse) GetData() *PurchaseOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetPurchaseOrderItemListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search  string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetPurchaseOrderItemListRequest) Reset() {
	*x = GetPurchaseOrderItemListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseOrderItemListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseOrderItemListRequest) ProtoMessage() {}

func (x *GetPurchaseOrderItemListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseOrderItemListRequest.ProtoReflect.Descriptor instead.
func (*GetPurchaseOrderItemListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{207}
}

func (x *GetPurchaseOrderItemListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetPurchaseOrderItemListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetPurchaseOrderItemListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetPurchaseOrderItemListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetPurchaseOrderItemListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetPurchaseOrderItemListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*PurchaseOrderItem `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPurchaseOrderItemListResponse) Reset() {
	*x = GetPurchaseOrderItemListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseOrderItemListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseOrderItemListResponse) ProtoMessage() {}

func (x *GetPurchaseOrderItemListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseOrderItemListResponse.ProtoReflect.Descriptor instead.
func (*GetPurchaseOrderItemListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{208}
}

func (x *GetPurchaseOrderItemListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPurchaseOrderItemListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetPurchaseOrderItemListResponse) GetData() []*PurchaseOrderItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetPurchaseOrderItemDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetPurchaseOrderItemDetailRequest) Reset() {
	*x = GetPurchaseOrderItemDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseOrderItemDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseOrderItemDetailRequest) ProtoMessage() {}

func (x *GetPurchaseOrderItemDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseOrderItemDetailRequest.ProtoReflect.Descriptor instead.
func (*GetPurchaseOrderItemDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{209}
}

func (x *GetPurchaseOrderItemDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetPurchaseOrderItemDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetPurchaseOrderItemDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *PurchaseOrderItem `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetPurchaseOrderItemDetailResponse) Reset() {
	*x = GetPurchaseOrderItemDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseOrderItemDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseOrderItemDetailResponse) ProtoMessage() {}

func (x *GetPurchaseOrderItemDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseOrderItemDetailResponse.ProtoReflect.Descriptor instead.
func (*GetPurchaseOrderItemDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{210}
}

func (x *GetPurchaseOrderItemDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPurchaseOrderItemDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetPurchaseOrderItemDetailResponse) GetData() *PurchaseOrderItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type AdmDivisionCoverageGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnlRegion             string `protobuf:"bytes,1,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	GnlAdministrativeCode string `protobuf:"bytes,2,opt,name=gnl_administrative_code,json=gnlAdministrativeCode,proto3" json:"gnl_administrative_code,omitempty"`
	GnlProvince           string `protobuf:"bytes,3,opt,name=gnl_province,json=gnlProvince,proto3" json:"gnl_province,omitempty"`
	GnlCity               string `protobuf:"bytes,4,opt,name=gnl_city,json=gnlCity,proto3" json:"gnl_city,omitempty"`
	GnlDistrict           string `protobuf:"bytes,5,opt,name=gnl_district,json=gnlDistrict,proto3" json:"gnl_district,omitempty"`
	GnlSubdistrict        string `protobuf:"bytes,6,opt,name=gnl_subdistrict,json=gnlSubdistrict,proto3" json:"gnl_subdistrict,omitempty"`
	Locncode              string `protobuf:"bytes,7,opt,name=locncode,proto3" json:"locncode,omitempty"`
}

func (x *AdmDivisionCoverageGP) Reset() {
	*x = AdmDivisionCoverageGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdmDivisionCoverageGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdmDivisionCoverageGP) ProtoMessage() {}

func (x *AdmDivisionCoverageGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdmDivisionCoverageGP.ProtoReflect.Descriptor instead.
func (*AdmDivisionCoverageGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{211}
}

func (x *AdmDivisionCoverageGP) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *AdmDivisionCoverageGP) GetGnlAdministrativeCode() string {
	if x != nil {
		return x.GnlAdministrativeCode
	}
	return ""
}

func (x *AdmDivisionCoverageGP) GetGnlProvince() string {
	if x != nil {
		return x.GnlProvince
	}
	return ""
}

func (x *AdmDivisionCoverageGP) GetGnlCity() string {
	if x != nil {
		return x.GnlCity
	}
	return ""
}

func (x *AdmDivisionCoverageGP) GetGnlDistrict() string {
	if x != nil {
		return x.GnlDistrict
	}
	return ""
}

func (x *AdmDivisionCoverageGP) GetGnlSubdistrict() string {
	if x != nil {
		return x.GnlSubdistrict
	}
	return ""
}

func (x *AdmDivisionCoverageGP) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

type GetAdmDivisionCoverageGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit                 int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset                int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	GnlAdministrativeCode string `protobuf:"bytes,3,opt,name=gnl_administrative_code,json=gnlAdministrativeCode,proto3" json:"gnl_administrative_code,omitempty"`
	GnlProvince           string `protobuf:"bytes,4,opt,name=gnl_province,json=gnlProvince,proto3" json:"gnl_province,omitempty"`
	GnlCity               string `protobuf:"bytes,5,opt,name=gnl_city,json=gnlCity,proto3" json:"gnl_city,omitempty"`
	GnlDistrict           string `protobuf:"bytes,6,opt,name=gnl_district,json=gnlDistrict,proto3" json:"gnl_district,omitempty"`
	GnlSubdistrict        string `protobuf:"bytes,7,opt,name=gnl_subdistrict,json=gnlSubdistrict,proto3" json:"gnl_subdistrict,omitempty"`
	Locncode              string `protobuf:"bytes,8,opt,name=locncode,proto3" json:"locncode,omitempty"`
}

func (x *GetAdmDivisionCoverageGPListRequest) Reset() {
	*x = GetAdmDivisionCoverageGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdmDivisionCoverageGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdmDivisionCoverageGPListRequest) ProtoMessage() {}

func (x *GetAdmDivisionCoverageGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdmDivisionCoverageGPListRequest.ProtoReflect.Descriptor instead.
func (*GetAdmDivisionCoverageGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{212}
}

func (x *GetAdmDivisionCoverageGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAdmDivisionCoverageGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAdmDivisionCoverageGPListRequest) GetGnlAdministrativeCode() string {
	if x != nil {
		return x.GnlAdministrativeCode
	}
	return ""
}

func (x *GetAdmDivisionCoverageGPListRequest) GetGnlProvince() string {
	if x != nil {
		return x.GnlProvince
	}
	return ""
}

func (x *GetAdmDivisionCoverageGPListRequest) GetGnlCity() string {
	if x != nil {
		return x.GnlCity
	}
	return ""
}

func (x *GetAdmDivisionCoverageGPListRequest) GetGnlDistrict() string {
	if x != nil {
		return x.GnlDistrict
	}
	return ""
}

func (x *GetAdmDivisionCoverageGPListRequest) GetGnlSubdistrict() string {
	if x != nil {
		return x.GnlSubdistrict
	}
	return ""
}

func (x *GetAdmDivisionCoverageGPListRequest) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

type GetAdmDivisionCoverageGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAdmDivisionCoverageGPDetailRequest) Reset() {
	*x = GetAdmDivisionCoverageGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdmDivisionCoverageGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdmDivisionCoverageGPDetailRequest) ProtoMessage() {}

func (x *GetAdmDivisionCoverageGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdmDivisionCoverageGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetAdmDivisionCoverageGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{213}
}

func (x *GetAdmDivisionCoverageGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAdmDivisionCoverageGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32                    `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32                    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32                    `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32                    `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*AdmDivisionCoverageGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool                     `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string                 `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string                   `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetAdmDivisionCoverageGPResponse) Reset() {
	*x = GetAdmDivisionCoverageGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdmDivisionCoverageGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdmDivisionCoverageGPResponse) ProtoMessage() {}

func (x *GetAdmDivisionCoverageGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdmDivisionCoverageGPResponse.ProtoReflect.Descriptor instead.
func (*GetAdmDivisionCoverageGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{214}
}

func (x *GetAdmDivisionCoverageGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetAdmDivisionCoverageGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetAdmDivisionCoverageGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetAdmDivisionCoverageGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetAdmDivisionCoverageGPResponse) GetData() []*AdmDivisionCoverageGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAdmDivisionCoverageGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetAdmDivisionCoverageGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetAdmDivisionCoverageGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreatePurchaseOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VendorId    int64                             `protobuf:"varint,1,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	SiteId      int64                             `protobuf:"varint,2,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	OrderDate   string                            `protobuf:"bytes,3,opt,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`
	StrEtaDate  string                            `protobuf:"bytes,4,opt,name=str_eta_date,json=strEtaDate,proto3" json:"str_eta_date,omitempty"`
	EtaTime     string                            `protobuf:"bytes,5,opt,name=eta_time,json=etaTime,proto3" json:"eta_time,omitempty"`
	DeliveryFee float64                           `protobuf:"fixed64,6,opt,name=delivery_fee,json=deliveryFee,proto3" json:"delivery_fee,omitempty"`
	Note        string                            `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	TaxPct      float64                           `protobuf:"fixed64,8,opt,name=tax_pct,json=taxPct,proto3" json:"tax_pct,omitempty"`
	Latitude    float64                           `protobuf:"fixed64,9,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude   float64                           `protobuf:"fixed64,10,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Items       []*CreatePurchaseOrderItemRequest `protobuf:"bytes,11,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *CreatePurchaseOrderRequest) Reset() {
	*x = CreatePurchaseOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePurchaseOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePurchaseOrderRequest) ProtoMessage() {}

func (x *CreatePurchaseOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePurchaseOrderRequest.ProtoReflect.Descriptor instead.
func (*CreatePurchaseOrderRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{215}
}

func (x *CreatePurchaseOrderRequest) GetVendorId() int64 {
	if x != nil {
		return x.VendorId
	}
	return 0
}

func (x *CreatePurchaseOrderRequest) GetSiteId() int64 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *CreatePurchaseOrderRequest) GetOrderDate() string {
	if x != nil {
		return x.OrderDate
	}
	return ""
}

func (x *CreatePurchaseOrderRequest) GetStrEtaDate() string {
	if x != nil {
		return x.StrEtaDate
	}
	return ""
}

func (x *CreatePurchaseOrderRequest) GetEtaTime() string {
	if x != nil {
		return x.EtaTime
	}
	return ""
}

func (x *CreatePurchaseOrderRequest) GetDeliveryFee() float64 {
	if x != nil {
		return x.DeliveryFee
	}
	return 0
}

func (x *CreatePurchaseOrderRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreatePurchaseOrderRequest) GetTaxPct() float64 {
	if x != nil {
		return x.TaxPct
	}
	return 0
}

func (x *CreatePurchaseOrderRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *CreatePurchaseOrderRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *CreatePurchaseOrderRequest) GetItems() []*CreatePurchaseOrderItemRequest {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreatePurchaseOrderItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId        int64   `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OrderQty      float64 `protobuf:"fixed64,2,opt,name=order_qty,json=orderQty,proto3" json:"order_qty,omitempty"`
	UnitPrice     float64 `protobuf:"fixed64,3,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	Note          string  `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
	PurchaseQty   float64 `protobuf:"fixed64,5,opt,name=purchase_qty,json=purchaseQty,proto3" json:"purchase_qty,omitempty"`
	IncludeTax    int32   `protobuf:"varint,6,opt,name=include_tax,json=includeTax,proto3" json:"include_tax,omitempty"`
	TaxPercentage float64 `protobuf:"fixed64,7,opt,name=tax_percentage,json=taxPercentage,proto3" json:"tax_percentage,omitempty"`
}

func (x *CreatePurchaseOrderItemRequest) Reset() {
	*x = CreatePurchaseOrderItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePurchaseOrderItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePurchaseOrderItemRequest) ProtoMessage() {}

func (x *CreatePurchaseOrderItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePurchaseOrderItemRequest.ProtoReflect.Descriptor instead.
func (*CreatePurchaseOrderItemRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{216}
}

func (x *CreatePurchaseOrderItemRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *CreatePurchaseOrderItemRequest) GetOrderQty() float64 {
	if x != nil {
		return x.OrderQty
	}
	return 0
}

func (x *CreatePurchaseOrderItemRequest) GetUnitPrice() float64 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *CreatePurchaseOrderItemRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreatePurchaseOrderItemRequest) GetPurchaseQty() float64 {
	if x != nil {
		return x.PurchaseQty
	}
	return 0
}

func (x *CreatePurchaseOrderItemRequest) GetIncludeTax() int32 {
	if x != nil {
		return x.IncludeTax
	}
	return 0
}

func (x *CreatePurchaseOrderItemRequest) GetTaxPercentage() float64 {
	if x != nil {
		return x.TaxPercentage
	}
	return 0
}

type CreatePurchaseOrderGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Ponumber string `protobuf:"bytes,3,opt,name=ponumber,proto3" json:"ponumber,omitempty"`
}

func (x *CreatePurchaseOrderGPResponse) Reset() {
	*x = CreatePurchaseOrderGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePurchaseOrderGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePurchaseOrderGPResponse) ProtoMessage() {}

func (x *CreatePurchaseOrderGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePurchaseOrderGPResponse.ProtoReflect.Descriptor instead.
func (*CreatePurchaseOrderGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{217}
}

func (x *CreatePurchaseOrderGPResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreatePurchaseOrderGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreatePurchaseOrderGPResponse) GetPonumber() string {
	if x != nil {
		return x.Ponumber
	}
	return ""
}

type PickingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DocDate         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=doc_date,json=docDate,proto3" json:"doc_date,omitempty"`
	SiteId          string                 `protobuf:"bytes,3,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	RequestShipDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=request_ship_date,json=requestShipDate,proto3" json:"request_ship_date,omitempty"`
	Status          int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PickingList) Reset() {
	*x = PickingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickingList) ProtoMessage() {}

func (x *PickingList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickingList.ProtoReflect.Descriptor instead.
func (*PickingList) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{218}
}

func (x *PickingList) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PickingList) GetDocDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DocDate
	}
	return nil
}

func (x *PickingList) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

func (x *PickingList) GetRequestShipDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestShipDate
	}
	return nil
}

func (x *PickingList) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type PickingOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DocDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=doc_date,json=docDate,proto3" json:"doc_date,omitempty"`
	SopNumber string                 `protobuf:"bytes,3,opt,name=sop_number,json=sopNumber,proto3" json:"sop_number,omitempty"`
	PickerId  string                 `protobuf:"bytes,4,opt,name=picker_id,json=pickerId,proto3" json:"picker_id,omitempty"`
	Status    int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PickingOrder) Reset() {
	*x = PickingOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickingOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickingOrder) ProtoMessage() {}

func (x *PickingOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickingOrder.ProtoReflect.Descriptor instead.
func (*PickingOrder) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{219}
}

func (x *PickingOrder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PickingOrder) GetDocDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DocDate
	}
	return nil
}

func (x *PickingOrder) GetSopNumber() string {
	if x != nil {
		return x.SopNumber
	}
	return ""
}

func (x *PickingOrder) GetPickerId() string {
	if x != nil {
		return x.PickerId
	}
	return ""
}

func (x *PickingOrder) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type PickingOrderDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DocDate    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=doc_date,json=docDate,proto3" json:"doc_date,omitempty"`
	SopNumber  string                 `protobuf:"bytes,3,opt,name=sop_number,json=sopNumber,proto3" json:"sop_number,omitempty"`
	ItemNumber string                 `protobuf:"bytes,4,opt,name=item_number,json=itemNumber,proto3" json:"item_number,omitempty"`
	Status     int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PickingOrderDetail) Reset() {
	*x = PickingOrderDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickingOrderDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickingOrderDetail) ProtoMessage() {}

func (x *PickingOrderDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickingOrderDetail.ProtoReflect.Descriptor instead.
func (*PickingOrderDetail) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{220}
}

func (x *PickingOrderDetail) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PickingOrderDetail) GetDocDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DocDate
	}
	return nil
}

func (x *PickingOrderDetail) GetSopNumber() string {
	if x != nil {
		return x.SopNumber
	}
	return ""
}

func (x *PickingOrderDetail) GetItemNumber() string {
	if x != nil {
		return x.ItemNumber
	}
	return ""
}

func (x *PickingOrderDetail) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type PickingOrderGPHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docnumbr             string `protobuf:"bytes,1,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	WmsPickerId          string `protobuf:"bytes,2,opt,name=wms_picker_id,json=wmsPickerId,proto3" json:"wms_picker_id,omitempty"`
	WmsPickerName        string `protobuf:"bytes,3,opt,name=wms_picker_name,json=wmsPickerName,proto3" json:"wms_picker_name,omitempty"`
	Docdate              string `protobuf:"bytes,4,opt,name=docdate,proto3" json:"docdate,omitempty"`
	Strttime             string `protobuf:"bytes,5,opt,name=strttime,proto3" json:"strttime,omitempty"`
	Endtime              string `protobuf:"bytes,6,opt,name=endtime,proto3" json:"endtime,omitempty"`
	WmsPickingStatus     int32  `protobuf:"varint,7,opt,name=wms_picking_status,json=wmsPickingStatus,proto3" json:"wms_picking_status,omitempty"`
	WmsPickingStatusDesc string `protobuf:"bytes,8,opt,name=wms_picking_status_desc,json=wmsPickingStatusDesc,proto3" json:"wms_picking_status_desc,omitempty"`
	SalesOrderCount      int32  `protobuf:"varint,9,opt,name=sales_order_count,json=salesOrderCount,proto3" json:"sales_order_count,omitempty"`
	Note                 string `protobuf:"bytes,10,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *PickingOrderGPHeader) Reset() {
	*x = PickingOrderGPHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickingOrderGPHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickingOrderGPHeader) ProtoMessage() {}

func (x *PickingOrderGPHeader) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickingOrderGPHeader.ProtoReflect.Descriptor instead.
func (*PickingOrderGPHeader) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{221}
}

func (x *PickingOrderGPHeader) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *PickingOrderGPHeader) GetWmsPickerId() string {
	if x != nil {
		return x.WmsPickerId
	}
	return ""
}

func (x *PickingOrderGPHeader) GetWmsPickerName() string {
	if x != nil {
		return x.WmsPickerName
	}
	return ""
}

func (x *PickingOrderGPHeader) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *PickingOrderGPHeader) GetStrttime() string {
	if x != nil {
		return x.Strttime
	}
	return ""
}

func (x *PickingOrderGPHeader) GetEndtime() string {
	if x != nil {
		return x.Endtime
	}
	return ""
}

func (x *PickingOrderGPHeader) GetWmsPickingStatus() int32 {
	if x != nil {
		return x.WmsPickingStatus
	}
	return 0
}

func (x *PickingOrderGPHeader) GetWmsPickingStatusDesc() string {
	if x != nil {
		return x.WmsPickingStatusDesc
	}
	return ""
}

func (x *PickingOrderGPHeader) GetSalesOrderCount() int32 {
	if x != nil {
		return x.SalesOrderCount
	}
	return 0
}

func (x *PickingOrderGPHeader) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type PickingOrderGPDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docnumbr             string `protobuf:"bytes,1,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	WmsPickerId          string `protobuf:"bytes,2,opt,name=wms_picker_id,json=wmsPickerId,proto3" json:"wms_picker_id,omitempty"`
	WmsPickerName        string `protobuf:"bytes,3,opt,name=wms_picker_name,json=wmsPickerName,proto3" json:"wms_picker_name,omitempty"`
	Docdate              string `protobuf:"bytes,4,opt,name=docdate,proto3" json:"docdate,omitempty"`
	Strttime             string `protobuf:"bytes,5,opt,name=strttime,proto3" json:"strttime,omitempty"`
	Endtime              string `protobuf:"bytes,6,opt,name=endtime,proto3" json:"endtime,omitempty"`
	WmsPickingStatus     int32  `protobuf:"varint,7,opt,name=wms_picking_status,json=wmsPickingStatus,proto3" json:"wms_picking_status,omitempty"`
	WmsPickingStatusDesc string `protobuf:"bytes,8,opt,name=wms_picking_status_desc,json=wmsPickingStatusDesc,proto3" json:"wms_picking_status_desc,omitempty"`
	SalesOrderCount      int32  `protobuf:"varint,9,opt,name=sales_order_count,json=salesOrderCount,proto3" json:"sales_order_count,omitempty"`
	// string note = 10;
	Details []*PickingOrderGPProduct `protobuf:"bytes,10,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *PickingOrderGPDetail) Reset() {
	*x = PickingOrderGPDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickingOrderGPDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickingOrderGPDetail) ProtoMessage() {}

func (x *PickingOrderGPDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickingOrderGPDetail.ProtoReflect.Descriptor instead.
func (*PickingOrderGPDetail) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{222}
}

func (x *PickingOrderGPDetail) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *PickingOrderGPDetail) GetWmsPickerId() string {
	if x != nil {
		return x.WmsPickerId
	}
	return ""
}

func (x *PickingOrderGPDetail) GetWmsPickerName() string {
	if x != nil {
		return x.WmsPickerName
	}
	return ""
}

func (x *PickingOrderGPDetail) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *PickingOrderGPDetail) GetStrttime() string {
	if x != nil {
		return x.Strttime
	}
	return ""
}

func (x *PickingOrderGPDetail) GetEndtime() string {
	if x != nil {
		return x.Endtime
	}
	return ""
}

func (x *PickingOrderGPDetail) GetWmsPickingStatus() int32 {
	if x != nil {
		return x.WmsPickingStatus
	}
	return 0
}

func (x *PickingOrderGPDetail) GetWmsPickingStatusDesc() string {
	if x != nil {
		return x.WmsPickingStatusDesc
	}
	return ""
}

func (x *PickingOrderGPDetail) GetSalesOrderCount() int32 {
	if x != nil {
		return x.SalesOrderCount
	}
	return 0
}

func (x *PickingOrderGPDetail) GetDetails() []*PickingOrderGPProduct {
	if x != nil {
		return x.Details
	}
	return nil
}

type PickingOrderGPProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seqnumbr int32  `protobuf:"varint,1,opt,name=seqnumbr,proto3" json:"seqnumbr,omitempty"`
	Locncode string `protobuf:"bytes,2,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Locndscr string `protobuf:"bytes,3,opt,name=locndscr,proto3" json:"locndscr,omitempty"`
	Bin      string `protobuf:"bytes,4,opt,name=bin,proto3" json:"bin,omitempty"`
	Itemnmbr string `protobuf:"bytes,5,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	Itemdesc string `protobuf:"bytes,6,opt,name=itemdesc,proto3" json:"itemdesc,omitempty"`
	Sopnumbe string `protobuf:"bytes,7,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"`
	// string custnmbr = 8;
	Lnitmseq     int32   `protobuf:"varint,8,opt,name=lnitmseq,proto3" json:"lnitmseq,omitempty"`
	IvmUofm      string  `protobuf:"bytes,9,opt,name=ivm_uofm,json=ivmUofm,proto3" json:"ivm_uofm,omitempty"`
	Umschdsc     string  `protobuf:"bytes,10,opt,name=umschdsc,proto3" json:"umschdsc,omitempty"`
	IvmQty       float64 `protobuf:"fixed64,11,opt,name=ivm_qty,json=ivmQty,proto3" json:"ivm_qty,omitempty"`
	WmsQtyPick   float64 `protobuf:"fixed64,12,opt,name=wms_qty_pick,json=wmsQtyPick,proto3" json:"wms_qty_pick,omitempty"`
	WmsQtyExcess float64 `protobuf:"fixed64,13,opt,name=wms_qty_excess,json=wmsQtyExcess,proto3" json:"wms_qty_excess,omitempty"`
}

func (x *PickingOrderGPProduct) Reset() {
	*x = PickingOrderGPProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickingOrderGPProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickingOrderGPProduct) ProtoMessage() {}

func (x *PickingOrderGPProduct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickingOrderGPProduct.ProtoReflect.Descriptor instead.
func (*PickingOrderGPProduct) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{223}
}

func (x *PickingOrderGPProduct) GetSeqnumbr() int32 {
	if x != nil {
		return x.Seqnumbr
	}
	return 0
}

func (x *PickingOrderGPProduct) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *PickingOrderGPProduct) GetLocndscr() string {
	if x != nil {
		return x.Locndscr
	}
	return ""
}

func (x *PickingOrderGPProduct) GetBin() string {
	if x != nil {
		return x.Bin
	}
	return ""
}

func (x *PickingOrderGPProduct) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *PickingOrderGPProduct) GetItemdesc() string {
	if x != nil {
		return x.Itemdesc
	}
	return ""
}

func (x *PickingOrderGPProduct) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

func (x *PickingOrderGPProduct) GetLnitmseq() int32 {
	if x != nil {
		return x.Lnitmseq
	}
	return 0
}

func (x *PickingOrderGPProduct) GetIvmUofm() string {
	if x != nil {
		return x.IvmUofm
	}
	return ""
}

func (x *PickingOrderGPProduct) GetUmschdsc() string {
	if x != nil {
		return x.Umschdsc
	}
	return ""
}

func (x *PickingOrderGPProduct) GetIvmQty() float64 {
	if x != nil {
		return x.IvmQty
	}
	return 0
}

func (x *PickingOrderGPProduct) GetWmsQtyPick() float64 {
	if x != nil {
		return x.WmsQtyPick
	}
	return 0
}

func (x *PickingOrderGPProduct) GetWmsQtyExcess() float64 {
	if x != nil {
		return x.WmsQtyExcess
	}
	return 0
}

type GetPickingOrderGPHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit            int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset           int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Locncode         string `protobuf:"bytes,3,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Sopnumbe         string `protobuf:"bytes,4,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"`
	Docnumbr         string `protobuf:"bytes,5,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	Itemnmbr         string `protobuf:"bytes,6,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	DocdateFrom      string `protobuf:"bytes,7,opt,name=docdate_from,json=docdateFrom,proto3" json:"docdate_from,omitempty"`
	DocdateTo        string `protobuf:"bytes,8,opt,name=docdate_to,json=docdateTo,proto3" json:"docdate_to,omitempty"`
	GnlHelperId      string `protobuf:"bytes,9,opt,name=gnl_helper_id,json=gnlHelperId,proto3" json:"gnl_helper_id,omitempty"`
	WmsPickingStatus int32  `protobuf:"varint,10,opt,name=wms_picking_status,json=wmsPickingStatus,proto3" json:"wms_picking_status,omitempty"`
	Custname         string `protobuf:"bytes,11,opt,name=custname,proto3" json:"custname,omitempty"`
}

func (x *GetPickingOrderGPHeaderRequest) Reset() {
	*x = GetPickingOrderGPHeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPickingOrderGPHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPickingOrderGPHeaderRequest) ProtoMessage() {}

func (x *GetPickingOrderGPHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPickingOrderGPHeaderRequest.ProtoReflect.Descriptor instead.
func (*GetPickingOrderGPHeaderRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{224}
}

func (x *GetPickingOrderGPHeaderRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetPickingOrderGPHeaderRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetPickingOrderGPHeaderRequest) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *GetPickingOrderGPHeaderRequest) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

func (x *GetPickingOrderGPHeaderRequest) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *GetPickingOrderGPHeaderRequest) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *GetPickingOrderGPHeaderRequest) GetDocdateFrom() string {
	if x != nil {
		return x.DocdateFrom
	}
	return ""
}

func (x *GetPickingOrderGPHeaderRequest) GetDocdateTo() string {
	if x != nil {
		return x.DocdateTo
	}
	return ""
}

func (x *GetPickingOrderGPHeaderRequest) GetGnlHelperId() string {
	if x != nil {
		return x.GnlHelperId
	}
	return ""
}

func (x *GetPickingOrderGPHeaderRequest) GetWmsPickingStatus() int32 {
	if x != nil {
		return x.WmsPickingStatus
	}
	return 0
}

func (x *GetPickingOrderGPHeaderRequest) GetCustname() string {
	if x != nil {
		return x.Custname
	}
	return ""
}

type GetPickingOrderGPHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32                   `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32                   `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32                   `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32                   `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*PickingOrderGPHeader `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool                    `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string                `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string                  `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetPickingOrderGPHeaderResponse) Reset() {
	*x = GetPickingOrderGPHeaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPickingOrderGPHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPickingOrderGPHeaderResponse) ProtoMessage() {}

func (x *GetPickingOrderGPHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPickingOrderGPHeaderResponse.ProtoReflect.Descriptor instead.
func (*GetPickingOrderGPHeaderResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{225}
}

func (x *GetPickingOrderGPHeaderResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetPickingOrderGPHeaderResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetPickingOrderGPHeaderResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetPickingOrderGPHeaderResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetPickingOrderGPHeaderResponse) GetData() []*PickingOrderGPHeader {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetPickingOrderGPHeaderResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetPickingOrderGPHeaderResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetPickingOrderGPHeaderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetPickingOrderGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPickingOrderGPDetailRequest) Reset() {
	*x = GetPickingOrderGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPickingOrderGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPickingOrderGPDetailRequest) ProtoMessage() {}

func (x *GetPickingOrderGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPickingOrderGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetPickingOrderGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{226}
}

func (x *GetPickingOrderGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPickingOrderGPDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32                   `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32                   `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32                   `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32                   `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*PickingOrderGPDetail `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool                    `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string                `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string                  `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetPickingOrderGPDetailResponse) Reset() {
	*x = GetPickingOrderGPDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPickingOrderGPDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPickingOrderGPDetailResponse) ProtoMessage() {}

func (x *GetPickingOrderGPDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPickingOrderGPDetailResponse.ProtoReflect.Descriptor instead.
func (*GetPickingOrderGPDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{227}
}

func (x *GetPickingOrderGPDetailResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetPickingOrderGPDetailResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetPickingOrderGPDetailResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetPickingOrderGPDetailResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetPickingOrderGPDetailResponse) GetData() []*PickingOrderGPDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetPickingOrderGPDetailResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetPickingOrderGPDetailResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetPickingOrderGPDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PickingDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sopnumbe     string  `protobuf:"bytes,1,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"`
	Lnitmseq     int32   `protobuf:"varint,2,opt,name=lnitmseq,proto3" json:"lnitmseq,omitempty"`
	IvmQtyPickso float64 `protobuf:"fixed64,3,opt,name=ivm_qty_pickso,json=ivmQtyPickso,proto3" json:"ivm_qty_pickso,omitempty"`
}

func (x *PickingDetails) Reset() {
	*x = PickingDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickingDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickingDetails) ProtoMessage() {}

func (x *PickingDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickingDetails.ProtoReflect.Descriptor instead.
func (*PickingDetails) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{228}
}

func (x *PickingDetails) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

func (x *PickingDetails) GetLnitmseq() int32 {
	if x != nil {
		return x.Lnitmseq
	}
	return 0
}

func (x *PickingDetails) GetIvmQtyPickso() float64 {
	if x != nil {
		return x.IvmQtyPickso
	}
	return 0
}

type Picking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docnumbr string            `protobuf:"bytes,1,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	Strttime string            `protobuf:"bytes,2,opt,name=strttime,proto3" json:"strttime,omitempty"`
	Endtime  string            `protobuf:"bytes,3,opt,name=endtime,proto3" json:"endtime,omitempty"`
	Details  []*PickingDetails `protobuf:"bytes,4,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *Picking) Reset() {
	*x = Picking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Picking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Picking) ProtoMessage() {}

func (x *Picking) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Picking.ProtoReflect.Descriptor instead.
func (*Picking) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{229}
}

func (x *Picking) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *Picking) GetStrttime() string {
	if x != nil {
		return x.Strttime
	}
	return ""
}

func (x *Picking) GetEndtime() string {
	if x != nil {
		return x.Endtime
	}
	return ""
}

func (x *Picking) GetDetails() []*PickingDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type CheckingDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sopnumbe     string  `protobuf:"bytes,1,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"`
	Lnitmseq     int32   `protobuf:"varint,2,opt,name=lnitmseq,proto3" json:"lnitmseq,omitempty"`
	IvmQtyPickso float64 `protobuf:"fixed64,3,opt,name=ivm_qty_pickso,json=ivmQtyPickso,proto3" json:"ivm_qty_pickso,omitempty"`
}

func (x *CheckingDetails) Reset() {
	*x = CheckingDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckingDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckingDetails) ProtoMessage() {}

func (x *CheckingDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckingDetails.ProtoReflect.Descriptor instead.
func (*CheckingDetails) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{230}
}

func (x *CheckingDetails) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

func (x *CheckingDetails) GetLnitmseq() int32 {
	if x != nil {
		return x.Lnitmseq
	}
	return 0
}

func (x *CheckingDetails) GetIvmQtyPickso() float64 {
	if x != nil {
		return x.IvmQtyPickso
	}
	return 0
}

type Checking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docnumbr     string             `protobuf:"bytes,1,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	Sopnumbe     string             `protobuf:"bytes,2,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"`
	Strttime     string             `protobuf:"bytes,3,opt,name=strttime,proto3" json:"strttime,omitempty"`
	Endtime      string             `protobuf:"bytes,4,opt,name=endtime,proto3" json:"endtime,omitempty"`
	WmsPickerId  string             `protobuf:"bytes,5,opt,name=wms_picker_id,json=wmsPickerId,proto3" json:"wms_picker_id,omitempty"`
	IvmKoli      int32              `protobuf:"varint,6,opt,name=ivm_koli,json=ivmKoli,proto3" json:"ivm_koli,omitempty"`
	ImvJenisKoli string             `protobuf:"bytes,7,opt,name=imv_jenis_koli,json=imvJenisKoli,proto3" json:"imv_jenis_koli,omitempty"`
	Details      []*CheckingDetails `protobuf:"bytes,8,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *Checking) Reset() {
	*x = Checking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Checking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checking) ProtoMessage() {}

func (x *Checking) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checking.ProtoReflect.Descriptor instead.
func (*Checking) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{231}
}

func (x *Checking) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *Checking) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

func (x *Checking) GetStrttime() string {
	if x != nil {
		return x.Strttime
	}
	return ""
}

func (x *Checking) GetEndtime() string {
	if x != nil {
		return x.Endtime
	}
	return ""
}

func (x *Checking) GetWmsPickerId() string {
	if x != nil {
		return x.WmsPickerId
	}
	return ""
}

func (x *Checking) GetIvmKoli() int32 {
	if x != nil {
		return x.IvmKoli
	}
	return 0
}

func (x *Checking) GetImvJenisKoli() string {
	if x != nil {
		return x.ImvJenisKoli
	}
	return ""
}

func (x *Checking) GetDetails() []*CheckingDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type SubmitPickingCheckingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid  string      `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Uniqueid string      `protobuf:"bytes,2,opt,name=uniqueid,proto3" json:"uniqueid,omitempty"`
	Bachnumb string      `protobuf:"bytes,3,opt,name=bachnumb,proto3" json:"bachnumb,omitempty"`
	Picking  *Picking    `protobuf:"bytes,4,opt,name=picking,proto3" json:"picking,omitempty"`
	Checking []*Checking `protobuf:"bytes,5,rep,name=checking,proto3" json:"checking,omitempty"`
}

func (x *SubmitPickingCheckingRequest) Reset() {
	*x = SubmitPickingCheckingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitPickingCheckingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitPickingCheckingRequest) ProtoMessage() {}

func (x *SubmitPickingCheckingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitPickingCheckingRequest.ProtoReflect.Descriptor instead.
func (*SubmitPickingCheckingRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{232}
}

func (x *SubmitPickingCheckingRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *SubmitPickingCheckingRequest) GetUniqueid() string {
	if x != nil {
		return x.Uniqueid
	}
	return ""
}

func (x *SubmitPickingCheckingRequest) GetBachnumb() string {
	if x != nil {
		return x.Bachnumb
	}
	return ""
}

func (x *SubmitPickingCheckingRequest) GetPicking() *Picking {
	if x != nil {
		return x.Picking
	}
	return nil
}

func (x *SubmitPickingCheckingRequest) GetChecking() []*Checking {
	if x != nil {
		return x.Checking
	}
	return nil
}

type SubmitPickingCheckingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *SubmitPickingCheckingResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SubmitPickingCheckingResponse) Reset() {
	*x = SubmitPickingCheckingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitPickingCheckingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitPickingCheckingResponse) ProtoMessage() {}

func (x *SubmitPickingCheckingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitPickingCheckingResponse.ProtoReflect.Descriptor instead.
func (*SubmitPickingCheckingResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{233}
}

func (x *SubmitPickingCheckingResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SubmitPickingCheckingResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SubmitPickingCheckingResponse) GetData() *SubmitPickingCheckingResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type LoginHelperRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid  string `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Type     int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Email    string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *LoginHelperRequest) Reset() {
	*x = LoginHelperRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginHelperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginHelperRequest) ProtoMessage() {}

func (x *LoginHelperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginHelperRequest.ProtoReflect.Descriptor instead.
func (*LoginHelperRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{234}
}

func (x *LoginHelperRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *LoginHelperRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *LoginHelperRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginHelperRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LoginHelperResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LoginHelperResponse) Reset() {
	*x = LoginHelperResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginHelperResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginHelperResponse) ProtoMessage() {}

func (x *LoginHelperResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginHelperResponse.ProtoReflect.Descriptor instead.
func (*LoginHelperResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{235}
}

func (x *LoginHelperResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *LoginHelperResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CommitPurchaseOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CommitPurchaseOrderRequest) Reset() {
	*x = CommitPurchaseOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitPurchaseOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitPurchaseOrderRequest) ProtoMessage() {}

func (x *CommitPurchaseOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitPurchaseOrderRequest.ProtoReflect.Descriptor instead.
func (*CommitPurchaseOrderRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{236}
}

func (x *CommitPurchaseOrderRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CancelPurchaseOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Note string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *CancelPurchaseOrderRequest) Reset() {
	*x = CancelPurchaseOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelPurchaseOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelPurchaseOrderRequest) ProtoMessage() {}

func (x *CancelPurchaseOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelPurchaseOrderRequest.ProtoReflect.Descriptor instead.
func (*CancelPurchaseOrderRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{237}
}

func (x *CancelPurchaseOrderRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CancelPurchaseOrderRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type WrtGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnL_Region string `protobuf:"bytes,1,opt,name=gnL_Region,json=gnLRegion,proto3" json:"gnL_Region,omitempty"`
	GnL_WRT_ID string `protobuf:"bytes,2,opt,name=gnL_WRT_ID,json=gnLWRTID,proto3" json:"gnL_WRT_ID,omitempty"`
	Strttime   string `protobuf:"bytes,3,opt,name=strttime,proto3" json:"strttime,omitempty"`
	Endtime    string `protobuf:"bytes,4,opt,name=endtime,proto3" json:"endtime,omitempty"`
	Inactive   *int32 `protobuf:"varint,5,opt,name=inactive,proto3,oneof" json:"inactive,omitempty"`
}

func (x *WrtGP) Reset() {
	*x = WrtGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WrtGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WrtGP) ProtoMessage() {}

func (x *WrtGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WrtGP.ProtoReflect.Descriptor instead.
func (*WrtGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{238}
}

func (x *WrtGP) GetGnL_Region() string {
	if x != nil {
		return x.GnL_Region
	}
	return ""
}

func (x *WrtGP) GetGnL_WRT_ID() string {
	if x != nil {
		return x.GnL_WRT_ID
	}
	return ""
}

func (x *WrtGP) GetStrttime() string {
	if x != nil {
		return x.Strttime
	}
	return ""
}

func (x *WrtGP) GetEndtime() string {
	if x != nil {
		return x.Endtime
	}
	return ""
}

func (x *WrtGP) GetInactive() int32 {
	if x != nil && x.Inactive != nil {
		return *x.Inactive
	}
	return 0
}

type GetWrtGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32    `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32    `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32    `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*WrtGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool     `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string   `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetWrtGPResponse) Reset() {
	*x = GetWrtGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWrtGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWrtGPResponse) ProtoMessage() {}

func (x *GetWrtGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWrtGPResponse.ProtoReflect.Descriptor instead.
func (*GetWrtGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{239}
}

func (x *GetWrtGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetWrtGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetWrtGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetWrtGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetWrtGPResponse) GetData() []*WrtGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetWrtGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetWrtGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetWrtGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetWrtGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status    string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Search    string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	GnlRegion string `protobuf:"bytes,5,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	GnlWrtId  string `protobuf:"bytes,6,opt,name=gnl_wrt_id,json=gnlWrtId,proto3" json:"gnl_wrt_id,omitempty"`
	OrderBy   string `protobuf:"bytes,7,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetWrtGPListRequest) Reset() {
	*x = GetWrtGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWrtGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWrtGPListRequest) ProtoMessage() {}

func (x *GetWrtGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWrtGPListRequest.ProtoReflect.Descriptor instead.
func (*GetWrtGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{240}
}

func (x *GetWrtGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetWrtGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetWrtGPListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetWrtGPListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetWrtGPListRequest) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *GetWrtGPListRequest) GetGnlWrtId() string {
	if x != nil {
		return x.GnlWrtId
	}
	return ""
}

func (x *GetWrtGPListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetWrtGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetWrtGPDetailRequest) Reset() {
	*x = GetWrtGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWrtGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWrtGPDetailRequest) ProtoMessage() {}

func (x *GetWrtGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWrtGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetWrtGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{241}
}

func (x *GetWrtGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdatePurchaseOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	VendorId    int64                             `protobuf:"varint,2,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	SiteId      int64                             `protobuf:"varint,3,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	OrderDate   string                            `protobuf:"bytes,4,opt,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`
	StrEtaDate  string                            `protobuf:"bytes,5,opt,name=str_eta_date,json=strEtaDate,proto3" json:"str_eta_date,omitempty"`
	EtaTime     string                            `protobuf:"bytes,6,opt,name=eta_time,json=etaTime,proto3" json:"eta_time,omitempty"`
	DeliveryFee float64                           `protobuf:"fixed64,7,opt,name=delivery_fee,json=deliveryFee,proto3" json:"delivery_fee,omitempty"`
	Note        string                            `protobuf:"bytes,8,opt,name=note,proto3" json:"note,omitempty"`
	TaxPct      float64                           `protobuf:"fixed64,9,opt,name=tax_pct,json=taxPct,proto3" json:"tax_pct,omitempty"`
	Latitude    float64                           `protobuf:"fixed64,10,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude   float64                           `protobuf:"fixed64,11,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Items       []*UpdatePurchaseOrderItemRequest `protobuf:"bytes,12,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *UpdatePurchaseOrderRequest) Reset() {
	*x = UpdatePurchaseOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePurchaseOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePurchaseOrderRequest) ProtoMessage() {}

func (x *UpdatePurchaseOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePurchaseOrderRequest.ProtoReflect.Descriptor instead.
func (*UpdatePurchaseOrderRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{242}
}

func (x *UpdatePurchaseOrderRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePurchaseOrderRequest) GetVendorId() int64 {
	if x != nil {
		return x.VendorId
	}
	return 0
}

func (x *UpdatePurchaseOrderRequest) GetSiteId() int64 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *UpdatePurchaseOrderRequest) GetOrderDate() string {
	if x != nil {
		return x.OrderDate
	}
	return ""
}

func (x *UpdatePurchaseOrderRequest) GetStrEtaDate() string {
	if x != nil {
		return x.StrEtaDate
	}
	return ""
}

func (x *UpdatePurchaseOrderRequest) GetEtaTime() string {
	if x != nil {
		return x.EtaTime
	}
	return ""
}

func (x *UpdatePurchaseOrderRequest) GetDeliveryFee() float64 {
	if x != nil {
		return x.DeliveryFee
	}
	return 0
}

func (x *UpdatePurchaseOrderRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *UpdatePurchaseOrderRequest) GetTaxPct() float64 {
	if x != nil {
		return x.TaxPct
	}
	return 0
}

func (x *UpdatePurchaseOrderRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *UpdatePurchaseOrderRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *UpdatePurchaseOrderRequest) GetItems() []*UpdatePurchaseOrderItemRequest {
	if x != nil {
		return x.Items
	}
	return nil
}

type UpdateProductPurchaseOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DeliveryFee float64                           `protobuf:"fixed64,2,opt,name=delivery_fee,json=deliveryFee,proto3" json:"delivery_fee,omitempty"`
	TaxPct      float64                           `protobuf:"fixed64,3,opt,name=tax_pct,json=taxPct,proto3" json:"tax_pct,omitempty"`
	Items       []*UpdatePurchaseOrderItemRequest `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *UpdateProductPurchaseOrderRequest) Reset() {
	*x = UpdateProductPurchaseOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProductPurchaseOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProductPurchaseOrderRequest) ProtoMessage() {}

func (x *UpdateProductPurchaseOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProductPurchaseOrderRequest.ProtoReflect.Descriptor instead.
func (*UpdateProductPurchaseOrderRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{243}
}

func (x *UpdateProductPurchaseOrderRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProductPurchaseOrderRequest) GetDeliveryFee() float64 {
	if x != nil {
		return x.DeliveryFee
	}
	return 0
}

func (x *UpdateProductPurchaseOrderRequest) GetTaxPct() float64 {
	if x != nil {
		return x.TaxPct
	}
	return 0
}

func (x *UpdateProductPurchaseOrderRequest) GetItems() []*UpdatePurchaseOrderItemRequest {
	if x != nil {
		return x.Items
	}
	return nil
}

type UpdatePurchaseOrderItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ItemId        int64   `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	OrderQty      float64 `protobuf:"fixed64,3,opt,name=order_qty,json=orderQty,proto3" json:"order_qty,omitempty"`
	UnitPrice     float64 `protobuf:"fixed64,4,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	Note          string  `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
	PurchaseQty   float64 `protobuf:"fixed64,6,opt,name=purchase_qty,json=purchaseQty,proto3" json:"purchase_qty,omitempty"`
	IncludeTax    int32   `protobuf:"varint,7,opt,name=include_tax,json=includeTax,proto3" json:"include_tax,omitempty"`
	TaxPercentage float64 `protobuf:"fixed64,8,opt,name=tax_percentage,json=taxPercentage,proto3" json:"tax_percentage,omitempty"`
}

func (x *UpdatePurchaseOrderItemRequest) Reset() {
	*x = UpdatePurchaseOrderItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePurchaseOrderItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePurchaseOrderItemRequest) ProtoMessage() {}

func (x *UpdatePurchaseOrderItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePurchaseOrderItemRequest.ProtoReflect.Descriptor instead.
func (*UpdatePurchaseOrderItemRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{244}
}

func (x *UpdatePurchaseOrderItemRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePurchaseOrderItemRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *UpdatePurchaseOrderItemRequest) GetOrderQty() float64 {
	if x != nil {
		return x.OrderQty
	}
	return 0
}

func (x *UpdatePurchaseOrderItemRequest) GetUnitPrice() float64 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *UpdatePurchaseOrderItemRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *UpdatePurchaseOrderItemRequest) GetPurchaseQty() float64 {
	if x != nil {
		return x.PurchaseQty
	}
	return 0
}

func (x *UpdatePurchaseOrderItemRequest) GetIncludeTax() int32 {
	if x != nil {
		return x.IncludeTax
	}
	return 0
}

func (x *UpdatePurchaseOrderItemRequest) GetTaxPercentage() float64 {
	if x != nil {
		return x.TaxPercentage
	}
	return 0
}

type ItemTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64                            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code               string                           `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	RequestDate        *timestamppb.Timestamp           `protobuf:"bytes,3,opt,name=request_date,json=requestDate,proto3" json:"request_date,omitempty"`
	RecognitionDate    *timestamppb.Timestamp           `protobuf:"bytes,4,opt,name=recognition_date,json=recognitionDate,proto3" json:"recognition_date,omitempty"`
	EtaDate            *timestamppb.Timestamp           `protobuf:"bytes,5,opt,name=eta_date,json=etaDate,proto3" json:"eta_date,omitempty"`
	EtaTime            string                           `protobuf:"bytes,6,opt,name=eta_time,json=etaTime,proto3" json:"eta_time,omitempty"`
	AtaDate            *timestamppb.Timestamp           `protobuf:"bytes,7,opt,name=ata_date,json=ataDate,proto3" json:"ata_date,omitempty"`
	AtaTime            string                           `protobuf:"bytes,8,opt,name=ata_time,json=ataTime,proto3" json:"ata_time,omitempty"`
	AdditionalCost     float64                          `protobuf:"fixed64,9,opt,name=additional_cost,json=additionalCost,proto3" json:"additional_cost,omitempty"`
	AdditionalCostNote string                           `protobuf:"bytes,10,opt,name=additional_cost_note,json=additionalCostNote,proto3" json:"additional_cost_note,omitempty"`
	StockType          int32                            `protobuf:"varint,11,opt,name=stock_type,json=stockType,proto3" json:"stock_type,omitempty"`
	TotalCost          float64                          `protobuf:"fixed64,12,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	TotalCharge        float64                          `protobuf:"fixed64,13,opt,name=total_charge,json=totalCharge,proto3" json:"total_charge,omitempty"`
	TotalWeight        float64                          `protobuf:"fixed64,14,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
	Note               string                           `protobuf:"bytes,15,opt,name=note,proto3" json:"note,omitempty"`
	Status             int32                            `protobuf:"varint,16,opt,name=status,proto3" json:"status,omitempty"`
	Locked             int32                            `protobuf:"varint,17,opt,name=locked,proto3" json:"locked,omitempty"`
	LockedBy           int64                            `protobuf:"varint,18,opt,name=locked_by,json=lockedBy,proto3" json:"locked_by,omitempty"`
	TotalSku           int64                            `protobuf:"varint,19,opt,name=total_sku,json=totalSku,proto3" json:"total_sku,omitempty"`
	SiteOriginId       int64                            `protobuf:"varint,20,opt,name=SiteOriginId,proto3" json:"SiteOriginId,omitempty"`
	SiteDestinationId  int64                            `protobuf:"varint,21,opt,name=SiteDestinationId,proto3" json:"SiteDestinationId,omitempty"`
	UpdatedAt          *timestamppb.Timestamp           `protobuf:"bytes,22,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy          int64                            `protobuf:"varint,23,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	ItemTransferItem   []*ItemTransferItem              `protobuf:"bytes,24,rep,name=ItemTransferItem,proto3" json:"ItemTransferItem,omitempty"`
	SiteOrigin         *Site                            `protobuf:"bytes,25,opt,name=site_origin,json=siteOrigin,proto3" json:"site_origin,omitempty"`
	SiteDestination    *Site                            `protobuf:"bytes,26,opt,name=site_destination,json=siteDestination,proto3" json:"site_destination,omitempty"`
	Receiving          []*ReceivingListinDetailResponse `protobuf:"bytes,27,rep,name=receiving,proto3" json:"receiving,omitempty"`
}

func (x *ItemTransfer) Reset() {
	*x = ItemTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemTransfer) ProtoMessage() {}

func (x *ItemTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemTransfer.ProtoReflect.Descriptor instead.
func (*ItemTransfer) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{245}
}

func (x *ItemTransfer) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemTransfer) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ItemTransfer) GetRequestDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestDate
	}
	return nil
}

func (x *ItemTransfer) GetRecognitionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RecognitionDate
	}
	return nil
}

func (x *ItemTransfer) GetEtaDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EtaDate
	}
	return nil
}

func (x *ItemTransfer) GetEtaTime() string {
	if x != nil {
		return x.EtaTime
	}
	return ""
}

func (x *ItemTransfer) GetAtaDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AtaDate
	}
	return nil
}

func (x *ItemTransfer) GetAtaTime() string {
	if x != nil {
		return x.AtaTime
	}
	return ""
}

func (x *ItemTransfer) GetAdditionalCost() float64 {
	if x != nil {
		return x.AdditionalCost
	}
	return 0
}

func (x *ItemTransfer) GetAdditionalCostNote() string {
	if x != nil {
		return x.AdditionalCostNote
	}
	return ""
}

func (x *ItemTransfer) GetStockType() int32 {
	if x != nil {
		return x.StockType
	}
	return 0
}

func (x *ItemTransfer) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *ItemTransfer) GetTotalCharge() float64 {
	if x != nil {
		return x.TotalCharge
	}
	return 0
}

func (x *ItemTransfer) GetTotalWeight() float64 {
	if x != nil {
		return x.TotalWeight
	}
	return 0
}

func (x *ItemTransfer) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *ItemTransfer) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ItemTransfer) GetLocked() int32 {
	if x != nil {
		return x.Locked
	}
	return 0
}

func (x *ItemTransfer) GetLockedBy() int64 {
	if x != nil {
		return x.LockedBy
	}
	return 0
}

func (x *ItemTransfer) GetTotalSku() int64 {
	if x != nil {
		return x.TotalSku
	}
	return 0
}

func (x *ItemTransfer) GetSiteOriginId() int64 {
	if x != nil {
		return x.SiteOriginId
	}
	return 0
}

func (x *ItemTransfer) GetSiteDestinationId() int64 {
	if x != nil {
		return x.SiteDestinationId
	}
	return 0
}

func (x *ItemTransfer) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ItemTransfer) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *ItemTransfer) GetItemTransferItem() []*ItemTransferItem {
	if x != nil {
		return x.ItemTransferItem
	}
	return nil
}

func (x *ItemTransfer) GetSiteOrigin() *Site {
	if x != nil {
		return x.SiteOrigin
	}
	return nil
}

func (x *ItemTransfer) GetSiteDestination() *Site {
	if x != nil {
		return x.SiteDestination
	}
	return nil
}

func (x *ItemTransfer) GetReceiving() []*ReceivingListinDetailResponse {
	if x != nil {
		return x.Receiving
	}
	return nil
}

type ItemTransferItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ItemTransferId int64         `protobuf:"varint,2,opt,name=item_transfer_id,json=itemTransferId,proto3" json:"item_transfer_id,omitempty"`
	ItemId         int64         `protobuf:"varint,3,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	DeliverQty     float64       `protobuf:"fixed64,4,opt,name=deliver_qty,json=deliverQty,proto3" json:"deliver_qty,omitempty"`
	ReceiveQty     float64       `protobuf:"fixed64,5,opt,name=receive_qty,json=receiveQty,proto3" json:"receive_qty,omitempty"`
	RequestQty     float64       `protobuf:"fixed64,6,opt,name=request_qty,json=requestQty,proto3" json:"request_qty,omitempty"`
	ReceiveNote    string        `protobuf:"bytes,7,opt,name=receive_note,json=receiveNote,proto3" json:"receive_note,omitempty"`
	UnitCost       float64       `protobuf:"fixed64,8,opt,name=unit_cost,json=unitCost,proto3" json:"unit_cost,omitempty"`
	Subtotal       float64       `protobuf:"fixed64,9,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	Weight         float64       `protobuf:"fixed64,10,opt,name=weight,proto3" json:"weight,omitempty"`
	Note           string        `protobuf:"bytes,11,opt,name=note,proto3" json:"note,omitempty"`
	TransferItem   *ItemTransfer `protobuf:"bytes,12,opt,name=transfer_item,json=transferItem,proto3" json:"transfer_item,omitempty"`
	Item           *Item         `protobuf:"bytes,13,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ItemTransferItem) Reset() {
	*x = ItemTransferItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemTransferItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemTransferItem) ProtoMessage() {}

func (x *ItemTransferItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemTransferItem.ProtoReflect.Descriptor instead.
func (*ItemTransferItem) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{246}
}

func (x *ItemTransferItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemTransferItem) GetItemTransferId() int64 {
	if x != nil {
		return x.ItemTransferId
	}
	return 0
}

func (x *ItemTransferItem) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ItemTransferItem) GetDeliverQty() float64 {
	if x != nil {
		return x.DeliverQty
	}
	return 0
}

func (x *ItemTransferItem) GetReceiveQty() float64 {
	if x != nil {
		return x.ReceiveQty
	}
	return 0
}

func (x *ItemTransferItem) GetRequestQty() float64 {
	if x != nil {
		return x.RequestQty
	}
	return 0
}

func (x *ItemTransferItem) GetReceiveNote() string {
	if x != nil {
		return x.ReceiveNote
	}
	return ""
}

func (x *ItemTransferItem) GetUnitCost() float64 {
	if x != nil {
		return x.UnitCost
	}
	return 0
}

func (x *ItemTransferItem) GetSubtotal() float64 {
	if x != nil {
		return x.Subtotal
	}
	return 0
}

func (x *ItemTransferItem) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ItemTransferItem) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *ItemTransferItem) GetTransferItem() *ItemTransfer {
	if x != nil {
		return x.TransferItem
	}
	return nil
}

func (x *ItemTransferItem) GetItem() *Item {
	if x != nil {
		return x.Item
	}
	return nil
}

type GetItemTransferListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search  string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetItemTransferListRequest) Reset() {
	*x = GetItemTransferListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemTransferListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemTransferListRequest) ProtoMessage() {}

func (x *GetItemTransferListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemTransferListRequest.ProtoReflect.Descriptor instead.
func (*GetItemTransferListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{247}
}

func (x *GetItemTransferListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetItemTransferListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetItemTransferListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetItemTransferListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetItemTransferListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetItemTransferListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*ItemTransfer `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetItemTransferListResponse) Reset() {
	*x = GetItemTransferListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemTransferListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemTransferListResponse) ProtoMessage() {}

func (x *GetItemTransferListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemTransferListResponse.ProtoReflect.Descriptor instead.
func (*GetItemTransferListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{248}
}

func (x *GetItemTransferListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetItemTransferListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetItemTransferListResponse) GetData() []*ItemTransfer {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetItemTransferDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetItemTransferDetailRequest) Reset() {
	*x = GetItemTransferDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemTransferDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemTransferDetailRequest) ProtoMessage() {}

func (x *GetItemTransferDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemTransferDetailRequest.ProtoReflect.Descriptor instead.
func (*GetItemTransferDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{249}
}

func (x *GetItemTransferDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetItemTransferDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetItemTransferDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *ItemTransfer `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetItemTransferDetailResponse) Reset() {
	*x = GetItemTransferDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemTransferDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemTransferDetailResponse) ProtoMessage() {}

func (x *GetItemTransferDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemTransferDetailResponse.ProtoReflect.Descriptor instead.
func (*GetItemTransferDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{250}
}

func (x *GetItemTransferDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetItemTransferDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetItemTransferDetailResponse) GetData() *ItemTransfer {
	if x != nil {
		return x.Data
	}
	return nil
}

type SalesInvoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code              string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	CodeExt           string                 `protobuf:"bytes,3,opt,name=code_ext,json=codeExt,proto3" json:"code_ext,omitempty"`
	Status            int32                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	RecognitionDate   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=recognition_date,json=recognitionDate,proto3" json:"recognition_date,omitempty"`
	DueDate           *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	BillingAddress    string                 `protobuf:"bytes,7,opt,name=billing_address,json=billingAddress,proto3" json:"billing_address,omitempty"`
	DeliveryFee       float64                `protobuf:"fixed64,8,opt,name=delivery_fee,json=deliveryFee,proto3" json:"delivery_fee,omitempty"`
	VouRedeemCode     string                 `protobuf:"bytes,9,opt,name=vou_redeem_code,json=vouRedeemCode,proto3" json:"vou_redeem_code,omitempty"`
	VouDiscAmount     float64                `protobuf:"fixed64,10,opt,name=vou_disc_amount,json=vouDiscAmount,proto3" json:"vou_disc_amount,omitempty"`
	PointRedeemAmount float64                `protobuf:"fixed64,11,opt,name=point_redeem_amount,json=pointRedeemAmount,proto3" json:"point_redeem_amount,omitempty"`
	Adjustment        int32                  `protobuf:"varint,12,opt,name=adjustment,proto3" json:"adjustment,omitempty"`
	AdjAmount         float64                `protobuf:"fixed64,13,opt,name=adj_amount,json=adjAmount,proto3" json:"adj_amount,omitempty"`
	AdjNote           string                 `protobuf:"bytes,14,opt,name=adj_note,json=adjNote,proto3" json:"adj_note,omitempty"`
	TotalPrice        float64                `protobuf:"fixed64,15,opt,name=total_price,json=totalPrice,proto3" json:"total_price,omitempty"`
	TotalCharge       float64                `protobuf:"fixed64,16,opt,name=total_charge,json=totalCharge,proto3" json:"total_charge,omitempty"`
	DeltaPrint        int64                  `protobuf:"varint,17,opt,name=delta_print,json=deltaPrint,proto3" json:"delta_print,omitempty"`
	Note              string                 `protobuf:"bytes,18,opt,name=note,proto3" json:"note,omitempty"`
	VoucherId         int64                  `protobuf:"varint,19,opt,name=voucher_id,json=voucherId,proto3" json:"voucher_id,omitempty"`
	RemainingAmount   float64                `protobuf:"fixed64,20,opt,name=remaining_amount,json=remainingAmount,proto3" json:"remaining_amount,omitempty"`
}

func (x *SalesInvoice) Reset() {
	*x = SalesInvoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesInvoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesInvoice) ProtoMessage() {}

func (x *SalesInvoice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesInvoice.ProtoReflect.Descriptor instead.
func (*SalesInvoice) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{251}
}

func (x *SalesInvoice) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SalesInvoice) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SalesInvoice) GetCodeExt() string {
	if x != nil {
		return x.CodeExt
	}
	return ""
}

func (x *SalesInvoice) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SalesInvoice) GetRecognitionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RecognitionDate
	}
	return nil
}

func (x *SalesInvoice) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

func (x *SalesInvoice) GetBillingAddress() string {
	if x != nil {
		return x.BillingAddress
	}
	return ""
}

func (x *SalesInvoice) GetDeliveryFee() float64 {
	if x != nil {
		return x.DeliveryFee
	}
	return 0
}

func (x *SalesInvoice) GetVouRedeemCode() string {
	if x != nil {
		return x.VouRedeemCode
	}
	return ""
}

func (x *SalesInvoice) GetVouDiscAmount() float64 {
	if x != nil {
		return x.VouDiscAmount
	}
	return 0
}

func (x *SalesInvoice) GetPointRedeemAmount() float64 {
	if x != nil {
		return x.PointRedeemAmount
	}
	return 0
}

func (x *SalesInvoice) GetAdjustment() int32 {
	if x != nil {
		return x.Adjustment
	}
	return 0
}

func (x *SalesInvoice) GetAdjAmount() float64 {
	if x != nil {
		return x.AdjAmount
	}
	return 0
}

func (x *SalesInvoice) GetAdjNote() string {
	if x != nil {
		return x.AdjNote
	}
	return ""
}

func (x *SalesInvoice) GetTotalPrice() float64 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

func (x *SalesInvoice) GetTotalCharge() float64 {
	if x != nil {
		return x.TotalCharge
	}
	return 0
}

func (x *SalesInvoice) GetDeltaPrint() int64 {
	if x != nil {
		return x.DeltaPrint
	}
	return 0
}

func (x *SalesInvoice) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *SalesInvoice) GetVoucherId() int64 {
	if x != nil {
		return x.VoucherId
	}
	return 0
}

func (x *SalesInvoice) GetRemainingAmount() float64 {
	if x != nil {
		return x.RemainingAmount
	}
	return 0
}

type GetSalesInvoiceDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetSalesInvoiceDetailRequest) Reset() {
	*x = GetSalesInvoiceDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesInvoiceDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesInvoiceDetailRequest) ProtoMessage() {}

func (x *GetSalesInvoiceDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesInvoiceDetailRequest.ProtoReflect.Descriptor instead.
func (*GetSalesInvoiceDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{252}
}

func (x *GetSalesInvoiceDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetSalesInvoiceDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetSalesInvoiceDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *SalesInvoice `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSalesInvoiceDetailResponse) Reset() {
	*x = GetSalesInvoiceDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesInvoiceDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesInvoiceDetailResponse) ProtoMessage() {}

func (x *GetSalesInvoiceDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesInvoiceDetailResponse.ProtoReflect.Descriptor instead.
func (*GetSalesInvoiceDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{253}
}

func (x *GetSalesInvoiceDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSalesInvoiceDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSalesInvoiceDetailResponse) GetData() *SalesInvoice {
	if x != nil {
		return x.Data
	}
	return nil
}

type SalesPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code             string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Status           int32                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	RecognitionDate  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=recognition_date,json=recognitionDate,proto3" json:"recognition_date,omitempty"`
	Amount           float64                `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
	BankReceiveNum   string                 `protobuf:"bytes,6,opt,name=bank_receive_num,json=bankReceiveNum,proto3" json:"bank_receive_num,omitempty"`
	PaidOff          int32                  `protobuf:"varint,7,opt,name=paid_off,json=paidOff,proto3" json:"paid_off,omitempty"`
	ImageUrl         string                 `protobuf:"bytes,8,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Note             string                 `protobuf:"bytes,9,opt,name=note,proto3" json:"note,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy        int64                  `protobuf:"varint,11,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CancellationNote string                 `protobuf:"bytes,12,opt,name=cancellation_note,json=cancellationNote,proto3" json:"cancellation_note,omitempty"`
	ReceivedDate     *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=received_date,json=receivedDate,proto3" json:"received_date,omitempty"`
	SalesInvoiceId   int64                  `protobuf:"varint,15,opt,name=sales_invoice_id,json=salesInvoiceId,proto3" json:"sales_invoice_id,omitempty"`
}

func (x *SalesPayment) Reset() {
	*x = SalesPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesPayment) ProtoMessage() {}

func (x *SalesPayment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesPayment.ProtoReflect.Descriptor instead.
func (*SalesPayment) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{254}
}

func (x *SalesPayment) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SalesPayment) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SalesPayment) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SalesPayment) GetRecognitionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RecognitionDate
	}
	return nil
}

func (x *SalesPayment) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SalesPayment) GetBankReceiveNum() string {
	if x != nil {
		return x.BankReceiveNum
	}
	return ""
}

func (x *SalesPayment) GetPaidOff() int32 {
	if x != nil {
		return x.PaidOff
	}
	return 0
}

func (x *SalesPayment) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *SalesPayment) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *SalesPayment) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SalesPayment) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *SalesPayment) GetCancellationNote() string {
	if x != nil {
		return x.CancellationNote
	}
	return ""
}

func (x *SalesPayment) GetReceivedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedDate
	}
	return nil
}

func (x *SalesPayment) GetSalesInvoiceId() int64 {
	if x != nil {
		return x.SalesInvoiceId
	}
	return 0
}

type GetSalesPaymentListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesInvoiceId int64 `protobuf:"varint,1,opt,name=sales_invoice_id,json=salesInvoiceId,proto3" json:"sales_invoice_id,omitempty"`
}

func (x *GetSalesPaymentListRequest) Reset() {
	*x = GetSalesPaymentListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaymentListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaymentListRequest) ProtoMessage() {}

func (x *GetSalesPaymentListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaymentListRequest.ProtoReflect.Descriptor instead.
func (*GetSalesPaymentListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{255}
}

func (x *GetSalesPaymentListRequest) GetSalesInvoiceId() int64 {
	if x != nil {
		return x.SalesInvoiceId
	}
	return 0
}

type GetSalesPaymentListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*SalesPayment `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSalesPaymentListResponse) Reset() {
	*x = GetSalesPaymentListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaymentListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaymentListResponse) ProtoMessage() {}

func (x *GetSalesPaymentListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaymentListResponse.ProtoReflect.Descriptor instead.
func (*GetSalesPaymentListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{256}
}

func (x *GetSalesPaymentListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSalesPaymentListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSalesPaymentListResponse) GetData() []*SalesPayment {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSalesPaymentDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSalesPaymentDetailRequest) Reset() {
	*x = GetSalesPaymentDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaymentDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaymentDetailRequest) ProtoMessage() {}

func (x *GetSalesPaymentDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaymentDetailRequest.ProtoReflect.Descriptor instead.
func (*GetSalesPaymentDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{257}
}

func (x *GetSalesPaymentDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetSalesPaymentDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *SalesPayment `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSalesPaymentDetailResponse) Reset() {
	*x = GetSalesPaymentDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaymentDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaymentDetailResponse) ProtoMessage() {}

func (x *GetSalesPaymentDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaymentDetailResponse.ProtoReflect.Descriptor instead.
func (*GetSalesPaymentDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{258}
}

func (x *GetSalesPaymentDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSalesPaymentDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSalesPaymentDetailResponse) GetData() *SalesPayment {
	if x != nil {
		return x.Data
	}
	return nil
}

type SalesInvoiceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SalesInvoiceId   int64   `protobuf:"varint,2,opt,name=sales_invoice_id,json=salesInvoiceId,proto3" json:"sales_invoice_id,omitempty"`
	SalesOrderItemId int64   `protobuf:"varint,3,opt,name=sales_order_item_id,json=salesOrderItemId,proto3" json:"sales_order_item_id,omitempty"`
	ItemId           int64   `protobuf:"varint,4,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	InvoiceQty       float64 `protobuf:"fixed64,5,opt,name=invoice_qty,json=invoiceQty,proto3" json:"invoice_qty,omitempty"`
	UnitPrice        float64 `protobuf:"fixed64,6,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	Subtotal         float64 `protobuf:"fixed64,7,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	Note             string  `protobuf:"bytes,8,opt,name=note,proto3" json:"note,omitempty"`
	TaxableItem      int32   `protobuf:"varint,9,opt,name=taxable_item,json=taxableItem,proto3" json:"taxable_item,omitempty"`
	TaxPercentage    float64 `protobuf:"fixed64,10,opt,name=tax_percentage,json=taxPercentage,proto3" json:"tax_percentage,omitempty"`
	SkuDiscAmount    float64 `protobuf:"fixed64,11,opt,name=sku_disc_amount,json=skuDiscAmount,proto3" json:"sku_disc_amount,omitempty"`
}

func (x *SalesInvoiceItem) Reset() {
	*x = SalesInvoiceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesInvoiceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesInvoiceItem) ProtoMessage() {}

func (x *SalesInvoiceItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesInvoiceItem.ProtoReflect.Descriptor instead.
func (*SalesInvoiceItem) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{259}
}

func (x *SalesInvoiceItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SalesInvoiceItem) GetSalesInvoiceId() int64 {
	if x != nil {
		return x.SalesInvoiceId
	}
	return 0
}

func (x *SalesInvoiceItem) GetSalesOrderItemId() int64 {
	if x != nil {
		return x.SalesOrderItemId
	}
	return 0
}

func (x *SalesInvoiceItem) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *SalesInvoiceItem) GetInvoiceQty() float64 {
	if x != nil {
		return x.InvoiceQty
	}
	return 0
}

func (x *SalesInvoiceItem) GetUnitPrice() float64 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *SalesInvoiceItem) GetSubtotal() float64 {
	if x != nil {
		return x.Subtotal
	}
	return 0
}

func (x *SalesInvoiceItem) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *SalesInvoiceItem) GetTaxableItem() int32 {
	if x != nil {
		return x.TaxableItem
	}
	return 0
}

func (x *SalesInvoiceItem) GetTaxPercentage() float64 {
	if x != nil {
		return x.TaxPercentage
	}
	return 0
}

func (x *SalesInvoiceItem) GetSkuDiscAmount() float64 {
	if x != nil {
		return x.SkuDiscAmount
	}
	return 0
}

type GetSalesInvoiceItemListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SalesInvoiceId int64 `protobuf:"varint,1,opt,name=sales_invoice_id,json=salesInvoiceId,proto3" json:"sales_invoice_id,omitempty"`
}

func (x *GetSalesInvoiceItemListRequest) Reset() {
	*x = GetSalesInvoiceItemListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesInvoiceItemListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesInvoiceItemListRequest) ProtoMessage() {}

func (x *GetSalesInvoiceItemListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesInvoiceItemListRequest.ProtoReflect.Descriptor instead.
func (*GetSalesInvoiceItemListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{260}
}

func (x *GetSalesInvoiceItemListRequest) GetSalesInvoiceId() int64 {
	if x != nil {
		return x.SalesInvoiceId
	}
	return 0
}

type GetSalesInvoiceItemListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*SalesInvoiceItem `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSalesInvoiceItemListResponse) Reset() {
	*x = GetSalesInvoiceItemListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesInvoiceItemListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesInvoiceItemListResponse) ProtoMessage() {}

func (x *GetSalesInvoiceItemListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesInvoiceItemListResponse.ProtoReflect.Descriptor instead.
func (*GetSalesInvoiceItemListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{261}
}

func (x *GetSalesInvoiceItemListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSalesInvoiceItemListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSalesInvoiceItemListResponse) GetData() []*SalesInvoiceItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeliveryOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code             int64                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	ShippingAddress  string                 `protobuf:"bytes,3,opt,name=shipping_address,json=shippingAddress,proto3" json:"shipping_address,omitempty"`
	RecognitionDate  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=recognition_date,json=recognitionDate,proto3" json:"recognition_date,omitempty"`
	ReceiptNote      string                 `protobuf:"bytes,5,opt,name=receipt_note,json=receiptNote,proto3" json:"receipt_note,omitempty"`
	TotalWeight      float64                `protobuf:"fixed64,6,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
	DeltaPrint       int32                  `protobuf:"varint,7,opt,name=delta_print,json=deltaPrint,proto3" json:"delta_print,omitempty"`
	Note             string                 `protobuf:"bytes,8,opt,name=note,proto3" json:"note,omitempty"`
	Status           int32                  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	CancellationNote string                 `protobuf:"bytes,10,opt,name=cancellation_note,json=cancellationNote,proto3" json:"cancellation_note,omitempty"`
	HasDelivered     int32                  `protobuf:"varint,11,opt,name=has_delivered,json=hasDelivered,proto3" json:"has_delivered,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedBy        int64                  `protobuf:"varint,14,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy        int64                  `protobuf:"varint,15,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	ConfirmedAt      *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=confirmed_at,json=confirmedAt,proto3" json:"confirmed_at,omitempty"`
	ConfirmedBy      int64                  `protobuf:"varint,17,opt,name=confirmed_by,json=confirmedBy,proto3" json:"confirmed_by,omitempty"`
	CancelledAt      *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=cancelled_at,json=cancelledAt,proto3" json:"cancelled_at,omitempty"`
	CancelledBy      int64                  `protobuf:"varint,19,opt,name=cancelled_by,json=cancelledBy,proto3" json:"cancelled_by,omitempty"`
	SalesOrderId     int64                  `protobuf:"varint,20,opt,name=sales_order_id,json=salesOrderId,proto3" json:"sales_order_id,omitempty"`
	SiteId           int64                  `protobuf:"varint,21,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	WrtId            int64                  `protobuf:"varint,22,opt,name=wrt_id,json=wrtId,proto3" json:"wrt_id,omitempty"`
}

func (x *DeliveryOrder) Reset() {
	*x = DeliveryOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryOrder) ProtoMessage() {}

func (x *DeliveryOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryOrder.ProtoReflect.Descriptor instead.
func (*DeliveryOrder) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{262}
}

func (x *DeliveryOrder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeliveryOrder) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeliveryOrder) GetShippingAddress() string {
	if x != nil {
		return x.ShippingAddress
	}
	return ""
}

func (x *DeliveryOrder) GetRecognitionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RecognitionDate
	}
	return nil
}

func (x *DeliveryOrder) GetReceiptNote() string {
	if x != nil {
		return x.ReceiptNote
	}
	return ""
}

func (x *DeliveryOrder) GetTotalWeight() float64 {
	if x != nil {
		return x.TotalWeight
	}
	return 0
}

func (x *DeliveryOrder) GetDeltaPrint() int32 {
	if x != nil {
		return x.DeltaPrint
	}
	return 0
}

func (x *DeliveryOrder) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *DeliveryOrder) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DeliveryOrder) GetCancellationNote() string {
	if x != nil {
		return x.CancellationNote
	}
	return ""
}

func (x *DeliveryOrder) GetHasDelivered() int32 {
	if x != nil {
		return x.HasDelivered
	}
	return 0
}

func (x *DeliveryOrder) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DeliveryOrder) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *DeliveryOrder) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *DeliveryOrder) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *DeliveryOrder) GetConfirmedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ConfirmedAt
	}
	return nil
}

func (x *DeliveryOrder) GetConfirmedBy() int64 {
	if x != nil {
		return x.ConfirmedBy
	}
	return 0
}

func (x *DeliveryOrder) GetCancelledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CancelledAt
	}
	return nil
}

func (x *DeliveryOrder) GetCancelledBy() int64 {
	if x != nil {
		return x.CancelledBy
	}
	return 0
}

func (x *DeliveryOrder) GetSalesOrderId() int64 {
	if x != nil {
		return x.SalesOrderId
	}
	return 0
}

func (x *DeliveryOrder) GetSiteId() int64 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *DeliveryOrder) GetWrtId() int64 {
	if x != nil {
		return x.WrtId
	}
	return 0
}

type GetDeliveryOrderListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit         int32                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status        int32                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search        string                 `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy       string                 `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	SiteId        int64                  `protobuf:"varint,6,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	OrderDateFrom *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=order_date_from,json=orderDateFrom,proto3" json:"order_date_from,omitempty"`
	OrderDateTo   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=order_date_to,json=orderDateTo,proto3" json:"order_date_to,omitempty"`
	SalesOrderId  int64                  `protobuf:"varint,9,opt,name=sales_order_id,json=salesOrderId,proto3" json:"sales_order_id,omitempty"`
	WrtId         int64                  `protobuf:"varint,10,opt,name=wrt_id,json=wrtId,proto3" json:"wrt_id,omitempty"`
}

func (x *GetDeliveryOrderListRequest) Reset() {
	*x = GetDeliveryOrderListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeliveryOrderListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeliveryOrderListRequest) ProtoMessage() {}

func (x *GetDeliveryOrderListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeliveryOrderListRequest.ProtoReflect.Descriptor instead.
func (*GetDeliveryOrderListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{263}
}

func (x *GetDeliveryOrderListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetDeliveryOrderListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetDeliveryOrderListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetDeliveryOrderListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetDeliveryOrderListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetDeliveryOrderListRequest) GetSiteId() int64 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *GetDeliveryOrderListRequest) GetOrderDateFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderDateFrom
	}
	return nil
}

func (x *GetDeliveryOrderListRequest) GetOrderDateTo() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderDateTo
	}
	return nil
}

func (x *GetDeliveryOrderListRequest) GetSalesOrderId() int64 {
	if x != nil {
		return x.SalesOrderId
	}
	return 0
}

func (x *GetDeliveryOrderListRequest) GetWrtId() int64 {
	if x != nil {
		return x.WrtId
	}
	return 0
}

type GetDeliveryOrderListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*DeliveryOrder `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDeliveryOrderListResponse) Reset() {
	*x = GetDeliveryOrderListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeliveryOrderListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeliveryOrderListResponse) ProtoMessage() {}

func (x *GetDeliveryOrderListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeliveryOrderListResponse.ProtoReflect.Descriptor instead.
func (*GetDeliveryOrderListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{264}
}

func (x *GetDeliveryOrderListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetDeliveryOrderListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetDeliveryOrderListResponse) GetData() []*DeliveryOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeliveryOrderGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docnumbr       string              `protobuf:"bytes,1,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	Docdate        string              `protobuf:"bytes,2,opt,name=docdate,proto3" json:"docdate,omitempty"`
	Sopnumbe       string              `protobuf:"bytes,3,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"`
	Status         string              `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Details        []*ItemDetail       `protobuf:"bytes,5,rep,name=details,proto3" json:"details,omitempty"`
	DataAttachment *DocumentAttachment `protobuf:"bytes,6,opt,name=dataAttachment,proto3" json:"dataAttachment,omitempty"`
}

func (x *DeliveryOrderGP) Reset() {
	*x = DeliveryOrderGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryOrderGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryOrderGP) ProtoMessage() {}

func (x *DeliveryOrderGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryOrderGP.ProtoReflect.Descriptor instead.
func (*DeliveryOrderGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{265}
}

func (x *DeliveryOrderGP) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *DeliveryOrderGP) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *DeliveryOrderGP) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

func (x *DeliveryOrderGP) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DeliveryOrderGP) GetDetails() []*ItemDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *DeliveryOrderGP) GetDataAttachment() *DocumentAttachment {
	if x != nil {
		return x.DataAttachment
	}
	return nil
}

type ItemDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemnmbr   string  `protobuf:"bytes,1,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	Itemdesc   string  `protobuf:"bytes,2,opt,name=itemdesc,proto3" json:"itemdesc,omitempty"`
	Uofm       string  `protobuf:"bytes,3,opt,name=uofm,proto3" json:"uofm,omitempty"`
	Qtyorder   float64 `protobuf:"fixed64,4,opt,name=qtyorder,proto3" json:"qtyorder,omitempty"`
	IvmQtyPack float64 `protobuf:"fixed64,5,opt,name=ivm_qty_pack,json=ivmQtyPack,proto3" json:"ivm_qty_pack,omitempty"`
}

func (x *ItemDetail) Reset() {
	*x = ItemDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemDetail) ProtoMessage() {}

func (x *ItemDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemDetail.ProtoReflect.Descriptor instead.
func (*ItemDetail) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{266}
}

func (x *ItemDetail) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *ItemDetail) GetItemdesc() string {
	if x != nil {
		return x.Itemdesc
	}
	return ""
}

func (x *ItemDetail) GetUofm() string {
	if x != nil {
		return x.Uofm
	}
	return ""
}

func (x *ItemDetail) GetQtyorder() float64 {
	if x != nil {
		return x.Qtyorder
	}
	return 0
}

func (x *ItemDetail) GetIvmQtyPack() float64 {
	if x != nil {
		return x.IvmQtyPack
	}
	return 0
}

type DocumentAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentBody     string `protobuf:"bytes,1,opt,name=documentBody,proto3" json:"documentBody,omitempty"`
	DocumentViewBody string `protobuf:"bytes,2,opt,name=documentViewBody,proto3" json:"documentViewBody,omitempty"`
	PrintCount       int32  `protobuf:"varint,3,opt,name=print_count,json=printCount,proto3" json:"print_count,omitempty"`
}

func (x *DocumentAttachment) Reset() {
	*x = DocumentAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentAttachment) ProtoMessage() {}

func (x *DocumentAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentAttachment.ProtoReflect.Descriptor instead.
func (*DocumentAttachment) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{267}
}

func (x *DocumentAttachment) GetDocumentBody() string {
	if x != nil {
		return x.DocumentBody
	}
	return ""
}

func (x *DocumentAttachment) GetDocumentViewBody() string {
	if x != nil {
		return x.DocumentViewBody
	}
	return ""
}

func (x *DocumentAttachment) GetPrintCount() int32 {
	if x != nil {
		return x.PrintCount
	}
	return 0
}

type GetDeliveryOrderGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	DocNumber string `protobuf:"bytes,3,opt,name=docNumber,proto3" json:"docNumber,omitempty"`
	SopNumbe  string `protobuf:"bytes,4,opt,name=sopNumbe,proto3" json:"sopNumbe,omitempty"`
	DeltaUser string `protobuf:"bytes,5,opt,name=delta_user,json=deltaUser,proto3" json:"delta_user,omitempty"`
}

func (x *GetDeliveryOrderGPListRequest) Reset() {
	*x = GetDeliveryOrderGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeliveryOrderGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeliveryOrderGPListRequest) ProtoMessage() {}

func (x *GetDeliveryOrderGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeliveryOrderGPListRequest.ProtoReflect.Descriptor instead.
func (*GetDeliveryOrderGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{268}
}

func (x *GetDeliveryOrderGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetDeliveryOrderGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetDeliveryOrderGPListRequest) GetDocNumber() string {
	if x != nil {
		return x.DocNumber
	}
	return ""
}

func (x *GetDeliveryOrderGPListRequest) GetSopNumbe() string {
	if x != nil {
		return x.SopNumbe
	}
	return ""
}

func (x *GetDeliveryOrderGPListRequest) GetDeltaUser() string {
	if x != nil {
		return x.DeltaUser
	}
	return ""
}

type GetDeliveryOrderGPListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32              `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32              `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32              `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32              `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*DeliveryOrderGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool               `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       string             `protobuf:"bytes,7,opt,name=errors,proto3" json:"errors,omitempty"`
	Message      string             `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetDeliveryOrderGPListResponse) Reset() {
	*x = GetDeliveryOrderGPListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeliveryOrderGPListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeliveryOrderGPListResponse) ProtoMessage() {}

func (x *GetDeliveryOrderGPListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeliveryOrderGPListResponse.ProtoReflect.Descriptor instead.
func (*GetDeliveryOrderGPListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{269}
}

func (x *GetDeliveryOrderGPListResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetDeliveryOrderGPListResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetDeliveryOrderGPListResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetDeliveryOrderGPListResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetDeliveryOrderGPListResponse) GetData() []*DeliveryOrderGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetDeliveryOrderGPListResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetDeliveryOrderGPListResponse) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

func (x *GetDeliveryOrderGPListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetDeliveryOrderDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Code          string                 `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	OrderDateFrom *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=order_date_from,json=orderDateFrom,proto3" json:"order_date_from,omitempty"`
	OrderDateTo   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=order_date_to,json=orderDateTo,proto3" json:"order_date_to,omitempty"`
	SalesOrderId  int64                  `protobuf:"varint,6,opt,name=sales_order_id,json=salesOrderId,proto3" json:"sales_order_id,omitempty"`
	SiteId        int64                  `protobuf:"varint,7,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	WrtId         int64                  `protobuf:"varint,8,opt,name=wrt_id,json=wrtId,proto3" json:"wrt_id,omitempty"`
}

func (x *GetDeliveryOrderDetailRequest) Reset() {
	*x = GetDeliveryOrderDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeliveryOrderDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeliveryOrderDetailRequest) ProtoMessage() {}

func (x *GetDeliveryOrderDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeliveryOrderDetailRequest.ProtoReflect.Descriptor instead.
func (*GetDeliveryOrderDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{270}
}

func (x *GetDeliveryOrderDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetDeliveryOrderDetailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetDeliveryOrderDetailRequest) GetOrderDateFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderDateFrom
	}
	return nil
}

func (x *GetDeliveryOrderDetailRequest) GetOrderDateTo() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderDateTo
	}
	return nil
}

func (x *GetDeliveryOrderDetailRequest) GetSalesOrderId() int64 {
	if x != nil {
		return x.SalesOrderId
	}
	return 0
}

func (x *GetDeliveryOrderDetailRequest) GetSiteId() int64 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *GetDeliveryOrderDetailRequest) GetWrtId() int64 {
	if x != nil {
		return x.WrtId
	}
	return 0
}

type GetDeliveryOrderDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *DeliveryOrder `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDeliveryOrderDetailResponse) Reset() {
	*x = GetDeliveryOrderDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeliveryOrderDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeliveryOrderDetailResponse) ProtoMessage() {}

func (x *GetDeliveryOrderDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeliveryOrderDetailResponse.ProtoReflect.Descriptor instead.
func (*GetDeliveryOrderDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{271}
}

func (x *GetDeliveryOrderDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetDeliveryOrderDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetDeliveryOrderDetailResponse) GetData() *DeliveryOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

type DetailOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IvmCb      int32   `protobuf:"varint,1,opt,name=ivm_cb,json=ivmCb,proto3" json:"ivm_cb,omitempty"`
	Sopnumbe   string  `protobuf:"bytes,2,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"`
	Qtyorder   float64 `protobuf:"fixed64,3,opt,name=qtyorder,proto3" json:"qtyorder,omitempty"`
	IvmQtyPack float64 `protobuf:"fixed64,4,opt,name=ivm_qty_pack,json=ivmQtyPack,proto3" json:"ivm_qty_pack,omitempty"`
}

func (x *DetailOrder) Reset() {
	*x = DetailOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailOrder) ProtoMessage() {}

func (x *DetailOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailOrder.ProtoReflect.Descriptor instead.
func (*DetailOrder) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{272}
}

func (x *DetailOrder) GetIvmCb() int32 {
	if x != nil {
		return x.IvmCb
	}
	return 0
}

func (x *DetailOrder) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

func (x *DetailOrder) GetQtyorder() float64 {
	if x != nil {
		return x.Qtyorder
	}
	return 0
}

func (x *DetailOrder) GetIvmQtyPack() float64 {
	if x != nil {
		return x.IvmQtyPack
	}
	return 0
}

type DetailItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lnseqnbr   int32   `protobuf:"varint,1,opt,name=lnseqnbr,proto3" json:"lnseqnbr,omitempty"`
	Itemnmbr   string  `protobuf:"bytes,2,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	Uofm       string  `protobuf:"bytes,3,opt,name=uofm,proto3" json:"uofm,omitempty"`
	Qtyorder   float64 `protobuf:"fixed64,4,opt,name=qtyorder,proto3" json:"qtyorder,omitempty"`
	IvmQtyPack float64 `protobuf:"fixed64,5,opt,name=ivm_qty_pack,json=ivmQtyPack,proto3" json:"ivm_qty_pack,omitempty"`
	Locncode   string  `protobuf:"bytes,6,opt,name=locncode,proto3" json:"locncode,omitempty"`
}

func (x *DetailItem) Reset() {
	*x = DetailItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailItem) ProtoMessage() {}

func (x *DetailItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailItem.ProtoReflect.Descriptor instead.
func (*DetailItem) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{273}
}

func (x *DetailItem) GetLnseqnbr() int32 {
	if x != nil {
		return x.Lnseqnbr
	}
	return 0
}

func (x *DetailItem) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *DetailItem) GetUofm() string {
	if x != nil {
		return x.Uofm
	}
	return ""
}

func (x *DetailItem) GetQtyorder() float64 {
	if x != nil {
		return x.Qtyorder
	}
	return 0
}

func (x *DetailItem) GetIvmQtyPack() float64 {
	if x != nil {
		return x.IvmQtyPack
	}
	return 0
}

func (x *DetailItem) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

type CreateDeliveryOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid      string         `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Docnumbr     string         `protobuf:"bytes,2,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	Docdate      string         `protobuf:"bytes,3,opt,name=docdate,proto3" json:"docdate,omitempty"`
	Custnmbr     string         `protobuf:"bytes,4,opt,name=custnmbr,proto3" json:"custnmbr,omitempty"`
	Custname     string         `protobuf:"bytes,5,opt,name=custname,proto3" json:"custname,omitempty"`
	GnLCourierId string         `protobuf:"bytes,6,opt,name=gnL_courier_id,json=gnLCourierId,proto3" json:"gnL_courier_id,omitempty"`
	DetailOrder  []*DetailOrder `protobuf:"bytes,7,rep,name=detail_order,json=detailOrder,proto3" json:"detail_order,omitempty"`
	DetailItem   []*DetailItem  `protobuf:"bytes,8,rep,name=detail_item,json=detailItem,proto3" json:"detail_item,omitempty"`
}

func (x *CreateDeliveryOrderRequest) Reset() {
	*x = CreateDeliveryOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeliveryOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeliveryOrderRequest) ProtoMessage() {}

func (x *CreateDeliveryOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeliveryOrderRequest.ProtoReflect.Descriptor instead.
func (*CreateDeliveryOrderRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{274}
}

func (x *CreateDeliveryOrderRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *CreateDeliveryOrderRequest) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *CreateDeliveryOrderRequest) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *CreateDeliveryOrderRequest) GetCustnmbr() string {
	if x != nil {
		return x.Custnmbr
	}
	return ""
}

func (x *CreateDeliveryOrderRequest) GetCustname() string {
	if x != nil {
		return x.Custname
	}
	return ""
}

func (x *CreateDeliveryOrderRequest) GetGnLCourierId() string {
	if x != nil {
		return x.GnLCourierId
	}
	return ""
}

func (x *CreateDeliveryOrderRequest) GetDetailOrder() []*DetailOrder {
	if x != nil {
		return x.DetailOrder
	}
	return nil
}

func (x *CreateDeliveryOrderRequest) GetDetailItem() []*DetailItem {
	if x != nil {
		return x.DetailItem
	}
	return nil
}

type CreateDeliveryOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateDeliveryOrderResponse) Reset() {
	*x = CreateDeliveryOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeliveryOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeliveryOrderResponse) ProtoMessage() {}

func (x *CreateDeliveryOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeliveryOrderResponse.ProtoReflect.Descriptor instead.
func (*CreateDeliveryOrderResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{275}
}

func (x *CreateDeliveryOrderResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CreateDeliveryOrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PaymentMethodGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pmntnmbr             string `protobuf:"bytes,1,opt,name=pmntnmbr,proto3" json:"pmntnmbr,omitempty"`
	Vendorid             string `protobuf:"bytes,2,opt,name=vendorid,proto3" json:"vendorid,omitempty"`
	Docnumbr             string `protobuf:"bytes,3,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	Docdate              string `protobuf:"bytes,4,opt,name=docdate,proto3" json:"docdate,omitempty"`
	Chekbkid             string `protobuf:"bytes,5,opt,name=chekbkid,proto3" json:"chekbkid,omitempty"`
	Pyenttyp             int32  `protobuf:"varint,6,opt,name=pyenttyp,proto3" json:"pyenttyp,omitempty"`
	PaymentMethodDesc    string `protobuf:"bytes,7,opt,name=payment_method_desc,json=paymentMethodDesc,proto3" json:"payment_method_desc,omitempty"`
	PrpPaymentMethodId   string `protobuf:"bytes,8,opt,name=prp_payment_method_id,json=prpPaymentMethodId,proto3" json:"prp_payment_method_id,omitempty"`
	PrpPaymentMethodDesc string `protobuf:"bytes,9,opt,name=prp_payment_method_desc,json=prpPaymentMethodDesc,proto3" json:"prp_payment_method_desc,omitempty"`
	Inactive             int32  `protobuf:"varint,10,opt,name=inactive,proto3" json:"inactive,omitempty"`
	InactiveDesc         string `protobuf:"bytes,11,opt,name=inactive_desc,json=inactiveDesc,proto3" json:"inactive_desc,omitempty"`
}

func (x *PaymentMethodGP) Reset() {
	*x = PaymentMethodGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethodGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethodGP) ProtoMessage() {}

func (x *PaymentMethodGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethodGP.ProtoReflect.Descriptor instead.
func (*PaymentMethodGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{276}
}

func (x *PaymentMethodGP) GetPmntnmbr() string {
	if x != nil {
		return x.Pmntnmbr
	}
	return ""
}

func (x *PaymentMethodGP) GetVendorid() string {
	if x != nil {
		return x.Vendorid
	}
	return ""
}

func (x *PaymentMethodGP) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *PaymentMethodGP) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *PaymentMethodGP) GetChekbkid() string {
	if x != nil {
		return x.Chekbkid
	}
	return ""
}

func (x *PaymentMethodGP) GetPyenttyp() int32 {
	if x != nil {
		return x.Pyenttyp
	}
	return 0
}

func (x *PaymentMethodGP) GetPaymentMethodDesc() string {
	if x != nil {
		return x.PaymentMethodDesc
	}
	return ""
}

func (x *PaymentMethodGP) GetPrpPaymentMethodId() string {
	if x != nil {
		return x.PrpPaymentMethodId
	}
	return ""
}

func (x *PaymentMethodGP) GetPrpPaymentMethodDesc() string {
	if x != nil {
		return x.PrpPaymentMethodDesc
	}
	return ""
}

func (x *PaymentMethodGP) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *PaymentMethodGP) GetInactiveDesc() string {
	if x != nil {
		return x.InactiveDesc
	}
	return ""
}

type GetPaymentMethodGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetPaymentMethodGPListRequest) Reset() {
	*x = GetPaymentMethodGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentMethodGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentMethodGPListRequest) ProtoMessage() {}

func (x *GetPaymentMethodGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentMethodGPListRequest.ProtoReflect.Descriptor instead.
func (*GetPaymentMethodGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{277}
}

func (x *GetPaymentMethodGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetPaymentMethodGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetPaymentMethodGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPaymentMethodGPDetailRequest) Reset() {
	*x = GetPaymentMethodGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentMethodGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentMethodGPDetailRequest) ProtoMessage() {}

func (x *GetPaymentMethodGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentMethodGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetPaymentMethodGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{278}
}

func (x *GetPaymentMethodGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPaymentMethodGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32              `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32              `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32              `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32              `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*PaymentMethodGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool               `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string           `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string             `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetPaymentMethodGPResponse) Reset() {
	*x = GetPaymentMethodGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentMethodGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentMethodGPResponse) ProtoMessage() {}

func (x *GetPaymentMethodGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentMethodGPResponse.ProtoReflect.Descriptor instead.
func (*GetPaymentMethodGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{279}
}

func (x *GetPaymentMethodGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetPaymentMethodGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetPaymentMethodGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetPaymentMethodGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetPaymentMethodGPResponse) GetData() []*PaymentMethodGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetPaymentMethodGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetPaymentMethodGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetPaymentMethodGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PaymentTermGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pymtrmid              string  `protobuf:"bytes,1,opt,name=pymtrmid,proto3" json:"pymtrmid,omitempty"`
	Duetype               int64   `protobuf:"varint,2,opt,name=duetype,proto3" json:"duetype,omitempty"`
	Duedesc               string  `protobuf:"bytes,3,opt,name=duedesc,proto3" json:"duedesc,omitempty"`
	Duedtds               int64   `protobuf:"varint,4,opt,name=duedtds,proto3" json:"duedtds,omitempty"`
	CalculateDateFrom     int64   `protobuf:"varint,5,opt,name=calculateDateFrom,proto3" json:"calculateDateFrom,omitempty"`
	CalculateDateFromDays int64   `protobuf:"varint,6,opt,name=calculateDateFromDays,proto3" json:"calculateDateFromDays,omitempty"`
	Disctype              int64   `protobuf:"varint,7,opt,name=disctype,proto3" json:"disctype,omitempty"`
	Discdtds              int64   `protobuf:"varint,8,opt,name=discdtds,proto3" json:"discdtds,omitempty"`
	Dsclctyp              int64   `protobuf:"varint,9,opt,name=dsclctyp,proto3" json:"dsclctyp,omitempty"`
	Dscdlram              float64 `protobuf:"fixed64,10,opt,name=dscdlram,proto3" json:"dscdlram,omitempty"`
	Dscpctam              int64   `protobuf:"varint,11,opt,name=dscpctam,proto3" json:"dscpctam,omitempty"`
	Salpurch              int64   `protobuf:"varint,12,opt,name=salpurch,proto3" json:"salpurch,omitempty"`
	Discntcb              int64   `protobuf:"varint,13,opt,name=discntcb,proto3" json:"discntcb,omitempty"`
	Freight               int64   `protobuf:"varint,14,opt,name=freight,proto3" json:"freight,omitempty"`
	Misc                  int64   `protobuf:"varint,15,opt,name=misc,proto3" json:"misc,omitempty"`
	Tax                   int64   `protobuf:"varint,16,opt,name=tax,proto3" json:"tax,omitempty"`
	DuetypeDesc           string  `protobuf:"bytes,17,opt,name=duetype_desc,json=duetypeDesc,proto3" json:"duetype_desc,omitempty"`
	GnlPaymentUsefor      int32   `protobuf:"varint,18,opt,name=gnl_payment_usefor,json=gnlPaymentUsefor,proto3" json:"gnl_payment_usefor,omitempty"`
	GnlPaymentUseforDesc  string  `protobuf:"bytes,19,opt,name=gnl_payment_usefor_desc,json=gnlPaymentUseforDesc,proto3" json:"gnl_payment_usefor_desc,omitempty"`
}

func (x *PaymentTermGP) Reset() {
	*x = PaymentTermGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentTermGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentTermGP) ProtoMessage() {}

func (x *PaymentTermGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentTermGP.ProtoReflect.Descriptor instead.
func (*PaymentTermGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{280}
}

func (x *PaymentTermGP) GetPymtrmid() string {
	if x != nil {
		return x.Pymtrmid
	}
	return ""
}

func (x *PaymentTermGP) GetDuetype() int64 {
	if x != nil {
		return x.Duetype
	}
	return 0
}

func (x *PaymentTermGP) GetDuedesc() string {
	if x != nil {
		return x.Duedesc
	}
	return ""
}

func (x *PaymentTermGP) GetDuedtds() int64 {
	if x != nil {
		return x.Duedtds
	}
	return 0
}

func (x *PaymentTermGP) GetCalculateDateFrom() int64 {
	if x != nil {
		return x.CalculateDateFrom
	}
	return 0
}

func (x *PaymentTermGP) GetCalculateDateFromDays() int64 {
	if x != nil {
		return x.CalculateDateFromDays
	}
	return 0
}

func (x *PaymentTermGP) GetDisctype() int64 {
	if x != nil {
		return x.Disctype
	}
	return 0
}

func (x *PaymentTermGP) GetDiscdtds() int64 {
	if x != nil {
		return x.Discdtds
	}
	return 0
}

func (x *PaymentTermGP) GetDsclctyp() int64 {
	if x != nil {
		return x.Dsclctyp
	}
	return 0
}

func (x *PaymentTermGP) GetDscdlram() float64 {
	if x != nil {
		return x.Dscdlram
	}
	return 0
}

func (x *PaymentTermGP) GetDscpctam() int64 {
	if x != nil {
		return x.Dscpctam
	}
	return 0
}

func (x *PaymentTermGP) GetSalpurch() int64 {
	if x != nil {
		return x.Salpurch
	}
	return 0
}

func (x *PaymentTermGP) GetDiscntcb() int64 {
	if x != nil {
		return x.Discntcb
	}
	return 0
}

func (x *PaymentTermGP) GetFreight() int64 {
	if x != nil {
		return x.Freight
	}
	return 0
}

func (x *PaymentTermGP) GetMisc() int64 {
	if x != nil {
		return x.Misc
	}
	return 0
}

func (x *PaymentTermGP) GetTax() int64 {
	if x != nil {
		return x.Tax
	}
	return 0
}

func (x *PaymentTermGP) GetDuetypeDesc() string {
	if x != nil {
		return x.DuetypeDesc
	}
	return ""
}

func (x *PaymentTermGP) GetGnlPaymentUsefor() int32 {
	if x != nil {
		return x.GnlPaymentUsefor
	}
	return 0
}

func (x *PaymentTermGP) GetGnlPaymentUseforDesc() string {
	if x != nil {
		return x.GnlPaymentUseforDesc
	}
	return ""
}

type SalesPersonGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slprsnid        string  `protobuf:"bytes,1,opt,name=slprsnid,proto3" json:"slprsnid,omitempty"`
	Employid        string  `protobuf:"bytes,2,opt,name=employid,proto3" json:"employid,omitempty"`
	Vendorid        string  `protobuf:"bytes,3,opt,name=vendorid,proto3" json:"vendorid,omitempty"`
	Slprsnfn        string  `protobuf:"bytes,4,opt,name=slprsnfn,proto3" json:"slprsnfn,omitempty"`
	Sprsnsmn        string  `protobuf:"bytes,5,opt,name=sprsnsmn,proto3" json:"sprsnsmn,omitempty"`
	Sprsnsln        string  `protobuf:"bytes,6,opt,name=sprsnsln,proto3" json:"sprsnsln,omitempty"`
	AddresS1        string  `protobuf:"bytes,7,opt,name=addresS1,proto3" json:"addresS1,omitempty"`
	AddresS2        string  `protobuf:"bytes,8,opt,name=addresS2,proto3" json:"addresS2,omitempty"`
	AddresS3        string  `protobuf:"bytes,9,opt,name=addresS3,proto3" json:"addresS3,omitempty"`
	City            string  `protobuf:"bytes,10,opt,name=city,proto3" json:"city,omitempty"`
	State           string  `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
	Zip             string  `protobuf:"bytes,12,opt,name=zip,proto3" json:"zip,omitempty"`
	Country         string  `protobuf:"bytes,13,opt,name=country,proto3" json:"country,omitempty"`
	PhonE1          string  `protobuf:"bytes,14,opt,name=phonE1,proto3" json:"phonE1,omitempty"`
	PhonE2          string  `protobuf:"bytes,15,opt,name=phonE2,proto3" json:"phonE2,omitempty"`
	PhonE3          string  `protobuf:"bytes,16,opt,name=phonE3,proto3" json:"phonE3,omitempty"`
	Fax             string  `protobuf:"bytes,17,opt,name=fax,proto3" json:"fax,omitempty"`
	Commcode        string  `protobuf:"bytes,18,opt,name=commcode,proto3" json:"commcode,omitempty"`
	Comprcnt        int64   `protobuf:"varint,19,opt,name=comprcnt,proto3" json:"comprcnt,omitempty"`
	Comappto        int64   `protobuf:"varint,20,opt,name=comappto,proto3" json:"comappto,omitempty"`
	Costtodt        float64 `protobuf:"fixed64,21,opt,name=costtodt,proto3" json:"costtodt,omitempty"`
	Cstlstyr        float64 `protobuf:"fixed64,22,opt,name=cstlstyr,proto3" json:"cstlstyr,omitempty"`
	Ttlcomtd        float64 `protobuf:"fixed64,23,opt,name=ttlcomtd,proto3" json:"ttlcomtd,omitempty"`
	Ttlcomly        float64 `protobuf:"fixed64,24,opt,name=ttlcomly,proto3" json:"ttlcomly,omitempty"`
	Comsltdt        float64 `protobuf:"fixed64,25,opt,name=comsltdt,proto3" json:"comsltdt,omitempty"`
	Comsllyr        float64 `protobuf:"fixed64,26,opt,name=comsllyr,proto3" json:"comsllyr,omitempty"`
	Ncomsltd        float64 `protobuf:"fixed64,27,opt,name=ncomsltd,proto3" json:"ncomsltd,omitempty"`
	Ncomslyr        float64 `protobuf:"fixed64,28,opt,name=ncomslyr,proto3" json:"ncomslyr,omitempty"`
	Noteindex       int64   `protobuf:"varint,29,opt,name=noteindex,proto3" json:"noteindex,omitempty"`
	GnL_Supervisor1 string  `protobuf:"bytes,30,opt,name=gnL_Supervisor1,json=gnLSupervisor1,proto3" json:"gnL_Supervisor1,omitempty"`
	Inactive        int32   `protobuf:"varint,31,opt,name=inactive,proto3" json:"inactive,omitempty"`
	Salsterr        string  `protobuf:"bytes,32,opt,name=salsterr,proto3" json:"salsterr,omitempty"`
}

func (x *SalesPersonGP) Reset() {
	*x = SalesPersonGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesPersonGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesPersonGP) ProtoMessage() {}

func (x *SalesPersonGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesPersonGP.ProtoReflect.Descriptor instead.
func (*SalesPersonGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{281}
}

func (x *SalesPersonGP) GetSlprsnid() string {
	if x != nil {
		return x.Slprsnid
	}
	return ""
}

func (x *SalesPersonGP) GetEmployid() string {
	if x != nil {
		return x.Employid
	}
	return ""
}

func (x *SalesPersonGP) GetVendorid() string {
	if x != nil {
		return x.Vendorid
	}
	return ""
}

func (x *SalesPersonGP) GetSlprsnfn() string {
	if x != nil {
		return x.Slprsnfn
	}
	return ""
}

func (x *SalesPersonGP) GetSprsnsmn() string {
	if x != nil {
		return x.Sprsnsmn
	}
	return ""
}

func (x *SalesPersonGP) GetSprsnsln() string {
	if x != nil {
		return x.Sprsnsln
	}
	return ""
}

func (x *SalesPersonGP) GetAddresS1() string {
	if x != nil {
		return x.AddresS1
	}
	return ""
}

func (x *SalesPersonGP) GetAddresS2() string {
	if x != nil {
		return x.AddresS2
	}
	return ""
}

func (x *SalesPersonGP) GetAddresS3() string {
	if x != nil {
		return x.AddresS3
	}
	return ""
}

func (x *SalesPersonGP) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *SalesPersonGP) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *SalesPersonGP) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

func (x *SalesPersonGP) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *SalesPersonGP) GetPhonE1() string {
	if x != nil {
		return x.PhonE1
	}
	return ""
}

func (x *SalesPersonGP) GetPhonE2() string {
	if x != nil {
		return x.PhonE2
	}
	return ""
}

func (x *SalesPersonGP) GetPhonE3() string {
	if x != nil {
		return x.PhonE3
	}
	return ""
}

func (x *SalesPersonGP) GetFax() string {
	if x != nil {
		return x.Fax
	}
	return ""
}

func (x *SalesPersonGP) GetCommcode() string {
	if x != nil {
		return x.Commcode
	}
	return ""
}

func (x *SalesPersonGP) GetComprcnt() int64 {
	if x != nil {
		return x.Comprcnt
	}
	return 0
}

func (x *SalesPersonGP) GetComappto() int64 {
	if x != nil {
		return x.Comappto
	}
	return 0
}

func (x *SalesPersonGP) GetCosttodt() float64 {
	if x != nil {
		return x.Costtodt
	}
	return 0
}

func (x *SalesPersonGP) GetCstlstyr() float64 {
	if x != nil {
		return x.Cstlstyr
	}
	return 0
}

func (x *SalesPersonGP) GetTtlcomtd() float64 {
	if x != nil {
		return x.Ttlcomtd
	}
	return 0
}

func (x *SalesPersonGP) GetTtlcomly() float64 {
	if x != nil {
		return x.Ttlcomly
	}
	return 0
}

func (x *SalesPersonGP) GetComsltdt() float64 {
	if x != nil {
		return x.Comsltdt
	}
	return 0
}

func (x *SalesPersonGP) GetComsllyr() float64 {
	if x != nil {
		return x.Comsllyr
	}
	return 0
}

func (x *SalesPersonGP) GetNcomsltd() float64 {
	if x != nil {
		return x.Ncomsltd
	}
	return 0
}

func (x *SalesPersonGP) GetNcomslyr() float64 {
	if x != nil {
		return x.Ncomslyr
	}
	return 0
}

func (x *SalesPersonGP) GetNoteindex() int64 {
	if x != nil {
		return x.Noteindex
	}
	return 0
}

func (x *SalesPersonGP) GetGnL_Supervisor1() string {
	if x != nil {
		return x.GnL_Supervisor1
	}
	return ""
}

func (x *SalesPersonGP) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *SalesPersonGP) GetSalsterr() string {
	if x != nil {
		return x.Salsterr
	}
	return ""
}

type CustomerTypeGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnL_Cust_Type_ID         string `protobuf:"bytes,1,opt,name=gnL_Cust_Type_ID,json=gnLCustTypeID,proto3" json:"gnL_Cust_Type_ID,omitempty"`
	GnL_CustType_Description string `protobuf:"bytes,2,opt,name=gnL_CustType_Description,json=gnLCustTypeDescription,proto3" json:"gnL_CustType_Description,omitempty"`
	GnL_Cust_Group           int32  `protobuf:"varint,3,opt,name=gnL_Cust_Group,json=gnLCustGroup,proto3" json:"gnL_Cust_Group,omitempty"`
	Inactive                 int32  `protobuf:"varint,4,opt,name=inactive,proto3" json:"inactive,omitempty"`
	InactiveDesc             string `protobuf:"bytes,5,opt,name=inactive_desc,json=inactiveDesc,proto3" json:"inactive_desc,omitempty"`
	GnL_Cust_GroupDesc       string `protobuf:"bytes,6,opt,name=gnL_Cust_Group_desc,json=gnLCustGroupDesc,proto3" json:"gnL_Cust_Group_desc,omitempty"`
}

func (x *CustomerTypeGP) Reset() {
	*x = CustomerTypeGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerTypeGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerTypeGP) ProtoMessage() {}

func (x *CustomerTypeGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerTypeGP.ProtoReflect.Descriptor instead.
func (*CustomerTypeGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{282}
}

func (x *CustomerTypeGP) GetGnL_Cust_Type_ID() string {
	if x != nil {
		return x.GnL_Cust_Type_ID
	}
	return ""
}

func (x *CustomerTypeGP) GetGnL_CustType_Description() string {
	if x != nil {
		return x.GnL_CustType_Description
	}
	return ""
}

func (x *CustomerTypeGP) GetGnL_Cust_Group() int32 {
	if x != nil {
		return x.GnL_Cust_Group
	}
	return 0
}

func (x *CustomerTypeGP) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *CustomerTypeGP) GetInactiveDesc() string {
	if x != nil {
		return x.InactiveDesc
	}
	return ""
}

func (x *CustomerTypeGP) GetGnL_Cust_GroupDesc() string {
	if x != nil {
		return x.GnL_Cust_GroupDesc
	}
	return ""
}

type ArchetypeGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnlArchetypeId          string `protobuf:"bytes,1,opt,name=gnl_archetype_id,json=gnlArchetypeId,proto3" json:"gnl_archetype_id,omitempty"`
	GnlArchetypedescription string `protobuf:"bytes,2,opt,name=gnl_archetypedescription,json=gnlArchetypedescription,proto3" json:"gnl_archetypedescription,omitempty"`
	GnlCustTypeId           string `protobuf:"bytes,3,opt,name=gnl_cust_type_id,json=gnlCustTypeId,proto3" json:"gnl_cust_type_id,omitempty"`
	GnlCusttypeDescription  string `protobuf:"bytes,4,opt,name=gnl_custtype_description,json=gnlCusttypeDescription,proto3" json:"gnl_custtype_description,omitempty"`
	Inactive                int32  `protobuf:"varint,5,opt,name=inactive,proto3" json:"inactive,omitempty"`
	InactiveDesc            string `protobuf:"bytes,6,opt,name=inactive_desc,json=inactiveDesc,proto3" json:"inactive_desc,omitempty"`
}

func (x *ArchetypeGP) Reset() {
	*x = ArchetypeGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchetypeGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchetypeGP) ProtoMessage() {}

func (x *ArchetypeGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchetypeGP.ProtoReflect.Descriptor instead.
func (*ArchetypeGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{283}
}

func (x *ArchetypeGP) GetGnlArchetypeId() string {
	if x != nil {
		return x.GnlArchetypeId
	}
	return ""
}

func (x *ArchetypeGP) GetGnlArchetypedescription() string {
	if x != nil {
		return x.GnlArchetypedescription
	}
	return ""
}

func (x *ArchetypeGP) GetGnlCustTypeId() string {
	if x != nil {
		return x.GnlCustTypeId
	}
	return ""
}

func (x *ArchetypeGP) GetGnlCusttypeDescription() string {
	if x != nil {
		return x.GnlCusttypeDescription
	}
	return ""
}

func (x *ArchetypeGP) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *ArchetypeGP) GetInactiveDesc() string {
	if x != nil {
		return x.InactiveDesc
	}
	return ""
}

type OrderTypeGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docid    string `protobuf:"bytes,1,opt,name=docid,proto3" json:"docid,omitempty"`
	Sopnumbe string `protobuf:"bytes,2,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"`
	UsdociD1 string `protobuf:"bytes,3,opt,name=usdociD1,proto3" json:"usdociD1,omitempty"`
	UsdociD2 string `protobuf:"bytes,4,opt,name=usdociD2,proto3" json:"usdociD2,omitempty"`
}

func (x *OrderTypeGP) Reset() {
	*x = OrderTypeGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderTypeGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderTypeGP) ProtoMessage() {}

func (x *OrderTypeGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderTypeGP.ProtoReflect.Descriptor instead.
func (*OrderTypeGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{284}
}

func (x *OrderTypeGP) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *OrderTypeGP) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

func (x *OrderTypeGP) GetUsdociD1() string {
	if x != nil {
		return x.UsdociD1
	}
	return ""
}

func (x *OrderTypeGP) GetUsdociD2() string {
	if x != nil {
		return x.UsdociD2
	}
	return ""
}

type UomGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uomschdl   string  `protobuf:"bytes,1,opt,name=uomschdl,proto3" json:"uomschdl,omitempty"`
	Umschdsc   string  `protobuf:"bytes,2,opt,name=umschdsc,proto3" json:"umschdsc,omitempty"`
	Baseuofm   string  `protobuf:"bytes,3,opt,name=baseuofm,proto3" json:"baseuofm,omitempty"`
	Umdpqtys   int64   `protobuf:"varint,4,opt,name=umdpqtys,proto3" json:"umdpqtys,omitempty"`
	Uofm       string  `protobuf:"bytes,5,opt,name=uofm,proto3" json:"uofm,omitempty"`
	Qtybsuom   float64 `protobuf:"fixed64,6,opt,name=qtybsuom,proto3" json:"qtybsuom,omitempty"`
	Equivuom   string  `protobuf:"bytes,7,opt,name=equivuom,proto3" json:"equivuom,omitempty"`
	GnL_UOM_KG float64 `protobuf:"fixed64,8,opt,name=gnL_UOM_KG,json=gnLUOMKG,proto3" json:"gnL_UOM_KG,omitempty"`
}

func (x *UomGP) Reset() {
	*x = UomGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UomGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UomGP) ProtoMessage() {}

func (x *UomGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UomGP.ProtoReflect.Descriptor instead.
func (*UomGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{285}
}

func (x *UomGP) GetUomschdl() string {
	if x != nil {
		return x.Uomschdl
	}
	return ""
}

func (x *UomGP) GetUmschdsc() string {
	if x != nil {
		return x.Umschdsc
	}
	return ""
}

func (x *UomGP) GetBaseuofm() string {
	if x != nil {
		return x.Baseuofm
	}
	return ""
}

func (x *UomGP) GetUmdpqtys() int64 {
	if x != nil {
		return x.Umdpqtys
	}
	return 0
}

func (x *UomGP) GetUofm() string {
	if x != nil {
		return x.Uofm
	}
	return ""
}

func (x *UomGP) GetQtybsuom() float64 {
	if x != nil {
		return x.Qtybsuom
	}
	return 0
}

func (x *UomGP) GetEquivuom() string {
	if x != nil {
		return x.Equivuom
	}
	return ""
}

func (x *UomGP) GetGnL_UOM_KG() float64 {
	if x != nil {
		return x.GnL_UOM_KG
	}
	return 0
}

type ItemClassGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnL_CB_CapitalItem        int32  `protobuf:"varint,1,opt,name=gnL_CB_CapitalItem,json=gnLCBCapitalItem,proto3" json:"gnL_CB_CapitalItem,omitempty"`
	GnL_CB_CapitalItem_DESC   string `protobuf:"bytes,2,opt,name=gnL_CB_CapitalItem_DESC,json=gnLCBCapitalItemDESC,proto3" json:"gnL_CB_CapitalItem_DESC,omitempty"`
	GnL_CB_AllowDirectPO      int32  `protobuf:"varint,3,opt,name=gnL_CB_AllowDirectPO,json=gnLCBAllowDirectPO,proto3" json:"gnL_CB_AllowDirectPO,omitempty"`
	GnL_CB_AllowDirectPO_DESC string `protobuf:"bytes,4,opt,name=gnL_CB_AllowDirectPO_DESC,json=gnLCBAllowDirectPODESC,proto3" json:"gnL_CB_AllowDirectPO_DESC,omitempty"`
	Itmclscd                  string `protobuf:"bytes,5,opt,name=itmclscd,proto3" json:"itmclscd,omitempty"`
	Itmclsdc                  string `protobuf:"bytes,6,opt,name=itmclsdc,proto3" json:"itmclsdc,omitempty"`
	Defltcls                  int32  `protobuf:"varint,7,opt,name=defltcls,proto3" json:"defltcls,omitempty"`
	Noteindx                  string `protobuf:"bytes,8,opt,name=noteindx,proto3" json:"noteindx,omitempty"`
	Itemtype                  int32  `protobuf:"varint,9,opt,name=itemtype,proto3" json:"itemtype,omitempty"`
	ItemtypE_DESC             string `protobuf:"bytes,10,opt,name=itemtypE_DESC,json=itemtypEDESC,proto3" json:"itemtypE_DESC,omitempty"`
	Itmtrkop                  int32  `protobuf:"varint,11,opt,name=itmtrkop,proto3" json:"itmtrkop,omitempty"`
	ItmtrkoP_DESC             string `protobuf:"bytes,12,opt,name=itmtrkoP_DESC,json=itmtrkoPDESC,proto3" json:"itmtrkoP_DESC,omitempty"`
	Lottype                   string `protobuf:"bytes,13,opt,name=lottype,proto3" json:"lottype,omitempty"`
	Itmgedsc                  string `protobuf:"bytes,14,opt,name=itmgedsc,proto3" json:"itmgedsc,omitempty"`
	Taxoptns                  int32  `protobuf:"varint,15,opt,name=taxoptns,proto3" json:"taxoptns,omitempty"`
	TaxoptnS_DESC             string `protobuf:"bytes,16,opt,name=taxoptnS_DESC,json=taxoptnSDESC,proto3" json:"taxoptnS_DESC,omitempty"`
	Itmtshid                  string `protobuf:"bytes,17,opt,name=itmtshid,proto3" json:"itmtshid,omitempty"`
	Purchase_Tax_Options      int32  `protobuf:"varint,18,opt,name=purchase_Tax_Options,json=purchaseTaxOptions,proto3" json:"purchase_Tax_Options,omitempty"`
	Purchase_Tax_Options_Desc string `protobuf:"bytes,19,opt,name=purchase_Tax_Options_Desc,json=purchaseTaxOptionsDesc,proto3" json:"purchase_Tax_Options_Desc,omitempty"`
	Purchase_Item_Tax_Schedu  string `protobuf:"bytes,20,opt,name=purchase_Item_Tax_Schedu,json=purchaseItemTaxSchedu,proto3" json:"purchase_Item_Tax_Schedu,omitempty"`
	Uomschdl                  string `protobuf:"bytes,21,opt,name=uomschdl,proto3" json:"uomschdl,omitempty"`
	Vctnmthd                  int32  `protobuf:"varint,22,opt,name=vctnmthd,proto3" json:"vctnmthd,omitempty"`
	VctnmthD_DESC             string `protobuf:"bytes,23,opt,name=vctnmthD_DESC,json=vctnmthDDESC,proto3" json:"vctnmthD_DESC,omitempty"`
	UscatvlS_1                string `protobuf:"bytes,24,opt,name=uscatvlS_1,json=uscatvlS1,proto3" json:"uscatvlS_1,omitempty"`
	UscatvlS_2                string `protobuf:"bytes,25,opt,name=uscatvlS_2,json=uscatvlS2,proto3" json:"uscatvlS_2,omitempty"`
	UscatvlS_3                string `protobuf:"bytes,26,opt,name=uscatvlS_3,json=uscatvlS3,proto3" json:"uscatvlS_3,omitempty"`
	UscatvlS_4                string `protobuf:"bytes,27,opt,name=uscatvlS_4,json=uscatvlS4,proto3" json:"uscatvlS_4,omitempty"`
	UscatvlS_5                string `protobuf:"bytes,28,opt,name=uscatvlS_5,json=uscatvlS5,proto3" json:"uscatvlS_5,omitempty"`
	UscatvlS_6                string `protobuf:"bytes,29,opt,name=uscatvlS_6,json=uscatvlS6,proto3" json:"uscatvlS_6,omitempty"`
	Decplqty                  int32  `protobuf:"varint,30,opt,name=decplqty,proto3" json:"decplqty,omitempty"`
	DecplqtY_DESC             string `protobuf:"bytes,31,opt,name=decplqtY_DESC,json=decplqtYDESC,proto3" json:"decplqtY_DESC,omitempty"`
	Purpvidx                  string `protobuf:"bytes,32,opt,name=purpvidx,proto3" json:"purpvidx,omitempty"`
	Uppvidx                   string `protobuf:"bytes,33,opt,name=uppvidx,proto3" json:"uppvidx,omitempty"`
	Ivretidx                  string `protobuf:"bytes,34,opt,name=ivretidx,proto3" json:"ivretidx,omitempty"`
	Asmvridx                  string `protobuf:"bytes,35,opt,name=asmvridx,proto3" json:"asmvridx,omitempty"`
	Prclevel                  string `protobuf:"bytes,36,opt,name=prclevel,proto3" json:"prclevel,omitempty"`
	PriceGroup                string `protobuf:"bytes,37,opt,name=priceGroup,proto3" json:"priceGroup,omitempty"`
	Pricmthd                  int32  `protobuf:"varint,38,opt,name=pricmthd,proto3" json:"pricmthd,omitempty"`
	PricmthD_DESC             string `protobuf:"bytes,39,opt,name=pricmthD_DESC,json=pricmthDDESC,proto3" json:"pricmthD_DESC,omitempty"`
	Tcc                       string `protobuf:"bytes,40,opt,name=tcc,proto3" json:"tcc,omitempty"`
	Revalue_Inventory         int32  `protobuf:"varint,41,opt,name=revalue_Inventory,json=revalueInventory,proto3" json:"revalue_Inventory,omitempty"`
	Tolerance_Percentage      int32  `protobuf:"varint,42,opt,name=tolerance_Percentage,json=tolerancePercentage,proto3" json:"tolerance_Percentage,omitempty"`
	Cntryorgn                 string `protobuf:"bytes,43,opt,name=cntryorgn,proto3" json:"cntryorgn,omitempty"`
	Sttstclvlprcntg           int32  `protobuf:"varint,44,opt,name=sttstclvlprcntg,proto3" json:"sttstclvlprcntg,omitempty"`
	Lotexpwarn                int32  `protobuf:"varint,45,opt,name=lotexpwarn,proto3" json:"lotexpwarn,omitempty"`
	Lotexpwarndays            int32  `protobuf:"varint,46,opt,name=lotexpwarndays,proto3" json:"lotexpwarndays,omitempty"`
	UseQtyOverageTolerance    string `protobuf:"bytes,47,opt,name=useQtyOverageTolerance,proto3" json:"useQtyOverageTolerance,omitempty"`
	UseQtyShortageTolerance   string `protobuf:"bytes,48,opt,name=useQtyShortageTolerance,proto3" json:"useQtyShortageTolerance,omitempty"`
	QtyOverTolerancePercent   int32  `protobuf:"varint,49,opt,name=qtyOverTolerancePercent,proto3" json:"qtyOverTolerancePercent,omitempty"`
	QtyShortTolerancePercent  int32  `protobuf:"varint,50,opt,name=qtyShortTolerancePercent,proto3" json:"qtyShortTolerancePercent,omitempty"`
	Ivscrvix                  string `protobuf:"bytes,51,opt,name=ivscrvix,proto3" json:"ivscrvix,omitempty"`
}

func (x *ItemClassGP) Reset() {
	*x = ItemClassGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemClassGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemClassGP) ProtoMessage() {}

func (x *ItemClassGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemClassGP.ProtoReflect.Descriptor instead.
func (*ItemClassGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{286}
}

func (x *ItemClassGP) GetGnL_CB_CapitalItem() int32 {
	if x != nil {
		return x.GnL_CB_CapitalItem
	}
	return 0
}

func (x *ItemClassGP) GetGnL_CB_CapitalItem_DESC() string {
	if x != nil {
		return x.GnL_CB_CapitalItem_DESC
	}
	return ""
}

func (x *ItemClassGP) GetGnL_CB_AllowDirectPO() int32 {
	if x != nil {
		return x.GnL_CB_AllowDirectPO
	}
	return 0
}

func (x *ItemClassGP) GetGnL_CB_AllowDirectPO_DESC() string {
	if x != nil {
		return x.GnL_CB_AllowDirectPO_DESC
	}
	return ""
}

func (x *ItemClassGP) GetItmclscd() string {
	if x != nil {
		return x.Itmclscd
	}
	return ""
}

func (x *ItemClassGP) GetItmclsdc() string {
	if x != nil {
		return x.Itmclsdc
	}
	return ""
}

func (x *ItemClassGP) GetDefltcls() int32 {
	if x != nil {
		return x.Defltcls
	}
	return 0
}

func (x *ItemClassGP) GetNoteindx() string {
	if x != nil {
		return x.Noteindx
	}
	return ""
}

func (x *ItemClassGP) GetItemtype() int32 {
	if x != nil {
		return x.Itemtype
	}
	return 0
}

func (x *ItemClassGP) GetItemtypE_DESC() string {
	if x != nil {
		return x.ItemtypE_DESC
	}
	return ""
}

func (x *ItemClassGP) GetItmtrkop() int32 {
	if x != nil {
		return x.Itmtrkop
	}
	return 0
}

func (x *ItemClassGP) GetItmtrkoP_DESC() string {
	if x != nil {
		return x.ItmtrkoP_DESC
	}
	return ""
}

func (x *ItemClassGP) GetLottype() string {
	if x != nil {
		return x.Lottype
	}
	return ""
}

func (x *ItemClassGP) GetItmgedsc() string {
	if x != nil {
		return x.Itmgedsc
	}
	return ""
}

func (x *ItemClassGP) GetTaxoptns() int32 {
	if x != nil {
		return x.Taxoptns
	}
	return 0
}

func (x *ItemClassGP) GetTaxoptnS_DESC() string {
	if x != nil {
		return x.TaxoptnS_DESC
	}
	return ""
}

func (x *ItemClassGP) GetItmtshid() string {
	if x != nil {
		return x.Itmtshid
	}
	return ""
}

func (x *ItemClassGP) GetPurchase_Tax_Options() int32 {
	if x != nil {
		return x.Purchase_Tax_Options
	}
	return 0
}

func (x *ItemClassGP) GetPurchase_Tax_Options_Desc() string {
	if x != nil {
		return x.Purchase_Tax_Options_Desc
	}
	return ""
}

func (x *ItemClassGP) GetPurchase_Item_Tax_Schedu() string {
	if x != nil {
		return x.Purchase_Item_Tax_Schedu
	}
	return ""
}

func (x *ItemClassGP) GetUomschdl() string {
	if x != nil {
		return x.Uomschdl
	}
	return ""
}

func (x *ItemClassGP) GetVctnmthd() int32 {
	if x != nil {
		return x.Vctnmthd
	}
	return 0
}

func (x *ItemClassGP) GetVctnmthD_DESC() string {
	if x != nil {
		return x.VctnmthD_DESC
	}
	return ""
}

func (x *ItemClassGP) GetUscatvlS_1() string {
	if x != nil {
		return x.UscatvlS_1
	}
	return ""
}

func (x *ItemClassGP) GetUscatvlS_2() string {
	if x != nil {
		return x.UscatvlS_2
	}
	return ""
}

func (x *ItemClassGP) GetUscatvlS_3() string {
	if x != nil {
		return x.UscatvlS_3
	}
	return ""
}

func (x *ItemClassGP) GetUscatvlS_4() string {
	if x != nil {
		return x.UscatvlS_4
	}
	return ""
}

func (x *ItemClassGP) GetUscatvlS_5() string {
	if x != nil {
		return x.UscatvlS_5
	}
	return ""
}

func (x *ItemClassGP) GetUscatvlS_6() string {
	if x != nil {
		return x.UscatvlS_6
	}
	return ""
}

func (x *ItemClassGP) GetDecplqty() int32 {
	if x != nil {
		return x.Decplqty
	}
	return 0
}

func (x *ItemClassGP) GetDecplqtY_DESC() string {
	if x != nil {
		return x.DecplqtY_DESC
	}
	return ""
}

func (x *ItemClassGP) GetPurpvidx() string {
	if x != nil {
		return x.Purpvidx
	}
	return ""
}

func (x *ItemClassGP) GetUppvidx() string {
	if x != nil {
		return x.Uppvidx
	}
	return ""
}

func (x *ItemClassGP) GetIvretidx() string {
	if x != nil {
		return x.Ivretidx
	}
	return ""
}

func (x *ItemClassGP) GetAsmvridx() string {
	if x != nil {
		return x.Asmvridx
	}
	return ""
}

func (x *ItemClassGP) GetPrclevel() string {
	if x != nil {
		return x.Prclevel
	}
	return ""
}

func (x *ItemClassGP) GetPriceGroup() string {
	if x != nil {
		return x.PriceGroup
	}
	return ""
}

func (x *ItemClassGP) GetPricmthd() int32 {
	if x != nil {
		return x.Pricmthd
	}
	return 0
}

func (x *ItemClassGP) GetPricmthD_DESC() string {
	if x != nil {
		return x.PricmthD_DESC
	}
	return ""
}

func (x *ItemClassGP) GetTcc() string {
	if x != nil {
		return x.Tcc
	}
	return ""
}

func (x *ItemClassGP) GetRevalue_Inventory() int32 {
	if x != nil {
		return x.Revalue_Inventory
	}
	return 0
}

func (x *ItemClassGP) GetTolerance_Percentage() int32 {
	if x != nil {
		return x.Tolerance_Percentage
	}
	return 0
}

func (x *ItemClassGP) GetCntryorgn() string {
	if x != nil {
		return x.Cntryorgn
	}
	return ""
}

func (x *ItemClassGP) GetSttstclvlprcntg() int32 {
	if x != nil {
		return x.Sttstclvlprcntg
	}
	return 0
}

func (x *ItemClassGP) GetLotexpwarn() int32 {
	if x != nil {
		return x.Lotexpwarn
	}
	return 0
}

func (x *ItemClassGP) GetLotexpwarndays() int32 {
	if x != nil {
		return x.Lotexpwarndays
	}
	return 0
}

func (x *ItemClassGP) GetUseQtyOverageTolerance() string {
	if x != nil {
		return x.UseQtyOverageTolerance
	}
	return ""
}

func (x *ItemClassGP) GetUseQtyShortageTolerance() string {
	if x != nil {
		return x.UseQtyShortageTolerance
	}
	return ""
}

func (x *ItemClassGP) GetQtyOverTolerancePercent() int32 {
	if x != nil {
		return x.QtyOverTolerancePercent
	}
	return 0
}

func (x *ItemClassGP) GetQtyShortTolerancePercent() int32 {
	if x != nil {
		return x.QtyShortTolerancePercent
	}
	return 0
}

func (x *ItemClassGP) GetIvscrvix() string {
	if x != nil {
		return x.Ivscrvix
	}
	return ""
}

type SalesTerritoryGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salsterr string  `protobuf:"bytes,1,opt,name=salsterr,proto3" json:"salsterr,omitempty"`
	Slterdsc string  `protobuf:"bytes,2,opt,name=slterdsc,proto3" json:"slterdsc,omitempty"`
	Slprsnid string  `protobuf:"bytes,3,opt,name=slprsnid,proto3" json:"slprsnid,omitempty"`
	Stmgrfnm string  `protobuf:"bytes,4,opt,name=stmgrfnm,proto3" json:"stmgrfnm,omitempty"`
	Stmgrmnm string  `protobuf:"bytes,5,opt,name=stmgrmnm,proto3" json:"stmgrmnm,omitempty"`
	Stmgrlnm string  `protobuf:"bytes,6,opt,name=stmgrlnm,proto3" json:"stmgrlnm,omitempty"`
	Country  string  `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
	Costtodt float64 `protobuf:"fixed64,8,opt,name=costtodt,proto3" json:"costtodt,omitempty"`
	Ttlcomtd float64 `protobuf:"fixed64,9,opt,name=ttlcomtd,proto3" json:"ttlcomtd,omitempty"`
	Ttlcomly float64 `protobuf:"fixed64,10,opt,name=ttlcomly,proto3" json:"ttlcomly,omitempty"`
	Ncomslyr float64 `protobuf:"fixed64,11,opt,name=ncomslyr,proto3" json:"ncomslyr,omitempty"`
	Comsllyr float64 `protobuf:"fixed64,12,opt,name=comsllyr,proto3" json:"comsllyr,omitempty"`
	Cstlstyr float64 `protobuf:"fixed64,13,opt,name=cstlstyr,proto3" json:"cstlstyr,omitempty"`
	Comsltdt float64 `protobuf:"fixed64,14,opt,name=comsltdt,proto3" json:"comsltdt,omitempty"`
	Ncomsltd float64 `protobuf:"fixed64,15,opt,name=ncomsltd,proto3" json:"ncomsltd,omitempty"`
	Noteindx float64 `protobuf:"fixed64,16,opt,name=noteindx,proto3" json:"noteindx,omitempty"`
	Modifdt  string  `protobuf:"bytes,17,opt,name=modifdt,proto3" json:"modifdt,omitempty"`
	Creatddt string  `protobuf:"bytes,18,opt,name=creatddt,proto3" json:"creatddt,omitempty"`
}

func (x *SalesTerritoryGP) Reset() {
	*x = SalesTerritoryGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesTerritoryGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesTerritoryGP) ProtoMessage() {}

func (x *SalesTerritoryGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesTerritoryGP.ProtoReflect.Descriptor instead.
func (*SalesTerritoryGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{287}
}

func (x *SalesTerritoryGP) GetSalsterr() string {
	if x != nil {
		return x.Salsterr
	}
	return ""
}

func (x *SalesTerritoryGP) GetSlterdsc() string {
	if x != nil {
		return x.Slterdsc
	}
	return ""
}

func (x *SalesTerritoryGP) GetSlprsnid() string {
	if x != nil {
		return x.Slprsnid
	}
	return ""
}

func (x *SalesTerritoryGP) GetStmgrfnm() string {
	if x != nil {
		return x.Stmgrfnm
	}
	return ""
}

func (x *SalesTerritoryGP) GetStmgrmnm() string {
	if x != nil {
		return x.Stmgrmnm
	}
	return ""
}

func (x *SalesTerritoryGP) GetStmgrlnm() string {
	if x != nil {
		return x.Stmgrlnm
	}
	return ""
}

func (x *SalesTerritoryGP) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *SalesTerritoryGP) GetCosttodt() float64 {
	if x != nil {
		return x.Costtodt
	}
	return 0
}

func (x *SalesTerritoryGP) GetTtlcomtd() float64 {
	if x != nil {
		return x.Ttlcomtd
	}
	return 0
}

func (x *SalesTerritoryGP) GetTtlcomly() float64 {
	if x != nil {
		return x.Ttlcomly
	}
	return 0
}

func (x *SalesTerritoryGP) GetNcomslyr() float64 {
	if x != nil {
		return x.Ncomslyr
	}
	return 0
}

func (x *SalesTerritoryGP) GetComsllyr() float64 {
	if x != nil {
		return x.Comsllyr
	}
	return 0
}

func (x *SalesTerritoryGP) GetCstlstyr() float64 {
	if x != nil {
		return x.Cstlstyr
	}
	return 0
}

func (x *SalesTerritoryGP) GetComsltdt() float64 {
	if x != nil {
		return x.Comsltdt
	}
	return 0
}

func (x *SalesTerritoryGP) GetNcomsltd() float64 {
	if x != nil {
		return x.Ncomsltd
	}
	return 0
}

func (x *SalesTerritoryGP) GetNoteindx() float64 {
	if x != nil {
		return x.Noteindx
	}
	return 0
}

func (x *SalesTerritoryGP) GetModifdt() string {
	if x != nil {
		return x.Modifdt
	}
	return ""
}

func (x *SalesTerritoryGP) GetCreatddt() string {
	if x != nil {
		return x.Creatddt
	}
	return ""
}

type AddressGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Custnmbr                string             `protobuf:"bytes,1,opt,name=custnmbr,proto3" json:"custnmbr,omitempty"`
	Custname                string             `protobuf:"bytes,2,opt,name=custname,proto3" json:"custname,omitempty"`
	Adrscode                string             `protobuf:"bytes,3,opt,name=adrscode,proto3" json:"adrscode,omitempty"`
	Slprsnid                string             `protobuf:"bytes,4,opt,name=slprsnid,proto3" json:"slprsnid,omitempty"`
	Shipmthd                string             `protobuf:"bytes,5,opt,name=shipmthd,proto3" json:"shipmthd,omitempty"`
	Taxschid                string             `protobuf:"bytes,6,opt,name=taxschid,proto3" json:"taxschid,omitempty"`
	Cntcprsn                string             `protobuf:"bytes,7,opt,name=cntcprsn,proto3" json:"cntcprsn,omitempty"`
	AddresS1                string             `protobuf:"bytes,8,opt,name=addresS1,proto3" json:"addresS1,omitempty"`
	AddresS2                string             `protobuf:"bytes,9,opt,name=addresS2,proto3" json:"addresS2,omitempty"`
	AddresS3                string             `protobuf:"bytes,10,opt,name=addresS3,proto3" json:"addresS3,omitempty"`
	Country                 string             `protobuf:"bytes,11,opt,name=country,proto3" json:"country,omitempty"`
	City                    string             `protobuf:"bytes,12,opt,name=city,proto3" json:"city,omitempty"`
	State                   string             `protobuf:"bytes,13,opt,name=state,proto3" json:"state,omitempty"`
	Zip                     string             `protobuf:"bytes,14,opt,name=zip,proto3" json:"zip,omitempty"`
	PhonE1                  string             `protobuf:"bytes,15,opt,name=phonE1,proto3" json:"phonE1,omitempty"`
	PhonE2                  string             `protobuf:"bytes,16,opt,name=phonE2,proto3" json:"phonE2,omitempty"`
	PhonE3                  string             `protobuf:"bytes,17,opt,name=phonE3,proto3" json:"phonE3,omitempty"`
	CCode                   string             `protobuf:"bytes,18,opt,name=cCode,proto3" json:"cCode,omitempty"`
	Locncode                string             `protobuf:"bytes,19,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Salsterr                string             `protobuf:"bytes,20,opt,name=salsterr,proto3" json:"salsterr,omitempty"`
	UserdeF1                string             `protobuf:"bytes,21,opt,name=userdeF1,proto3" json:"userdeF1,omitempty"`
	UserdeF2                string             `protobuf:"bytes,22,opt,name=userdeF2,proto3" json:"userdeF2,omitempty"`
	ShipToName              string             `protobuf:"bytes,23,opt,name=shipToName,proto3" json:"shipToName,omitempty"`
	GnL_Administrative_Code string             `protobuf:"bytes,24,opt,name=gnL_Administrative_Code,json=gnLAdministrativeCode,proto3" json:"gnL_Administrative_Code,omitempty"`
	GnL_Archetype_ID        string             `protobuf:"bytes,25,opt,name=gnL_Archetype_ID,json=gnLArchetypeID,proto3" json:"gnL_Archetype_ID,omitempty"`
	GnL_Longitude           float64            `protobuf:"fixed64,26,opt,name=gnL_Longitude,json=gnLLongitude,proto3" json:"gnL_Longitude,omitempty"`
	GnL_Latitude            float64            `protobuf:"fixed64,27,opt,name=gnL_Latitude,json=gnLLatitude,proto3" json:"gnL_Latitude,omitempty"`
	GnL_Address_Note        string             `protobuf:"bytes,28,opt,name=gnL_Address_Note,json=gnLAddressNote,proto3" json:"gnL_Address_Note,omitempty"`
	Inactive                int32              `protobuf:"varint,29,opt,name=inactive,proto3" json:"inactive,omitempty"`
	Crusrid                 string             `protobuf:"bytes,30,opt,name=crusrid,proto3" json:"crusrid,omitempty"`
	Creatddt                string             `protobuf:"bytes,31,opt,name=creatddt,proto3" json:"creatddt,omitempty"`
	Mdfusrid                string             `protobuf:"bytes,32,opt,name=mdfusrid,proto3" json:"mdfusrid,omitempty"`
	Modifdt                 string             `protobuf:"bytes,33,opt,name=modifdt,proto3" json:"modifdt,omitempty"`
	TypeAddress             string             `protobuf:"bytes,34,opt,name=type_address,json=typeAddress,proto3" json:"type_address,omitempty"`
	AdministrativeDiv       *AdministrativeDiv `protobuf:"bytes,35,opt,name=administrative_div,json=administrativeDiv,proto3" json:"administrative_div,omitempty"`
	Prstadcd                string             `protobuf:"bytes,36,opt,name=prstadcd,proto3" json:"prstadcd,omitempty"`
}

func (x *AddressGP) Reset() {
	*x = AddressGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressGP) ProtoMessage() {}

func (x *AddressGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressGP.ProtoReflect.Descriptor instead.
func (*AddressGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{288}
}

func (x *AddressGP) GetCustnmbr() string {
	if x != nil {
		return x.Custnmbr
	}
	return ""
}

func (x *AddressGP) GetCustname() string {
	if x != nil {
		return x.Custname
	}
	return ""
}

func (x *AddressGP) GetAdrscode() string {
	if x != nil {
		return x.Adrscode
	}
	return ""
}

func (x *AddressGP) GetSlprsnid() string {
	if x != nil {
		return x.Slprsnid
	}
	return ""
}

func (x *AddressGP) GetShipmthd() string {
	if x != nil {
		return x.Shipmthd
	}
	return ""
}

func (x *AddressGP) GetTaxschid() string {
	if x != nil {
		return x.Taxschid
	}
	return ""
}

func (x *AddressGP) GetCntcprsn() string {
	if x != nil {
		return x.Cntcprsn
	}
	return ""
}

func (x *AddressGP) GetAddresS1() string {
	if x != nil {
		return x.AddresS1
	}
	return ""
}

func (x *AddressGP) GetAddresS2() string {
	if x != nil {
		return x.AddresS2
	}
	return ""
}

func (x *AddressGP) GetAddresS3() string {
	if x != nil {
		return x.AddresS3
	}
	return ""
}

func (x *AddressGP) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *AddressGP) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *AddressGP) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *AddressGP) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

func (x *AddressGP) GetPhonE1() string {
	if x != nil {
		return x.PhonE1
	}
	return ""
}

func (x *AddressGP) GetPhonE2() string {
	if x != nil {
		return x.PhonE2
	}
	return ""
}

func (x *AddressGP) GetPhonE3() string {
	if x != nil {
		return x.PhonE3
	}
	return ""
}

func (x *AddressGP) GetCCode() string {
	if x != nil {
		return x.CCode
	}
	return ""
}

func (x *AddressGP) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *AddressGP) GetSalsterr() string {
	if x != nil {
		return x.Salsterr
	}
	return ""
}

func (x *AddressGP) GetUserdeF1() string {
	if x != nil {
		return x.UserdeF1
	}
	return ""
}

func (x *AddressGP) GetUserdeF2() string {
	if x != nil {
		return x.UserdeF2
	}
	return ""
}

func (x *AddressGP) GetShipToName() string {
	if x != nil {
		return x.ShipToName
	}
	return ""
}

func (x *AddressGP) GetGnL_Administrative_Code() string {
	if x != nil {
		return x.GnL_Administrative_Code
	}
	return ""
}

func (x *AddressGP) GetGnL_Archetype_ID() string {
	if x != nil {
		return x.GnL_Archetype_ID
	}
	return ""
}

func (x *AddressGP) GetGnL_Longitude() float64 {
	if x != nil {
		return x.GnL_Longitude
	}
	return 0
}

func (x *AddressGP) GetGnL_Latitude() float64 {
	if x != nil {
		return x.GnL_Latitude
	}
	return 0
}

func (x *AddressGP) GetGnL_Address_Note() string {
	if x != nil {
		return x.GnL_Address_Note
	}
	return ""
}

func (x *AddressGP) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *AddressGP) GetCrusrid() string {
	if x != nil {
		return x.Crusrid
	}
	return ""
}

func (x *AddressGP) GetCreatddt() string {
	if x != nil {
		return x.Creatddt
	}
	return ""
}

func (x *AddressGP) GetMdfusrid() string {
	if x != nil {
		return x.Mdfusrid
	}
	return ""
}

func (x *AddressGP) GetModifdt() string {
	if x != nil {
		return x.Modifdt
	}
	return ""
}

func (x *AddressGP) GetTypeAddress() string {
	if x != nil {
		return x.TypeAddress
	}
	return ""
}

func (x *AddressGP) GetAdministrativeDiv() *AdministrativeDiv {
	if x != nil {
		return x.AdministrativeDiv
	}
	return nil
}

func (x *AddressGP) GetPrstadcd() string {
	if x != nil {
		return x.Prstadcd
	}
	return ""
}

type GetPaymentTermGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit         int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	PaymentUsefor string `protobuf:"bytes,3,opt,name=payment_usefor,json=paymentUsefor,proto3" json:"payment_usefor,omitempty"`
	PaymentTermId string `protobuf:"bytes,4,opt,name=payment_term_id,json=paymentTermId,proto3" json:"payment_term_id,omitempty"`
}

func (x *GetPaymentTermGPListRequest) Reset() {
	*x = GetPaymentTermGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentTermGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentTermGPListRequest) ProtoMessage() {}

func (x *GetPaymentTermGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentTermGPListRequest.ProtoReflect.Descriptor instead.
func (*GetPaymentTermGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{289}
}

func (x *GetPaymentTermGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetPaymentTermGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetPaymentTermGPListRequest) GetPaymentUsefor() string {
	if x != nil {
		return x.PaymentUsefor
	}
	return ""
}

func (x *GetPaymentTermGPListRequest) GetPaymentTermId() string {
	if x != nil {
		return x.PaymentTermId
	}
	return ""
}

type GetPaymentTermGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPaymentTermGPDetailRequest) Reset() {
	*x = GetPaymentTermGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentTermGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentTermGPDetailRequest) ProtoMessage() {}

func (x *GetPaymentTermGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentTermGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetPaymentTermGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{290}
}

func (x *GetPaymentTermGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPaymentTermGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32            `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32            `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32            `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32            `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*PaymentTermGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool             `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string         `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string           `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetPaymentTermGPResponse) Reset() {
	*x = GetPaymentTermGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentTermGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentTermGPResponse) ProtoMessage() {}

func (x *GetPaymentTermGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentTermGPResponse.ProtoReflect.Descriptor instead.
func (*GetPaymentTermGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{291}
}

func (x *GetPaymentTermGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetPaymentTermGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetPaymentTermGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetPaymentTermGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetPaymentTermGPResponse) GetData() []*PaymentTermGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetPaymentTermGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetPaymentTermGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetPaymentTermGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetSalesPersonGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit            int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset           int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	SalesTerritoryId string `protobuf:"bytes,3,opt,name=sales_territory_id,json=salesTerritoryId,proto3" json:"sales_territory_id,omitempty"`
	Status           string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Search           string `protobuf:"bytes,5,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *GetSalesPersonGPListRequest) Reset() {
	*x = GetSalesPersonGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPersonGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPersonGPListRequest) ProtoMessage() {}

func (x *GetSalesPersonGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPersonGPListRequest.ProtoReflect.Descriptor instead.
func (*GetSalesPersonGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{292}
}

func (x *GetSalesPersonGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSalesPersonGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSalesPersonGPListRequest) GetSalesTerritoryId() string {
	if x != nil {
		return x.SalesTerritoryId
	}
	return ""
}

func (x *GetSalesPersonGPListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetSalesPersonGPListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type GetSalesPersonGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSalesPersonGPDetailRequest) Reset() {
	*x = GetSalesPersonGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPersonGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPersonGPDetailRequest) ProtoMessage() {}

func (x *GetSalesPersonGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPersonGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetSalesPersonGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{293}
}

func (x *GetSalesPersonGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSalesPersonGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32            `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32            `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32            `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32            `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*SalesPersonGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool             `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string         `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string           `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetSalesPersonGPResponse) Reset() {
	*x = GetSalesPersonGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPersonGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPersonGPResponse) ProtoMessage() {}

func (x *GetSalesPersonGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPersonGPResponse.ProtoReflect.Descriptor instead.
func (*GetSalesPersonGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{294}
}

func (x *GetSalesPersonGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetSalesPersonGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetSalesPersonGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetSalesPersonGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetSalesPersonGPResponse) GetData() []*SalesPersonGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetSalesPersonGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetSalesPersonGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetSalesPersonGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetCustomerTypeGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit           int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset          int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Id              string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Description     string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	CustomerGroupId string `protobuf:"bytes,5,opt,name=customer_group_id,json=customerGroupId,proto3" json:"customer_group_id,omitempty"`
	Inactive        string `protobuf:"bytes,6,opt,name=inactive,proto3" json:"inactive,omitempty"`
}

func (x *GetCustomerTypeGPListRequest) Reset() {
	*x = GetCustomerTypeGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerTypeGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerTypeGPListRequest) ProtoMessage() {}

func (x *GetCustomerTypeGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerTypeGPListRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerTypeGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{295}
}

func (x *GetCustomerTypeGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCustomerTypeGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCustomerTypeGPListRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetCustomerTypeGPListRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetCustomerTypeGPListRequest) GetCustomerGroupId() string {
	if x != nil {
		return x.CustomerGroupId
	}
	return ""
}

func (x *GetCustomerTypeGPListRequest) GetInactive() string {
	if x != nil {
		return x.Inactive
	}
	return ""
}

type GetCustomerTypeGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCustomerTypeGPDetailRequest) Reset() {
	*x = GetCustomerTypeGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerTypeGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerTypeGPDetailRequest) ProtoMessage() {}

func (x *GetCustomerTypeGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerTypeGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerTypeGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{296}
}

func (x *GetCustomerTypeGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetCustomerTypeGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32             `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32             `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32             `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32             `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*CustomerTypeGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool              `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string          `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string            `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetCustomerTypeGPResponse) Reset() {
	*x = GetCustomerTypeGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerTypeGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerTypeGPResponse) ProtoMessage() {}

func (x *GetCustomerTypeGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerTypeGPResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerTypeGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{297}
}

func (x *GetCustomerTypeGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetCustomerTypeGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetCustomerTypeGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetCustomerTypeGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetCustomerTypeGPResponse) GetData() []*CustomerTypeGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetCustomerTypeGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetCustomerTypeGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetCustomerTypeGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetArchetypeGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit                   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset                  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	GnlArchetypeId          string `protobuf:"bytes,3,opt,name=gnl_archetype_id,json=gnlArchetypeId,proto3" json:"gnl_archetype_id,omitempty"`
	GnlArchetypedescription string `protobuf:"bytes,4,opt,name=gnl_archetypedescription,json=gnlArchetypedescription,proto3" json:"gnl_archetypedescription,omitempty"`
	GnlCustTypeId           string `protobuf:"bytes,5,opt,name=gnl_cust_type_id,json=gnlCustTypeId,proto3" json:"gnl_cust_type_id,omitempty"`
	Inactive                string `protobuf:"bytes,6,opt,name=inactive,proto3" json:"inactive,omitempty"`
}

func (x *GetArchetypeGPListRequest) Reset() {
	*x = GetArchetypeGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArchetypeGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArchetypeGPListRequest) ProtoMessage() {}

func (x *GetArchetypeGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArchetypeGPListRequest.ProtoReflect.Descriptor instead.
func (*GetArchetypeGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{298}
}

func (x *GetArchetypeGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetArchetypeGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetArchetypeGPListRequest) GetGnlArchetypeId() string {
	if x != nil {
		return x.GnlArchetypeId
	}
	return ""
}

func (x *GetArchetypeGPListRequest) GetGnlArchetypedescription() string {
	if x != nil {
		return x.GnlArchetypedescription
	}
	return ""
}

func (x *GetArchetypeGPListRequest) GetGnlCustTypeId() string {
	if x != nil {
		return x.GnlCustTypeId
	}
	return ""
}

func (x *GetArchetypeGPListRequest) GetInactive() string {
	if x != nil {
		return x.Inactive
	}
	return ""
}

type GetArchetypeGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetArchetypeGPDetailRequest) Reset() {
	*x = GetArchetypeGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArchetypeGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArchetypeGPDetailRequest) ProtoMessage() {}

func (x *GetArchetypeGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArchetypeGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetArchetypeGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{299}
}

func (x *GetArchetypeGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetArchetypeGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32          `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32          `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32          `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32          `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*ArchetypeGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool           `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string       `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string         `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetArchetypeGPResponse) Reset() {
	*x = GetArchetypeGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArchetypeGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArchetypeGPResponse) ProtoMessage() {}

func (x *GetArchetypeGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArchetypeGPResponse.ProtoReflect.Descriptor instead.
func (*GetArchetypeGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{300}
}

func (x *GetArchetypeGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetArchetypeGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetArchetypeGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetArchetypeGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetArchetypeGPResponse) GetData() []*ArchetypeGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetArchetypeGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetArchetypeGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetArchetypeGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetOrderTypeGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetOrderTypeGPListRequest) Reset() {
	*x = GetOrderTypeGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderTypeGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderTypeGPListRequest) ProtoMessage() {}

func (x *GetOrderTypeGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderTypeGPListRequest.ProtoReflect.Descriptor instead.
func (*GetOrderTypeGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{301}
}

func (x *GetOrderTypeGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetOrderTypeGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetOrderTypeGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetOrderTypeGPDetailRequest) Reset() {
	*x = GetOrderTypeGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderTypeGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderTypeGPDetailRequest) ProtoMessage() {}

func (x *GetOrderTypeGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderTypeGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetOrderTypeGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{302}
}

func (x *GetOrderTypeGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetOrderTypeGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32          `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32          `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32          `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32          `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*OrderTypeGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool           `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string       `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string         `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetOrderTypeGPResponse) Reset() {
	*x = GetOrderTypeGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderTypeGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderTypeGPResponse) ProtoMessage() {}

func (x *GetOrderTypeGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderTypeGPResponse.ProtoReflect.Descriptor instead.
func (*GetOrderTypeGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{303}
}

func (x *GetOrderTypeGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetOrderTypeGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetOrderTypeGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetOrderTypeGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetOrderTypeGPResponse) GetData() []*OrderTypeGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetOrderTypeGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetOrderTypeGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetOrderTypeGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetUomGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Search string `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *GetUomGPListRequest) Reset() {
	*x = GetUomGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUomGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUomGPListRequest) ProtoMessage() {}

func (x *GetUomGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUomGPListRequest.ProtoReflect.Descriptor instead.
func (*GetUomGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{304}
}

func (x *GetUomGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetUomGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetUomGPListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type GetUomGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetUomGPDetailRequest) Reset() {
	*x = GetUomGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUomGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUomGPDetailRequest) ProtoMessage() {}

func (x *GetUomGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUomGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetUomGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{305}
}

func (x *GetUomGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetUomGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32    `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32    `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32    `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*UomGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool     `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string   `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetUomGPResponse) Reset() {
	*x = GetUomGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUomGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUomGPResponse) ProtoMessage() {}

func (x *GetUomGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUomGPResponse.ProtoReflect.Descriptor instead.
func (*GetUomGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{306}
}

func (x *GetUomGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetUomGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetUomGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetUomGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetUomGPResponse) GetData() []*UomGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetUomGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetUomGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetUomGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetItemClassGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Search string `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *GetItemClassGPListRequest) Reset() {
	*x = GetItemClassGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemClassGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemClassGPListRequest) ProtoMessage() {}

func (x *GetItemClassGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemClassGPListRequest.ProtoReflect.Descriptor instead.
func (*GetItemClassGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{307}
}

func (x *GetItemClassGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetItemClassGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetItemClassGPListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type GetItemClassGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetItemClassGPDetailRequest) Reset() {
	*x = GetItemClassGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemClassGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemClassGPDetailRequest) ProtoMessage() {}

func (x *GetItemClassGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemClassGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetItemClassGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{308}
}

func (x *GetItemClassGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetItemClassGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32          `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32          `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32          `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32          `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*ItemClassGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool           `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string       `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string         `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetItemClassGPResponse) Reset() {
	*x = GetItemClassGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemClassGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemClassGPResponse) ProtoMessage() {}

func (x *GetItemClassGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemClassGPResponse.ProtoReflect.Descriptor instead.
func (*GetItemClassGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{309}
}

func (x *GetItemClassGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetItemClassGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetItemClassGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetItemClassGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetItemClassGPResponse) GetData() []*ItemClassGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetItemClassGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetItemClassGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetItemClassGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetSalesTerritoryGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Search string `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *GetSalesTerritoryGPListRequest) Reset() {
	*x = GetSalesTerritoryGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesTerritoryGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesTerritoryGPListRequest) ProtoMessage() {}

func (x *GetSalesTerritoryGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesTerritoryGPListRequest.ProtoReflect.Descriptor instead.
func (*GetSalesTerritoryGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{310}
}

func (x *GetSalesTerritoryGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSalesTerritoryGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSalesTerritoryGPListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type GetSalesTerritoryGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSalesTerritoryGPDetailRequest) Reset() {
	*x = GetSalesTerritoryGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesTerritoryGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesTerritoryGPDetailRequest) ProtoMessage() {}

func (x *GetSalesTerritoryGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesTerritoryGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetSalesTerritoryGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{311}
}

func (x *GetSalesTerritoryGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSalesTerritoryGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32               `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32               `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32               `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32               `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*SalesTerritoryGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool                `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string            `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string              `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetSalesTerritoryGPResponse) Reset() {
	*x = GetSalesTerritoryGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesTerritoryGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesTerritoryGPResponse) ProtoMessage() {}

func (x *GetSalesTerritoryGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesTerritoryGPResponse.ProtoReflect.Descriptor instead.
func (*GetSalesTerritoryGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{312}
}

func (x *GetSalesTerritoryGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetSalesTerritoryGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetSalesTerritoryGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetSalesTerritoryGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetSalesTerritoryGPResponse) GetData() []*SalesTerritoryGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetSalesTerritoryGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetSalesTerritoryGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetSalesTerritoryGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetAddressGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit          int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset         int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	CustomerNumber string `protobuf:"bytes,3,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	CustomerName   string `protobuf:"bytes,4,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty"`
	ExcludeType    string `protobuf:"bytes,5,opt,name=exclude_type,json=excludeType,proto3" json:"exclude_type,omitempty"`
	Status         string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Adrscode       string `protobuf:"bytes,7,opt,name=adrscode,proto3" json:"adrscode,omitempty"`
}

func (x *GetAddressGPListRequest) Reset() {
	*x = GetAddressGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressGPListRequest) ProtoMessage() {}

func (x *GetAddressGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressGPListRequest.ProtoReflect.Descriptor instead.
func (*GetAddressGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{313}
}

func (x *GetAddressGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAddressGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAddressGPListRequest) GetCustomerNumber() string {
	if x != nil {
		return x.CustomerNumber
	}
	return ""
}

func (x *GetAddressGPListRequest) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *GetAddressGPListRequest) GetExcludeType() string {
	if x != nil {
		return x.ExcludeType
	}
	return ""
}

func (x *GetAddressGPListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetAddressGPListRequest) GetAdrscode() string {
	if x != nil {
		return x.Adrscode
	}
	return ""
}

type GetAddressGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAddressGPDetailRequest) Reset() {
	*x = GetAddressGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressGPDetailRequest) ProtoMessage() {}

func (x *GetAddressGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetAddressGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{314}
}

func (x *GetAddressGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAddressGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32        `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32        `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32        `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32        `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*AddressGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool         `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string     `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string       `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetAddressGPResponse) Reset() {
	*x = GetAddressGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressGPResponse) ProtoMessage() {}

func (x *GetAddressGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressGPResponse.ProtoReflect.Descriptor instead.
func (*GetAddressGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{315}
}

func (x *GetAddressGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetAddressGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetAddressGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetAddressGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetAddressGPResponse) GetData() []*AddressGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAddressGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetAddressGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetAddressGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateItemTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestDateStr    string                           `protobuf:"bytes,1,opt,name=request_date_str,json=requestDateStr,proto3" json:"request_date_str,omitempty"`
	SiteOriginId      int64                            `protobuf:"varint,2,opt,name=site_origin_id,json=siteOriginId,proto3" json:"site_origin_id,omitempty"`
	SiteDestinationId int64                            `protobuf:"varint,3,opt,name=site_destination_id,json=siteDestinationId,proto3" json:"site_destination_id,omitempty"`
	Note              string                           `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
	StockTypeId       int32                            `protobuf:"varint,5,opt,name=stock_type_id,json=stockTypeId,proto3" json:"stock_type_id,omitempty"`
	ItemTransferItems []*CreateItemTransferItemRequest `protobuf:"bytes,6,rep,name=item_transfer_items,json=itemTransferItems,proto3" json:"item_transfer_items,omitempty"`
}

func (x *CreateItemTransferRequest) Reset() {
	*x = CreateItemTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateItemTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateItemTransferRequest) ProtoMessage() {}

func (x *CreateItemTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateItemTransferRequest.ProtoReflect.Descriptor instead.
func (*CreateItemTransferRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{316}
}

func (x *CreateItemTransferRequest) GetRequestDateStr() string {
	if x != nil {
		return x.RequestDateStr
	}
	return ""
}

func (x *CreateItemTransferRequest) GetSiteOriginId() int64 {
	if x != nil {
		return x.SiteOriginId
	}
	return 0
}

func (x *CreateItemTransferRequest) GetSiteDestinationId() int64 {
	if x != nil {
		return x.SiteDestinationId
	}
	return 0
}

func (x *CreateItemTransferRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreateItemTransferRequest) GetStockTypeId() int32 {
	if x != nil {
		return x.StockTypeId
	}
	return 0
}

func (x *CreateItemTransferRequest) GetItemTransferItems() []*CreateItemTransferItemRequest {
	if x != nil {
		return x.ItemTransferItems
	}
	return nil
}

type CreateItemTransferItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId      int64   `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	TransferQty float64 `protobuf:"fixed64,2,opt,name=transfer_qty,json=transferQty,proto3" json:"transfer_qty,omitempty"`
	RequestQty  float64 `protobuf:"fixed64,3,opt,name=request_qty,json=requestQty,proto3" json:"request_qty,omitempty"`
	ReceiveQty  float64 `protobuf:"fixed64,4,opt,name=receive_qty,json=receiveQty,proto3" json:"receive_qty,omitempty"`
	ReceiveNote string  `protobuf:"bytes,5,opt,name=receive_note,json=receiveNote,proto3" json:"receive_note,omitempty"`
	UnitCost    float64 `protobuf:"fixed64,6,opt,name=unit_cost,json=unitCost,proto3" json:"unit_cost,omitempty"`
	Note        string  `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *CreateItemTransferItemRequest) Reset() {
	*x = CreateItemTransferItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateItemTransferItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateItemTransferItemRequest) ProtoMessage() {}

func (x *CreateItemTransferItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateItemTransferItemRequest.ProtoReflect.Descriptor instead.
func (*CreateItemTransferItemRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{317}
}

func (x *CreateItemTransferItemRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *CreateItemTransferItemRequest) GetTransferQty() float64 {
	if x != nil {
		return x.TransferQty
	}
	return 0
}

func (x *CreateItemTransferItemRequest) GetRequestQty() float64 {
	if x != nil {
		return x.RequestQty
	}
	return 0
}

func (x *CreateItemTransferItemRequest) GetReceiveQty() float64 {
	if x != nil {
		return x.ReceiveQty
	}
	return 0
}

func (x *CreateItemTransferItemRequest) GetReceiveNote() string {
	if x != nil {
		return x.ReceiveNote
	}
	return ""
}

func (x *CreateItemTransferItemRequest) GetUnitCost() float64 {
	if x != nil {
		return x.UnitCost
	}
	return 0
}

func (x *CreateItemTransferItemRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type UpdateItemTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64                            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SiteOriginId       int64                            `protobuf:"varint,2,opt,name=site_origin_id,json=siteOriginId,proto3" json:"site_origin_id,omitempty"`
	SiteDestinationId  int64                            `protobuf:"varint,3,opt,name=site_destination_id,json=siteDestinationId,proto3" json:"site_destination_id,omitempty"`
	RecognitionDateStr string                           `protobuf:"bytes,4,opt,name=recognition_date_str,json=recognitionDateStr,proto3" json:"recognition_date_str,omitempty"`
	RequestDateStr     string                           `protobuf:"bytes,5,opt,name=request_date_str,json=requestDateStr,proto3" json:"request_date_str,omitempty"`
	EtaDateStr         string                           `protobuf:"bytes,6,opt,name=eta_date_str,json=etaDateStr,proto3" json:"eta_date_str,omitempty"`
	EtaTimeStr         string                           `protobuf:"bytes,7,opt,name=eta_time_str,json=etaTimeStr,proto3" json:"eta_time_str,omitempty"`
	AdditionalCost     float64                          `protobuf:"fixed64,8,opt,name=additional_cost,json=additionalCost,proto3" json:"additional_cost,omitempty"`
	AdditionalCostNote string                           `protobuf:"bytes,9,opt,name=additional_cost_note,json=additionalCostNote,proto3" json:"additional_cost_note,omitempty"`
	Note               string                           `protobuf:"bytes,10,opt,name=note,proto3" json:"note,omitempty"`
	ItemTransferItems  []*UpdateItemTransferItemRequest `protobuf:"bytes,11,rep,name=item_transfer_items,json=itemTransferItems,proto3" json:"item_transfer_items,omitempty"`
}

func (x *UpdateItemTransferRequest) Reset() {
	*x = UpdateItemTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateItemTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateItemTransferRequest) ProtoMessage() {}

func (x *UpdateItemTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateItemTransferRequest.ProtoReflect.Descriptor instead.
func (*UpdateItemTransferRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{318}
}

func (x *UpdateItemTransferRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateItemTransferRequest) GetSiteOriginId() int64 {
	if x != nil {
		return x.SiteOriginId
	}
	return 0
}

func (x *UpdateItemTransferRequest) GetSiteDestinationId() int64 {
	if x != nil {
		return x.SiteDestinationId
	}
	return 0
}

func (x *UpdateItemTransferRequest) GetRecognitionDateStr() string {
	if x != nil {
		return x.RecognitionDateStr
	}
	return ""
}

func (x *UpdateItemTransferRequest) GetRequestDateStr() string {
	if x != nil {
		return x.RequestDateStr
	}
	return ""
}

func (x *UpdateItemTransferRequest) GetEtaDateStr() string {
	if x != nil {
		return x.EtaDateStr
	}
	return ""
}

func (x *UpdateItemTransferRequest) GetEtaTimeStr() string {
	if x != nil {
		return x.EtaTimeStr
	}
	return ""
}

func (x *UpdateItemTransferRequest) GetAdditionalCost() float64 {
	if x != nil {
		return x.AdditionalCost
	}
	return 0
}

func (x *UpdateItemTransferRequest) GetAdditionalCostNote() string {
	if x != nil {
		return x.AdditionalCostNote
	}
	return ""
}

func (x *UpdateItemTransferRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *UpdateItemTransferRequest) GetItemTransferItems() []*UpdateItemTransferItemRequest {
	if x != nil {
		return x.ItemTransferItems
	}
	return nil
}

type UpdateItemTransferItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ItemId      int64   `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	TransferQty float64 `protobuf:"fixed64,3,opt,name=transfer_qty,json=transferQty,proto3" json:"transfer_qty,omitempty"`
	RequestQty  float64 `protobuf:"fixed64,4,opt,name=request_qty,json=requestQty,proto3" json:"request_qty,omitempty"`
	ReceiveQty  float64 `protobuf:"fixed64,5,opt,name=receive_qty,json=receiveQty,proto3" json:"receive_qty,omitempty"`
	ReceiveNote string  `protobuf:"bytes,6,opt,name=receive_note,json=receiveNote,proto3" json:"receive_note,omitempty"`
	UnitCost    float64 `protobuf:"fixed64,7,opt,name=unit_cost,json=unitCost,proto3" json:"unit_cost,omitempty"`
	Note        string  `protobuf:"bytes,8,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *UpdateItemTransferItemRequest) Reset() {
	*x = UpdateItemTransferItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateItemTransferItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateItemTransferItemRequest) ProtoMessage() {}

func (x *UpdateItemTransferItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateItemTransferItemRequest.ProtoReflect.Descriptor instead.
func (*UpdateItemTransferItemRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{319}
}

func (x *UpdateItemTransferItemRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateItemTransferItemRequest) GetItemId() int64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *UpdateItemTransferItemRequest) GetTransferQty() float64 {
	if x != nil {
		return x.TransferQty
	}
	return 0
}

func (x *UpdateItemTransferItemRequest) GetRequestQty() float64 {
	if x != nil {
		return x.RequestQty
	}
	return 0
}

func (x *UpdateItemTransferItemRequest) GetReceiveQty() float64 {
	if x != nil {
		return x.ReceiveQty
	}
	return 0
}

func (x *UpdateItemTransferItemRequest) GetReceiveNote() string {
	if x != nil {
		return x.ReceiveNote
	}
	return ""
}

func (x *UpdateItemTransferItemRequest) GetUnitCost() float64 {
	if x != nil {
		return x.UnitCost
	}
	return 0
}

func (x *UpdateItemTransferItemRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type GetItemTransferItemDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetItemTransferItemDetailRequest) Reset() {
	*x = GetItemTransferItemDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemTransferItemDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemTransferItemDetailRequest) ProtoMessage() {}

func (x *GetItemTransferItemDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemTransferItemDetailRequest.ProtoReflect.Descriptor instead.
func (*GetItemTransferItemDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{320}
}

func (x *GetItemTransferItemDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetItemTransferItemDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *ItemTransferItem `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetItemTransferItemDetailResponse) Reset() {
	*x = GetItemTransferItemDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemTransferItemDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemTransferItemDetailResponse) ProtoMessage() {}

func (x *GetItemTransferItemDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemTransferItemDetailResponse.ProtoReflect.Descriptor instead.
func (*GetItemTransferItemDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{321}
}

func (x *GetItemTransferItemDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetItemTransferItemDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetItemTransferItemDetailResponse) GetData() *ItemTransferItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type CommitItemTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64                            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RecognitionDate    string                           `protobuf:"bytes,2,opt,name=recognition_date,json=recognitionDate,proto3" json:"recognition_date,omitempty"`
	EtaDate            string                           `protobuf:"bytes,3,opt,name=eta_date,json=etaDate,proto3" json:"eta_date,omitempty"`
	EtaTime            string                           `protobuf:"bytes,4,opt,name=eta_time,json=etaTime,proto3" json:"eta_time,omitempty"`
	AdditionalCost     float64                          `protobuf:"fixed64,5,opt,name=additional_cost,json=additionalCost,proto3" json:"additional_cost,omitempty"`
	AdditionalCostNote string                           `protobuf:"bytes,6,opt,name=additional_cost_note,json=additionalCostNote,proto3" json:"additional_cost_note,omitempty"`
	ItemTransferItems  []*UpdateItemTransferItemRequest `protobuf:"bytes,7,rep,name=item_transfer_items,json=itemTransferItems,proto3" json:"item_transfer_items,omitempty"`
}

func (x *CommitItemTransferRequest) Reset() {
	*x = CommitItemTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitItemTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitItemTransferRequest) ProtoMessage() {}

func (x *CommitItemTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitItemTransferRequest.ProtoReflect.Descriptor instead.
func (*CommitItemTransferRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{322}
}

func (x *CommitItemTransferRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommitItemTransferRequest) GetRecognitionDate() string {
	if x != nil {
		return x.RecognitionDate
	}
	return ""
}

func (x *CommitItemTransferRequest) GetEtaDate() string {
	if x != nil {
		return x.EtaDate
	}
	return ""
}

func (x *CommitItemTransferRequest) GetEtaTime() string {
	if x != nil {
		return x.EtaTime
	}
	return ""
}

func (x *CommitItemTransferRequest) GetAdditionalCost() float64 {
	if x != nil {
		return x.AdditionalCost
	}
	return 0
}

func (x *CommitItemTransferRequest) GetAdditionalCostNote() string {
	if x != nil {
		return x.AdditionalCostNote
	}
	return ""
}

func (x *CommitItemTransferRequest) GetItemTransferItems() []*UpdateItemTransferItemRequest {
	if x != nil {
		return x.ItemTransferItems
	}
	return nil
}

type Receiving struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SiteId              int64                  `protobuf:"varint,2,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	PurchaseOrderId     int64                  `protobuf:"varint,3,opt,name=purchase_order_id,json=purchaseOrderId,proto3" json:"purchase_order_id,omitempty"`
	ItemTransferId      int64                  `protobuf:"varint,4,opt,name=item_transfer_id,json=itemTransferId,proto3" json:"item_transfer_id,omitempty"`
	Code                string                 `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	AtaDate             *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=ata_date,json=ataDate,proto3" json:"ata_date,omitempty"`
	AtaTime             string                 `protobuf:"bytes,7,opt,name=ata_time,json=ataTime,proto3" json:"ata_time,omitempty"`
	TotalWeight         float64                `protobuf:"fixed64,8,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
	Note                string                 `protobuf:"bytes,9,opt,name=note,proto3" json:"note,omitempty"`
	Status              int32                  `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	InboundType         int32                  `protobuf:"varint,11,opt,name=inbound_type,json=inboundType,proto3" json:"inbound_type,omitempty"`
	ValidSupplierReturn int32                  `protobuf:"varint,12,opt,name=valid_supplier_return,json=validSupplierReturn,proto3" json:"valid_supplier_return,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy           int64                  `protobuf:"varint,14,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	ConfirmedAt         *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=confirmed_at,json=confirmedAt,proto3" json:"confirmed_at,omitempty"`
	ConfirmedBy         int64                  `protobuf:"varint,16,opt,name=confirmed_by,json=confirmedBy,proto3" json:"confirmed_by,omitempty"`
	Locked              int32                  `protobuf:"varint,17,opt,name=locked,proto3" json:"locked,omitempty"`
	StockType           int32                  `protobuf:"varint,18,opt,name=stock_type,json=stockType,proto3" json:"stock_type,omitempty"`
	LockedBy            int64                  `protobuf:"varint,19,opt,name=locked_by,json=lockedBy,proto3" json:"locked_by,omitempty"`
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy           int64                  `protobuf:"varint,21,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Site                *Site                  `protobuf:"bytes,22,opt,name=site,proto3" json:"site,omitempty"`
	PurchaseOrder       *PurchaseOrder         `protobuf:"bytes,23,opt,name=purchase_order,json=purchaseOrder,proto3" json:"purchase_order,omitempty"`
	ItemTransfer        *ItemTransfer          `protobuf:"bytes,24,opt,name=item_transfer,json=itemTransfer,proto3" json:"item_transfer,omitempty"`
	ReceivingItems      []*ReceivingItem       `protobuf:"bytes,25,rep,name=receiving_items,json=receivingItems,proto3" json:"receiving_items,omitempty"`
}

func (x *Receiving) Reset() {
	*x = Receiving{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Receiving) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Receiving) ProtoMessage() {}

func (x *Receiving) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Receiving.ProtoReflect.Descriptor instead.
func (*Receiving) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{323}
}

func (x *Receiving) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Receiving) GetSiteId() int64 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *Receiving) GetPurchaseOrderId() int64 {
	if x != nil {
		return x.PurchaseOrderId
	}
	return 0
}

func (x *Receiving) GetItemTransferId() int64 {
	if x != nil {
		return x.ItemTransferId
	}
	return 0
}

func (x *Receiving) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Receiving) GetAtaDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AtaDate
	}
	return nil
}

func (x *Receiving) GetAtaTime() string {
	if x != nil {
		return x.AtaTime
	}
	return ""
}

func (x *Receiving) GetTotalWeight() float64 {
	if x != nil {
		return x.TotalWeight
	}
	return 0
}

func (x *Receiving) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *Receiving) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Receiving) GetInboundType() int32 {
	if x != nil {
		return x.InboundType
	}
	return 0
}

func (x *Receiving) GetValidSupplierReturn() int32 {
	if x != nil {
		return x.ValidSupplierReturn
	}
	return 0
}

func (x *Receiving) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Receiving) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *Receiving) GetConfirmedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ConfirmedAt
	}
	return nil
}

func (x *Receiving) GetConfirmedBy() int64 {
	if x != nil {
		return x.ConfirmedBy
	}
	return 0
}

func (x *Receiving) GetLocked() int32 {
	if x != nil {
		return x.Locked
	}
	return 0
}

func (x *Receiving) GetStockType() int32 {
	if x != nil {
		return x.StockType
	}
	return 0
}

func (x *Receiving) GetLockedBy() int64 {
	if x != nil {
		return x.LockedBy
	}
	return 0
}

func (x *Receiving) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Receiving) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *Receiving) GetSite() *Site {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *Receiving) GetPurchaseOrder() *PurchaseOrder {
	if x != nil {
		return x.PurchaseOrder
	}
	return nil
}

func (x *Receiving) GetItemTransfer() *ItemTransfer {
	if x != nil {
		return x.ItemTransfer
	}
	return nil
}

func (x *Receiving) GetReceivingItems() []*ReceivingItem {
	if x != nil {
		return x.ReceivingItems
	}
	return nil
}

type ReceivingItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PurchaseOrderItemId int64              `protobuf:"varint,2,opt,name=purchase_order_item_id,json=purchaseOrderItemId,proto3" json:"purchase_order_item_id,omitempty"`
	ItemTransferItemId  int64              `protobuf:"varint,3,opt,name=item_transfer_item_id,json=itemTransferItemId,proto3" json:"item_transfer_item_id,omitempty"`
	DeliverQty          float64            `protobuf:"fixed64,4,opt,name=deliver_qty,json=deliverQty,proto3" json:"deliver_qty,omitempty"`
	RejectQty           float64            `protobuf:"fixed64,5,opt,name=reject_qty,json=rejectQty,proto3" json:"reject_qty,omitempty"`
	ReceiveQty          float64            `protobuf:"fixed64,6,opt,name=receive_qty,json=receiveQty,proto3" json:"receive_qty,omitempty"`
	Weight              float64            `protobuf:"fixed64,7,opt,name=weight,proto3" json:"weight,omitempty"`
	Note                string             `protobuf:"bytes,8,opt,name=note,proto3" json:"note,omitempty"`
	RejectReason        int32              `protobuf:"varint,9,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	IsDisabled          int32              `protobuf:"varint,10,opt,name=is_disabled,json=isDisabled,proto3" json:"is_disabled,omitempty"`
	Receiving           *Receiving         `protobuf:"bytes,11,opt,name=receiving,proto3" json:"receiving,omitempty"`
	PurchaseOrderItem   *PurchaseOrderItem `protobuf:"bytes,12,opt,name=purchase_order_item,json=purchaseOrderItem,proto3" json:"purchase_order_item,omitempty"`
	ItemTransferItem    *ItemTransferItem  `protobuf:"bytes,13,opt,name=item_transfer_item,json=itemTransferItem,proto3" json:"item_transfer_item,omitempty"`
	Item                *Item              `protobuf:"bytes,14,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *ReceivingItem) Reset() {
	*x = ReceivingItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivingItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivingItem) ProtoMessage() {}

func (x *ReceivingItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivingItem.ProtoReflect.Descriptor instead.
func (*ReceivingItem) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{324}
}

func (x *ReceivingItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReceivingItem) GetPurchaseOrderItemId() int64 {
	if x != nil {
		return x.PurchaseOrderItemId
	}
	return 0
}

func (x *ReceivingItem) GetItemTransferItemId() int64 {
	if x != nil {
		return x.ItemTransferItemId
	}
	return 0
}

func (x *ReceivingItem) GetDeliverQty() float64 {
	if x != nil {
		return x.DeliverQty
	}
	return 0
}

func (x *ReceivingItem) GetRejectQty() float64 {
	if x != nil {
		return x.RejectQty
	}
	return 0
}

func (x *ReceivingItem) GetReceiveQty() float64 {
	if x != nil {
		return x.ReceiveQty
	}
	return 0
}

func (x *ReceivingItem) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ReceivingItem) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *ReceivingItem) GetRejectReason() int32 {
	if x != nil {
		return x.RejectReason
	}
	return 0
}

func (x *ReceivingItem) GetIsDisabled() int32 {
	if x != nil {
		return x.IsDisabled
	}
	return 0
}

func (x *ReceivingItem) GetReceiving() *Receiving {
	if x != nil {
		return x.Receiving
	}
	return nil
}

func (x *ReceivingItem) GetPurchaseOrderItem() *PurchaseOrderItem {
	if x != nil {
		return x.PurchaseOrderItem
	}
	return nil
}

func (x *ReceivingItem) GetItemTransferItem() *ItemTransferItem {
	if x != nil {
		return x.ItemTransferItem
	}
	return nil
}

func (x *ReceivingItem) GetItem() *Item {
	if x != nil {
		return x.Item
	}
	return nil
}

type GetReceivingListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search  string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *GetReceivingListRequest) Reset() {
	*x = GetReceivingListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReceivingListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceivingListRequest) ProtoMessage() {}

func (x *GetReceivingListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceivingListRequest.ProtoReflect.Descriptor instead.
func (*GetReceivingListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{325}
}

func (x *GetReceivingListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetReceivingListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetReceivingListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetReceivingListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetReceivingListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type GetReceivingListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*Receiving `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetReceivingListResponse) Reset() {
	*x = GetReceivingListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReceivingListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceivingListResponse) ProtoMessage() {}

func (x *GetReceivingListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceivingListResponse.ProtoReflect.Descriptor instead.
func (*GetReceivingListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{326}
}

func (x *GetReceivingListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetReceivingListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetReceivingListResponse) GetData() []*Receiving {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetReceivingDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetReceivingDetailRequest) Reset() {
	*x = GetReceivingDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReceivingDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceivingDetailRequest) ProtoMessage() {}

func (x *GetReceivingDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceivingDetailRequest.ProtoReflect.Descriptor instead.
func (*GetReceivingDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{327}
}

func (x *GetReceivingDetailRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetReceivingDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Receiving `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetReceivingDetailResponse) Reset() {
	*x = GetReceivingDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReceivingDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceivingDetailResponse) ProtoMessage() {}

func (x *GetReceivingDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceivingDetailResponse.ProtoReflect.Descriptor instead.
func (*GetReceivingDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{328}
}

func (x *GetReceivingDetailResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetReceivingDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetReceivingDetailResponse) GetData() *Receiving {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateReceivingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SiteId        int64                         `protobuf:"varint,2,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	AtaDateStr    string                        `protobuf:"bytes,3,opt,name=ata_date_str,json=ataDateStr,proto3" json:"ata_date_str,omitempty"`
	AtaTimeStr    string                        `protobuf:"bytes,4,opt,name=ata_time_str,json=ataTimeStr,proto3" json:"ata_time_str,omitempty"`
	Note          string                        `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
	InboundType   string                        `protobuf:"bytes,6,opt,name=inbound_type,json=inboundType,proto3" json:"inbound_type,omitempty"`
	ReceivingItem []*CreateReceivingItemRequest `protobuf:"bytes,7,rep,name=receiving_item,json=receivingItem,proto3" json:"receiving_item,omitempty"`
}

func (x *CreateReceivingRequest) Reset() {
	*x = CreateReceivingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReceivingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReceivingRequest) ProtoMessage() {}

func (x *CreateReceivingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReceivingRequest.ProtoReflect.Descriptor instead.
func (*CreateReceivingRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{329}
}

func (x *CreateReceivingRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateReceivingRequest) GetSiteId() int64 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *CreateReceivingRequest) GetAtaDateStr() string {
	if x != nil {
		return x.AtaDateStr
	}
	return ""
}

func (x *CreateReceivingRequest) GetAtaTimeStr() string {
	if x != nil {
		return x.AtaTimeStr
	}
	return ""
}

func (x *CreateReceivingRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CreateReceivingRequest) GetInboundType() string {
	if x != nil {
		return x.InboundType
	}
	return ""
}

func (x *CreateReceivingRequest) GetReceivingItem() []*CreateReceivingItemRequest {
	if x != nil {
		return x.ReceivingItem
	}
	return nil
}

type CreateReceivingItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceivingItemId string  `protobuf:"bytes,1,opt,name=receiving_item_id,json=receivingItemId,proto3" json:"receiving_item_id,omitempty"`
	ItemId          string  `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	InboundItemId   string  `protobuf:"bytes,3,opt,name=inbound_item_id,json=inboundItemId,proto3" json:"inbound_item_id,omitempty"`
	DeliveryQty     float64 `protobuf:"fixed64,4,opt,name=delivery_qty,json=deliveryQty,proto3" json:"delivery_qty,omitempty"`
	RejectQty       float64 `protobuf:"fixed64,5,opt,name=reject_qty,json=rejectQty,proto3" json:"reject_qty,omitempty"`
	RejectReason    int32   `protobuf:"varint,6,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	ReceiveQty      float64 `protobuf:"fixed64,7,opt,name=receive_qty,json=receiveQty,proto3" json:"receive_qty,omitempty"`
	Note            string  `protobuf:"bytes,8,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *CreateReceivingItemRequest) Reset() {
	*x = CreateReceivingItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReceivingItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReceivingItemRequest) ProtoMessage() {}

func (x *CreateReceivingItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReceivingItemRequest.ProtoReflect.Descriptor instead.
func (*CreateReceivingItemRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{330}
}

func (x *CreateReceivingItemRequest) GetReceivingItemId() string {
	if x != nil {
		return x.ReceivingItemId
	}
	return ""
}

func (x *CreateReceivingItemRequest) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

func (x *CreateReceivingItemRequest) GetInboundItemId() string {
	if x != nil {
		return x.InboundItemId
	}
	return ""
}

func (x *CreateReceivingItemRequest) GetDeliveryQty() float64 {
	if x != nil {
		return x.DeliveryQty
	}
	return 0
}

func (x *CreateReceivingItemRequest) GetRejectQty() float64 {
	if x != nil {
		return x.RejectQty
	}
	return 0
}

func (x *CreateReceivingItemRequest) GetRejectReason() int32 {
	if x != nil {
		return x.RejectReason
	}
	return 0
}

func (x *CreateReceivingItemRequest) GetReceiveQty() float64 {
	if x != nil {
		return x.ReceiveQty
	}
	return 0
}

func (x *CreateReceivingItemRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type CreateAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Custnmbr                string  `protobuf:"bytes,1,opt,name=custnmbr,proto3" json:"custnmbr,omitempty"`
	Custname                string  `protobuf:"bytes,2,opt,name=custname,proto3" json:"custname,omitempty"`
	Adrscode                string  `protobuf:"bytes,3,opt,name=adrscode,proto3" json:"adrscode,omitempty"`
	Slprsnid                string  `protobuf:"bytes,4,opt,name=slprsnid,proto3" json:"slprsnid,omitempty"`
	Shipmthd                string  `protobuf:"bytes,5,opt,name=shipmthd,proto3" json:"shipmthd,omitempty"`
	Taxschid                string  `protobuf:"bytes,6,opt,name=taxschid,proto3" json:"taxschid,omitempty"`
	Cntcprsn                string  `protobuf:"bytes,7,opt,name=cntcprsn,proto3" json:"cntcprsn,omitempty"`
	AddresS1                string  `protobuf:"bytes,8,opt,name=addresS1,proto3" json:"addresS1,omitempty"`
	AddresS2                string  `protobuf:"bytes,9,opt,name=addresS2,proto3" json:"addresS2,omitempty"`
	AddresS3                string  `protobuf:"bytes,10,opt,name=addresS3,proto3" json:"addresS3,omitempty"`
	Country                 string  `protobuf:"bytes,11,opt,name=country,proto3" json:"country,omitempty"`
	City                    string  `protobuf:"bytes,12,opt,name=city,proto3" json:"city,omitempty"`
	State                   string  `protobuf:"bytes,13,opt,name=state,proto3" json:"state,omitempty"`
	Zip                     string  `protobuf:"bytes,14,opt,name=zip,proto3" json:"zip,omitempty"`
	PhonE1                  string  `protobuf:"bytes,15,opt,name=phonE1,proto3" json:"phonE1,omitempty"`
	PhonE2                  string  `protobuf:"bytes,16,opt,name=phonE2,proto3" json:"phonE2,omitempty"`
	PhonE3                  string  `protobuf:"bytes,17,opt,name=phonE3,proto3" json:"phonE3,omitempty"`
	CCode                   string  `protobuf:"bytes,18,opt,name=cCode,proto3" json:"cCode,omitempty"`
	Locncode                string  `protobuf:"bytes,19,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Salsterr                string  `protobuf:"bytes,20,opt,name=salsterr,proto3" json:"salsterr,omitempty"`
	UserdeF1                string  `protobuf:"bytes,21,opt,name=userdeF1,proto3" json:"userdeF1,omitempty"`
	UserdeF2                string  `protobuf:"bytes,22,opt,name=userdeF2,proto3" json:"userdeF2,omitempty"`
	ShipToName              string  `protobuf:"bytes,23,opt,name=shipToName,proto3" json:"shipToName,omitempty"`
	GnL_Administrative_Code string  `protobuf:"bytes,24,opt,name=gnL_Administrative_Code,json=gnLAdministrativeCode,proto3" json:"gnL_Administrative_Code,omitempty"`
	GnL_Archetype_ID        string  `protobuf:"bytes,25,opt,name=gnL_Archetype_ID,json=gnLArchetypeID,proto3" json:"gnL_Archetype_ID,omitempty"`
	GnL_Longitude           float64 `protobuf:"fixed64,26,opt,name=gnL_Longitude,json=gnLLongitude,proto3" json:"gnL_Longitude,omitempty"`
	GnL_Latitude            float64 `protobuf:"fixed64,27,opt,name=gnL_Latitude,json=gnLLatitude,proto3" json:"gnL_Latitude,omitempty"`
	GnL_Address_Note        string  `protobuf:"bytes,28,opt,name=gnL_Address_Note,json=gnLAddressNote,proto3" json:"gnL_Address_Note,omitempty"`
	Inactive                string  `protobuf:"bytes,29,opt,name=inactive,proto3" json:"inactive,omitempty"`
	Crusrid                 string  `protobuf:"bytes,30,opt,name=crusrid,proto3" json:"crusrid,omitempty"`
	Creatddt                string  `protobuf:"bytes,31,opt,name=creatddt,proto3" json:"creatddt,omitempty"`
	Mdfusrid                string  `protobuf:"bytes,32,opt,name=mdfusrid,proto3" json:"mdfusrid,omitempty"`
	Modifdt                 string  `protobuf:"bytes,33,opt,name=modifdt,proto3" json:"modifdt,omitempty"`
	TypeAddress             string  `protobuf:"bytes,34,opt,name=type_address,json=typeAddress,proto3" json:"type_address,omitempty"`
	Param                   string  `protobuf:"bytes,35,opt,name=param,proto3" json:"param,omitempty"`
	Fax                     string  `protobuf:"bytes,36,opt,name=fax,proto3" json:"fax,omitempty"`
	Upzone                  string  `protobuf:"bytes,37,opt,name=upzone,proto3" json:"upzone,omitempty"`
}

func (x *CreateAddressRequest) Reset() {
	*x = CreateAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAddressRequest) ProtoMessage() {}

func (x *CreateAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAddressRequest.ProtoReflect.Descriptor instead.
func (*CreateAddressRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{331}
}

func (x *CreateAddressRequest) GetCustnmbr() string {
	if x != nil {
		return x.Custnmbr
	}
	return ""
}

func (x *CreateAddressRequest) GetCustname() string {
	if x != nil {
		return x.Custname
	}
	return ""
}

func (x *CreateAddressRequest) GetAdrscode() string {
	if x != nil {
		return x.Adrscode
	}
	return ""
}

func (x *CreateAddressRequest) GetSlprsnid() string {
	if x != nil {
		return x.Slprsnid
	}
	return ""
}

func (x *CreateAddressRequest) GetShipmthd() string {
	if x != nil {
		return x.Shipmthd
	}
	return ""
}

func (x *CreateAddressRequest) GetTaxschid() string {
	if x != nil {
		return x.Taxschid
	}
	return ""
}

func (x *CreateAddressRequest) GetCntcprsn() string {
	if x != nil {
		return x.Cntcprsn
	}
	return ""
}

func (x *CreateAddressRequest) GetAddresS1() string {
	if x != nil {
		return x.AddresS1
	}
	return ""
}

func (x *CreateAddressRequest) GetAddresS2() string {
	if x != nil {
		return x.AddresS2
	}
	return ""
}

func (x *CreateAddressRequest) GetAddresS3() string {
	if x != nil {
		return x.AddresS3
	}
	return ""
}

func (x *CreateAddressRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CreateAddressRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CreateAddressRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *CreateAddressRequest) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

func (x *CreateAddressRequest) GetPhonE1() string {
	if x != nil {
		return x.PhonE1
	}
	return ""
}

func (x *CreateAddressRequest) GetPhonE2() string {
	if x != nil {
		return x.PhonE2
	}
	return ""
}

func (x *CreateAddressRequest) GetPhonE3() string {
	if x != nil {
		return x.PhonE3
	}
	return ""
}

func (x *CreateAddressRequest) GetCCode() string {
	if x != nil {
		return x.CCode
	}
	return ""
}

func (x *CreateAddressRequest) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *CreateAddressRequest) GetSalsterr() string {
	if x != nil {
		return x.Salsterr
	}
	return ""
}

func (x *CreateAddressRequest) GetUserdeF1() string {
	if x != nil {
		return x.UserdeF1
	}
	return ""
}

func (x *CreateAddressRequest) GetUserdeF2() string {
	if x != nil {
		return x.UserdeF2
	}
	return ""
}

func (x *CreateAddressRequest) GetShipToName() string {
	if x != nil {
		return x.ShipToName
	}
	return ""
}

func (x *CreateAddressRequest) GetGnL_Administrative_Code() string {
	if x != nil {
		return x.GnL_Administrative_Code
	}
	return ""
}

func (x *CreateAddressRequest) GetGnL_Archetype_ID() string {
	if x != nil {
		return x.GnL_Archetype_ID
	}
	return ""
}

func (x *CreateAddressRequest) GetGnL_Longitude() float64 {
	if x != nil {
		return x.GnL_Longitude
	}
	return 0
}

func (x *CreateAddressRequest) GetGnL_Latitude() float64 {
	if x != nil {
		return x.GnL_Latitude
	}
	return 0
}

func (x *CreateAddressRequest) GetGnL_Address_Note() string {
	if x != nil {
		return x.GnL_Address_Note
	}
	return ""
}

func (x *CreateAddressRequest) GetInactive() string {
	if x != nil {
		return x.Inactive
	}
	return ""
}

func (x *CreateAddressRequest) GetCrusrid() string {
	if x != nil {
		return x.Crusrid
	}
	return ""
}

func (x *CreateAddressRequest) GetCreatddt() string {
	if x != nil {
		return x.Creatddt
	}
	return ""
}

func (x *CreateAddressRequest) GetMdfusrid() string {
	if x != nil {
		return x.Mdfusrid
	}
	return ""
}

func (x *CreateAddressRequest) GetModifdt() string {
	if x != nil {
		return x.Modifdt
	}
	return ""
}

func (x *CreateAddressRequest) GetTypeAddress() string {
	if x != nil {
		return x.TypeAddress
	}
	return ""
}

func (x *CreateAddressRequest) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *CreateAddressRequest) GetFax() string {
	if x != nil {
		return x.Fax
	}
	return ""
}

func (x *CreateAddressRequest) GetUpzone() string {
	if x != nil {
		return x.Upzone
	}
	return ""
}

type CreateAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateAddressResponse) Reset() {
	*x = CreateAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAddressResponse) ProtoMessage() {}

func (x *CreateAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAddressResponse.ProtoReflect.Descriptor instead.
func (*CreateAddressResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{332}
}

func (x *CreateAddressResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateAddressResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Custnmbr                string  `protobuf:"bytes,1,opt,name=custnmbr,proto3" json:"custnmbr,omitempty"`
	Custname                string  `protobuf:"bytes,2,opt,name=custname,proto3" json:"custname,omitempty"`
	Adrscode                string  `protobuf:"bytes,3,opt,name=adrscode,proto3" json:"adrscode,omitempty"`
	Slprsnid                string  `protobuf:"bytes,4,opt,name=slprsnid,proto3" json:"slprsnid,omitempty"`
	Shipmthd                string  `protobuf:"bytes,5,opt,name=shipmthd,proto3" json:"shipmthd,omitempty"`
	Taxschid                string  `protobuf:"bytes,6,opt,name=taxschid,proto3" json:"taxschid,omitempty"`
	Cntcprsn                string  `protobuf:"bytes,7,opt,name=cntcprsn,proto3" json:"cntcprsn,omitempty"`
	AddresS1                string  `protobuf:"bytes,8,opt,name=addresS1,proto3" json:"addresS1,omitempty"`
	AddresS2                string  `protobuf:"bytes,9,opt,name=addresS2,proto3" json:"addresS2,omitempty"`
	AddresS3                string  `protobuf:"bytes,10,opt,name=addresS3,proto3" json:"addresS3,omitempty"`
	Country                 string  `protobuf:"bytes,11,opt,name=country,proto3" json:"country,omitempty"`
	City                    string  `protobuf:"bytes,12,opt,name=city,proto3" json:"city,omitempty"`
	State                   string  `protobuf:"bytes,13,opt,name=state,proto3" json:"state,omitempty"`
	Zip                     string  `protobuf:"bytes,14,opt,name=zip,proto3" json:"zip,omitempty"`
	PhonE1                  string  `protobuf:"bytes,15,opt,name=phonE1,proto3" json:"phonE1,omitempty"`
	PhonE2                  string  `protobuf:"bytes,16,opt,name=phonE2,proto3" json:"phonE2,omitempty"`
	PhonE3                  string  `protobuf:"bytes,17,opt,name=phonE3,proto3" json:"phonE3,omitempty"`
	CCode                   string  `protobuf:"bytes,18,opt,name=cCode,proto3" json:"cCode,omitempty"`
	Locncode                string  `protobuf:"bytes,19,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Salsterr                string  `protobuf:"bytes,20,opt,name=salsterr,proto3" json:"salsterr,omitempty"`
	UserdeF1                string  `protobuf:"bytes,21,opt,name=userdeF1,proto3" json:"userdeF1,omitempty"`
	UserdeF2                string  `protobuf:"bytes,22,opt,name=userdeF2,proto3" json:"userdeF2,omitempty"`
	ShipToName              string  `protobuf:"bytes,23,opt,name=shipToName,proto3" json:"shipToName,omitempty"`
	GnL_Administrative_Code string  `protobuf:"bytes,24,opt,name=gnL_Administrative_Code,json=gnLAdministrativeCode,proto3" json:"gnL_Administrative_Code,omitempty"`
	GnL_Archetype_ID        string  `protobuf:"bytes,25,opt,name=gnL_Archetype_ID,json=gnLArchetypeID,proto3" json:"gnL_Archetype_ID,omitempty"`
	GnL_Longitude           float64 `protobuf:"fixed64,26,opt,name=gnL_Longitude,json=gnLLongitude,proto3" json:"gnL_Longitude,omitempty"`
	GnL_Latitude            float64 `protobuf:"fixed64,27,opt,name=gnL_Latitude,json=gnLLatitude,proto3" json:"gnL_Latitude,omitempty"`
	GnL_Address_Note        string  `protobuf:"bytes,28,opt,name=gnL_Address_Note,json=gnLAddressNote,proto3" json:"gnL_Address_Note,omitempty"`
	Inactive                int32   `protobuf:"varint,29,opt,name=inactive,proto3" json:"inactive,omitempty"`
	Crusrid                 string  `protobuf:"bytes,30,opt,name=crusrid,proto3" json:"crusrid,omitempty"`
	Creatddt                string  `protobuf:"bytes,31,opt,name=creatddt,proto3" json:"creatddt,omitempty"`
	Mdfusrid                string  `protobuf:"bytes,32,opt,name=mdfusrid,proto3" json:"mdfusrid,omitempty"`
	Modifdt                 string  `protobuf:"bytes,33,opt,name=modifdt,proto3" json:"modifdt,omitempty"`
	TypeAddress             string  `protobuf:"bytes,34,opt,name=type_address,json=typeAddress,proto3" json:"type_address,omitempty"`
	Param                   string  `protobuf:"bytes,35,opt,name=param,proto3" json:"param,omitempty"`
	Fax                     string  `protobuf:"bytes,36,opt,name=fax,proto3" json:"fax,omitempty"`
	Upzone                  string  `protobuf:"bytes,37,opt,name=upzone,proto3" json:"upzone,omitempty"`
	Interid                 string  `protobuf:"bytes,38,opt,name=interid,proto3" json:"interid,omitempty"`
}

func (x *UpdateAddressRequest) Reset() {
	*x = UpdateAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAddressRequest) ProtoMessage() {}

func (x *UpdateAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAddressRequest.ProtoReflect.Descriptor instead.
func (*UpdateAddressRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{333}
}

func (x *UpdateAddressRequest) GetCustnmbr() string {
	if x != nil {
		return x.Custnmbr
	}
	return ""
}

func (x *UpdateAddressRequest) GetCustname() string {
	if x != nil {
		return x.Custname
	}
	return ""
}

func (x *UpdateAddressRequest) GetAdrscode() string {
	if x != nil {
		return x.Adrscode
	}
	return ""
}

func (x *UpdateAddressRequest) GetSlprsnid() string {
	if x != nil {
		return x.Slprsnid
	}
	return ""
}

func (x *UpdateAddressRequest) GetShipmthd() string {
	if x != nil {
		return x.Shipmthd
	}
	return ""
}

func (x *UpdateAddressRequest) GetTaxschid() string {
	if x != nil {
		return x.Taxschid
	}
	return ""
}

func (x *UpdateAddressRequest) GetCntcprsn() string {
	if x != nil {
		return x.Cntcprsn
	}
	return ""
}

func (x *UpdateAddressRequest) GetAddresS1() string {
	if x != nil {
		return x.AddresS1
	}
	return ""
}

func (x *UpdateAddressRequest) GetAddresS2() string {
	if x != nil {
		return x.AddresS2
	}
	return ""
}

func (x *UpdateAddressRequest) GetAddresS3() string {
	if x != nil {
		return x.AddresS3
	}
	return ""
}

func (x *UpdateAddressRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *UpdateAddressRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UpdateAddressRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *UpdateAddressRequest) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

func (x *UpdateAddressRequest) GetPhonE1() string {
	if x != nil {
		return x.PhonE1
	}
	return ""
}

func (x *UpdateAddressRequest) GetPhonE2() string {
	if x != nil {
		return x.PhonE2
	}
	return ""
}

func (x *UpdateAddressRequest) GetPhonE3() string {
	if x != nil {
		return x.PhonE3
	}
	return ""
}

func (x *UpdateAddressRequest) GetCCode() string {
	if x != nil {
		return x.CCode
	}
	return ""
}

func (x *UpdateAddressRequest) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *UpdateAddressRequest) GetSalsterr() string {
	if x != nil {
		return x.Salsterr
	}
	return ""
}

func (x *UpdateAddressRequest) GetUserdeF1() string {
	if x != nil {
		return x.UserdeF1
	}
	return ""
}

func (x *UpdateAddressRequest) GetUserdeF2() string {
	if x != nil {
		return x.UserdeF2
	}
	return ""
}

func (x *UpdateAddressRequest) GetShipToName() string {
	if x != nil {
		return x.ShipToName
	}
	return ""
}

func (x *UpdateAddressRequest) GetGnL_Administrative_Code() string {
	if x != nil {
		return x.GnL_Administrative_Code
	}
	return ""
}

func (x *UpdateAddressRequest) GetGnL_Archetype_ID() string {
	if x != nil {
		return x.GnL_Archetype_ID
	}
	return ""
}

func (x *UpdateAddressRequest) GetGnL_Longitude() float64 {
	if x != nil {
		return x.GnL_Longitude
	}
	return 0
}

func (x *UpdateAddressRequest) GetGnL_Latitude() float64 {
	if x != nil {
		return x.GnL_Latitude
	}
	return 0
}

func (x *UpdateAddressRequest) GetGnL_Address_Note() string {
	if x != nil {
		return x.GnL_Address_Note
	}
	return ""
}

func (x *UpdateAddressRequest) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *UpdateAddressRequest) GetCrusrid() string {
	if x != nil {
		return x.Crusrid
	}
	return ""
}

func (x *UpdateAddressRequest) GetCreatddt() string {
	if x != nil {
		return x.Creatddt
	}
	return ""
}

func (x *UpdateAddressRequest) GetMdfusrid() string {
	if x != nil {
		return x.Mdfusrid
	}
	return ""
}

func (x *UpdateAddressRequest) GetModifdt() string {
	if x != nil {
		return x.Modifdt
	}
	return ""
}

func (x *UpdateAddressRequest) GetTypeAddress() string {
	if x != nil {
		return x.TypeAddress
	}
	return ""
}

func (x *UpdateAddressRequest) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *UpdateAddressRequest) GetFax() string {
	if x != nil {
		return x.Fax
	}
	return ""
}

func (x *UpdateAddressRequest) GetUpzone() string {
	if x != nil {
		return x.Upzone
	}
	return ""
}

func (x *UpdateAddressRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

type UpdateAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateAddressResponse) Reset() {
	*x = UpdateAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAddressResponse) ProtoMessage() {}

func (x *UpdateAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAddressResponse.ProtoReflect.Descriptor instead.
func (*UpdateAddressResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{334}
}

func (x *UpdateAddressResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateAddressResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SetDefaultAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adrscode string `protobuf:"bytes,1,opt,name=adrscode,proto3" json:"adrscode,omitempty"`
	Custnmbr string `protobuf:"bytes,2,opt,name=custnmbr,proto3" json:"custnmbr,omitempty"`
}

func (x *SetDefaultAddressRequest) Reset() {
	*x = SetDefaultAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultAddressRequest) ProtoMessage() {}

func (x *SetDefaultAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultAddressRequest.ProtoReflect.Descriptor instead.
func (*SetDefaultAddressRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{335}
}

func (x *SetDefaultAddressRequest) GetAdrscode() string {
	if x != nil {
		return x.Adrscode
	}
	return ""
}

func (x *SetDefaultAddressRequest) GetCustnmbr() string {
	if x != nil {
		return x.Custnmbr
	}
	return ""
}

type SetDefaultAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SetDefaultAddressResponse) Reset() {
	*x = SetDefaultAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultAddressResponse) ProtoMessage() {}

func (x *SetDefaultAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultAddressResponse.ProtoReflect.Descriptor instead.
func (*SetDefaultAddressResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{336}
}

func (x *SetDefaultAddressResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SetDefaultAddressResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adrscode string `protobuf:"bytes,1,opt,name=adrscode,proto3" json:"adrscode,omitempty"`
}

func (x *DeleteAddressRequest) Reset() {
	*x = DeleteAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAddressRequest) ProtoMessage() {}

func (x *DeleteAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAddressRequest.ProtoReflect.Descriptor instead.
func (*DeleteAddressRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{337}
}

func (x *DeleteAddressRequest) GetAdrscode() string {
	if x != nil {
		return x.Adrscode
	}
	return ""
}

type DeleteAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteAddressResponse) Reset() {
	*x = DeleteAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAddressResponse) ProtoMessage() {}

func (x *DeleteAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAddressResponse.ProtoReflect.Descriptor instead.
func (*DeleteAddressResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{338}
}

func (x *DeleteAddressResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteAddressResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ConfirmReceivingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InboundType string `protobuf:"bytes,2,opt,name=inbound_type,json=inboundType,proto3" json:"inbound_type,omitempty"`
}

func (x *ConfirmReceivingRequest) Reset() {
	*x = ConfirmReceivingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmReceivingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmReceivingRequest) ProtoMessage() {}

func (x *ConfirmReceivingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmReceivingRequest.ProtoReflect.Descriptor instead.
func (*ConfirmReceivingRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{339}
}

func (x *ConfirmReceivingRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConfirmReceivingRequest) GetInboundType() string {
	if x != nil {
		return x.InboundType
	}
	return ""
}

type ReceivingListinDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Code   string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Status int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ReceivingListinDetailResponse) Reset() {
	*x = ReceivingListinDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivingListinDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivingListinDetailResponse) ProtoMessage() {}

func (x *ReceivingListinDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivingListinDetailResponse.ProtoReflect.Descriptor instead.
func (*ReceivingListinDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{340}
}

func (x *ReceivingListinDetailResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReceivingListinDetailResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ReceivingListinDetailResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type VendorGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VENDORID           string                        `protobuf:"bytes,1,opt,name=VENDORID,proto3" json:"VENDORID,omitempty"`
	VENDNAME           string                        `protobuf:"bytes,2,opt,name=VENDNAME,proto3" json:"VENDNAME,omitempty"`
	VNDCLSID           string                        `protobuf:"bytes,3,opt,name=VNDCLSID,proto3" json:"VNDCLSID,omitempty"`
	VNDCNTCT           string                        `protobuf:"bytes,4,opt,name=VNDCNTCT,proto3" json:"VNDCNTCT,omitempty"`
	ADDRESS1           string                        `protobuf:"bytes,5,opt,name=ADDRESS1,proto3" json:"ADDRESS1,omitempty"`
	ADDRESS2           string                        `protobuf:"bytes,6,opt,name=ADDRESS2,proto3" json:"ADDRESS2,omitempty"`
	ADDRESS3           string                        `protobuf:"bytes,7,opt,name=ADDRESS3,proto3" json:"ADDRESS3,omitempty"`
	CITY               string                        `protobuf:"bytes,8,opt,name=CITY,proto3" json:"CITY,omitempty"`
	STATE              string                        `protobuf:"bytes,9,opt,name=STATE,proto3" json:"STATE,omitempty"`
	ZIPCODE            string                        `protobuf:"bytes,10,opt,name=ZIPCODE,proto3" json:"ZIPCODE,omitempty"`
	COUNTRY            string                        `protobuf:"bytes,11,opt,name=COUNTRY,proto3" json:"COUNTRY,omitempty"`
	PHNUMBR1           string                        `protobuf:"bytes,12,opt,name=PHNUMBR1,proto3" json:"PHNUMBR1,omitempty"`
	PHNUMBR2           string                        `protobuf:"bytes,13,opt,name=PHNUMBR2,proto3" json:"PHNUMBR2,omitempty"`
	PHONE3             string                        `protobuf:"bytes,14,opt,name=PHONE3,proto3" json:"PHONE3,omitempty"`
	FAXNUMBR           string                        `protobuf:"bytes,15,opt,name=FAXNUMBR,proto3" json:"FAXNUMBR,omitempty"`
	UPSZONE            string                        `protobuf:"bytes,16,opt,name=UPSZONE,proto3" json:"UPSZONE,omitempty"`
	SHIPMTHD           string                        `protobuf:"bytes,17,opt,name=SHIPMTHD,proto3" json:"SHIPMTHD,omitempty"`
	TAXSCHID           string                        `protobuf:"bytes,18,opt,name=TAXSCHID,proto3" json:"TAXSCHID,omitempty"`
	ACNMVNDR           string                        `protobuf:"bytes,19,opt,name=ACNMVNDR,proto3" json:"ACNMVNDR,omitempty"`
	TXIDNMBR           string                        `protobuf:"bytes,20,opt,name=TXIDNMBR,proto3" json:"TXIDNMBR,omitempty"`
	VENDSTTS           uint32                        `protobuf:"varint,21,opt,name=VENDSTTS,proto3" json:"VENDSTTS,omitempty"`
	CREATDDT           string                        `protobuf:"bytes,22,opt,name=CREATDDT,proto3" json:"CREATDDT,omitempty"`
	CURNCYID           string                        `protobuf:"bytes,23,opt,name=CURNCYID,proto3" json:"CURNCYID,omitempty"`
	TXRGNNUM           string                        `protobuf:"bytes,24,opt,name=TXRGNNUM,proto3" json:"TXRGNNUM,omitempty"`
	TRDDISCT           uint32                        `protobuf:"varint,25,opt,name=TRDDISCT,proto3" json:"TRDDISCT,omitempty"`
	MINORDER           float64                       `protobuf:"fixed64,26,opt,name=MINORDER,proto3" json:"MINORDER,omitempty"`
	PYMTRMID           *VendorGP_Vpymtrmid           `protobuf:"bytes,27,opt,name=PYMTRMID,proto3" json:"PYMTRMID,omitempty"`
	COMMENT1           string                        `protobuf:"bytes,28,opt,name=COMMENT1,proto3" json:"COMMENT1,omitempty"`
	COMMENT2           string                        `protobuf:"bytes,29,opt,name=COMMENT2,proto3" json:"COMMENT2,omitempty"`
	USERDEF1           string                        `protobuf:"bytes,30,opt,name=USERDEF1,proto3" json:"USERDEF1,omitempty"`
	USERDEF2           string                        `protobuf:"bytes,31,opt,name=USERDEF2,proto3" json:"USERDEF2,omitempty"`
	PYMNTPRI           string                        `protobuf:"bytes,32,opt,name=PYMNTPRI,proto3" json:"PYMNTPRI,omitempty"`
	Organization       *VendorGP_Vorganization       `protobuf:"bytes,33,opt,name=Organization,proto3" json:"Organization,omitempty"`
	Classification     *VendorGP_Vclassification     `protobuf:"bytes,34,opt,name=Classification,proto3" json:"Classification,omitempty"`
	PaymentMethod      *VendorGP_Vpaymentmethod      `protobuf:"bytes,35,opt,name=PaymentMethod,proto3" json:"PaymentMethod,omitempty"`
	LatestGoodsReceipt *VendorGP_Vlatestgoodsreceipt `protobuf:"bytes,36,opt,name=LatestGoodsReceipt,proto3" json:"LatestGoodsReceipt,omitempty"`
	Vaddcdpr           *VendorGP_VVendorAddress      `protobuf:"bytes,37,opt,name=vaddcdpr,proto3" json:"vaddcdpr,omitempty"`
}

func (x *VendorGP) Reset() {
	*x = VendorGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorGP) ProtoMessage() {}

func (x *VendorGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorGP.ProtoReflect.Descriptor instead.
func (*VendorGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{341}
}

func (x *VendorGP) GetVENDORID() string {
	if x != nil {
		return x.VENDORID
	}
	return ""
}

func (x *VendorGP) GetVENDNAME() string {
	if x != nil {
		return x.VENDNAME
	}
	return ""
}

func (x *VendorGP) GetVNDCLSID() string {
	if x != nil {
		return x.VNDCLSID
	}
	return ""
}

func (x *VendorGP) GetVNDCNTCT() string {
	if x != nil {
		return x.VNDCNTCT
	}
	return ""
}

func (x *VendorGP) GetADDRESS1() string {
	if x != nil {
		return x.ADDRESS1
	}
	return ""
}

func (x *VendorGP) GetADDRESS2() string {
	if x != nil {
		return x.ADDRESS2
	}
	return ""
}

func (x *VendorGP) GetADDRESS3() string {
	if x != nil {
		return x.ADDRESS3
	}
	return ""
}

func (x *VendorGP) GetCITY() string {
	if x != nil {
		return x.CITY
	}
	return ""
}

func (x *VendorGP) GetSTATE() string {
	if x != nil {
		return x.STATE
	}
	return ""
}

func (x *VendorGP) GetZIPCODE() string {
	if x != nil {
		return x.ZIPCODE
	}
	return ""
}

func (x *VendorGP) GetCOUNTRY() string {
	if x != nil {
		return x.COUNTRY
	}
	return ""
}

func (x *VendorGP) GetPHNUMBR1() string {
	if x != nil {
		return x.PHNUMBR1
	}
	return ""
}

func (x *VendorGP) GetPHNUMBR2() string {
	if x != nil {
		return x.PHNUMBR2
	}
	return ""
}

func (x *VendorGP) GetPHONE3() string {
	if x != nil {
		return x.PHONE3
	}
	return ""
}

func (x *VendorGP) GetFAXNUMBR() string {
	if x != nil {
		return x.FAXNUMBR
	}
	return ""
}

func (x *VendorGP) GetUPSZONE() string {
	if x != nil {
		return x.UPSZONE
	}
	return ""
}

func (x *VendorGP) GetSHIPMTHD() string {
	if x != nil {
		return x.SHIPMTHD
	}
	return ""
}

func (x *VendorGP) GetTAXSCHID() string {
	if x != nil {
		return x.TAXSCHID
	}
	return ""
}

func (x *VendorGP) GetACNMVNDR() string {
	if x != nil {
		return x.ACNMVNDR
	}
	return ""
}

func (x *VendorGP) GetTXIDNMBR() string {
	if x != nil {
		return x.TXIDNMBR
	}
	return ""
}

func (x *VendorGP) GetVENDSTTS() uint32 {
	if x != nil {
		return x.VENDSTTS
	}
	return 0
}

func (x *VendorGP) GetCREATDDT() string {
	if x != nil {
		return x.CREATDDT
	}
	return ""
}

func (x *VendorGP) GetCURNCYID() string {
	if x != nil {
		return x.CURNCYID
	}
	return ""
}

func (x *VendorGP) GetTXRGNNUM() string {
	if x != nil {
		return x.TXRGNNUM
	}
	return ""
}

func (x *VendorGP) GetTRDDISCT() uint32 {
	if x != nil {
		return x.TRDDISCT
	}
	return 0
}

func (x *VendorGP) GetMINORDER() float64 {
	if x != nil {
		return x.MINORDER
	}
	return 0
}

func (x *VendorGP) GetPYMTRMID() *VendorGP_Vpymtrmid {
	if x != nil {
		return x.PYMTRMID
	}
	return nil
}

func (x *VendorGP) GetCOMMENT1() string {
	if x != nil {
		return x.COMMENT1
	}
	return ""
}

func (x *VendorGP) GetCOMMENT2() string {
	if x != nil {
		return x.COMMENT2
	}
	return ""
}

func (x *VendorGP) GetUSERDEF1() string {
	if x != nil {
		return x.USERDEF1
	}
	return ""
}

func (x *VendorGP) GetUSERDEF2() string {
	if x != nil {
		return x.USERDEF2
	}
	return ""
}

func (x *VendorGP) GetPYMNTPRI() string {
	if x != nil {
		return x.PYMNTPRI
	}
	return ""
}

func (x *VendorGP) GetOrganization() *VendorGP_Vorganization {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *VendorGP) GetClassification() *VendorGP_Vclassification {
	if x != nil {
		return x.Classification
	}
	return nil
}

func (x *VendorGP) GetPaymentMethod() *VendorGP_Vpaymentmethod {
	if x != nil {
		return x.PaymentMethod
	}
	return nil
}

func (x *VendorGP) GetLatestGoodsReceipt() *VendorGP_Vlatestgoodsreceipt {
	if x != nil {
		return x.LatestGoodsReceipt
	}
	return nil
}

func (x *VendorGP) GetVaddcdpr() *VendorGP_VVendorAddress {
	if x != nil {
		return x.Vaddcdpr
	}
	return nil
}

type GetVendorGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32       `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32       `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32       `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32       `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*VendorGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool        `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string    `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string      `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetVendorGPResponse) Reset() {
	*x = GetVendorGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorGPResponse) ProtoMessage() {}

func (x *GetVendorGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorGPResponse.ProtoReflect.Descriptor instead.
func (*GetVendorGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{342}
}

func (x *GetVendorGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetVendorGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetVendorGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetVendorGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetVendorGPResponse) GetData() []*VendorGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetVendorGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetVendorGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetVendorGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetVendorGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status    int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search    string `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	Orderby   string `protobuf:"bytes,5,opt,name=orderby,proto3" json:"orderby,omitempty"`
	VendorOrg string `protobuf:"bytes,6,opt,name=vendorOrg,proto3" json:"vendorOrg,omitempty"`
	State     string `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *GetVendorGPListRequest) Reset() {
	*x = GetVendorGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorGPListRequest) ProtoMessage() {}

func (x *GetVendorGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorGPListRequest.ProtoReflect.Descriptor instead.
func (*GetVendorGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{343}
}

func (x *GetVendorGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetVendorGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetVendorGPListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetVendorGPListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetVendorGPListRequest) GetOrderby() string {
	if x != nil {
		return x.Orderby
	}
	return ""
}

func (x *GetVendorGPListRequest) GetVendorOrg() string {
	if x != nil {
		return x.VendorOrg
	}
	return ""
}

func (x *GetVendorGPListRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type GetVendorGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetVendorGPDetailRequest) Reset() {
	*x = GetVendorGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorGPDetailRequest) ProtoMessage() {}

func (x *GetVendorGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetVendorGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{344}
}

func (x *GetVendorGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type HelperGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnlHelperId     string                    `protobuf:"bytes,1,opt,name=gnl_helper_id,json=gnlHelperId,proto3" json:"gnl_helper_id,omitempty"`
	GnlHelperName   string                    `protobuf:"bytes,2,opt,name=gnl_helper_name,json=gnlHelperName,proto3" json:"gnl_helper_name,omitempty"`
	Employid        string                    `protobuf:"bytes,3,opt,name=employid,proto3" json:"employid,omitempty"`
	Userid          string                    `protobuf:"bytes,4,opt,name=userid,proto3" json:"userid,omitempty"`
	Sites           []*HelperGP_HelperGPSites `protobuf:"bytes,5,rep,name=sites,proto3" json:"sites,omitempty"`
	GnlHelperType   int32                     `protobuf:"varint,6,opt,name=gnl_helper_type,json=gnlHelperType,proto3" json:"gnl_helper_type,omitempty"`
	HelperTypeDesc  string                    `protobuf:"bytes,7,opt,name=helper_type_desc,json=helperTypeDesc,proto3" json:"helper_type_desc,omitempty"`
	GnlSupervisorId string                    `protobuf:"bytes,8,opt,name=gnl_supervisor_id,json=gnlSupervisorId,proto3" json:"gnl_supervisor_id,omitempty"`
	GnlPassword     string                    `protobuf:"bytes,9,opt,name=gnl_password,json=gnlPassword,proto3" json:"gnl_password,omitempty"`
	Inactive        int32                     `protobuf:"varint,10,opt,name=inactive,proto3" json:"inactive,omitempty"`
	InactiveDesc    string                    `protobuf:"bytes,11,opt,name=inactive_desc,json=inactiveDesc,proto3" json:"inactive_desc,omitempty"`
}

func (x *HelperGP) Reset() {
	*x = HelperGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelperGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelperGP) ProtoMessage() {}

func (x *HelperGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelperGP.ProtoReflect.Descriptor instead.
func (*HelperGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{345}
}

func (x *HelperGP) GetGnlHelperId() string {
	if x != nil {
		return x.GnlHelperId
	}
	return ""
}

func (x *HelperGP) GetGnlHelperName() string {
	if x != nil {
		return x.GnlHelperName
	}
	return ""
}

func (x *HelperGP) GetEmployid() string {
	if x != nil {
		return x.Employid
	}
	return ""
}

func (x *HelperGP) GetUserid() string {
	if x != nil {
		return x.Userid
	}
	return ""
}

func (x *HelperGP) GetSites() []*HelperGP_HelperGPSites {
	if x != nil {
		return x.Sites
	}
	return nil
}

func (x *HelperGP) GetGnlHelperType() int32 {
	if x != nil {
		return x.GnlHelperType
	}
	return 0
}

func (x *HelperGP) GetHelperTypeDesc() string {
	if x != nil {
		return x.HelperTypeDesc
	}
	return ""
}

func (x *HelperGP) GetGnlSupervisorId() string {
	if x != nil {
		return x.GnlSupervisorId
	}
	return ""
}

func (x *HelperGP) GetGnlPassword() string {
	if x != nil {
		return x.GnlPassword
	}
	return ""
}

func (x *HelperGP) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *HelperGP) GetInactiveDesc() string {
	if x != nil {
		return x.InactiveDesc
	}
	return ""
}

type GetHelperGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit         int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	GnlHelperId   string `protobuf:"bytes,3,opt,name=gnl_helper_id,json=gnlHelperId,proto3" json:"gnl_helper_id,omitempty"`
	GnlHelperName string `protobuf:"bytes,4,opt,name=gnl_helper_name,json=gnlHelperName,proto3" json:"gnl_helper_name,omitempty"`
	Employid      string `protobuf:"bytes,5,opt,name=employid,proto3" json:"employid,omitempty"`
	Userid        string `protobuf:"bytes,6,opt,name=userid,proto3" json:"userid,omitempty"`
	Inactive      int32  `protobuf:"varint,7,opt,name=inactive,proto3" json:"inactive,omitempty"`
	Locncode      string `protobuf:"bytes,8,opt,name=locncode,proto3" json:"locncode,omitempty"`
	GnlHelperType string `protobuf:"bytes,9,opt,name=gnl_helper_type,json=gnlHelperType,proto3" json:"gnl_helper_type,omitempty"`
}

func (x *GetHelperGPListRequest) Reset() {
	*x = GetHelperGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHelperGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHelperGPListRequest) ProtoMessage() {}

func (x *GetHelperGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHelperGPListRequest.ProtoReflect.Descriptor instead.
func (*GetHelperGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{346}
}

func (x *GetHelperGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetHelperGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetHelperGPListRequest) GetGnlHelperId() string {
	if x != nil {
		return x.GnlHelperId
	}
	return ""
}

func (x *GetHelperGPListRequest) GetGnlHelperName() string {
	if x != nil {
		return x.GnlHelperName
	}
	return ""
}

func (x *GetHelperGPListRequest) GetEmployid() string {
	if x != nil {
		return x.Employid
	}
	return ""
}

func (x *GetHelperGPListRequest) GetUserid() string {
	if x != nil {
		return x.Userid
	}
	return ""
}

func (x *GetHelperGPListRequest) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *GetHelperGPListRequest) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *GetHelperGPListRequest) GetGnlHelperType() string {
	if x != nil {
		return x.GnlHelperType
	}
	return ""
}

type GetHelperGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetHelperGPDetailRequest) Reset() {
	*x = GetHelperGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHelperGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHelperGPDetailRequest) ProtoMessage() {}

func (x *GetHelperGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHelperGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetHelperGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{347}
}

func (x *GetHelperGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetHelperGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32       `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32       `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32       `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32       `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*HelperGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool        `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string    `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string      `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetHelperGPResponse) Reset() {
	*x = GetHelperGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHelperGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHelperGPResponse) ProtoMessage() {}

func (x *GetHelperGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHelperGPResponse.ProtoReflect.Descriptor instead.
func (*GetHelperGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{348}
}

func (x *GetHelperGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetHelperGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetHelperGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetHelperGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetHelperGPResponse) GetData() []*HelperGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetHelperGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetHelperGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetHelperGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateVendorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid             string `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Vendorid            string `protobuf:"bytes,2,opt,name=vendorid,proto3" json:"vendorid,omitempty"`
	Vendname            string `protobuf:"bytes,3,opt,name=vendname,proto3" json:"vendname,omitempty"`
	Vendshnm            string `protobuf:"bytes,4,opt,name=vendshnm,proto3" json:"vendshnm,omitempty"`
	Vndchknm            string `protobuf:"bytes,5,opt,name=vndchknm,proto3" json:"vndchknm,omitempty"`
	Vendstts            string `protobuf:"bytes,6,opt,name=vendstts,proto3" json:"vendstts,omitempty"`
	PrP_Vendor_Org_ID   string `protobuf:"bytes,7,opt,name=prP_Vendor_Org_ID,json=prPVendorOrgID,proto3" json:"prP_Vendor_Org_ID,omitempty"`
	PrP_Vendor_CLASF_ID string `protobuf:"bytes,8,opt,name=prP_Vendor_CLASF_ID,json=prPVendorCLASFID,proto3" json:"prP_Vendor_CLASF_ID,omitempty"`
	Vndcntct            string `protobuf:"bytes,9,opt,name=vndcntct,proto3" json:"vndcntct,omitempty"`
	AddresS1            string `protobuf:"bytes,10,opt,name=addresS1,proto3" json:"addresS1,omitempty"`
	AddresS2            string `protobuf:"bytes,11,opt,name=addresS2,proto3" json:"addresS2,omitempty"`
	PhnumbR1            string `protobuf:"bytes,12,opt,name=phnumbR1,proto3" json:"phnumbR1,omitempty"`
	PhnumbR2            string `protobuf:"bytes,13,opt,name=phnumbR2,proto3" json:"phnumbR2,omitempty"`
	PRP_Payment_Method  string `protobuf:"bytes,14,opt,name=PRP_Payment_Method,json=PRPPaymentMethod,proto3" json:"PRP_Payment_Method,omitempty"`
	Vaddcdpr            string `protobuf:"bytes,15,opt,name=vaddcdpr,proto3" json:"vaddcdpr,omitempty"`
	Vadcdpad            string `protobuf:"bytes,16,opt,name=vadcdpad,proto3" json:"vadcdpad,omitempty"`
	Vadcdsfr            string `protobuf:"bytes,17,opt,name=vadcdsfr,proto3" json:"vadcdsfr,omitempty"`
	Vadcdtro            string `protobuf:"bytes,18,opt,name=vadcdtro,proto3" json:"vadcdtro,omitempty"`
	Pymtrmid            string `protobuf:"bytes,19,opt,name=pymtrmid,proto3" json:"pymtrmid,omitempty"`
}

func (x *CreateVendorRequest) Reset() {
	*x = CreateVendorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVendorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVendorRequest) ProtoMessage() {}

func (x *CreateVendorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVendorRequest.ProtoReflect.Descriptor instead.
func (*CreateVendorRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{349}
}

func (x *CreateVendorRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *CreateVendorRequest) GetVendorid() string {
	if x != nil {
		return x.Vendorid
	}
	return ""
}

func (x *CreateVendorRequest) GetVendname() string {
	if x != nil {
		return x.Vendname
	}
	return ""
}

func (x *CreateVendorRequest) GetVendshnm() string {
	if x != nil {
		return x.Vendshnm
	}
	return ""
}

func (x *CreateVendorRequest) GetVndchknm() string {
	if x != nil {
		return x.Vndchknm
	}
	return ""
}

func (x *CreateVendorRequest) GetVendstts() string {
	if x != nil {
		return x.Vendstts
	}
	return ""
}

func (x *CreateVendorRequest) GetPrP_Vendor_Org_ID() string {
	if x != nil {
		return x.PrP_Vendor_Org_ID
	}
	return ""
}

func (x *CreateVendorRequest) GetPrP_Vendor_CLASF_ID() string {
	if x != nil {
		return x.PrP_Vendor_CLASF_ID
	}
	return ""
}

func (x *CreateVendorRequest) GetVndcntct() string {
	if x != nil {
		return x.Vndcntct
	}
	return ""
}

func (x *CreateVendorRequest) GetAddresS1() string {
	if x != nil {
		return x.AddresS1
	}
	return ""
}

func (x *CreateVendorRequest) GetAddresS2() string {
	if x != nil {
		return x.AddresS2
	}
	return ""
}

func (x *CreateVendorRequest) GetPhnumbR1() string {
	if x != nil {
		return x.PhnumbR1
	}
	return ""
}

func (x *CreateVendorRequest) GetPhnumbR2() string {
	if x != nil {
		return x.PhnumbR2
	}
	return ""
}

func (x *CreateVendorRequest) GetPRP_Payment_Method() string {
	if x != nil {
		return x.PRP_Payment_Method
	}
	return ""
}

func (x *CreateVendorRequest) GetVaddcdpr() string {
	if x != nil {
		return x.Vaddcdpr
	}
	return ""
}

func (x *CreateVendorRequest) GetVadcdpad() string {
	if x != nil {
		return x.Vadcdpad
	}
	return ""
}

func (x *CreateVendorRequest) GetVadcdsfr() string {
	if x != nil {
		return x.Vadcdsfr
	}
	return ""
}

func (x *CreateVendorRequest) GetVadcdtro() string {
	if x != nil {
		return x.Vadcdtro
	}
	return ""
}

func (x *CreateVendorRequest) GetPymtrmid() string {
	if x != nil {
		return x.Pymtrmid
	}
	return ""
}

type CreateVendorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateVendorResponse) Reset() {
	*x = CreateVendorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVendorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVendorResponse) ProtoMessage() {}

func (x *CreateVendorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVendorResponse.ProtoReflect.Descriptor instead.
func (*CreateVendorResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{350}
}

func (x *CreateVendorResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateVendorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AssignPurchasePlanGPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrpPurchaseplanNo   string `protobuf:"bytes,1,opt,name=prp_purchaseplan_no,json=prpPurchaseplanNo,proto3" json:"prp_purchaseplan_no,omitempty"`
	PrpPurchaseplanUser string `protobuf:"bytes,2,opt,name=prp_purchaseplan_user,json=prpPurchaseplanUser,proto3" json:"prp_purchaseplan_user,omitempty"`
}

func (x *AssignPurchasePlanGPRequest) Reset() {
	*x = AssignPurchasePlanGPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignPurchasePlanGPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignPurchasePlanGPRequest) ProtoMessage() {}

func (x *AssignPurchasePlanGPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignPurchasePlanGPRequest.ProtoReflect.Descriptor instead.
func (*AssignPurchasePlanGPRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{351}
}

func (x *AssignPurchasePlanGPRequest) GetPrpPurchaseplanNo() string {
	if x != nil {
		return x.PrpPurchaseplanNo
	}
	return ""
}

func (x *AssignPurchasePlanGPRequest) GetPrpPurchaseplanUser() string {
	if x != nil {
		return x.PrpPurchaseplanUser
	}
	return ""
}

type AssignPurchasePlanGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AssignPurchasePlanGPResponse) Reset() {
	*x = AssignPurchasePlanGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignPurchasePlanGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignPurchasePlanGPResponse) ProtoMessage() {}

func (x *AssignPurchasePlanGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignPurchasePlanGPResponse.ProtoReflect.Descriptor instead.
func (*AssignPurchasePlanGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{352}
}

func (x *AssignPurchasePlanGPResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AssignPurchasePlanGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CancelPurchaseOrderGPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoNumber string `protobuf:"bytes,1,opt,name=po_number,json=poNumber,proto3" json:"po_number,omitempty"`
	UserId   string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CancelPurchaseOrderGPRequest) Reset() {
	*x = CancelPurchaseOrderGPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelPurchaseOrderGPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelPurchaseOrderGPRequest) ProtoMessage() {}

func (x *CancelPurchaseOrderGPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelPurchaseOrderGPRequest.ProtoReflect.Descriptor instead.
func (*CancelPurchaseOrderGPRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{353}
}

func (x *CancelPurchaseOrderGPRequest) GetPoNumber() string {
	if x != nil {
		return x.PoNumber
	}
	return ""
}

func (x *CancelPurchaseOrderGPRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CancelPurchaseOrderGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CancelPurchaseOrderGPResponse) Reset() {
	*x = CancelPurchaseOrderGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelPurchaseOrderGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelPurchaseOrderGPResponse) ProtoMessage() {}

func (x *CancelPurchaseOrderGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelPurchaseOrderGPResponse.ProtoReflect.Descriptor instead.
func (*CancelPurchaseOrderGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{354}
}

func (x *CancelPurchaseOrderGPResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CancelPurchaseOrderGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CancelAssignPurchasePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelAssignPurchasePlanRequest) Reset() {
	*x = CancelAssignPurchasePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelAssignPurchasePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAssignPurchasePlanRequest) ProtoMessage() {}

func (x *CancelAssignPurchasePlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAssignPurchasePlanRequest.ProtoReflect.Descriptor instead.
func (*CancelAssignPurchasePlanRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{355}
}

type CancelAssignPurchasePlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelAssignPurchasePlanResponse) Reset() {
	*x = CancelAssignPurchasePlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelAssignPurchasePlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAssignPurchasePlanResponse) ProtoMessage() {}

func (x *CancelAssignPurchasePlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAssignPurchasePlanResponse.ProtoReflect.Descriptor instead.
func (*CancelAssignPurchasePlanResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{356}
}

type GetSalesInvoiceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit         int32                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Status        int32                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Search        string                 `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
	OrderBy       string                 `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	CustomerId    int64                  `protobuf:"varint,6,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	AddressId     int64                  `protobuf:"varint,7,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	SalespersonId int64                  `protobuf:"varint,8,opt,name=salesperson_id,json=salespersonId,proto3" json:"salesperson_id,omitempty"`
	OrderDateFrom *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=order_date_from,json=orderDateFrom,proto3" json:"order_date_from,omitempty"`
	OrderDateTo   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=order_date_to,json=orderDateTo,proto3" json:"order_date_to,omitempty"`
}

func (x *GetSalesInvoiceListRequest) Reset() {
	*x = GetSalesInvoiceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesInvoiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesInvoiceListRequest) ProtoMessage() {}

func (x *GetSalesInvoiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesInvoiceListRequest.ProtoReflect.Descriptor instead.
func (*GetSalesInvoiceListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{357}
}

func (x *GetSalesInvoiceListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSalesInvoiceListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSalesInvoiceListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetSalesInvoiceListRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetSalesInvoiceListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetSalesInvoiceListRequest) GetCustomerId() int64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *GetSalesInvoiceListRequest) GetAddressId() int64 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

func (x *GetSalesInvoiceListRequest) GetSalespersonId() int64 {
	if x != nil {
		return x.SalespersonId
	}
	return 0
}

func (x *GetSalesInvoiceListRequest) GetOrderDateFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderDateFrom
	}
	return nil
}

func (x *GetSalesInvoiceListRequest) GetOrderDateTo() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderDateTo
	}
	return nil
}

type GetSalesInvoiceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*SalesInvoice `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSalesInvoiceListResponse) Reset() {
	*x = GetSalesInvoiceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesInvoiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesInvoiceListResponse) ProtoMessage() {}

func (x *GetSalesInvoiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesInvoiceListResponse.ProtoReflect.Descriptor instead.
func (*GetSalesInvoiceListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{358}
}

func (x *GetSalesInvoiceListResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSalesInvoiceListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSalesInvoiceListResponse) GetData() []*SalesInvoice {
	if x != nil {
		return x.Data
	}
	return nil
}

type CustomerGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Custnmbr                 string                        `protobuf:"bytes,1,opt,name=custnmbr,proto3" json:"custnmbr,omitempty"`
	Custname                 string                        `protobuf:"bytes,2,opt,name=custname,proto3" json:"custname,omitempty"`
	Custclas                 string                        `protobuf:"bytes,3,opt,name=custclas,proto3" json:"custclas,omitempty"`
	Cprcstnm                 string                        `protobuf:"bytes,4,opt,name=cprcstnm,proto3" json:"cprcstnm,omitempty"`
	Cntcprsn                 string                        `protobuf:"bytes,5,opt,name=cntcprsn,proto3" json:"cntcprsn,omitempty"`
	Stmtname                 string                        `protobuf:"bytes,6,opt,name=stmtname,proto3" json:"stmtname,omitempty"`
	Shrtname                 string                        `protobuf:"bytes,7,opt,name=shrtname,proto3" json:"shrtname,omitempty"`
	Adrscode                 []*CustomerAddressGP          `protobuf:"bytes,8,rep,name=adrscode,proto3" json:"adrscode,omitempty"`
	Upszone                  string                        `protobuf:"bytes,9,opt,name=upszone,proto3" json:"upszone,omitempty"`
	Shipmthd                 string                        `protobuf:"bytes,10,opt,name=shipmthd,proto3" json:"shipmthd,omitempty"`
	Taxschid                 string                        `protobuf:"bytes,11,opt,name=taxschid,proto3" json:"taxschid,omitempty"`
	AddresS1                 string                        `protobuf:"bytes,12,opt,name=addresS1,proto3" json:"addresS1,omitempty"`
	AddresS2                 string                        `protobuf:"bytes,13,opt,name=addresS2,proto3" json:"addresS2,omitempty"`
	AddresS3                 string                        `protobuf:"bytes,14,opt,name=addresS3,proto3" json:"addresS3,omitempty"`
	Country                  string                        `protobuf:"bytes,15,opt,name=country,proto3" json:"country,omitempty"`
	City                     string                        `protobuf:"bytes,16,opt,name=city,proto3" json:"city,omitempty"`
	State                    string                        `protobuf:"bytes,17,opt,name=state,proto3" json:"state,omitempty"`
	Zip                      string                        `protobuf:"bytes,18,opt,name=zip,proto3" json:"zip,omitempty"`
	PhonE1                   string                        `protobuf:"bytes,19,opt,name=phonE1,proto3" json:"phonE1,omitempty"`
	PhonE2                   string                        `protobuf:"bytes,20,opt,name=phonE2,proto3" json:"phonE2,omitempty"`
	PhonE3                   string                        `protobuf:"bytes,21,opt,name=phonE3,proto3" json:"phonE3,omitempty"`
	Fax                      string                        `protobuf:"bytes,22,opt,name=fax,proto3" json:"fax,omitempty"`
	Prbtadcd                 string                        `protobuf:"bytes,23,opt,name=prbtadcd,proto3" json:"prbtadcd,omitempty"`
	Prstadcd                 string                        `protobuf:"bytes,24,opt,name=prstadcd,proto3" json:"prstadcd,omitempty"`
	Staddrcd                 string                        `protobuf:"bytes,25,opt,name=staddrcd,proto3" json:"staddrcd,omitempty"`
	Slprsnid                 string                        `protobuf:"bytes,26,opt,name=slprsnid,proto3" json:"slprsnid,omitempty"`
	Chekbkid                 string                        `protobuf:"bytes,27,opt,name=chekbkid,proto3" json:"chekbkid,omitempty"`
	Pymtrmid                 []*Pymtrmid                   `protobuf:"bytes,28,rep,name=pymtrmid,proto3" json:"pymtrmid,omitempty"`
	Crlmttyp                 int32                         `protobuf:"varint,29,opt,name=crlmttyp,proto3" json:"crlmttyp,omitempty"`
	CrlmttypDesc             string                        `protobuf:"bytes,30,opt,name=crlmttyp_desc,json=crlmttypDesc,proto3" json:"crlmttyp_desc,omitempty"`
	Crlmtamt                 float64                       `protobuf:"fixed64,31,opt,name=crlmtamt,proto3" json:"crlmtamt,omitempty"`
	Curncyid                 string                        `protobuf:"bytes,32,opt,name=curncyid,proto3" json:"curncyid,omitempty"`
	Ratetpid                 string                        `protobuf:"bytes,33,opt,name=ratetpid,proto3" json:"ratetpid,omitempty"`
	Custdisc                 string                        `protobuf:"bytes,34,opt,name=custdisc,proto3" json:"custdisc,omitempty"`
	Prclevel                 string                        `protobuf:"bytes,35,opt,name=prclevel,proto3" json:"prclevel,omitempty"`
	Minpytyp                 string                        `protobuf:"bytes,36,opt,name=minpytyp,proto3" json:"minpytyp,omitempty"`
	MinimumPaymentTypeDesc   string                        `protobuf:"bytes,37,opt,name=minimum_payment_type_desc,json=minimumPaymentTypeDesc,proto3" json:"minimum_payment_type_desc,omitempty"`
	Minpydlr                 string                        `protobuf:"bytes,38,opt,name=minpydlr,proto3" json:"minpydlr,omitempty"`
	Minpypct                 string                        `protobuf:"bytes,39,opt,name=minpypct,proto3" json:"minpypct,omitempty"`
	Fnchatyp                 string                        `protobuf:"bytes,40,opt,name=fnchatyp,proto3" json:"fnchatyp,omitempty"`
	FinanceChargeAmtTypeDesc string                        `protobuf:"bytes,41,opt,name=finance_charge_amt_type_desc,json=financeChargeAmtTypeDesc,proto3" json:"finance_charge_amt_type_desc,omitempty"`
	Fnchpcnt                 string                        `protobuf:"bytes,42,opt,name=fnchpcnt,proto3" json:"fnchpcnt,omitempty"`
	Finchdlr                 string                        `protobuf:"bytes,43,opt,name=finchdlr,proto3" json:"finchdlr,omitempty"`
	Mxwoftyp                 string                        `protobuf:"bytes,44,opt,name=mxwoftyp,proto3" json:"mxwoftyp,omitempty"`
	MaximumWriteoffTypeDesc  string                        `protobuf:"bytes,45,opt,name=maximum_writeoff_type_desc,json=maximumWriteoffTypeDesc,proto3" json:"maximum_writeoff_type_desc,omitempty"`
	Mxwrofam                 string                        `protobuf:"bytes,46,opt,name=mxwrofam,proto3" json:"mxwrofam,omitempty"`
	CommenT1                 string                        `protobuf:"bytes,47,opt,name=commenT1,proto3" json:"commenT1,omitempty"`
	CommenT2                 string                        `protobuf:"bytes,48,opt,name=commenT2,proto3" json:"commenT2,omitempty"`
	UserdeF1                 string                        `protobuf:"bytes,49,opt,name=userdeF1,proto3" json:"userdeF1,omitempty"`
	UserdeF2                 string                        `protobuf:"bytes,50,opt,name=userdeF2,proto3" json:"userdeF2,omitempty"`
	TaxexmT1                 string                        `protobuf:"bytes,51,opt,name=taxexmT1,proto3" json:"taxexmT1,omitempty"`
	TaxexmT2                 string                        `protobuf:"bytes,52,opt,name=taxexmT2,proto3" json:"taxexmT2,omitempty"`
	Txrgnnum                 string                        `protobuf:"bytes,53,opt,name=txrgnnum,proto3" json:"txrgnnum,omitempty"`
	Balnctyp                 string                        `protobuf:"bytes,54,opt,name=balnctyp,proto3" json:"balnctyp,omitempty"`
	BalanceTypeDesc          string                        `protobuf:"bytes,55,opt,name=balance_type_desc,json=balanceTypeDesc,proto3" json:"balance_type_desc,omitempty"`
	Stmtcycl                 string                        `protobuf:"bytes,56,opt,name=stmtcycl,proto3" json:"stmtcycl,omitempty"`
	StatementCycleDesc       string                        `protobuf:"bytes,57,opt,name=statement_cycle_desc,json=statementCycleDesc,proto3" json:"statement_cycle_desc,omitempty"`
	Bankname                 string                        `protobuf:"bytes,58,opt,name=bankname,proto3" json:"bankname,omitempty"`
	Bnkbrnch                 string                        `protobuf:"bytes,59,opt,name=bnkbrnch,proto3" json:"bnkbrnch,omitempty"`
	Salsterr                 string                        `protobuf:"bytes,60,opt,name=salsterr,proto3" json:"salsterr,omitempty"`
	Inactive                 int32                         `protobuf:"varint,61,opt,name=inactive,proto3" json:"inactive,omitempty"`
	Hold                     string                        `protobuf:"bytes,62,opt,name=hold,proto3" json:"hold,omitempty"`
	Crcardid                 string                        `protobuf:"bytes,63,opt,name=crcardid,proto3" json:"crcardid,omitempty"`
	Crcrdnum                 string                        `protobuf:"bytes,64,opt,name=crcrdnum,proto3" json:"crcrdnum,omitempty"`
	Ccrdxpdt                 string                        `protobuf:"bytes,65,opt,name=ccrdxpdt,proto3" json:"ccrdxpdt,omitempty"`
	Creatddt                 string                        `protobuf:"bytes,66,opt,name=creatddt,proto3" json:"creatddt,omitempty"`
	Modifdt                  string                        `protobuf:"bytes,67,opt,name=modifdt,proto3" json:"modifdt,omitempty"`
	CustomerType             []*CustomerTypefromCustomerGP `protobuf:"bytes,68,rep,name=customer_type,json=customerType,proto3" json:"customer_type,omitempty"`
	GnlBusinessType          int64                         `protobuf:"varint,69,opt,name=gnl_business_type,json=gnlBusinessType,proto3" json:"gnl_business_type,omitempty"`
	GnlBusinessTypeDesc      string                        `protobuf:"bytes,70,opt,name=gnl_business_type_desc,json=gnlBusinessTypeDesc,proto3" json:"gnl_business_type_desc,omitempty"`
	GnlReferrerCode          string                        `protobuf:"bytes,71,opt,name=gnl_referrer_code,json=gnlReferrerCode,proto3" json:"gnl_referrer_code,omitempty"`
	GnlReferralCode          string                        `protobuf:"bytes,72,opt,name=gnl_referral_code,json=gnlReferralCode,proto3" json:"gnl_referral_code,omitempty"`
	AdministrativeDiv        *AdministrativeDiv            `protobuf:"bytes,73,opt,name=administrative_div,json=administrativeDiv,proto3" json:"administrative_div,omitempty"`
	Shipcomplete             int32                         `protobuf:"varint,74,opt,name=shipcomplete,proto3" json:"shipcomplete,omitempty"`
	ShipcompleteDesc         string                        `protobuf:"bytes,75,opt,name=shipcomplete_desc,json=shipcompleteDesc,proto3" json:"shipcomplete_desc,omitempty"`
	RemainingAmount          float64                       `protobuf:"fixed64,76,opt,name=remaining_amount,json=remainingAmount,proto3" json:"remaining_amount,omitempty"`
	RemainingCreditLimit     float64                       `protobuf:"fixed64,77,opt,name=remaining_credit_limit,json=remainingCreditLimit,proto3" json:"remaining_credit_limit,omitempty"`
}

func (x *CustomerGP) Reset() {
	*x = CustomerGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerGP) ProtoMessage() {}

func (x *CustomerGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerGP.ProtoReflect.Descriptor instead.
func (*CustomerGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{359}
}

func (x *CustomerGP) GetCustnmbr() string {
	if x != nil {
		return x.Custnmbr
	}
	return ""
}

func (x *CustomerGP) GetCustname() string {
	if x != nil {
		return x.Custname
	}
	return ""
}

func (x *CustomerGP) GetCustclas() string {
	if x != nil {
		return x.Custclas
	}
	return ""
}

func (x *CustomerGP) GetCprcstnm() string {
	if x != nil {
		return x.Cprcstnm
	}
	return ""
}

func (x *CustomerGP) GetCntcprsn() string {
	if x != nil {
		return x.Cntcprsn
	}
	return ""
}

func (x *CustomerGP) GetStmtname() string {
	if x != nil {
		return x.Stmtname
	}
	return ""
}

func (x *CustomerGP) GetShrtname() string {
	if x != nil {
		return x.Shrtname
	}
	return ""
}

func (x *CustomerGP) GetAdrscode() []*CustomerAddressGP {
	if x != nil {
		return x.Adrscode
	}
	return nil
}

func (x *CustomerGP) GetUpszone() string {
	if x != nil {
		return x.Upszone
	}
	return ""
}

func (x *CustomerGP) GetShipmthd() string {
	if x != nil {
		return x.Shipmthd
	}
	return ""
}

func (x *CustomerGP) GetTaxschid() string {
	if x != nil {
		return x.Taxschid
	}
	return ""
}

func (x *CustomerGP) GetAddresS1() string {
	if x != nil {
		return x.AddresS1
	}
	return ""
}

func (x *CustomerGP) GetAddresS2() string {
	if x != nil {
		return x.AddresS2
	}
	return ""
}

func (x *CustomerGP) GetAddresS3() string {
	if x != nil {
		return x.AddresS3
	}
	return ""
}

func (x *CustomerGP) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CustomerGP) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CustomerGP) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *CustomerGP) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

func (x *CustomerGP) GetPhonE1() string {
	if x != nil {
		return x.PhonE1
	}
	return ""
}

func (x *CustomerGP) GetPhonE2() string {
	if x != nil {
		return x.PhonE2
	}
	return ""
}

func (x *CustomerGP) GetPhonE3() string {
	if x != nil {
		return x.PhonE3
	}
	return ""
}

func (x *CustomerGP) GetFax() string {
	if x != nil {
		return x.Fax
	}
	return ""
}

func (x *CustomerGP) GetPrbtadcd() string {
	if x != nil {
		return x.Prbtadcd
	}
	return ""
}

func (x *CustomerGP) GetPrstadcd() string {
	if x != nil {
		return x.Prstadcd
	}
	return ""
}

func (x *CustomerGP) GetStaddrcd() string {
	if x != nil {
		return x.Staddrcd
	}
	return ""
}

func (x *CustomerGP) GetSlprsnid() string {
	if x != nil {
		return x.Slprsnid
	}
	return ""
}

func (x *CustomerGP) GetChekbkid() string {
	if x != nil {
		return x.Chekbkid
	}
	return ""
}

func (x *CustomerGP) GetPymtrmid() []*Pymtrmid {
	if x != nil {
		return x.Pymtrmid
	}
	return nil
}

func (x *CustomerGP) GetCrlmttyp() int32 {
	if x != nil {
		return x.Crlmttyp
	}
	return 0
}

func (x *CustomerGP) GetCrlmttypDesc() string {
	if x != nil {
		return x.CrlmttypDesc
	}
	return ""
}

func (x *CustomerGP) GetCrlmtamt() float64 {
	if x != nil {
		return x.Crlmtamt
	}
	return 0
}

func (x *CustomerGP) GetCurncyid() string {
	if x != nil {
		return x.Curncyid
	}
	return ""
}

func (x *CustomerGP) GetRatetpid() string {
	if x != nil {
		return x.Ratetpid
	}
	return ""
}

func (x *CustomerGP) GetCustdisc() string {
	if x != nil {
		return x.Custdisc
	}
	return ""
}

func (x *CustomerGP) GetPrclevel() string {
	if x != nil {
		return x.Prclevel
	}
	return ""
}

func (x *CustomerGP) GetMinpytyp() string {
	if x != nil {
		return x.Minpytyp
	}
	return ""
}

func (x *CustomerGP) GetMinimumPaymentTypeDesc() string {
	if x != nil {
		return x.MinimumPaymentTypeDesc
	}
	return ""
}

func (x *CustomerGP) GetMinpydlr() string {
	if x != nil {
		return x.Minpydlr
	}
	return ""
}

func (x *CustomerGP) GetMinpypct() string {
	if x != nil {
		return x.Minpypct
	}
	return ""
}

func (x *CustomerGP) GetFnchatyp() string {
	if x != nil {
		return x.Fnchatyp
	}
	return ""
}

func (x *CustomerGP) GetFinanceChargeAmtTypeDesc() string {
	if x != nil {
		return x.FinanceChargeAmtTypeDesc
	}
	return ""
}

func (x *CustomerGP) GetFnchpcnt() string {
	if x != nil {
		return x.Fnchpcnt
	}
	return ""
}

func (x *CustomerGP) GetFinchdlr() string {
	if x != nil {
		return x.Finchdlr
	}
	return ""
}

func (x *CustomerGP) GetMxwoftyp() string {
	if x != nil {
		return x.Mxwoftyp
	}
	return ""
}

func (x *CustomerGP) GetMaximumWriteoffTypeDesc() string {
	if x != nil {
		return x.MaximumWriteoffTypeDesc
	}
	return ""
}

func (x *CustomerGP) GetMxwrofam() string {
	if x != nil {
		return x.Mxwrofam
	}
	return ""
}

func (x *CustomerGP) GetCommenT1() string {
	if x != nil {
		return x.CommenT1
	}
	return ""
}

func (x *CustomerGP) GetCommenT2() string {
	if x != nil {
		return x.CommenT2
	}
	return ""
}

func (x *CustomerGP) GetUserdeF1() string {
	if x != nil {
		return x.UserdeF1
	}
	return ""
}

func (x *CustomerGP) GetUserdeF2() string {
	if x != nil {
		return x.UserdeF2
	}
	return ""
}

func (x *CustomerGP) GetTaxexmT1() string {
	if x != nil {
		return x.TaxexmT1
	}
	return ""
}

func (x *CustomerGP) GetTaxexmT2() string {
	if x != nil {
		return x.TaxexmT2
	}
	return ""
}

func (x *CustomerGP) GetTxrgnnum() string {
	if x != nil {
		return x.Txrgnnum
	}
	return ""
}

func (x *CustomerGP) GetBalnctyp() string {
	if x != nil {
		return x.Balnctyp
	}
	return ""
}

func (x *CustomerGP) GetBalanceTypeDesc() string {
	if x != nil {
		return x.BalanceTypeDesc
	}
	return ""
}

func (x *CustomerGP) GetStmtcycl() string {
	if x != nil {
		return x.Stmtcycl
	}
	return ""
}

func (x *CustomerGP) GetStatementCycleDesc() string {
	if x != nil {
		return x.StatementCycleDesc
	}
	return ""
}

func (x *CustomerGP) GetBankname() string {
	if x != nil {
		return x.Bankname
	}
	return ""
}

func (x *CustomerGP) GetBnkbrnch() string {
	if x != nil {
		return x.Bnkbrnch
	}
	return ""
}

func (x *CustomerGP) GetSalsterr() string {
	if x != nil {
		return x.Salsterr
	}
	return ""
}

func (x *CustomerGP) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *CustomerGP) GetHold() string {
	if x != nil {
		return x.Hold
	}
	return ""
}

func (x *CustomerGP) GetCrcardid() string {
	if x != nil {
		return x.Crcardid
	}
	return ""
}

func (x *CustomerGP) GetCrcrdnum() string {
	if x != nil {
		return x.Crcrdnum
	}
	return ""
}

func (x *CustomerGP) GetCcrdxpdt() string {
	if x != nil {
		return x.Ccrdxpdt
	}
	return ""
}

func (x *CustomerGP) GetCreatddt() string {
	if x != nil {
		return x.Creatddt
	}
	return ""
}

func (x *CustomerGP) GetModifdt() string {
	if x != nil {
		return x.Modifdt
	}
	return ""
}

func (x *CustomerGP) GetCustomerType() []*CustomerTypefromCustomerGP {
	if x != nil {
		return x.CustomerType
	}
	return nil
}

func (x *CustomerGP) GetGnlBusinessType() int64 {
	if x != nil {
		return x.GnlBusinessType
	}
	return 0
}

func (x *CustomerGP) GetGnlBusinessTypeDesc() string {
	if x != nil {
		return x.GnlBusinessTypeDesc
	}
	return ""
}

func (x *CustomerGP) GetGnlReferrerCode() string {
	if x != nil {
		return x.GnlReferrerCode
	}
	return ""
}

func (x *CustomerGP) GetGnlReferralCode() string {
	if x != nil {
		return x.GnlReferralCode
	}
	return ""
}

func (x *CustomerGP) GetAdministrativeDiv() *AdministrativeDiv {
	if x != nil {
		return x.AdministrativeDiv
	}
	return nil
}

func (x *CustomerGP) GetShipcomplete() int32 {
	if x != nil {
		return x.Shipcomplete
	}
	return 0
}

func (x *CustomerGP) GetShipcompleteDesc() string {
	if x != nil {
		return x.ShipcompleteDesc
	}
	return ""
}

func (x *CustomerGP) GetRemainingAmount() float64 {
	if x != nil {
		return x.RemainingAmount
	}
	return 0
}

func (x *CustomerGP) GetRemainingCreditLimit() float64 {
	if x != nil {
		return x.RemainingCreditLimit
	}
	return 0
}

type GetCustomerGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32         `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32         `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32         `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32         `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*CustomerGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool          `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string      `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string        `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetCustomerGPResponse) Reset() {
	*x = GetCustomerGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerGPResponse) ProtoMessage() {}

func (x *GetCustomerGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerGPResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{360}
}

func (x *GetCustomerGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetCustomerGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetCustomerGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetCustomerGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetCustomerGPResponse) GetData() []*CustomerGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetCustomerGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetCustomerGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetCustomerGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetCustomerGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit          int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset         int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Phone          string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Id             string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Name           string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	AdressId       string `protobuf:"bytes,6,opt,name=adress_id,json=adressId,proto3" json:"adress_id,omitempty"`
	Prstadcd       string `protobuf:"bytes,7,opt,name=prstadcd,proto3" json:"prstadcd,omitempty"`
	Salsterr       string `protobuf:"bytes,8,opt,name=salsterr,proto3" json:"salsterr,omitempty"`
	SalesPersonId  string `protobuf:"bytes,9,opt,name=sales_person_id,json=salesPersonId,proto3" json:"sales_person_id,omitempty"`
	CustomerTypeId string `protobuf:"bytes,10,opt,name=customer_type_id,json=customerTypeId,proto3" json:"customer_type_id,omitempty"`
	ReferrerCode   string `protobuf:"bytes,11,opt,name=referrer_code,json=referrerCode,proto3" json:"referrer_code,omitempty"`
	ReferralCode   string `protobuf:"bytes,12,opt,name=referral_code,json=referralCode,proto3" json:"referral_code,omitempty"`
	Inactive       string `protobuf:"bytes,13,opt,name=inactive,proto3" json:"inactive,omitempty"`
	Orderby        string `protobuf:"bytes,14,opt,name=orderby,proto3" json:"orderby,omitempty"`
}

func (x *GetCustomerGPListRequest) Reset() {
	*x = GetCustomerGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerGPListRequest) ProtoMessage() {}

func (x *GetCustomerGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerGPListRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{361}
}

func (x *GetCustomerGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCustomerGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCustomerGPListRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetCustomerGPListRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetCustomerGPListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetCustomerGPListRequest) GetAdressId() string {
	if x != nil {
		return x.AdressId
	}
	return ""
}

func (x *GetCustomerGPListRequest) GetPrstadcd() string {
	if x != nil {
		return x.Prstadcd
	}
	return ""
}

func (x *GetCustomerGPListRequest) GetSalsterr() string {
	if x != nil {
		return x.Salsterr
	}
	return ""
}

func (x *GetCustomerGPListRequest) GetSalesPersonId() string {
	if x != nil {
		return x.SalesPersonId
	}
	return ""
}

func (x *GetCustomerGPListRequest) GetCustomerTypeId() string {
	if x != nil {
		return x.CustomerTypeId
	}
	return ""
}

func (x *GetCustomerGPListRequest) GetReferrerCode() string {
	if x != nil {
		return x.ReferrerCode
	}
	return ""
}

func (x *GetCustomerGPListRequest) GetReferralCode() string {
	if x != nil {
		return x.ReferralCode
	}
	return ""
}

func (x *GetCustomerGPListRequest) GetInactive() string {
	if x != nil {
		return x.Inactive
	}
	return ""
}

func (x *GetCustomerGPListRequest) GetOrderby() string {
	if x != nil {
		return x.Orderby
	}
	return ""
}

type GetCustomerGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCustomerGPDetailRequest) Reset() {
	*x = GetCustomerGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerGPDetailRequest) ProtoMessage() {}

func (x *GetCustomerGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{362}
}

func (x *GetCustomerGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateCustomerGPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid         string                `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Custnmbr        string                `protobuf:"bytes,2,opt,name=custnmbr,proto3" json:"custnmbr,omitempty"`
	Custname        string                `protobuf:"bytes,3,opt,name=custname,proto3" json:"custname,omitempty"`
	Custclas        string                `protobuf:"bytes,4,opt,name=custclas,proto3" json:"custclas,omitempty"`
	Custpriority    string                `protobuf:"bytes,5,opt,name=custpriority,proto3" json:"custpriority,omitempty"`
	Cprcstnm        string                `protobuf:"bytes,6,opt,name=cprcstnm,proto3" json:"cprcstnm,omitempty"`
	Stmtname        string                `protobuf:"bytes,7,opt,name=stmtname,proto3" json:"stmtname,omitempty"`
	Shrtname        string                `protobuf:"bytes,8,opt,name=shrtname,proto3" json:"shrtname,omitempty"`
	Upszone         string                `protobuf:"bytes,9,opt,name=upszone,proto3" json:"upszone,omitempty"`
	Address         *CreateAddressRequest `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`
	Shipmthd        string                `protobuf:"bytes,11,opt,name=shipmthd,proto3" json:"shipmthd,omitempty"`
	Taxschid        string                `protobuf:"bytes,12,opt,name=taxschid,proto3" json:"taxschid,omitempty"`
	Prbtadcd        string                `protobuf:"bytes,13,opt,name=prbtadcd,proto3" json:"prbtadcd,omitempty"`
	Prstadcd        string                `protobuf:"bytes,14,opt,name=prstadcd,proto3" json:"prstadcd,omitempty"`
	Staddrcd        string                `protobuf:"bytes,15,opt,name=staddrcd,proto3" json:"staddrcd,omitempty"`
	Slprsnid        string                `protobuf:"bytes,16,opt,name=slprsnid,proto3" json:"slprsnid,omitempty"`
	Pymtrmid        string                `protobuf:"bytes,17,opt,name=pymtrmid,proto3" json:"pymtrmid,omitempty"`
	Salsterr        string                `protobuf:"bytes,18,opt,name=salsterr,proto3" json:"salsterr,omitempty"`
	Userdef1        string                `protobuf:"bytes,19,opt,name=userdef1,proto3" json:"userdef1,omitempty"`
	Userdef2        string                `protobuf:"bytes,20,opt,name=userdef2,proto3" json:"userdef2,omitempty"`
	Declid          string                `protobuf:"bytes,21,opt,name=declid,proto3" json:"declid,omitempty"`
	Comment1        string                `protobuf:"bytes,22,opt,name=comment1,proto3" json:"comment1,omitempty"`
	Comment2        string                `protobuf:"bytes,23,opt,name=comment2,proto3" json:"comment2,omitempty"`
	Custdisc        int32                 `protobuf:"varint,24,opt,name=custdisc,proto3" json:"custdisc,omitempty"`
	Disgrper        int32                 `protobuf:"varint,25,opt,name=disgrper,proto3" json:"disgrper,omitempty"`
	Duegrper        int32                 `protobuf:"varint,26,opt,name=duegrper,proto3" json:"duegrper,omitempty"`
	Prclevel        string                `protobuf:"bytes,27,opt,name=prclevel,proto3" json:"prclevel,omitempty"`
	GnlCustTypeId   string                `protobuf:"bytes,28,opt,name=gnl_cust_type_id,json=gnlCustTypeId,proto3" json:"gnl_cust_type_id,omitempty"`
	GnlReferrerCode string                `protobuf:"bytes,29,opt,name=gnl_referrer_code,json=gnlReferrerCode,proto3" json:"gnl_referrer_code,omitempty"`
	GnlReferralCode string                `protobuf:"bytes,30,opt,name=gnl_referral_code,json=gnlReferralCode,proto3" json:"gnl_referral_code,omitempty"`
	GnlBusinessType int32                 `protobuf:"varint,31,opt,name=gnl_business_type,json=gnlBusinessType,proto3" json:"gnl_business_type,omitempty"`
	GnlSocialSecNum string                `protobuf:"bytes,32,opt,name=gnl_social_sec_num,json=gnlSocialSecNum,proto3" json:"gnl_social_sec_num,omitempty"`
	Hold            int32                 `protobuf:"varint,33,opt,name=hold,proto3" json:"hold,omitempty"`
	Inactive        int32                 `protobuf:"varint,34,opt,name=inactive,proto3" json:"inactive,omitempty"`
	Cntcprsn        string                `protobuf:"bytes,35,opt,name=cntcprsn,proto3" json:"cntcprsn,omitempty"`
	Crlmttyp        int32                 `protobuf:"varint,36,opt,name=crlmttyp,proto3" json:"crlmttyp,omitempty"`
	CrlmttypDesc    string                `protobuf:"bytes,37,opt,name=crlmttyp_desc,json=crlmttypDesc,proto3" json:"crlmttyp_desc,omitempty"`
	Crlmtamt        float64               `protobuf:"fixed64,38,opt,name=crlmtamt,proto3" json:"crlmtamt,omitempty"`
}

func (x *CreateCustomerGPRequest) Reset() {
	*x = CreateCustomerGPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCustomerGPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCustomerGPRequest) ProtoMessage() {}

func (x *CreateCustomerGPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCustomerGPRequest.ProtoReflect.Descriptor instead.
func (*CreateCustomerGPRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{363}
}

func (x *CreateCustomerGPRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetCustnmbr() string {
	if x != nil {
		return x.Custnmbr
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetCustname() string {
	if x != nil {
		return x.Custname
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetCustclas() string {
	if x != nil {
		return x.Custclas
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetCustpriority() string {
	if x != nil {
		return x.Custpriority
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetCprcstnm() string {
	if x != nil {
		return x.Cprcstnm
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetStmtname() string {
	if x != nil {
		return x.Stmtname
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetShrtname() string {
	if x != nil {
		return x.Shrtname
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetUpszone() string {
	if x != nil {
		return x.Upszone
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetAddress() *CreateAddressRequest {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *CreateCustomerGPRequest) GetShipmthd() string {
	if x != nil {
		return x.Shipmthd
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetTaxschid() string {
	if x != nil {
		return x.Taxschid
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetPrbtadcd() string {
	if x != nil {
		return x.Prbtadcd
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetPrstadcd() string {
	if x != nil {
		return x.Prstadcd
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetStaddrcd() string {
	if x != nil {
		return x.Staddrcd
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetSlprsnid() string {
	if x != nil {
		return x.Slprsnid
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetPymtrmid() string {
	if x != nil {
		return x.Pymtrmid
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetSalsterr() string {
	if x != nil {
		return x.Salsterr
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetUserdef1() string {
	if x != nil {
		return x.Userdef1
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetUserdef2() string {
	if x != nil {
		return x.Userdef2
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetDeclid() string {
	if x != nil {
		return x.Declid
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetComment1() string {
	if x != nil {
		return x.Comment1
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetComment2() string {
	if x != nil {
		return x.Comment2
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetCustdisc() int32 {
	if x != nil {
		return x.Custdisc
	}
	return 0
}

func (x *CreateCustomerGPRequest) GetDisgrper() int32 {
	if x != nil {
		return x.Disgrper
	}
	return 0
}

func (x *CreateCustomerGPRequest) GetDuegrper() int32 {
	if x != nil {
		return x.Duegrper
	}
	return 0
}

func (x *CreateCustomerGPRequest) GetPrclevel() string {
	if x != nil {
		return x.Prclevel
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetGnlCustTypeId() string {
	if x != nil {
		return x.GnlCustTypeId
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetGnlReferrerCode() string {
	if x != nil {
		return x.GnlReferrerCode
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetGnlReferralCode() string {
	if x != nil {
		return x.GnlReferralCode
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetGnlBusinessType() int32 {
	if x != nil {
		return x.GnlBusinessType
	}
	return 0
}

func (x *CreateCustomerGPRequest) GetGnlSocialSecNum() string {
	if x != nil {
		return x.GnlSocialSecNum
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetHold() int32 {
	if x != nil {
		return x.Hold
	}
	return 0
}

func (x *CreateCustomerGPRequest) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *CreateCustomerGPRequest) GetCntcprsn() string {
	if x != nil {
		return x.Cntcprsn
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetCrlmttyp() int32 {
	if x != nil {
		return x.Crlmttyp
	}
	return 0
}

func (x *CreateCustomerGPRequest) GetCrlmttypDesc() string {
	if x != nil {
		return x.CrlmttypDesc
	}
	return ""
}

func (x *CreateCustomerGPRequest) GetCrlmtamt() float64 {
	if x != nil {
		return x.Crlmtamt
	}
	return 0
}

type CreateCustomerGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message         string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Custnmbr        string `protobuf:"bytes,3,opt,name=custnmbr,proto3" json:"custnmbr,omitempty"`
	GnLReferralCode string `protobuf:"bytes,4,opt,name=gnL_referral_code,json=gnLReferralCode,proto3" json:"gnL_referral_code,omitempty"`
	GnlReferrerCode string `protobuf:"bytes,5,opt,name=gnl_referrer_code,json=gnlReferrerCode,proto3" json:"gnl_referrer_code,omitempty"`
	Shipcomplete    string `protobuf:"bytes,6,opt,name=shipcomplete,proto3" json:"shipcomplete,omitempty"`
}

func (x *CreateCustomerGPResponse) Reset() {
	*x = CreateCustomerGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCustomerGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCustomerGPResponse) ProtoMessage() {}

func (x *CreateCustomerGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCustomerGPResponse.ProtoReflect.Descriptor instead.
func (*CreateCustomerGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{364}
}

func (x *CreateCustomerGPResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateCustomerGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateCustomerGPResponse) GetCustnmbr() string {
	if x != nil {
		return x.Custnmbr
	}
	return ""
}

func (x *CreateCustomerGPResponse) GetGnLReferralCode() string {
	if x != nil {
		return x.GnLReferralCode
	}
	return ""
}

func (x *CreateCustomerGPResponse) GetGnlReferrerCode() string {
	if x != nil {
		return x.GnlReferrerCode
	}
	return ""
}

func (x *CreateCustomerGPResponse) GetShipcomplete() string {
	if x != nil {
		return x.Shipcomplete
	}
	return ""
}

type CustomerAddressGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adrscode               string                    `protobuf:"bytes,1,opt,name=adrscode,proto3" json:"adrscode,omitempty"`
	ShipToName             string                    `protobuf:"bytes,2,opt,name=shipToName,proto3" json:"shipToName,omitempty"`
	AdministrativeDivision []*AdministrativeDivision `protobuf:"bytes,3,rep,name=administrativeDivision,proto3" json:"administrativeDivision,omitempty"`
}

func (x *CustomerAddressGP) Reset() {
	*x = CustomerAddressGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerAddressGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerAddressGP) ProtoMessage() {}

func (x *CustomerAddressGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerAddressGP.ProtoReflect.Descriptor instead.
func (*CustomerAddressGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{365}
}

func (x *CustomerAddressGP) GetAdrscode() string {
	if x != nil {
		return x.Adrscode
	}
	return ""
}

func (x *CustomerAddressGP) GetShipToName() string {
	if x != nil {
		return x.ShipToName
	}
	return ""
}

func (x *CustomerAddressGP) GetAdministrativeDivision() []*AdministrativeDivision {
	if x != nil {
		return x.AdministrativeDivision
	}
	return nil
}

type AdministrativeDivision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustAddrTypeShipTo      []*CustAddrTypeShipTo      `protobuf:"bytes,1,rep,name=custAddrTypeShipTo,proto3" json:"custAddrTypeShipTo,omitempty"`
	CustAddrTypeBillTo      []*CustAddrTypeBillTo      `protobuf:"bytes,2,rep,name=custAddrTypeBillTo,proto3" json:"custAddrTypeBillTo,omitempty"`
	CustAddrTypeStatementTo []*CustAddrTypeStatementTo `protobuf:"bytes,3,rep,name=custAddrTypeStatementTo,proto3" json:"custAddrTypeStatementTo,omitempty"`
}

func (x *AdministrativeDivision) Reset() {
	*x = AdministrativeDivision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdministrativeDivision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdministrativeDivision) ProtoMessage() {}

func (x *AdministrativeDivision) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdministrativeDivision.ProtoReflect.Descriptor instead.
func (*AdministrativeDivision) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{366}
}

func (x *AdministrativeDivision) GetCustAddrTypeShipTo() []*CustAddrTypeShipTo {
	if x != nil {
		return x.CustAddrTypeShipTo
	}
	return nil
}

func (x *AdministrativeDivision) GetCustAddrTypeBillTo() []*CustAddrTypeBillTo {
	if x != nil {
		return x.CustAddrTypeBillTo
	}
	return nil
}

func (x *AdministrativeDivision) GetCustAddrTypeStatementTo() []*CustAddrTypeStatementTo {
	if x != nil {
		return x.CustAddrTypeStatementTo
	}
	return nil
}

type CustAddrTypeShipTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prstadcd                string `protobuf:"bytes,1,opt,name=prstadcd,proto3" json:"prstadcd,omitempty"`
	ShipToName              string `protobuf:"bytes,2,opt,name=shipToName,proto3" json:"shipToName,omitempty"`
	GnL_Administrative_Code string `protobuf:"bytes,3,opt,name=gnL_Administrative_Code,json=gnLAdministrativeCode,proto3" json:"gnL_Administrative_Code,omitempty"`
}

func (x *CustAddrTypeShipTo) Reset() {
	*x = CustAddrTypeShipTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustAddrTypeShipTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustAddrTypeShipTo) ProtoMessage() {}

func (x *CustAddrTypeShipTo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustAddrTypeShipTo.ProtoReflect.Descriptor instead.
func (*CustAddrTypeShipTo) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{367}
}

func (x *CustAddrTypeShipTo) GetPrstadcd() string {
	if x != nil {
		return x.Prstadcd
	}
	return ""
}

func (x *CustAddrTypeShipTo) GetShipToName() string {
	if x != nil {
		return x.ShipToName
	}
	return ""
}

func (x *CustAddrTypeShipTo) GetGnL_Administrative_Code() string {
	if x != nil {
		return x.GnL_Administrative_Code
	}
	return ""
}

type CustAddrTypeBillTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prbtadcd                string `protobuf:"bytes,1,opt,name=prbtadcd,proto3" json:"prbtadcd,omitempty"`
	ShipToName              string `protobuf:"bytes,2,opt,name=shipToName,proto3" json:"shipToName,omitempty"`
	GnL_Administrative_Code string `protobuf:"bytes,3,opt,name=gnL_Administrative_Code,json=gnLAdministrativeCode,proto3" json:"gnL_Administrative_Code,omitempty"`
}

func (x *CustAddrTypeBillTo) Reset() {
	*x = CustAddrTypeBillTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustAddrTypeBillTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustAddrTypeBillTo) ProtoMessage() {}

func (x *CustAddrTypeBillTo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustAddrTypeBillTo.ProtoReflect.Descriptor instead.
func (*CustAddrTypeBillTo) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{368}
}

func (x *CustAddrTypeBillTo) GetPrbtadcd() string {
	if x != nil {
		return x.Prbtadcd
	}
	return ""
}

func (x *CustAddrTypeBillTo) GetShipToName() string {
	if x != nil {
		return x.ShipToName
	}
	return ""
}

func (x *CustAddrTypeBillTo) GetGnL_Administrative_Code() string {
	if x != nil {
		return x.GnL_Administrative_Code
	}
	return ""
}

type CustAddrTypeStatementTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Staddrcd                string `protobuf:"bytes,1,opt,name=staddrcd,proto3" json:"staddrcd,omitempty"`
	ShipToName              string `protobuf:"bytes,2,opt,name=shipToName,proto3" json:"shipToName,omitempty"`
	GnL_Administrative_Code string `protobuf:"bytes,3,opt,name=gnL_Administrative_Code,json=gnLAdministrativeCode,proto3" json:"gnL_Administrative_Code,omitempty"`
}

func (x *CustAddrTypeStatementTo) Reset() {
	*x = CustAddrTypeStatementTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustAddrTypeStatementTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustAddrTypeStatementTo) ProtoMessage() {}

func (x *CustAddrTypeStatementTo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustAddrTypeStatementTo.ProtoReflect.Descriptor instead.
func (*CustAddrTypeStatementTo) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{369}
}

func (x *CustAddrTypeStatementTo) GetStaddrcd() string {
	if x != nil {
		return x.Staddrcd
	}
	return ""
}

func (x *CustAddrTypeStatementTo) GetShipToName() string {
	if x != nil {
		return x.ShipToName
	}
	return ""
}

func (x *CustAddrTypeStatementTo) GetGnL_Administrative_Code() string {
	if x != nil {
		return x.GnL_Administrative_Code
	}
	return ""
}

type Pymtrmid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pymtrmid              string `protobuf:"bytes,1,opt,name=pymtrmid,proto3" json:"pymtrmid,omitempty"`
	CalculateDateFromDays int64  `protobuf:"varint,2,opt,name=calculateDateFromDays,proto3" json:"calculateDateFromDays,omitempty"`
}

func (x *Pymtrmid) Reset() {
	*x = Pymtrmid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pymtrmid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pymtrmid) ProtoMessage() {}

func (x *Pymtrmid) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pymtrmid.ProtoReflect.Descriptor instead.
func (*Pymtrmid) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{370}
}

func (x *Pymtrmid) GetPymtrmid() string {
	if x != nil {
		return x.Pymtrmid
	}
	return ""
}

func (x *Pymtrmid) GetCalculateDateFromDays() int64 {
	if x != nil {
		return x.CalculateDateFromDays
	}
	return 0
}

type SalesOrderGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sopnumbe                string                          `protobuf:"bytes,1,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"`
	Docdate                 string                          `protobuf:"bytes,2,opt,name=docdate,proto3" json:"docdate,omitempty"`
	ReqShipDate             string                          `protobuf:"bytes,3,opt,name=reqShipDate,proto3" json:"reqShipDate,omitempty"`
	Status                  int32                           `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	StatuS_STRING           string                          `protobuf:"bytes,5,opt,name=statuS_STRING,json=statuSSTRING,proto3" json:"statuS_STRING,omitempty"`
	Soptype                 int32                           `protobuf:"varint,6,opt,name=soptype,proto3" json:"soptype,omitempty"`
	SoptypE_STRING          string                          `protobuf:"bytes,7,opt,name=soptypE_STRING,json=soptypESTRING,proto3" json:"soptypE_STRING,omitempty"`
	Docid                   string                          `protobuf:"bytes,8,opt,name=docid,proto3" json:"docid,omitempty"`
	Orfrtamt                float64                         `protobuf:"fixed64,9,opt,name=orfrtamt,proto3" json:"orfrtamt,omitempty"`
	Orsubtot                float64                         `protobuf:"fixed64,10,opt,name=orsubtot,proto3" json:"orsubtot,omitempty"`
	Taxamnt                 float64                         `protobuf:"fixed64,11,opt,name=taxamnt,proto3" json:"taxamnt,omitempty"`
	TotaL_VOUCHER           float64                         `protobuf:"fixed64,12,opt,name=totaL_VOUCHER,json=totaLVOUCHER,proto3" json:"totaL_VOUCHER,omitempty"`
	Total                   float64                         `protobuf:"fixed64,13,opt,name=total,proto3" json:"total,omitempty"`
	GnL_TotalWeight         float64                         `protobuf:"fixed64,14,opt,name=gnL_TotalWeight,json=gnLTotalWeight,proto3" json:"gnL_TotalWeight,omitempty"`
	Commntid                string                          `protobuf:"bytes,15,opt,name=commntid,proto3" json:"commntid,omitempty"`
	Creatddt                string                          `protobuf:"bytes,16,opt,name=creatddt,proto3" json:"creatddt,omitempty"`
	GnL_WRT_ID              string                          `protobuf:"bytes,17,opt,name=gnL_WRT_ID,json=gnLWRTID,proto3" json:"gnL_WRT_ID,omitempty"`
	GnL_Region              string                          `protobuf:"bytes,18,opt,name=gnL_Region,json=gnLRegion,proto3" json:"gnL_Region,omitempty"`
	Orignumb                string                          `protobuf:"bytes,19,opt,name=orignumb,proto3" json:"orignumb,omitempty"`
	Custnmbr                string                          `protobuf:"bytes,20,opt,name=custnmbr,proto3" json:"custnmbr,omitempty"`
	Custname                string                          `protobuf:"bytes,21,opt,name=custname,proto3" json:"custname,omitempty"`
	Slprsnid                string                          `protobuf:"bytes,22,opt,name=slprsnid,proto3" json:"slprsnid,omitempty"`
	Prstadcd                string                          `protobuf:"bytes,23,opt,name=prstadcd,proto3" json:"prstadcd,omitempty"`
	Address                 []*AddressGP                    `protobuf:"bytes,24,rep,name=address,proto3" json:"address,omitempty"`
	GnL_Archetype_ID        string                          `protobuf:"bytes,25,opt,name=gnL_Archetype_ID,json=gnLArchetypeID,proto3" json:"gnL_Archetype_ID,omitempty"`
	GnL_Order_Channel       string                          `protobuf:"bytes,26,opt,name=gnL_Order_Channel,json=gnLOrderChannel,proto3" json:"gnL_Order_Channel,omitempty"`
	GnL_SO_Code_Apps        string                          `protobuf:"bytes,27,opt,name=gnL_SO_Code_Apps,json=gnLSOCodeApps,proto3" json:"gnL_SO_Code_Apps,omitempty"`
	Cstponbr                string                          `protobuf:"bytes,28,opt,name=cstponbr,proto3" json:"cstponbr,omitempty"`
	Curncyid                string                          `protobuf:"bytes,29,opt,name=curncyid,proto3" json:"curncyid,omitempty"`
	Distknam                float64                         `protobuf:"fixed64,30,opt,name=distknam,proto3" json:"distknam,omitempty"`
	Acctamnt                float64                         `protobuf:"fixed64,31,opt,name=acctamnt,proto3" json:"acctamnt,omitempty"`
	Trdisamt                float64                         `protobuf:"fixed64,32,opt,name=trdisamt,proto3" json:"trdisamt,omitempty"`
	Frtamnt                 float64                         `protobuf:"fixed64,33,opt,name=frtamnt,proto3" json:"frtamnt,omitempty"`
	Miscamnt                float64                         `protobuf:"fixed64,34,opt,name=miscamnt,proto3" json:"miscamnt,omitempty"`
	PhnumbR1                string                          `protobuf:"bytes,35,opt,name=phnumbR1,proto3" json:"phnumbR1,omitempty"`
	City                    string                          `protobuf:"bytes,36,opt,name=city,proto3" json:"city,omitempty"`
	Pymtrmid                string                          `protobuf:"bytes,37,opt,name=pymtrmid,proto3" json:"pymtrmid,omitempty"`
	Duedtds                 int32                           `protobuf:"varint,38,opt,name=duedtds,proto3" json:"duedtds,omitempty"`
	Locncode                string                          `protobuf:"bytes,39,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Locndscr                string                          `protobuf:"bytes,40,opt,name=locndscr,proto3" json:"locndscr,omitempty"`
	GnL_Administrative_Code string                          `protobuf:"bytes,41,opt,name=gnL_Administrative_Code,json=gnLAdministrativeCode,proto3" json:"gnL_Administrative_Code,omitempty"`
	Salsterr                string                          `protobuf:"bytes,42,opt,name=salsterr,proto3" json:"salsterr,omitempty"`
	Slterdsc                string                          `protobuf:"bytes,43,opt,name=slterdsc,proto3" json:"slterdsc,omitempty"`
	Details                 []*SalesOrderGP_Detail          `protobuf:"bytes,44,rep,name=details,proto3" json:"details,omitempty"`
	Customer                []*CustomerGP                   `protobuf:"bytes,45,rep,name=customer,proto3" json:"customer,omitempty"`
	Wrt                     []*WrtGP                        `protobuf:"bytes,46,rep,name=wrt,proto3" json:"wrt,omitempty"`
	TermOfPayments          []*SalesOrderGP_TermOfPayment   `protobuf:"bytes,47,rep,name=term_of_payments,json=termOfPayments,proto3" json:"term_of_payments,omitempty"`
	Territory               []*SalesOrderGP_Territory       `protobuf:"bytes,48,rep,name=territory,proto3" json:"territory,omitempty"`
	Site                    []*SiteGP                       `protobuf:"bytes,49,rep,name=site,proto3" json:"site,omitempty"`
	Voucher                 []*SalesOrderGP_VoucherDetailGP `protobuf:"bytes,50,rep,name=voucher,proto3" json:"voucher,omitempty"`
	Shipmthd                string                          `protobuf:"bytes,51,opt,name=shipmthd,proto3" json:"shipmthd,omitempty"`
	Docamnt                 float64                         `protobuf:"fixed64,52,opt,name=docamnt,proto3" json:"docamnt,omitempty"`
}

func (x *SalesOrderGP) Reset() {
	*x = SalesOrderGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesOrderGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesOrderGP) ProtoMessage() {}

func (x *SalesOrderGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesOrderGP.ProtoReflect.Descriptor instead.
func (*SalesOrderGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{371}
}

func (x *SalesOrderGP) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

func (x *SalesOrderGP) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *SalesOrderGP) GetReqShipDate() string {
	if x != nil {
		return x.ReqShipDate
	}
	return ""
}

func (x *SalesOrderGP) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SalesOrderGP) GetStatuS_STRING() string {
	if x != nil {
		return x.StatuS_STRING
	}
	return ""
}

func (x *SalesOrderGP) GetSoptype() int32 {
	if x != nil {
		return x.Soptype
	}
	return 0
}

func (x *SalesOrderGP) GetSoptypE_STRING() string {
	if x != nil {
		return x.SoptypE_STRING
	}
	return ""
}

func (x *SalesOrderGP) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *SalesOrderGP) GetOrfrtamt() float64 {
	if x != nil {
		return x.Orfrtamt
	}
	return 0
}

func (x *SalesOrderGP) GetOrsubtot() float64 {
	if x != nil {
		return x.Orsubtot
	}
	return 0
}

func (x *SalesOrderGP) GetTaxamnt() float64 {
	if x != nil {
		return x.Taxamnt
	}
	return 0
}

func (x *SalesOrderGP) GetTotaL_VOUCHER() float64 {
	if x != nil {
		return x.TotaL_VOUCHER
	}
	return 0
}

func (x *SalesOrderGP) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SalesOrderGP) GetGnL_TotalWeight() float64 {
	if x != nil {
		return x.GnL_TotalWeight
	}
	return 0
}

func (x *SalesOrderGP) GetCommntid() string {
	if x != nil {
		return x.Commntid
	}
	return ""
}

func (x *SalesOrderGP) GetCreatddt() string {
	if x != nil {
		return x.Creatddt
	}
	return ""
}

func (x *SalesOrderGP) GetGnL_WRT_ID() string {
	if x != nil {
		return x.GnL_WRT_ID
	}
	return ""
}

func (x *SalesOrderGP) GetGnL_Region() string {
	if x != nil {
		return x.GnL_Region
	}
	return ""
}

func (x *SalesOrderGP) GetOrignumb() string {
	if x != nil {
		return x.Orignumb
	}
	return ""
}

func (x *SalesOrderGP) GetCustnmbr() string {
	if x != nil {
		return x.Custnmbr
	}
	return ""
}

func (x *SalesOrderGP) GetCustname() string {
	if x != nil {
		return x.Custname
	}
	return ""
}

func (x *SalesOrderGP) GetSlprsnid() string {
	if x != nil {
		return x.Slprsnid
	}
	return ""
}

func (x *SalesOrderGP) GetPrstadcd() string {
	if x != nil {
		return x.Prstadcd
	}
	return ""
}

func (x *SalesOrderGP) GetAddress() []*AddressGP {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *SalesOrderGP) GetGnL_Archetype_ID() string {
	if x != nil {
		return x.GnL_Archetype_ID
	}
	return ""
}

func (x *SalesOrderGP) GetGnL_Order_Channel() string {
	if x != nil {
		return x.GnL_Order_Channel
	}
	return ""
}

func (x *SalesOrderGP) GetGnL_SO_Code_Apps() string {
	if x != nil {
		return x.GnL_SO_Code_Apps
	}
	return ""
}

func (x *SalesOrderGP) GetCstponbr() string {
	if x != nil {
		return x.Cstponbr
	}
	return ""
}

func (x *SalesOrderGP) GetCurncyid() string {
	if x != nil {
		return x.Curncyid
	}
	return ""
}

func (x *SalesOrderGP) GetDistknam() float64 {
	if x != nil {
		return x.Distknam
	}
	return 0
}

func (x *SalesOrderGP) GetAcctamnt() float64 {
	if x != nil {
		return x.Acctamnt
	}
	return 0
}

func (x *SalesOrderGP) GetTrdisamt() float64 {
	if x != nil {
		return x.Trdisamt
	}
	return 0
}

func (x *SalesOrderGP) GetFrtamnt() float64 {
	if x != nil {
		return x.Frtamnt
	}
	return 0
}

func (x *SalesOrderGP) GetMiscamnt() float64 {
	if x != nil {
		return x.Miscamnt
	}
	return 0
}

func (x *SalesOrderGP) GetPhnumbR1() string {
	if x != nil {
		return x.PhnumbR1
	}
	return ""
}

func (x *SalesOrderGP) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *SalesOrderGP) GetPymtrmid() string {
	if x != nil {
		return x.Pymtrmid
	}
	return ""
}

func (x *SalesOrderGP) GetDuedtds() int32 {
	if x != nil {
		return x.Duedtds
	}
	return 0
}

func (x *SalesOrderGP) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *SalesOrderGP) GetLocndscr() string {
	if x != nil {
		return x.Locndscr
	}
	return ""
}

func (x *SalesOrderGP) GetGnL_Administrative_Code() string {
	if x != nil {
		return x.GnL_Administrative_Code
	}
	return ""
}

func (x *SalesOrderGP) GetSalsterr() string {
	if x != nil {
		return x.Salsterr
	}
	return ""
}

func (x *SalesOrderGP) GetSlterdsc() string {
	if x != nil {
		return x.Slterdsc
	}
	return ""
}

func (x *SalesOrderGP) GetDetails() []*SalesOrderGP_Detail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *SalesOrderGP) GetCustomer() []*CustomerGP {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *SalesOrderGP) GetWrt() []*WrtGP {
	if x != nil {
		return x.Wrt
	}
	return nil
}

func (x *SalesOrderGP) GetTermOfPayments() []*SalesOrderGP_TermOfPayment {
	if x != nil {
		return x.TermOfPayments
	}
	return nil
}

func (x *SalesOrderGP) GetTerritory() []*SalesOrderGP_Territory {
	if x != nil {
		return x.Territory
	}
	return nil
}

func (x *SalesOrderGP) GetSite() []*SiteGP {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *SalesOrderGP) GetVoucher() []*SalesOrderGP_VoucherDetailGP {
	if x != nil {
		return x.Voucher
	}
	return nil
}

func (x *SalesOrderGP) GetShipmthd() string {
	if x != nil {
		return x.Shipmthd
	}
	return ""
}

func (x *SalesOrderGP) GetDocamnt() float64 {
	if x != nil {
		return x.Docamnt
	}
	return 0
}

type GetSalesOrderGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit           int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset          int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Custnumber      string `protobuf:"bytes,3,opt,name=custnumber,proto3" json:"custnumber,omitempty"`
	SoNumber        string `protobuf:"bytes,4,opt,name=so_number,json=soNumber,proto3" json:"so_number,omitempty"`
	Custname        string `protobuf:"bytes,5,opt,name=custname,proto3" json:"custname,omitempty"`
	Region          string `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	OrderChannel    string `protobuf:"bytes,7,opt,name=order_channel,json=orderChannel,proto3" json:"order_channel,omitempty"`
	SoCodeApps      string `protobuf:"bytes,8,opt,name=so_code_apps,json=soCodeApps,proto3" json:"so_code_apps,omitempty"`
	WrtId           string `protobuf:"bytes,9,opt,name=wrt_id,json=wrtId,proto3" json:"wrt_id,omitempty"`
	Locncode        string `protobuf:"bytes,10,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Ordertype       string `protobuf:"bytes,11,opt,name=ordertype,proto3" json:"ordertype,omitempty"`
	SalespersonId   string `protobuf:"bytes,12,opt,name=salesperson_id,json=salespersonId,proto3" json:"salesperson_id,omitempty"`
	Status          string `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	DocdateFrom     string `protobuf:"bytes,14,opt,name=docdate_from,json=docdateFrom,proto3" json:"docdate_from,omitempty"`
	DocdateTo       string `protobuf:"bytes,15,opt,name=docdate_to,json=docdateTo,proto3" json:"docdate_to,omitempty"`
	ReqShipDateFrom string `protobuf:"bytes,16,opt,name=req_ship_date_from,json=reqShipDateFrom,proto3" json:"req_ship_date_from,omitempty"`
	ReqShipDateTo   string `protobuf:"bytes,17,opt,name=req_ship_date_to,json=reqShipDateTo,proto3" json:"req_ship_date_to,omitempty"`
	Docid           string `protobuf:"bytes,18,opt,name=docid,proto3" json:"docid,omitempty"`
	Orderby         string `protobuf:"bytes,19,opt,name=orderby,proto3" json:"orderby,omitempty"`
}

func (x *GetSalesOrderGPListRequest) Reset() {
	*x = GetSalesOrderGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesOrderGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesOrderGPListRequest) ProtoMessage() {}

func (x *GetSalesOrderGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesOrderGPListRequest.ProtoReflect.Descriptor instead.
func (*GetSalesOrderGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{372}
}

func (x *GetSalesOrderGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSalesOrderGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSalesOrderGPListRequest) GetCustnumber() string {
	if x != nil {
		return x.Custnumber
	}
	return ""
}

func (x *GetSalesOrderGPListRequest) GetSoNumber() string {
	if x != nil {
		return x.SoNumber
	}
	return ""
}

func (x *GetSalesOrderGPListRequest) GetCustname() string {
	if x != nil {
		return x.Custname
	}
	return ""
}

func (x *GetSalesOrderGPListRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetSalesOrderGPListRequest) GetOrderChannel() string {
	if x != nil {
		return x.OrderChannel
	}
	return ""
}

func (x *GetSalesOrderGPListRequest) GetSoCodeApps() string {
	if x != nil {
		return x.SoCodeApps
	}
	return ""
}

func (x *GetSalesOrderGPListRequest) GetWrtId() string {
	if x != nil {
		return x.WrtId
	}
	return ""
}

func (x *GetSalesOrderGPListRequest) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *GetSalesOrderGPListRequest) GetOrdertype() string {
	if x != nil {
		return x.Ordertype
	}
	return ""
}

func (x *GetSalesOrderGPListRequest) GetSalespersonId() string {
	if x != nil {
		return x.SalespersonId
	}
	return ""
}

func (x *GetSalesOrderGPListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetSalesOrderGPListRequest) GetDocdateFrom() string {
	if x != nil {
		return x.DocdateFrom
	}
	return ""
}

func (x *GetSalesOrderGPListRequest) GetDocdateTo() string {
	if x != nil {
		return x.DocdateTo
	}
	return ""
}

func (x *GetSalesOrderGPListRequest) GetReqShipDateFrom() string {
	if x != nil {
		return x.ReqShipDateFrom
	}
	return ""
}

func (x *GetSalesOrderGPListRequest) GetReqShipDateTo() string {
	if x != nil {
		return x.ReqShipDateTo
	}
	return ""
}

func (x *GetSalesOrderGPListRequest) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *GetSalesOrderGPListRequest) GetOrderby() string {
	if x != nil {
		return x.Orderby
	}
	return ""
}

type GetSalesOrderGPListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32           `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32           `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32           `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32           `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*SalesOrderGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool            `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string        `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string          `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetSalesOrderGPListResponse) Reset() {
	*x = GetSalesOrderGPListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesOrderGPListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesOrderGPListResponse) ProtoMessage() {}

func (x *GetSalesOrderGPListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesOrderGPListResponse.ProtoReflect.Descriptor instead.
func (*GetSalesOrderGPListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{373}
}

func (x *GetSalesOrderGPListResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetSalesOrderGPListResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetSalesOrderGPListResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetSalesOrderGPListResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetSalesOrderGPListResponse) GetData() []*SalesOrderGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetSalesOrderGPListResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetSalesOrderGPListResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetSalesOrderGPListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetSalesOrderGPListByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSalesOrderGPListByIDRequest) Reset() {
	*x = GetSalesOrderGPListByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesOrderGPListByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesOrderGPListByIDRequest) ProtoMessage() {}

func (x *GetSalesOrderGPListByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesOrderGPListByIDRequest.ProtoReflect.Descriptor instead.
func (*GetSalesOrderGPListByIDRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{374}
}

func (x *GetSalesOrderGPListByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CustomerTypefromCustomerGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnL_Cust_Type_ID         string `protobuf:"bytes,1,opt,name=gnL_Cust_Type_ID,json=gnLCustTypeID,proto3" json:"gnL_Cust_Type_ID,omitempty"`
	GnL_CustType_Description string `protobuf:"bytes,2,opt,name=gnL_CustType_Description,json=gnLCustTypeDescription,proto3" json:"gnL_CustType_Description,omitempty"`
	Inactive                 int32  `protobuf:"varint,3,opt,name=inactive,proto3" json:"inactive,omitempty"`
	InactivE_DESC            string `protobuf:"bytes,4,opt,name=inactivE_DESC,json=inactivEDESC,proto3" json:"inactivE_DESC,omitempty"`
}

func (x *CustomerTypefromCustomerGP) Reset() {
	*x = CustomerTypefromCustomerGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerTypefromCustomerGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerTypefromCustomerGP) ProtoMessage() {}

func (x *CustomerTypefromCustomerGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerTypefromCustomerGP.ProtoReflect.Descriptor instead.
func (*CustomerTypefromCustomerGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{375}
}

func (x *CustomerTypefromCustomerGP) GetGnL_Cust_Type_ID() string {
	if x != nil {
		return x.GnL_Cust_Type_ID
	}
	return ""
}

func (x *CustomerTypefromCustomerGP) GetGnL_CustType_Description() string {
	if x != nil {
		return x.GnL_CustType_Description
	}
	return ""
}

func (x *CustomerTypefromCustomerGP) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *CustomerTypefromCustomerGP) GetInactivE_DESC() string {
	if x != nil {
		return x.InactivE_DESC
	}
	return ""
}

type AdministrativeDiv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnlAdministrativeCode string `protobuf:"bytes,1,opt,name=gnl_administrative_code,json=gnlAdministrativeCode,proto3" json:"gnl_administrative_code,omitempty"`
	GnlRegion             string `protobuf:"bytes,2,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	GnlCity               string `protobuf:"bytes,3,opt,name=gnl_city,json=gnlCity,proto3" json:"gnl_city,omitempty"`
	GnlSubdistrict        string `protobuf:"bytes,4,opt,name=gnl_subdistrict,json=gnlSubdistrict,proto3" json:"gnl_subdistrict,omitempty"`
	GnlDistrict           string `protobuf:"bytes,5,opt,name=gnl_district,json=gnlDistrict,proto3" json:"gnl_district,omitempty"`
}

func (x *AdministrativeDiv) Reset() {
	*x = AdministrativeDiv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdministrativeDiv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdministrativeDiv) ProtoMessage() {}

func (x *AdministrativeDiv) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdministrativeDiv.ProtoReflect.Descriptor instead.
func (*AdministrativeDiv) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{376}
}

func (x *AdministrativeDiv) GetGnlAdministrativeCode() string {
	if x != nil {
		return x.GnlAdministrativeCode
	}
	return ""
}

func (x *AdministrativeDiv) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *AdministrativeDiv) GetGnlCity() string {
	if x != nil {
		return x.GnlCity
	}
	return ""
}

func (x *AdministrativeDiv) GetGnlSubdistrict() string {
	if x != nil {
		return x.GnlSubdistrict
	}
	return ""
}

func (x *AdministrativeDiv) GetGnlDistrict() string {
	if x != nil {
		return x.GnlDistrict
	}
	return ""
}

type GetPurchasePlanGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit                   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset                  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	PrpPurchaseplanNo       string `protobuf:"bytes,3,opt,name=prp_purchaseplan_no,json=prpPurchaseplanNo,proto3" json:"prp_purchaseplan_no,omitempty"`
	Locncode                string `protobuf:"bytes,4,opt,name=locncode,proto3" json:"locncode,omitempty"`
	PrpPurchaseplanDateFrom string `protobuf:"bytes,5,opt,name=prp_purchaseplan_date_from,json=prpPurchaseplanDateFrom,proto3" json:"prp_purchaseplan_date_from,omitempty"`
	PrpPurchaseplanDateTo   string `protobuf:"bytes,6,opt,name=prp_purchaseplan_date_to,json=prpPurchaseplanDateTo,proto3" json:"prp_purchaseplan_date_to,omitempty"`
	Status                  int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	FieldPurchaser          string `protobuf:"bytes,8,opt,name=field_purchaser,json=fieldPurchaser,proto3" json:"field_purchaser,omitempty"`
	PrpVendorOrgDesc        string `protobuf:"bytes,9,opt,name=prp_vendor_org_desc,json=prpVendorOrgDesc,proto3" json:"prp_vendor_org_desc,omitempty"`
}

func (x *GetPurchasePlanGPListRequest) Reset() {
	*x = GetPurchasePlanGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchasePlanGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchasePlanGPListRequest) ProtoMessage() {}

func (x *GetPurchasePlanGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchasePlanGPListRequest.ProtoReflect.Descriptor instead.
func (*GetPurchasePlanGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{377}
}

func (x *GetPurchasePlanGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetPurchasePlanGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetPurchasePlanGPListRequest) GetPrpPurchaseplanNo() string {
	if x != nil {
		return x.PrpPurchaseplanNo
	}
	return ""
}

func (x *GetPurchasePlanGPListRequest) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *GetPurchasePlanGPListRequest) GetPrpPurchaseplanDateFrom() string {
	if x != nil {
		return x.PrpPurchaseplanDateFrom
	}
	return ""
}

func (x *GetPurchasePlanGPListRequest) GetPrpPurchaseplanDateTo() string {
	if x != nil {
		return x.PrpPurchaseplanDateTo
	}
	return ""
}

func (x *GetPurchasePlanGPListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetPurchasePlanGPListRequest) GetFieldPurchaser() string {
	if x != nil {
		return x.FieldPurchaser
	}
	return ""
}

func (x *GetPurchasePlanGPListRequest) GetPrpVendorOrgDesc() string {
	if x != nil {
		return x.PrpVendorOrgDesc
	}
	return ""
}

type GetPurchasePlanGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPurchasePlanGPDetailRequest) Reset() {
	*x = GetPurchasePlanGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchasePlanGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchasePlanGPDetailRequest) ProtoMessage() {}

func (x *GetPurchasePlanGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchasePlanGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetPurchasePlanGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{378}
}

func (x *GetPurchasePlanGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPurchasePlanGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32             `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32             `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32             `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32             `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*PurchasePlanGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool              `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string          `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string            `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetPurchasePlanGPResponse) Reset() {
	*x = GetPurchasePlanGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchasePlanGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchasePlanGPResponse) ProtoMessage() {}

func (x *GetPurchasePlanGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchasePlanGPResponse.ProtoReflect.Descriptor instead.
func (*GetPurchasePlanGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{379}
}

func (x *GetPurchasePlanGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetPurchasePlanGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetPurchasePlanGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetPurchasePlanGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetPurchasePlanGPResponse) GetData() []*PurchasePlanGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetPurchasePlanGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetPurchasePlanGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetPurchasePlanGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PurchasePlanGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrpRegion              string                     `protobuf:"bytes,1,opt,name=prp_region,json=prpRegion,proto3" json:"prp_region,omitempty"`
	PrpPurchaseplanNo      string                     `protobuf:"bytes,2,opt,name=prp_purchaseplan_no,json=prpPurchaseplanNo,proto3" json:"prp_purchaseplan_no,omitempty"`
	Docdate                string                     `protobuf:"bytes,3,opt,name=docdate,proto3" json:"docdate,omitempty"`
	SiteId                 []*SitePP_Location         `protobuf:"bytes,4,rep,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	VendorOrganization     []*VendorOrganizationPP    `protobuf:"bytes,5,rep,name=vendor_organization,json=vendorOrganization,proto3" json:"vendor_organization,omitempty"`
	PrpPurchaseplanDate    string                     `protobuf:"bytes,6,opt,name=prp_purchaseplan_date,json=prpPurchaseplanDate,proto3" json:"prp_purchaseplan_date,omitempty"`
	PrpEstimatedarrivalTim string                     `protobuf:"bytes,7,opt,name=prp_estimatedarrival_tim,json=prpEstimatedarrivalTim,proto3" json:"prp_estimatedarrival_tim,omitempty"`
	PrpPurchaseplanUser    string                     `protobuf:"bytes,8,opt,name=prp_purchaseplan_user,json=prpPurchaseplanUser,proto3" json:"prp_purchaseplan_user,omitempty"`
	PrpNote                string                     `protobuf:"bytes,9,opt,name=prp_note,json=prpNote,proto3" json:"prp_note,omitempty"`
	Subtotal               float64                    `protobuf:"fixed64,10,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	PrStatus               int32                      `protobuf:"varint,11,opt,name=pr_status,json=prStatus,proto3" json:"pr_status,omitempty"`
	PrStatusDesc           string                     `protobuf:"bytes,12,opt,name=pr_status_desc,json=prStatusDesc,proto3" json:"pr_status_desc,omitempty"`
	Creatddt               string                     `protobuf:"bytes,13,opt,name=creatddt,proto3" json:"creatddt,omitempty"`
	Crusrid                string                     `protobuf:"bytes,14,opt,name=crusrid,proto3" json:"crusrid,omitempty"`
	Detail                 []*PurchasePlanGP_Detail   `protobuf:"bytes,15,rep,name=detail,proto3" json:"detail,omitempty"`
	Locncode               string                     `protobuf:"bytes,16,opt,name=locncode,proto3" json:"locncode,omitempty"`
	PrpVendorOrgId         string                     `protobuf:"bytes,17,opt,name=prp_vendor_org_id,json=prpVendorOrgId,proto3" json:"prp_vendor_org_id,omitempty"`
	AssignedTo             *PurchasePlanGP_AssignedTo `protobuf:"bytes,18,opt,name=assigned_to,json=assignedTo,proto3" json:"assigned_to,omitempty"`
	CreatedBy              *PurchasePlanGP_CreatedBy  `protobuf:"bytes,19,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	AssignedBy             *PurchasePlanGP_AssignedBy `protobuf:"bytes,20,opt,name=assigned_by,json=assignedBy,proto3" json:"assigned_by,omitempty"`
}

func (x *PurchasePlanGP) Reset() {
	*x = PurchasePlanGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchasePlanGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchasePlanGP) ProtoMessage() {}

func (x *PurchasePlanGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchasePlanGP.ProtoReflect.Descriptor instead.
func (*PurchasePlanGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{380}
}

func (x *PurchasePlanGP) GetPrpRegion() string {
	if x != nil {
		return x.PrpRegion
	}
	return ""
}

func (x *PurchasePlanGP) GetPrpPurchaseplanNo() string {
	if x != nil {
		return x.PrpPurchaseplanNo
	}
	return ""
}

func (x *PurchasePlanGP) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *PurchasePlanGP) GetSiteId() []*SitePP_Location {
	if x != nil {
		return x.SiteId
	}
	return nil
}

func (x *PurchasePlanGP) GetVendorOrganization() []*VendorOrganizationPP {
	if x != nil {
		return x.VendorOrganization
	}
	return nil
}

func (x *PurchasePlanGP) GetPrpPurchaseplanDate() string {
	if x != nil {
		return x.PrpPurchaseplanDate
	}
	return ""
}

func (x *PurchasePlanGP) GetPrpEstimatedarrivalTim() string {
	if x != nil {
		return x.PrpEstimatedarrivalTim
	}
	return ""
}

func (x *PurchasePlanGP) GetPrpPurchaseplanUser() string {
	if x != nil {
		return x.PrpPurchaseplanUser
	}
	return ""
}

func (x *PurchasePlanGP) GetPrpNote() string {
	if x != nil {
		return x.PrpNote
	}
	return ""
}

func (x *PurchasePlanGP) GetSubtotal() float64 {
	if x != nil {
		return x.Subtotal
	}
	return 0
}

func (x *PurchasePlanGP) GetPrStatus() int32 {
	if x != nil {
		return x.PrStatus
	}
	return 0
}

func (x *PurchasePlanGP) GetPrStatusDesc() string {
	if x != nil {
		return x.PrStatusDesc
	}
	return ""
}

func (x *PurchasePlanGP) GetCreatddt() string {
	if x != nil {
		return x.Creatddt
	}
	return ""
}

func (x *PurchasePlanGP) GetCrusrid() string {
	if x != nil {
		return x.Crusrid
	}
	return ""
}

func (x *PurchasePlanGP) GetDetail() []*PurchasePlanGP_Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *PurchasePlanGP) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *PurchasePlanGP) GetPrpVendorOrgId() string {
	if x != nil {
		return x.PrpVendorOrgId
	}
	return ""
}

func (x *PurchasePlanGP) GetAssignedTo() *PurchasePlanGP_AssignedTo {
	if x != nil {
		return x.AssignedTo
	}
	return nil
}

func (x *PurchasePlanGP) GetCreatedBy() *PurchasePlanGP_CreatedBy {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *PurchasePlanGP) GetAssignedBy() *PurchasePlanGP_AssignedBy {
	if x != nil {
		return x.AssignedBy
	}
	return nil
}

type VendorOrganizationPP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrpVendorOrgId   string `protobuf:"bytes,1,opt,name=prp_vendor_org_id,json=prpVendorOrgId,proto3" json:"prp_vendor_org_id,omitempty"`
	PrpVendorOrgDesc string `protobuf:"bytes,2,opt,name=prp_vendor_org_desc,json=prpVendorOrgDesc,proto3" json:"prp_vendor_org_desc,omitempty"`
}

func (x *VendorOrganizationPP) Reset() {
	*x = VendorOrganizationPP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorOrganizationPP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOrganizationPP) ProtoMessage() {}

func (x *VendorOrganizationPP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOrganizationPP.ProtoReflect.Descriptor instead.
func (*VendorOrganizationPP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{381}
}

func (x *VendorOrganizationPP) GetPrpVendorOrgId() string {
	if x != nil {
		return x.PrpVendorOrgId
	}
	return ""
}

func (x *VendorOrganizationPP) GetPrpVendorOrgDesc() string {
	if x != nil {
		return x.PrpVendorOrgDesc
	}
	return ""
}

type SitePP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteId []*SitePP_Location `protobuf:"bytes,1,rep,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
}

func (x *SitePP) Reset() {
	*x = SitePP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SitePP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SitePP) ProtoMessage() {}

func (x *SitePP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SitePP.ProtoReflect.Descriptor instead.
func (*SitePP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{382}
}

func (x *SitePP) GetSiteId() []*SitePP_Location {
	if x != nil {
		return x.SiteId
	}
	return nil
}

type GetPurchaseOrderGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit               int32   `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset              int32   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Code                string  `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Status              []int32 `protobuf:"varint,4,rep,packed,name=status,proto3" json:"status,omitempty"`
	PurchasePlanId      string  `protobuf:"bytes,5,opt,name=purchase_plan_id,json=purchasePlanId,proto3" json:"purchase_plan_id,omitempty"`
	ReqdateFrom         string  `protobuf:"bytes,6,opt,name=reqdate_from,json=reqdateFrom,proto3" json:"reqdate_from,omitempty"`
	ReqdateTo           string  `protobuf:"bytes,7,opt,name=reqdate_to,json=reqdateTo,proto3" json:"reqdate_to,omitempty"`
	IsNotConsolidated   bool    `protobuf:"varint,8,opt,name=is_not_consolidated,json=isNotConsolidated,proto3" json:"is_not_consolidated,omitempty"`
	IsPurchasePlan      string  `protobuf:"bytes,9,opt,name=is_purchase_plan,json=isPurchasePlan,proto3" json:"is_purchase_plan,omitempty"`
	Orderby             string  `protobuf:"bytes,10,opt,name=orderby,proto3" json:"orderby,omitempty"`
	PrpPurchaseplanUser string  `protobuf:"bytes,11,opt,name=prp_purchaseplan_user,json=prpPurchaseplanUser,proto3" json:"prp_purchaseplan_user,omitempty"`
	Locncode            string  `protobuf:"bytes,12,opt,name=locncode,proto3" json:"locncode,omitempty"`
	PrpCsNo             string  `protobuf:"bytes,13,opt,name=prp_cs_no,json=prpCsNo,proto3" json:"prp_cs_no,omitempty"`
	VendorId            string  `protobuf:"bytes,14,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	Ponumber            string  `protobuf:"bytes,15,opt,name=ponumber,proto3" json:"ponumber,omitempty"`
	Ponumberlike        string  `protobuf:"bytes,16,opt,name=ponumberlike,proto3" json:"ponumberlike,omitempty"`
}

func (x *GetPurchaseOrderGPListRequest) Reset() {
	*x = GetPurchaseOrderGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseOrderGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseOrderGPListRequest) ProtoMessage() {}

func (x *GetPurchaseOrderGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseOrderGPListRequest.ProtoReflect.Descriptor instead.
func (*GetPurchaseOrderGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{383}
}

func (x *GetPurchaseOrderGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetPurchaseOrderGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetPurchaseOrderGPListRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetPurchaseOrderGPListRequest) GetStatus() []int32 {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetPurchaseOrderGPListRequest) GetPurchasePlanId() string {
	if x != nil {
		return x.PurchasePlanId
	}
	return ""
}

func (x *GetPurchaseOrderGPListRequest) GetReqdateFrom() string {
	if x != nil {
		return x.ReqdateFrom
	}
	return ""
}

func (x *GetPurchaseOrderGPListRequest) GetReqdateTo() string {
	if x != nil {
		return x.ReqdateTo
	}
	return ""
}

func (x *GetPurchaseOrderGPListRequest) GetIsNotConsolidated() bool {
	if x != nil {
		return x.IsNotConsolidated
	}
	return false
}

func (x *GetPurchaseOrderGPListRequest) GetIsPurchasePlan() string {
	if x != nil {
		return x.IsPurchasePlan
	}
	return ""
}

func (x *GetPurchaseOrderGPListRequest) GetOrderby() string {
	if x != nil {
		return x.Orderby
	}
	return ""
}

func (x *GetPurchaseOrderGPListRequest) GetPrpPurchaseplanUser() string {
	if x != nil {
		return x.PrpPurchaseplanUser
	}
	return ""
}

func (x *GetPurchaseOrderGPListRequest) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *GetPurchaseOrderGPListRequest) GetPrpCsNo() string {
	if x != nil {
		return x.PrpCsNo
	}
	return ""
}

func (x *GetPurchaseOrderGPListRequest) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *GetPurchaseOrderGPListRequest) GetPonumber() string {
	if x != nil {
		return x.Ponumber
	}
	return ""
}

func (x *GetPurchaseOrderGPListRequest) GetPonumberlike() string {
	if x != nil {
		return x.Ponumberlike
	}
	return ""
}

type GetPurchaseOrderGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPurchaseOrderGPDetailRequest) Reset() {
	*x = GetPurchaseOrderGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseOrderGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseOrderGPDetailRequest) ProtoMessage() {}

func (x *GetPurchaseOrderGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseOrderGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetPurchaseOrderGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{384}
}

func (x *GetPurchaseOrderGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPurchaseOrderGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32              `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32              `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32              `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32              `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*PurchaseOrderGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool               `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string           `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string             `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetPurchaseOrderGPResponse) Reset() {
	*x = GetPurchaseOrderGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseOrderGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseOrderGPResponse) ProtoMessage() {}

func (x *GetPurchaseOrderGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseOrderGPResponse.ProtoReflect.Descriptor instead.
func (*GetPurchaseOrderGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{385}
}

func (x *GetPurchaseOrderGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetPurchaseOrderGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetPurchaseOrderGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetPurchaseOrderGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetPurchaseOrderGPResponse) GetData() []*PurchaseOrderGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetPurchaseOrderGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetPurchaseOrderGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetPurchaseOrderGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Poinvoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poprctnm   string `protobuf:"bytes,1,opt,name=poprctnm,proto3" json:"poprctnm,omitempty"`
	Status     int32  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	StatusDesc string `protobuf:"bytes,3,opt,name=status_desc,json=statusDesc,proto3" json:"status_desc,omitempty"`
}

func (x *Poinvoice) Reset() {
	*x = Poinvoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Poinvoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poinvoice) ProtoMessage() {}

func (x *Poinvoice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Poinvoice.ProtoReflect.Descriptor instead.
func (*Poinvoice) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{386}
}

func (x *Poinvoice) GetPoprctnm() string {
	if x != nil {
		return x.Poprctnm
	}
	return ""
}

func (x *Poinvoice) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Poinvoice) GetStatusDesc() string {
	if x != nil {
		return x.StatusDesc
	}
	return ""
}

type PoDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ponumber              string  `protobuf:"bytes,1,opt,name=ponumber,proto3" json:"ponumber,omitempty"`
	Ord                   int32   `protobuf:"varint,2,opt,name=ord,proto3" json:"ord,omitempty"`
	Polnesta              int32   `protobuf:"varint,3,opt,name=polnesta,proto3" json:"polnesta,omitempty"`
	Potype                int32   `protobuf:"varint,4,opt,name=potype,proto3" json:"potype,omitempty"`
	PoptypeDesc           string  `protobuf:"bytes,5,opt,name=poptype_desc,json=poptypeDesc,proto3" json:"poptype_desc,omitempty"`
	Buyerid               string  `protobuf:"bytes,6,opt,name=buyerid,proto3" json:"buyerid,omitempty"`
	Itemnmbr              string  `protobuf:"bytes,7,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	Itemdesc              string  `protobuf:"bytes,8,opt,name=itemdesc,proto3" json:"itemdesc,omitempty"`
	Vendorid              string  `protobuf:"bytes,9,opt,name=vendorid,proto3" json:"vendorid,omitempty"`
	Vnditnum              string  `protobuf:"bytes,10,opt,name=vnditnum,proto3" json:"vnditnum,omitempty"`
	Vnditdsc              string  `protobuf:"bytes,11,opt,name=vnditdsc,proto3" json:"vnditdsc,omitempty"`
	Locncode              string  `protobuf:"bytes,12,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Uofm                  string  `protobuf:"bytes,13,opt,name=uofm,proto3" json:"uofm,omitempty"`
	Umqtyinb              float64 `protobuf:"fixed64,14,opt,name=umqtyinb,proto3" json:"umqtyinb,omitempty"`
	Qtyorder              float64 `protobuf:"fixed64,15,opt,name=qtyorder,proto3" json:"qtyorder,omitempty"`
	Qtycance              float64 `protobuf:"fixed64,16,opt,name=qtycance,proto3" json:"qtycance,omitempty"`
	Unitcost              float64 `protobuf:"fixed64,17,opt,name=unitcost,proto3" json:"unitcost,omitempty"`
	Taxamnt               float64 `protobuf:"fixed64,18,opt,name=taxamnt,proto3" json:"taxamnt,omitempty"`
	Extdcost              float64 `protobuf:"fixed64,19,opt,name=extdcost,proto3" json:"extdcost,omitempty"`
	Invindx               int32   `protobuf:"varint,20,opt,name=invindx,proto3" json:"invindx,omitempty"`
	Reqstdby              string  `protobuf:"bytes,21,opt,name=reqstdby,proto3" json:"reqstdby,omitempty"`
	Commntid              string  `protobuf:"bytes,22,opt,name=commntid,proto3" json:"commntid,omitempty"`
	Doctype               int32   `protobuf:"varint,23,opt,name=doctype,proto3" json:"doctype,omitempty"`
	DoctypeDesc           string  `protobuf:"bytes,24,opt,name=doctype_desc,json=doctypeDesc,proto3" json:"doctype_desc,omitempty"`
	Decplcur              int32   `protobuf:"varint,25,opt,name=decplcur,proto3" json:"decplcur,omitempty"`
	DecplcurDesc          string  `protobuf:"bytes,26,opt,name=decplcur_desc,json=decplcurDesc,proto3" json:"decplcur_desc,omitempty"`
	Decplqty              int32   `protobuf:"varint,27,opt,name=decplqty,proto3" json:"decplqty,omitempty"`
	DecplqtyDesc          string  `protobuf:"bytes,28,opt,name=decplqty_desc,json=decplqtyDesc,proto3" json:"decplqty_desc,omitempty"`
	Brkfld1               int32   `protobuf:"varint,29,opt,name=brkfld1,proto3" json:"brkfld1,omitempty"`
	Jobnumbr              string  `protobuf:"bytes,30,opt,name=jobnumbr,proto3" json:"jobnumbr,omitempty"`
	Costcode              string  `protobuf:"bytes,31,opt,name=costcode,proto3" json:"costcode,omitempty"`
	Costtype              int32   `protobuf:"varint,32,opt,name=costtype,proto3" json:"costtype,omitempty"`
	Currnidx              int32   `protobuf:"varint,33,opt,name=currnidx,proto3" json:"currnidx,omitempty"`
	Oruntcst              float64 `protobuf:"fixed64,34,opt,name=oruntcst,proto3" json:"oruntcst,omitempty"`
	Orextcst              float64 `protobuf:"fixed64,35,opt,name=orextcst,proto3" json:"orextcst,omitempty"`
	PurchaseItemTaxSchedu string  `protobuf:"bytes,36,opt,name=purchase_item_tax_schedu,json=purchaseItemTaxSchedu,proto3" json:"purchase_item_tax_schedu,omitempty"`
	PurchaseSiteTaxSchedu string  `protobuf:"bytes,37,opt,name=purchase_site_tax_schedu,json=purchaseSiteTaxSchedu,proto3" json:"purchase_site_tax_schedu,omitempty"`
	Purchsitetxschsrc     int32   `protobuf:"varint,38,opt,name=purchsitetxschsrc,proto3" json:"purchsitetxschsrc,omitempty"`
	Ortaxamt              float64 `protobuf:"fixed64,39,opt,name=ortaxamt,proto3" json:"ortaxamt,omitempty"`
	Bcktxamt              float64 `protobuf:"fixed64,40,opt,name=bcktxamt,proto3" json:"bcktxamt,omitempty"`
	Obtaxamt              float64 `protobuf:"fixed64,41,opt,name=obtaxamt,proto3" json:"obtaxamt,omitempty"`
	LandedCostGroupId     string  `protobuf:"bytes,42,opt,name=landed_cost_group_id,json=landedCostGroupId,proto3" json:"landed_cost_group_id,omitempty"`
	Shipmthd              string  `protobuf:"bytes,43,opt,name=shipmthd,proto3" json:"shipmthd,omitempty"`
	Origprmdate           string  `protobuf:"bytes,44,opt,name=origprmdate,proto3" json:"origprmdate,omitempty"`
	Fstrcptdt             string  `protobuf:"bytes,45,opt,name=fstrcptdt,proto3" json:"fstrcptdt,omitempty"`
	Lstrcptdt             string  `protobuf:"bytes,46,opt,name=lstrcptdt,proto3" json:"lstrcptdt,omitempty"`
	Adrscode              string  `protobuf:"bytes,47,opt,name=adrscode,proto3" json:"adrscode,omitempty"`
	Cmpnynam              string  `protobuf:"bytes,48,opt,name=cmpnynam,proto3" json:"cmpnynam,omitempty"`
	Contact               string  `protobuf:"bytes,49,opt,name=contact,proto3" json:"contact,omitempty"`
	AddresS1              string  `protobuf:"bytes,50,opt,name=addresS1,proto3" json:"addresS1,omitempty"`
	AddresS2              string  `protobuf:"bytes,51,opt,name=addresS2,proto3" json:"addresS2,omitempty"`
	AddresS3              string  `protobuf:"bytes,52,opt,name=addresS3,proto3" json:"addresS3,omitempty"`
	City                  string  `protobuf:"bytes,53,opt,name=city,proto3" json:"city,omitempty"`
	State                 string  `protobuf:"bytes,54,opt,name=state,proto3" json:"state,omitempty"`
	Zipcode               string  `protobuf:"bytes,55,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	Ccode                 string  `protobuf:"bytes,56,opt,name=ccode,proto3" json:"ccode,omitempty"`
	Country               string  `protobuf:"bytes,57,opt,name=country,proto3" json:"country,omitempty"`
	Phone1                string  `protobuf:"bytes,58,opt,name=phone1,proto3" json:"phone1,omitempty"`
	Phone2                string  `protobuf:"bytes,59,opt,name=phone2,proto3" json:"phone2,omitempty"`
	Phone3                string  `protobuf:"bytes,60,opt,name=phone3,proto3" json:"phone3,omitempty"`
	Fax                   string  `protobuf:"bytes,61,opt,name=fax,proto3" json:"fax,omitempty"`
	Addrsource            int32   `protobuf:"varint,62,opt,name=addrsource,proto3" json:"addrsource,omitempty"`
	Flags                 int32   `protobuf:"varint,63,opt,name=flags,proto3" json:"flags,omitempty"`
	Projnum               string  `protobuf:"bytes,64,opt,name=projnum,proto3" json:"projnum,omitempty"`
	Itmtrkop              int32   `protobuf:"varint,65,opt,name=itmtrkop,proto3" json:"itmtrkop,omitempty"`
	ItmtrkopDesc          string  `protobuf:"bytes,66,opt,name=itmtrkop_desc,json=itmtrkopDesc,proto3" json:"itmtrkop_desc,omitempty"`
	PrpPaymentMethod      string  `protobuf:"bytes,67,opt,name=prp_payment_method,json=prpPaymentMethod,proto3" json:"prp_payment_method,omitempty"`
	PrpRegion             string  `protobuf:"bytes,68,opt,name=prp_region,json=prpRegion,proto3" json:"prp_region,omitempty"`
	Deprtmnt              string  `protobuf:"bytes,69,opt,name=deprtmnt,proto3" json:"deprtmnt,omitempty"`
	PrpLocncode           string  `protobuf:"bytes,70,opt,name=prp_locncode,json=prpLocncode,proto3" json:"prp_locncode,omitempty"`
	PrpPrReference        string  `protobuf:"bytes,71,opt,name=prp_pr_reference,json=prpPrReference,proto3" json:"prp_pr_reference,omitempty"`
	PrpPpReference        string  `protobuf:"bytes,72,opt,name=prp_pp_reference,json=prpPpReference,proto3" json:"prp_pp_reference,omitempty"`
	PrpCsReference        string  `protobuf:"bytes,73,opt,name=prp_cs_reference,json=prpCsReference,proto3" json:"prp_cs_reference,omitempty"`
}

func (x *PoDetail) Reset() {
	*x = PoDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoDetail) ProtoMessage() {}

func (x *PoDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoDetail.ProtoReflect.Descriptor instead.
func (*PoDetail) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{387}
}

func (x *PoDetail) GetPonumber() string {
	if x != nil {
		return x.Ponumber
	}
	return ""
}

func (x *PoDetail) GetOrd() int32 {
	if x != nil {
		return x.Ord
	}
	return 0
}

func (x *PoDetail) GetPolnesta() int32 {
	if x != nil {
		return x.Polnesta
	}
	return 0
}

func (x *PoDetail) GetPotype() int32 {
	if x != nil {
		return x.Potype
	}
	return 0
}

func (x *PoDetail) GetPoptypeDesc() string {
	if x != nil {
		return x.PoptypeDesc
	}
	return ""
}

func (x *PoDetail) GetBuyerid() string {
	if x != nil {
		return x.Buyerid
	}
	return ""
}

func (x *PoDetail) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *PoDetail) GetItemdesc() string {
	if x != nil {
		return x.Itemdesc
	}
	return ""
}

func (x *PoDetail) GetVendorid() string {
	if x != nil {
		return x.Vendorid
	}
	return ""
}

func (x *PoDetail) GetVnditnum() string {
	if x != nil {
		return x.Vnditnum
	}
	return ""
}

func (x *PoDetail) GetVnditdsc() string {
	if x != nil {
		return x.Vnditdsc
	}
	return ""
}

func (x *PoDetail) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *PoDetail) GetUofm() string {
	if x != nil {
		return x.Uofm
	}
	return ""
}

func (x *PoDetail) GetUmqtyinb() float64 {
	if x != nil {
		return x.Umqtyinb
	}
	return 0
}

func (x *PoDetail) GetQtyorder() float64 {
	if x != nil {
		return x.Qtyorder
	}
	return 0
}

func (x *PoDetail) GetQtycance() float64 {
	if x != nil {
		return x.Qtycance
	}
	return 0
}

func (x *PoDetail) GetUnitcost() float64 {
	if x != nil {
		return x.Unitcost
	}
	return 0
}

func (x *PoDetail) GetTaxamnt() float64 {
	if x != nil {
		return x.Taxamnt
	}
	return 0
}

func (x *PoDetail) GetExtdcost() float64 {
	if x != nil {
		return x.Extdcost
	}
	return 0
}

func (x *PoDetail) GetInvindx() int32 {
	if x != nil {
		return x.Invindx
	}
	return 0
}

func (x *PoDetail) GetReqstdby() string {
	if x != nil {
		return x.Reqstdby
	}
	return ""
}

func (x *PoDetail) GetCommntid() string {
	if x != nil {
		return x.Commntid
	}
	return ""
}

func (x *PoDetail) GetDoctype() int32 {
	if x != nil {
		return x.Doctype
	}
	return 0
}

func (x *PoDetail) GetDoctypeDesc() string {
	if x != nil {
		return x.DoctypeDesc
	}
	return ""
}

func (x *PoDetail) GetDecplcur() int32 {
	if x != nil {
		return x.Decplcur
	}
	return 0
}

func (x *PoDetail) GetDecplcurDesc() string {
	if x != nil {
		return x.DecplcurDesc
	}
	return ""
}

func (x *PoDetail) GetDecplqty() int32 {
	if x != nil {
		return x.Decplqty
	}
	return 0
}

func (x *PoDetail) GetDecplqtyDesc() string {
	if x != nil {
		return x.DecplqtyDesc
	}
	return ""
}

func (x *PoDetail) GetBrkfld1() int32 {
	if x != nil {
		return x.Brkfld1
	}
	return 0
}

func (x *PoDetail) GetJobnumbr() string {
	if x != nil {
		return x.Jobnumbr
	}
	return ""
}

func (x *PoDetail) GetCostcode() string {
	if x != nil {
		return x.Costcode
	}
	return ""
}

func (x *PoDetail) GetCosttype() int32 {
	if x != nil {
		return x.Costtype
	}
	return 0
}

func (x *PoDetail) GetCurrnidx() int32 {
	if x != nil {
		return x.Currnidx
	}
	return 0
}

func (x *PoDetail) GetOruntcst() float64 {
	if x != nil {
		return x.Oruntcst
	}
	return 0
}

func (x *PoDetail) GetOrextcst() float64 {
	if x != nil {
		return x.Orextcst
	}
	return 0
}

func (x *PoDetail) GetPurchaseItemTaxSchedu() string {
	if x != nil {
		return x.PurchaseItemTaxSchedu
	}
	return ""
}

func (x *PoDetail) GetPurchaseSiteTaxSchedu() string {
	if x != nil {
		return x.PurchaseSiteTaxSchedu
	}
	return ""
}

func (x *PoDetail) GetPurchsitetxschsrc() int32 {
	if x != nil {
		return x.Purchsitetxschsrc
	}
	return 0
}

func (x *PoDetail) GetOrtaxamt() float64 {
	if x != nil {
		return x.Ortaxamt
	}
	return 0
}

func (x *PoDetail) GetBcktxamt() float64 {
	if x != nil {
		return x.Bcktxamt
	}
	return 0
}

func (x *PoDetail) GetObtaxamt() float64 {
	if x != nil {
		return x.Obtaxamt
	}
	return 0
}

func (x *PoDetail) GetLandedCostGroupId() string {
	if x != nil {
		return x.LandedCostGroupId
	}
	return ""
}

func (x *PoDetail) GetShipmthd() string {
	if x != nil {
		return x.Shipmthd
	}
	return ""
}

func (x *PoDetail) GetOrigprmdate() string {
	if x != nil {
		return x.Origprmdate
	}
	return ""
}

func (x *PoDetail) GetFstrcptdt() string {
	if x != nil {
		return x.Fstrcptdt
	}
	return ""
}

func (x *PoDetail) GetLstrcptdt() string {
	if x != nil {
		return x.Lstrcptdt
	}
	return ""
}

func (x *PoDetail) GetAdrscode() string {
	if x != nil {
		return x.Adrscode
	}
	return ""
}

func (x *PoDetail) GetCmpnynam() string {
	if x != nil {
		return x.Cmpnynam
	}
	return ""
}

func (x *PoDetail) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *PoDetail) GetAddresS1() string {
	if x != nil {
		return x.AddresS1
	}
	return ""
}

func (x *PoDetail) GetAddresS2() string {
	if x != nil {
		return x.AddresS2
	}
	return ""
}

func (x *PoDetail) GetAddresS3() string {
	if x != nil {
		return x.AddresS3
	}
	return ""
}

func (x *PoDetail) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *PoDetail) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PoDetail) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *PoDetail) GetCcode() string {
	if x != nil {
		return x.Ccode
	}
	return ""
}

func (x *PoDetail) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *PoDetail) GetPhone1() string {
	if x != nil {
		return x.Phone1
	}
	return ""
}

func (x *PoDetail) GetPhone2() string {
	if x != nil {
		return x.Phone2
	}
	return ""
}

func (x *PoDetail) GetPhone3() string {
	if x != nil {
		return x.Phone3
	}
	return ""
}

func (x *PoDetail) GetFax() string {
	if x != nil {
		return x.Fax
	}
	return ""
}

func (x *PoDetail) GetAddrsource() int32 {
	if x != nil {
		return x.Addrsource
	}
	return 0
}

func (x *PoDetail) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *PoDetail) GetProjnum() string {
	if x != nil {
		return x.Projnum
	}
	return ""
}

func (x *PoDetail) GetItmtrkop() int32 {
	if x != nil {
		return x.Itmtrkop
	}
	return 0
}

func (x *PoDetail) GetItmtrkopDesc() string {
	if x != nil {
		return x.ItmtrkopDesc
	}
	return ""
}

func (x *PoDetail) GetPrpPaymentMethod() string {
	if x != nil {
		return x.PrpPaymentMethod
	}
	return ""
}

func (x *PoDetail) GetPrpRegion() string {
	if x != nil {
		return x.PrpRegion
	}
	return ""
}

func (x *PoDetail) GetDeprtmnt() string {
	if x != nil {
		return x.Deprtmnt
	}
	return ""
}

func (x *PoDetail) GetPrpLocncode() string {
	if x != nil {
		return x.PrpLocncode
	}
	return ""
}

func (x *PoDetail) GetPrpPrReference() string {
	if x != nil {
		return x.PrpPrReference
	}
	return ""
}

func (x *PoDetail) GetPrpPpReference() string {
	if x != nil {
		return x.PrpPpReference
	}
	return ""
}

func (x *PoDetail) GetPrpCsReference() string {
	if x != nil {
		return x.PrpCsReference
	}
	return ""
}

type PurchaseOrderGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ponumber               string       `protobuf:"bytes,1,opt,name=ponumber,proto3" json:"ponumber,omitempty"`
	Potype                 int32        `protobuf:"varint,2,opt,name=potype,proto3" json:"potype,omitempty"`
	PotypeDesc             string       `protobuf:"bytes,3,opt,name=potype_desc,json=potypeDesc,proto3" json:"potype_desc,omitempty"`
	Docdate                string       `protobuf:"bytes,4,opt,name=docdate,proto3" json:"docdate,omitempty"`
	Buyerid                string       `protobuf:"bytes,5,opt,name=buyerid,proto3" json:"buyerid,omitempty"`
	Vendorid               string       `protobuf:"bytes,6,opt,name=vendorid,proto3" json:"vendorid,omitempty"`
	Vendname               string       `protobuf:"bytes,7,opt,name=vendname,proto3" json:"vendname,omitempty"`
	Reqdate                string       `protobuf:"bytes,8,opt,name=reqdate,proto3" json:"reqdate,omitempty"`
	Postatus               int32        `protobuf:"varint,9,opt,name=postatus,proto3" json:"postatus,omitempty"`
	PostatusDesc           string       `protobuf:"bytes,10,opt,name=postatus_desc,json=postatusDesc,proto3" json:"postatus_desc,omitempty"`
	Commntid               string       `protobuf:"bytes,11,opt,name=commntid,proto3" json:"commntid,omitempty"`
	Pymtrmid               string       `protobuf:"bytes,12,opt,name=pymtrmid,proto3" json:"pymtrmid,omitempty"`
	Bcktxamt               float64      `protobuf:"fixed64,13,opt,name=bcktxamt,proto3" json:"bcktxamt,omitempty"`
	Obtaxamt               float64      `protobuf:"fixed64,14,opt,name=obtaxamt,proto3" json:"obtaxamt,omitempty"`
	Shipmthd               string       `protobuf:"bytes,15,opt,name=shipmthd,proto3" json:"shipmthd,omitempty"`
	Cmpnynam               string       `protobuf:"bytes,16,opt,name=cmpnynam,proto3" json:"cmpnynam,omitempty"`
	Contact                string       `protobuf:"bytes,17,opt,name=contact,proto3" json:"contact,omitempty"`
	AddresS1               string       `protobuf:"bytes,18,opt,name=addresS1,proto3" json:"addresS1,omitempty"`
	AddresS2               string       `protobuf:"bytes,19,opt,name=addresS2,proto3" json:"addresS2,omitempty"`
	AddresS3               string       `protobuf:"bytes,20,opt,name=addresS3,proto3" json:"addresS3,omitempty"`
	City                   string       `protobuf:"bytes,21,opt,name=city,proto3" json:"city,omitempty"`
	State                  string       `protobuf:"bytes,22,opt,name=state,proto3" json:"state,omitempty"`
	Zipcode                string       `protobuf:"bytes,23,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	CCode                  string       `protobuf:"bytes,24,opt,name=cCode,proto3" json:"cCode,omitempty"`
	Country                string       `protobuf:"bytes,25,opt,name=country,proto3" json:"country,omitempty"`
	PhonE1                 string       `protobuf:"bytes,26,opt,name=phonE1,proto3" json:"phonE1,omitempty"`
	PhonE2                 string       `protobuf:"bytes,27,opt,name=phonE2,proto3" json:"phonE2,omitempty"`
	PhonE3                 string       `protobuf:"bytes,28,opt,name=phonE3,proto3" json:"phonE3,omitempty"`
	Fax                    string       `protobuf:"bytes,29,opt,name=fax,proto3" json:"fax,omitempty"`
	PrpPaymentMethod       string       `protobuf:"bytes,30,opt,name=prp_payment_method,json=prpPaymentMethod,proto3" json:"prp_payment_method,omitempty"`
	PrpRegion              string       `protobuf:"bytes,31,opt,name=prp_region,json=prpRegion,proto3" json:"prp_region,omitempty"`
	Deprtmnt               string       `protobuf:"bytes,32,opt,name=deprtmnt,proto3" json:"deprtmnt,omitempty"`
	PrpLocncode            string       `protobuf:"bytes,33,opt,name=prp_locncode,json=prpLocncode,proto3" json:"prp_locncode,omitempty"`
	PrpPrReference         string       `protobuf:"bytes,34,opt,name=prp_pr_reference,json=prpPrReference,proto3" json:"prp_pr_reference,omitempty"`
	PrpPpReference         string       `protobuf:"bytes,35,opt,name=prp_pp_reference,json=prpPpReference,proto3" json:"prp_pp_reference,omitempty"`
	PrpPurchaseplanUser    string       `protobuf:"bytes,36,opt,name=prp_purchaseplan_user,json=prpPurchaseplanUser,proto3" json:"prp_purchaseplan_user,omitempty"`
	PrpCsReference         string       `protobuf:"bytes,37,opt,name=prp_cs_reference,json=prpCsReference,proto3" json:"prp_cs_reference,omitempty"`
	PrpEstimatedarrivalDat string       `protobuf:"bytes,38,opt,name=prp_estimatedarrival_dat,json=prpEstimatedarrivalDat,proto3" json:"prp_estimatedarrival_dat,omitempty"`
	PrpEstimatedarrivalTim string       `protobuf:"bytes,39,opt,name=prp_estimatedarrival_tim,json=prpEstimatedarrivalTim,proto3" json:"prp_estimatedarrival_tim,omitempty"`
	Subtotal               float64      `protobuf:"fixed64,40,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	Trdisamt               float64      `protobuf:"fixed64,41,opt,name=trdisamt,proto3" json:"trdisamt,omitempty"`
	Frtamnt                float64      `protobuf:"fixed64,42,opt,name=frtamnt,proto3" json:"frtamnt,omitempty"`
	Mscchamt               float64      `protobuf:"fixed64,43,opt,name=mscchamt,proto3" json:"mscchamt,omitempty"`
	Taxamnt                float64      `protobuf:"fixed64,44,opt,name=taxamnt,proto3" json:"taxamnt,omitempty"`
	Total                  float64      `protobuf:"fixed64,45,opt,name=total,proto3" json:"total,omitempty"`
	Prepaymentamount       float64      `protobuf:"fixed64,46,opt,name=prepaymentamount,proto3" json:"prepaymentamount,omitempty"`
	Poinvoice              []*Poinvoice `protobuf:"bytes,47,rep,name=poinvoice,proto3" json:"poinvoice,omitempty"`
	Poreceiving            []*Poinvoice `protobuf:"bytes,48,rep,name=poreceiving,proto3" json:"poreceiving,omitempty"`
	PoDetail               []*PoDetail  `protobuf:"bytes,49,rep,name=poDetail,proto3" json:"poDetail,omitempty"`
}

func (x *PurchaseOrderGP) Reset() {
	*x = PurchaseOrderGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseOrderGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseOrderGP) ProtoMessage() {}

func (x *PurchaseOrderGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseOrderGP.ProtoReflect.Descriptor instead.
func (*PurchaseOrderGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{388}
}

func (x *PurchaseOrderGP) GetPonumber() string {
	if x != nil {
		return x.Ponumber
	}
	return ""
}

func (x *PurchaseOrderGP) GetPotype() int32 {
	if x != nil {
		return x.Potype
	}
	return 0
}

func (x *PurchaseOrderGP) GetPotypeDesc() string {
	if x != nil {
		return x.PotypeDesc
	}
	return ""
}

func (x *PurchaseOrderGP) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *PurchaseOrderGP) GetBuyerid() string {
	if x != nil {
		return x.Buyerid
	}
	return ""
}

func (x *PurchaseOrderGP) GetVendorid() string {
	if x != nil {
		return x.Vendorid
	}
	return ""
}

func (x *PurchaseOrderGP) GetVendname() string {
	if x != nil {
		return x.Vendname
	}
	return ""
}

func (x *PurchaseOrderGP) GetReqdate() string {
	if x != nil {
		return x.Reqdate
	}
	return ""
}

func (x *PurchaseOrderGP) GetPostatus() int32 {
	if x != nil {
		return x.Postatus
	}
	return 0
}

func (x *PurchaseOrderGP) GetPostatusDesc() string {
	if x != nil {
		return x.PostatusDesc
	}
	return ""
}

func (x *PurchaseOrderGP) GetCommntid() string {
	if x != nil {
		return x.Commntid
	}
	return ""
}

func (x *PurchaseOrderGP) GetPymtrmid() string {
	if x != nil {
		return x.Pymtrmid
	}
	return ""
}

func (x *PurchaseOrderGP) GetBcktxamt() float64 {
	if x != nil {
		return x.Bcktxamt
	}
	return 0
}

func (x *PurchaseOrderGP) GetObtaxamt() float64 {
	if x != nil {
		return x.Obtaxamt
	}
	return 0
}

func (x *PurchaseOrderGP) GetShipmthd() string {
	if x != nil {
		return x.Shipmthd
	}
	return ""
}

func (x *PurchaseOrderGP) GetCmpnynam() string {
	if x != nil {
		return x.Cmpnynam
	}
	return ""
}

func (x *PurchaseOrderGP) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *PurchaseOrderGP) GetAddresS1() string {
	if x != nil {
		return x.AddresS1
	}
	return ""
}

func (x *PurchaseOrderGP) GetAddresS2() string {
	if x != nil {
		return x.AddresS2
	}
	return ""
}

func (x *PurchaseOrderGP) GetAddresS3() string {
	if x != nil {
		return x.AddresS3
	}
	return ""
}

func (x *PurchaseOrderGP) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *PurchaseOrderGP) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PurchaseOrderGP) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *PurchaseOrderGP) GetCCode() string {
	if x != nil {
		return x.CCode
	}
	return ""
}

func (x *PurchaseOrderGP) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *PurchaseOrderGP) GetPhonE1() string {
	if x != nil {
		return x.PhonE1
	}
	return ""
}

func (x *PurchaseOrderGP) GetPhonE2() string {
	if x != nil {
		return x.PhonE2
	}
	return ""
}

func (x *PurchaseOrderGP) GetPhonE3() string {
	if x != nil {
		return x.PhonE3
	}
	return ""
}

func (x *PurchaseOrderGP) GetFax() string {
	if x != nil {
		return x.Fax
	}
	return ""
}

func (x *PurchaseOrderGP) GetPrpPaymentMethod() string {
	if x != nil {
		return x.PrpPaymentMethod
	}
	return ""
}

func (x *PurchaseOrderGP) GetPrpRegion() string {
	if x != nil {
		return x.PrpRegion
	}
	return ""
}

func (x *PurchaseOrderGP) GetDeprtmnt() string {
	if x != nil {
		return x.Deprtmnt
	}
	return ""
}

func (x *PurchaseOrderGP) GetPrpLocncode() string {
	if x != nil {
		return x.PrpLocncode
	}
	return ""
}

func (x *PurchaseOrderGP) GetPrpPrReference() string {
	if x != nil {
		return x.PrpPrReference
	}
	return ""
}

func (x *PurchaseOrderGP) GetPrpPpReference() string {
	if x != nil {
		return x.PrpPpReference
	}
	return ""
}

func (x *PurchaseOrderGP) GetPrpPurchaseplanUser() string {
	if x != nil {
		return x.PrpPurchaseplanUser
	}
	return ""
}

func (x *PurchaseOrderGP) GetPrpCsReference() string {
	if x != nil {
		return x.PrpCsReference
	}
	return ""
}

func (x *PurchaseOrderGP) GetPrpEstimatedarrivalDat() string {
	if x != nil {
		return x.PrpEstimatedarrivalDat
	}
	return ""
}

func (x *PurchaseOrderGP) GetPrpEstimatedarrivalTim() string {
	if x != nil {
		return x.PrpEstimatedarrivalTim
	}
	return ""
}

func (x *PurchaseOrderGP) GetSubtotal() float64 {
	if x != nil {
		return x.Subtotal
	}
	return 0
}

func (x *PurchaseOrderGP) GetTrdisamt() float64 {
	if x != nil {
		return x.Trdisamt
	}
	return 0
}

func (x *PurchaseOrderGP) GetFrtamnt() float64 {
	if x != nil {
		return x.Frtamnt
	}
	return 0
}

func (x *PurchaseOrderGP) GetMscchamt() float64 {
	if x != nil {
		return x.Mscchamt
	}
	return 0
}

func (x *PurchaseOrderGP) GetTaxamnt() float64 {
	if x != nil {
		return x.Taxamnt
	}
	return 0
}

func (x *PurchaseOrderGP) GetTotal() float64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PurchaseOrderGP) GetPrepaymentamount() float64 {
	if x != nil {
		return x.Prepaymentamount
	}
	return 0
}

func (x *PurchaseOrderGP) GetPoinvoice() []*Poinvoice {
	if x != nil {
		return x.Poinvoice
	}
	return nil
}

func (x *PurchaseOrderGP) GetPoreceiving() []*Poinvoice {
	if x != nil {
		return x.Poreceiving
	}
	return nil
}

func (x *PurchaseOrderGP) GetPoDetail() []*PoDetail {
	if x != nil {
		return x.PoDetail
	}
	return nil
}

type GetVendorOrganizationGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit            int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset           int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Orderby          string `protobuf:"bytes,3,opt,name=orderby,proto3" json:"orderby,omitempty"`
	PrpVendorOrgId   string `protobuf:"bytes,4,opt,name=prp_vendor_org_id,json=prpVendorOrgId,proto3" json:"prp_vendor_org_id,omitempty"`
	PrpVendorOrgDesc string `protobuf:"bytes,5,opt,name=prp_vendor_org_desc,json=prpVendorOrgDesc,proto3" json:"prp_vendor_org_desc,omitempty"`
	Inactive         int32  `protobuf:"varint,6,opt,name=inactive,proto3" json:"inactive,omitempty"`
	Status           string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetVendorOrganizationGPListRequest) Reset() {
	*x = GetVendorOrganizationGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorOrganizationGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorOrganizationGPListRequest) ProtoMessage() {}

func (x *GetVendorOrganizationGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorOrganizationGPListRequest.ProtoReflect.Descriptor instead.
func (*GetVendorOrganizationGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{389}
}

func (x *GetVendorOrganizationGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetVendorOrganizationGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetVendorOrganizationGPListRequest) GetOrderby() string {
	if x != nil {
		return x.Orderby
	}
	return ""
}

func (x *GetVendorOrganizationGPListRequest) GetPrpVendorOrgId() string {
	if x != nil {
		return x.PrpVendorOrgId
	}
	return ""
}

func (x *GetVendorOrganizationGPListRequest) GetPrpVendorOrgDesc() string {
	if x != nil {
		return x.PrpVendorOrgDesc
	}
	return ""
}

func (x *GetVendorOrganizationGPListRequest) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *GetVendorOrganizationGPListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetVendorOrganizationGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetVendorOrganizationGPDetailRequest) Reset() {
	*x = GetVendorOrganizationGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorOrganizationGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorOrganizationGPDetailRequest) ProtoMessage() {}

func (x *GetVendorOrganizationGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorOrganizationGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetVendorOrganizationGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{390}
}

func (x *GetVendorOrganizationGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetVendorOrganizationGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32                   `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32                   `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32                   `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32                   `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*VendorOrganizationGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool                    `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string                `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string                  `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetVendorOrganizationGPResponse) Reset() {
	*x = GetVendorOrganizationGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorOrganizationGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorOrganizationGPResponse) ProtoMessage() {}

func (x *GetVendorOrganizationGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorOrganizationGPResponse.ProtoReflect.Descriptor instead.
func (*GetVendorOrganizationGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{391}
}

func (x *GetVendorOrganizationGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetVendorOrganizationGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetVendorOrganizationGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetVendorOrganizationGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetVendorOrganizationGPResponse) GetData() []*VendorOrganizationGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetVendorOrganizationGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetVendorOrganizationGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetVendorOrganizationGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type VendorOrganizationGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrpVendorOrgId   string `protobuf:"bytes,1,opt,name=prp_vendor_org_id,json=prpVendorOrgId,proto3" json:"prp_vendor_org_id,omitempty"`
	PrpVendorOrgDesc string `protobuf:"bytes,2,opt,name=prp_vendor_org_desc,json=prpVendorOrgDesc,proto3" json:"prp_vendor_org_desc,omitempty"`
	Inactive         int32  `protobuf:"varint,3,opt,name=inactive,proto3" json:"inactive,omitempty"`
	InactiveDesc     string `protobuf:"bytes,4,opt,name=inactive_desc,json=inactiveDesc,proto3" json:"inactive_desc,omitempty"`
}

func (x *VendorOrganizationGP) Reset() {
	*x = VendorOrganizationGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorOrganizationGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorOrganizationGP) ProtoMessage() {}

func (x *VendorOrganizationGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorOrganizationGP.ProtoReflect.Descriptor instead.
func (*VendorOrganizationGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{392}
}

func (x *VendorOrganizationGP) GetPrpVendorOrgId() string {
	if x != nil {
		return x.PrpVendorOrgId
	}
	return ""
}

func (x *VendorOrganizationGP) GetPrpVendorOrgDesc() string {
	if x != nil {
		return x.PrpVendorOrgDesc
	}
	return ""
}

func (x *VendorOrganizationGP) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *VendorOrganizationGP) GetInactiveDesc() string {
	if x != nil {
		return x.InactiveDesc
	}
	return ""
}

type GetVendorClassificationGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetVendorClassificationGPListRequest) Reset() {
	*x = GetVendorClassificationGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorClassificationGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorClassificationGPListRequest) ProtoMessage() {}

func (x *GetVendorClassificationGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorClassificationGPListRequest.ProtoReflect.Descriptor instead.
func (*GetVendorClassificationGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{393}
}

func (x *GetVendorClassificationGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetVendorClassificationGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetVendorClassificationGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetVendorClassificationGPDetailRequest) Reset() {
	*x = GetVendorClassificationGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorClassificationGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorClassificationGPDetailRequest) ProtoMessage() {}

func (x *GetVendorClassificationGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorClassificationGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetVendorClassificationGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{394}
}

func (x *GetVendorClassificationGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetVendorClassificationGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32                     `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32                     `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32                     `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32                     `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*VendorClassificationGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool                      `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string                  `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string                    `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetVendorClassificationGPResponse) Reset() {
	*x = GetVendorClassificationGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVendorClassificationGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVendorClassificationGPResponse) ProtoMessage() {}

func (x *GetVendorClassificationGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVendorClassificationGPResponse.ProtoReflect.Descriptor instead.
func (*GetVendorClassificationGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{395}
}

func (x *GetVendorClassificationGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetVendorClassificationGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetVendorClassificationGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetVendorClassificationGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetVendorClassificationGPResponse) GetData() []*VendorClassificationGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetVendorClassificationGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetVendorClassificationGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetVendorClassificationGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type VendorClassificationGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrpVendorClasfId   string `protobuf:"bytes,1,opt,name=prp_vendor_clasf_id,json=prpVendorClasfId,proto3" json:"prp_vendor_clasf_id,omitempty"`
	PrpVendorClasfDesc string `protobuf:"bytes,2,opt,name=prp_vendor_clasf_desc,json=prpVendorClasfDesc,proto3" json:"prp_vendor_clasf_desc,omitempty"`
	Inactive           int32  `protobuf:"varint,3,opt,name=inactive,proto3" json:"inactive,omitempty"`
	InactiveDesc       string `protobuf:"bytes,4,opt,name=inactive_desc,json=inactiveDesc,proto3" json:"inactive_desc,omitempty"`
}

func (x *VendorClassificationGP) Reset() {
	*x = VendorClassificationGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorClassificationGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorClassificationGP) ProtoMessage() {}

func (x *VendorClassificationGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorClassificationGP.ProtoReflect.Descriptor instead.
func (*VendorClassificationGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{396}
}

func (x *VendorClassificationGP) GetPrpVendorClasfId() string {
	if x != nil {
		return x.PrpVendorClasfId
	}
	return ""
}

func (x *VendorClassificationGP) GetPrpVendorClasfDesc() string {
	if x != nil {
		return x.PrpVendorClasfDesc
	}
	return ""
}

func (x *VendorClassificationGP) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *VendorClassificationGP) GetInactiveDesc() string {
	if x != nil {
		return x.InactiveDesc
	}
	return ""
}

type CreatePurchaseOrderGPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid                 string                                   `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Potype                  int32                                    `protobuf:"varint,2,opt,name=potype,proto3" json:"potype,omitempty"`
	Ponumber                string                                   `protobuf:"bytes,3,opt,name=ponumber,proto3" json:"ponumber,omitempty"`
	Docdate                 string                                   `protobuf:"bytes,4,opt,name=docdate,proto3" json:"docdate,omitempty"`
	Buyerid                 string                                   `protobuf:"bytes,5,opt,name=buyerid,proto3" json:"buyerid,omitempty"`
	Vendorid                string                                   `protobuf:"bytes,6,opt,name=vendorid,proto3" json:"vendorid,omitempty"`
	Curncyid                string                                   `protobuf:"bytes,7,opt,name=curncyid,proto3" json:"curncyid,omitempty"`
	Deprtmnt                string                                   `protobuf:"bytes,8,opt,name=deprtmnt,proto3" json:"deprtmnt,omitempty"`
	Locncode                string                                   `protobuf:"bytes,9,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Taxschid                string                                   `protobuf:"bytes,10,opt,name=taxschid,proto3" json:"taxschid,omitempty"`
	Subtotal                float64                                  `protobuf:"fixed64,11,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	Trdisamt                float64                                  `protobuf:"fixed64,12,opt,name=trdisamt,proto3" json:"trdisamt,omitempty"`
	Frtamnt                 float64                                  `protobuf:"fixed64,13,opt,name=frtamnt,proto3" json:"frtamnt,omitempty"`
	Miscamnt                float64                                  `protobuf:"fixed64,14,opt,name=miscamnt,proto3" json:"miscamnt,omitempty"`
	Taxamnt                 float64                                  `protobuf:"fixed64,15,opt,name=taxamnt,proto3" json:"taxamnt,omitempty"`
	PrpPurchaseplanNo       string                                   `protobuf:"bytes,16,opt,name=prp_purchaseplan_no,json=prpPurchaseplanNo,proto3" json:"prp_purchaseplan_no,omitempty"`
	CsReference             *CreatePurchaseOrderGPRequestCsReference `protobuf:"bytes,17,opt,name=cs_reference,json=csReference,proto3" json:"cs_reference,omitempty"`
	PrpPaymentMethod        string                                   `protobuf:"bytes,18,opt,name=prp_payment_method,json=prpPaymentMethod,proto3" json:"prp_payment_method,omitempty"`
	PrpRegion               string                                   `protobuf:"bytes,19,opt,name=prp_region,json=prpRegion,proto3" json:"prp_region,omitempty"`
	PrpEstimatedarrivalDate string                                   `protobuf:"bytes,20,opt,name=prp_estimatedarrival_date,json=prpEstimatedarrivalDate,proto3" json:"prp_estimatedarrival_date,omitempty"`
	Notetext                string                                   `protobuf:"bytes,21,opt,name=notetext,proto3" json:"notetext,omitempty"`
	Detail                  []*CreatePurchaseOrderGPRequest_Podtl    `protobuf:"bytes,22,rep,name=detail,proto3" json:"detail,omitempty"`
	Duedate                 string                                   `protobuf:"bytes,23,opt,name=duedate,proto3" json:"duedate,omitempty"`
	Pymtrmid                string                                   `protobuf:"bytes,24,opt,name=pymtrmid,proto3" json:"pymtrmid,omitempty"`
	PrStatus                int32                                    `protobuf:"varint,25,opt,name=pr_status,json=prStatus,proto3" json:"pr_status,omitempty"`
}

func (x *CreatePurchaseOrderGPRequest) Reset() {
	*x = CreatePurchaseOrderGPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePurchaseOrderGPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePurchaseOrderGPRequest) ProtoMessage() {}

func (x *CreatePurchaseOrderGPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePurchaseOrderGPRequest.ProtoReflect.Descriptor instead.
func (*CreatePurchaseOrderGPRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{397}
}

func (x *CreatePurchaseOrderGPRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *CreatePurchaseOrderGPRequest) GetPotype() int32 {
	if x != nil {
		return x.Potype
	}
	return 0
}

func (x *CreatePurchaseOrderGPRequest) GetPonumber() string {
	if x != nil {
		return x.Ponumber
	}
	return ""
}

func (x *CreatePurchaseOrderGPRequest) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *CreatePurchaseOrderGPRequest) GetBuyerid() string {
	if x != nil {
		return x.Buyerid
	}
	return ""
}

func (x *CreatePurchaseOrderGPRequest) GetVendorid() string {
	if x != nil {
		return x.Vendorid
	}
	return ""
}

func (x *CreatePurchaseOrderGPRequest) GetCurncyid() string {
	if x != nil {
		return x.Curncyid
	}
	return ""
}

func (x *CreatePurchaseOrderGPRequest) GetDeprtmnt() string {
	if x != nil {
		return x.Deprtmnt
	}
	return ""
}

func (x *CreatePurchaseOrderGPRequest) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *CreatePurchaseOrderGPRequest) GetTaxschid() string {
	if x != nil {
		return x.Taxschid
	}
	return ""
}

func (x *CreatePurchaseOrderGPRequest) GetSubtotal() float64 {
	if x != nil {
		return x.Subtotal
	}
	return 0
}

func (x *CreatePurchaseOrderGPRequest) GetTrdisamt() float64 {
	if x != nil {
		return x.Trdisamt
	}
	return 0
}

func (x *CreatePurchaseOrderGPRequest) GetFrtamnt() float64 {
	if x != nil {
		return x.Frtamnt
	}
	return 0
}

func (x *CreatePurchaseOrderGPRequest) GetMiscamnt() float64 {
	if x != nil {
		return x.Miscamnt
	}
	return 0
}

func (x *CreatePurchaseOrderGPRequest) GetTaxamnt() float64 {
	if x != nil {
		return x.Taxamnt
	}
	return 0
}

func (x *CreatePurchaseOrderGPRequest) GetPrpPurchaseplanNo() string {
	if x != nil {
		return x.PrpPurchaseplanNo
	}
	return ""
}

func (x *CreatePurchaseOrderGPRequest) GetCsReference() *CreatePurchaseOrderGPRequestCsReference {
	if x != nil {
		return x.CsReference
	}
	return nil
}

func (x *CreatePurchaseOrderGPRequest) GetPrpPaymentMethod() string {
	if x != nil {
		return x.PrpPaymentMethod
	}
	return ""
}

func (x *CreatePurchaseOrderGPRequest) GetPrpRegion() string {
	if x != nil {
		return x.PrpRegion
	}
	return ""
}

func (x *CreatePurchaseOrderGPRequest) GetPrpEstimatedarrivalDate() string {
	if x != nil {
		return x.PrpEstimatedarrivalDate
	}
	return ""
}

func (x *CreatePurchaseOrderGPRequest) GetNotetext() string {
	if x != nil {
		return x.Notetext
	}
	return ""
}

func (x *CreatePurchaseOrderGPRequest) GetDetail() []*CreatePurchaseOrderGPRequest_Podtl {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *CreatePurchaseOrderGPRequest) GetDuedate() string {
	if x != nil {
		return x.Duedate
	}
	return ""
}

func (x *CreatePurchaseOrderGPRequest) GetPymtrmid() string {
	if x != nil {
		return x.Pymtrmid
	}
	return ""
}

func (x *CreatePurchaseOrderGPRequest) GetPrStatus() int32 {
	if x != nil {
		return x.PrStatus
	}
	return 0
}

type UpdatePurchaseOrderGPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid                 string                                   `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Potype                  int32                                    `protobuf:"varint,2,opt,name=potype,proto3" json:"potype,omitempty"`
	Ponumber                string                                   `protobuf:"bytes,3,opt,name=ponumber,proto3" json:"ponumber,omitempty"`
	Docdate                 string                                   `protobuf:"bytes,4,opt,name=docdate,proto3" json:"docdate,omitempty"`
	Buyerid                 string                                   `protobuf:"bytes,5,opt,name=buyerid,proto3" json:"buyerid,omitempty"`
	Vendorid                string                                   `protobuf:"bytes,6,opt,name=vendorid,proto3" json:"vendorid,omitempty"`
	Curncyid                string                                   `protobuf:"bytes,7,opt,name=curncyid,proto3" json:"curncyid,omitempty"`
	Deprtmnt                string                                   `protobuf:"bytes,8,opt,name=deprtmnt,proto3" json:"deprtmnt,omitempty"`
	Locncode                string                                   `protobuf:"bytes,9,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Taxschid                string                                   `protobuf:"bytes,10,opt,name=taxschid,proto3" json:"taxschid,omitempty"`
	Subtotal                float64                                  `protobuf:"fixed64,11,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	Trdisamt                float64                                  `protobuf:"fixed64,12,opt,name=trdisamt,proto3" json:"trdisamt,omitempty"`
	Frtamnt                 float64                                  `protobuf:"fixed64,13,opt,name=frtamnt,proto3" json:"frtamnt,omitempty"`
	Miscamnt                float64                                  `protobuf:"fixed64,14,opt,name=miscamnt,proto3" json:"miscamnt,omitempty"`
	Taxamnt                 float64                                  `protobuf:"fixed64,15,opt,name=taxamnt,proto3" json:"taxamnt,omitempty"`
	PrpPurchaseplanNo       string                                   `protobuf:"bytes,16,opt,name=prp_purchaseplan_no,json=prpPurchaseplanNo,proto3" json:"prp_purchaseplan_no,omitempty"`
	CsReference             *UpdatePurchaseOrderGPRequestCsReference `protobuf:"bytes,17,opt,name=cs_reference,json=csReference,proto3" json:"cs_reference,omitempty"`
	PrpPaymentMethod        string                                   `protobuf:"bytes,18,opt,name=prp_payment_method,json=prpPaymentMethod,proto3" json:"prp_payment_method,omitempty"`
	PrpRegion               string                                   `protobuf:"bytes,19,opt,name=prp_region,json=prpRegion,proto3" json:"prp_region,omitempty"`
	PrpEstimatedarrivalDate string                                   `protobuf:"bytes,20,opt,name=prp_estimatedarrival_date,json=prpEstimatedarrivalDate,proto3" json:"prp_estimatedarrival_date,omitempty"`
	Notetext                string                                   `protobuf:"bytes,21,opt,name=notetext,proto3" json:"notetext,omitempty"`
	Pymtrmid                string                                   `protobuf:"bytes,22,opt,name=pymtrmid,proto3" json:"pymtrmid,omitempty"`
	Duedate                 string                                   `protobuf:"bytes,23,opt,name=duedate,proto3" json:"duedate,omitempty"`
	Detail                  []*UpdatePurchaseOrderGPRequest_Podtl    `protobuf:"bytes,24,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *UpdatePurchaseOrderGPRequest) Reset() {
	*x = UpdatePurchaseOrderGPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePurchaseOrderGPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePurchaseOrderGPRequest) ProtoMessage() {}

func (x *UpdatePurchaseOrderGPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePurchaseOrderGPRequest.ProtoReflect.Descriptor instead.
func (*UpdatePurchaseOrderGPRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{398}
}

func (x *UpdatePurchaseOrderGPRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *UpdatePurchaseOrderGPRequest) GetPotype() int32 {
	if x != nil {
		return x.Potype
	}
	return 0
}

func (x *UpdatePurchaseOrderGPRequest) GetPonumber() string {
	if x != nil {
		return x.Ponumber
	}
	return ""
}

func (x *UpdatePurchaseOrderGPRequest) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *UpdatePurchaseOrderGPRequest) GetBuyerid() string {
	if x != nil {
		return x.Buyerid
	}
	return ""
}

func (x *UpdatePurchaseOrderGPRequest) GetVendorid() string {
	if x != nil {
		return x.Vendorid
	}
	return ""
}

func (x *UpdatePurchaseOrderGPRequest) GetCurncyid() string {
	if x != nil {
		return x.Curncyid
	}
	return ""
}

func (x *UpdatePurchaseOrderGPRequest) GetDeprtmnt() string {
	if x != nil {
		return x.Deprtmnt
	}
	return ""
}

func (x *UpdatePurchaseOrderGPRequest) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *UpdatePurchaseOrderGPRequest) GetTaxschid() string {
	if x != nil {
		return x.Taxschid
	}
	return ""
}

func (x *UpdatePurchaseOrderGPRequest) GetSubtotal() float64 {
	if x != nil {
		return x.Subtotal
	}
	return 0
}

func (x *UpdatePurchaseOrderGPRequest) GetTrdisamt() float64 {
	if x != nil {
		return x.Trdisamt
	}
	return 0
}

func (x *UpdatePurchaseOrderGPRequest) GetFrtamnt() float64 {
	if x != nil {
		return x.Frtamnt
	}
	return 0
}

func (x *UpdatePurchaseOrderGPRequest) GetMiscamnt() float64 {
	if x != nil {
		return x.Miscamnt
	}
	return 0
}

func (x *UpdatePurchaseOrderGPRequest) GetTaxamnt() float64 {
	if x != nil {
		return x.Taxamnt
	}
	return 0
}

func (x *UpdatePurchaseOrderGPRequest) GetPrpPurchaseplanNo() string {
	if x != nil {
		return x.PrpPurchaseplanNo
	}
	return ""
}

func (x *UpdatePurchaseOrderGPRequest) GetCsReference() *UpdatePurchaseOrderGPRequestCsReference {
	if x != nil {
		return x.CsReference
	}
	return nil
}

func (x *UpdatePurchaseOrderGPRequest) GetPrpPaymentMethod() string {
	if x != nil {
		return x.PrpPaymentMethod
	}
	return ""
}

func (x *UpdatePurchaseOrderGPRequest) GetPrpRegion() string {
	if x != nil {
		return x.PrpRegion
	}
	return ""
}

func (x *UpdatePurchaseOrderGPRequest) GetPrpEstimatedarrivalDate() string {
	if x != nil {
		return x.PrpEstimatedarrivalDate
	}
	return ""
}

func (x *UpdatePurchaseOrderGPRequest) GetNotetext() string {
	if x != nil {
		return x.Notetext
	}
	return ""
}

func (x *UpdatePurchaseOrderGPRequest) GetPymtrmid() string {
	if x != nil {
		return x.Pymtrmid
	}
	return ""
}

func (x *UpdatePurchaseOrderGPRequest) GetDuedate() string {
	if x != nil {
		return x.Duedate
	}
	return ""
}

func (x *UpdatePurchaseOrderGPRequest) GetDetail() []*UpdatePurchaseOrderGPRequest_Podtl {
	if x != nil {
		return x.Detail
	}
	return nil
}

type CreateConsolidatedShipmentGPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid         string                               `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	PrpCsNo         string                               `protobuf:"bytes,2,opt,name=prp_cs_no,json=prpCsNo,proto3" json:"prp_cs_no,omitempty"`
	PrpDriverName   string                               `protobuf:"bytes,3,opt,name=prp_driver_name,json=prpDriverName,proto3" json:"prp_driver_name,omitempty"`
	PrVehicleNumber string                               `protobuf:"bytes,4,opt,name=pr_vehicle_number,json=prVehicleNumber,proto3" json:"pr_vehicle_number,omitempty"`
	Phonname        string                               `protobuf:"bytes,5,opt,name=phonname,proto3" json:"phonname,omitempty"`
	PurchaseOrder   []*PurchaseOrderConsolidatedShipment `protobuf:"bytes,6,rep,name=purchase_order,json=purchaseOrder,proto3" json:"purchase_order,omitempty"`
}

func (x *CreateConsolidatedShipmentGPRequest) Reset() {
	*x = CreateConsolidatedShipmentGPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConsolidatedShipmentGPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConsolidatedShipmentGPRequest) ProtoMessage() {}

func (x *CreateConsolidatedShipmentGPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConsolidatedShipmentGPRequest.ProtoReflect.Descriptor instead.
func (*CreateConsolidatedShipmentGPRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{399}
}

func (x *CreateConsolidatedShipmentGPRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *CreateConsolidatedShipmentGPRequest) GetPrpCsNo() string {
	if x != nil {
		return x.PrpCsNo
	}
	return ""
}

func (x *CreateConsolidatedShipmentGPRequest) GetPrpDriverName() string {
	if x != nil {
		return x.PrpDriverName
	}
	return ""
}

func (x *CreateConsolidatedShipmentGPRequest) GetPrVehicleNumber() string {
	if x != nil {
		return x.PrVehicleNumber
	}
	return ""
}

func (x *CreateConsolidatedShipmentGPRequest) GetPhonname() string {
	if x != nil {
		return x.Phonname
	}
	return ""
}

func (x *CreateConsolidatedShipmentGPRequest) GetPurchaseOrder() []*PurchaseOrderConsolidatedShipment {
	if x != nil {
		return x.PurchaseOrder
	}
	return nil
}

type CreateConsolidatedShipmentGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateConsolidatedShipmentGPResponse) Reset() {
	*x = CreateConsolidatedShipmentGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConsolidatedShipmentGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConsolidatedShipmentGPResponse) ProtoMessage() {}

func (x *CreateConsolidatedShipmentGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConsolidatedShipmentGPResponse.ProtoReflect.Descriptor instead.
func (*CreateConsolidatedShipmentGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{400}
}

func (x *CreateConsolidatedShipmentGPResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateConsolidatedShipmentGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PurchaseOrderConsolidatedShipment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ponumber string `protobuf:"bytes,1,opt,name=ponumber,proto3" json:"ponumber,omitempty"`
}

func (x *PurchaseOrderConsolidatedShipment) Reset() {
	*x = PurchaseOrderConsolidatedShipment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseOrderConsolidatedShipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseOrderConsolidatedShipment) ProtoMessage() {}

func (x *PurchaseOrderConsolidatedShipment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseOrderConsolidatedShipment.ProtoReflect.Descriptor instead.
func (*PurchaseOrderConsolidatedShipment) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{401}
}

func (x *PurchaseOrderConsolidatedShipment) GetPonumber() string {
	if x != nil {
		return x.Ponumber
	}
	return ""
}

type UpdateConsolidatedShipmentGPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid         string                               `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	PrpCsNo         string                               `protobuf:"bytes,2,opt,name=prp_cs_no,json=prpCsNo,proto3" json:"prp_cs_no,omitempty"`
	PrpDriverName   string                               `protobuf:"bytes,3,opt,name=prp_driver_name,json=prpDriverName,proto3" json:"prp_driver_name,omitempty"`
	PrVehicleNumber string                               `protobuf:"bytes,4,opt,name=pr_vehicle_number,json=prVehicleNumber,proto3" json:"pr_vehicle_number,omitempty"`
	Phonname        string                               `protobuf:"bytes,5,opt,name=phonname,proto3" json:"phonname,omitempty"`
	PurchaseOrder   []*PurchaseOrderConsolidatedShipment `protobuf:"bytes,6,rep,name=purchase_order,json=purchaseOrder,proto3" json:"purchase_order,omitempty"`
}

func (x *UpdateConsolidatedShipmentGPRequest) Reset() {
	*x = UpdateConsolidatedShipmentGPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConsolidatedShipmentGPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConsolidatedShipmentGPRequest) ProtoMessage() {}

func (x *UpdateConsolidatedShipmentGPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConsolidatedShipmentGPRequest.ProtoReflect.Descriptor instead.
func (*UpdateConsolidatedShipmentGPRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{402}
}

func (x *UpdateConsolidatedShipmentGPRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *UpdateConsolidatedShipmentGPRequest) GetPrpCsNo() string {
	if x != nil {
		return x.PrpCsNo
	}
	return ""
}

func (x *UpdateConsolidatedShipmentGPRequest) GetPrpDriverName() string {
	if x != nil {
		return x.PrpDriverName
	}
	return ""
}

func (x *UpdateConsolidatedShipmentGPRequest) GetPrVehicleNumber() string {
	if x != nil {
		return x.PrVehicleNumber
	}
	return ""
}

func (x *UpdateConsolidatedShipmentGPRequest) GetPhonname() string {
	if x != nil {
		return x.Phonname
	}
	return ""
}

func (x *UpdateConsolidatedShipmentGPRequest) GetPurchaseOrder() []*PurchaseOrderConsolidatedShipment {
	if x != nil {
		return x.PurchaseOrder
	}
	return nil
}

type UpdateConsolidatedShipmentGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateConsolidatedShipmentGPResponse) Reset() {
	*x = UpdateConsolidatedShipmentGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConsolidatedShipmentGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConsolidatedShipmentGPResponse) ProtoMessage() {}

func (x *UpdateConsolidatedShipmentGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConsolidatedShipmentGPResponse.ProtoReflect.Descriptor instead.
func (*UpdateConsolidatedShipmentGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{403}
}

func (x *UpdateConsolidatedShipmentGPResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateConsolidatedShipmentGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CommonGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CommonGPResponse) Reset() {
	*x = CommonGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonGPResponse) ProtoMessage() {}

func (x *CommonGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonGPResponse.ProtoReflect.Descriptor instead.
func (*CommonGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{404}
}

func (x *CommonGPResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CommonGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SalesInvoiceGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sopnumbe        string                        `protobuf:"bytes,1,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"`
	Soptype         int32                         `protobuf:"varint,2,opt,name=soptype,proto3" json:"soptype,omitempty"`
	SoptypeDesc     string                        `protobuf:"bytes,3,opt,name=soptype_desc,json=soptypeDesc,proto3" json:"soptype_desc,omitempty"`
	Docid           string                        `protobuf:"bytes,4,opt,name=docid,proto3" json:"docid,omitempty"`
	Custnmbr        string                        `protobuf:"bytes,5,opt,name=custnmbr,proto3" json:"custnmbr,omitempty"`
	Custname        string                        `protobuf:"bytes,6,opt,name=custname,proto3" json:"custname,omitempty"`
	Prstadcd        string                        `protobuf:"bytes,7,opt,name=prstadcd,proto3" json:"prstadcd,omitempty"`
	Address         string                        `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`
	Sopstatus       int32                         `protobuf:"varint,9,opt,name=sopstatus,proto3" json:"sopstatus,omitempty"`
	SopstatusDesc   string                        `protobuf:"bytes,10,opt,name=sopstatus_desc,json=sopstatusDesc,proto3" json:"sopstatus_desc,omitempty"`
	Locncode        string                        `protobuf:"bytes,11,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Cstponbr        string                        `protobuf:"bytes,12,opt,name=cstponbr,proto3" json:"cstponbr,omitempty"`
	Curncyid        string                        `protobuf:"bytes,13,opt,name=curncyid,proto3" json:"curncyid,omitempty"`
	Docdate         string                        `protobuf:"bytes,14,opt,name=docdate,proto3" json:"docdate,omitempty"`
	Duedate         string                        `protobuf:"bytes,15,opt,name=duedate,proto3" json:"duedate,omitempty"`
	Ordocamt        float64                       `protobuf:"fixed64,16,opt,name=ordocamt,proto3" json:"ordocamt,omitempty"`
	RemainingAmount float64                       `protobuf:"fixed64,17,opt,name=remaining_amount,json=remainingAmount,proto3" json:"remaining_amount,omitempty"`
	CashReceipt     []*SalesInvoiceGP_CashReceipt `protobuf:"bytes,18,rep,name=cash_receipt,json=cashReceipt,proto3" json:"cash_receipt,omitempty"`
	SalesOrder      []*SalesInvoiceGP_SalesOrder  `protobuf:"bytes,19,rep,name=sales_order,json=salesOrder,proto3" json:"sales_order,omitempty"`
	SopNumber       string                        `protobuf:"bytes,20,opt,name=sop_number,json=sopNumber,proto3" json:"sop_number,omitempty"`
	Details         []*SalesInvoiceGP_Detail      `protobuf:"bytes,21,rep,name=details,proto3" json:"details,omitempty"`
	Orpmtrvd        float64                       `protobuf:"fixed64,22,opt,name=orpmtrvd,proto3" json:"orpmtrvd,omitempty"`
	Comntid         string                        `protobuf:"bytes,23,opt,name=comntid,proto3" json:"comntid,omitempty"`
	Subtotal        float64                       `protobuf:"fixed64,24,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	Trdisamt        float64                       `protobuf:"fixed64,25,opt,name=trdisamt,proto3" json:"trdisamt,omitempty"`
	Frtamnt         float64                       `protobuf:"fixed64,26,opt,name=frtamnt,proto3" json:"frtamnt,omitempty"`
	Miscamnt        float64                       `protobuf:"fixed64,27,opt,name=miscamnt,proto3" json:"miscamnt,omitempty"`
	Taxamnt         float64                       `protobuf:"fixed64,28,opt,name=taxamnt,proto3" json:"taxamnt,omitempty"`
	Orignumb        string                        `protobuf:"bytes,29,opt,name=orignumb,proto3" json:"orignumb,omitempty"`
	CrNumber        string                        `protobuf:"bytes,30,opt,name=cr_number,json=crNumber,proto3" json:"cr_number,omitempty"`
	DataAttachment  *DocumentAttachment           `protobuf:"bytes,31,opt,name=dataAttachment,proto3" json:"dataAttachment,omitempty"`
}

func (x *SalesInvoiceGP) Reset() {
	*x = SalesInvoiceGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesInvoiceGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesInvoiceGP) ProtoMessage() {}

func (x *SalesInvoiceGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesInvoiceGP.ProtoReflect.Descriptor instead.
func (*SalesInvoiceGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{405}
}

func (x *SalesInvoiceGP) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

func (x *SalesInvoiceGP) GetSoptype() int32 {
	if x != nil {
		return x.Soptype
	}
	return 0
}

func (x *SalesInvoiceGP) GetSoptypeDesc() string {
	if x != nil {
		return x.SoptypeDesc
	}
	return ""
}

func (x *SalesInvoiceGP) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *SalesInvoiceGP) GetCustnmbr() string {
	if x != nil {
		return x.Custnmbr
	}
	return ""
}

func (x *SalesInvoiceGP) GetCustname() string {
	if x != nil {
		return x.Custname
	}
	return ""
}

func (x *SalesInvoiceGP) GetPrstadcd() string {
	if x != nil {
		return x.Prstadcd
	}
	return ""
}

func (x *SalesInvoiceGP) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SalesInvoiceGP) GetSopstatus() int32 {
	if x != nil {
		return x.Sopstatus
	}
	return 0
}

func (x *SalesInvoiceGP) GetSopstatusDesc() string {
	if x != nil {
		return x.SopstatusDesc
	}
	return ""
}

func (x *SalesInvoiceGP) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *SalesInvoiceGP) GetCstponbr() string {
	if x != nil {
		return x.Cstponbr
	}
	return ""
}

func (x *SalesInvoiceGP) GetCurncyid() string {
	if x != nil {
		return x.Curncyid
	}
	return ""
}

func (x *SalesInvoiceGP) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *SalesInvoiceGP) GetDuedate() string {
	if x != nil {
		return x.Duedate
	}
	return ""
}

func (x *SalesInvoiceGP) GetOrdocamt() float64 {
	if x != nil {
		return x.Ordocamt
	}
	return 0
}

func (x *SalesInvoiceGP) GetRemainingAmount() float64 {
	if x != nil {
		return x.RemainingAmount
	}
	return 0
}

func (x *SalesInvoiceGP) GetCashReceipt() []*SalesInvoiceGP_CashReceipt {
	if x != nil {
		return x.CashReceipt
	}
	return nil
}

func (x *SalesInvoiceGP) GetSalesOrder() []*SalesInvoiceGP_SalesOrder {
	if x != nil {
		return x.SalesOrder
	}
	return nil
}

func (x *SalesInvoiceGP) GetSopNumber() string {
	if x != nil {
		return x.SopNumber
	}
	return ""
}

func (x *SalesInvoiceGP) GetDetails() []*SalesInvoiceGP_Detail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *SalesInvoiceGP) GetOrpmtrvd() float64 {
	if x != nil {
		return x.Orpmtrvd
	}
	return 0
}

func (x *SalesInvoiceGP) GetComntid() string {
	if x != nil {
		return x.Comntid
	}
	return ""
}

func (x *SalesInvoiceGP) GetSubtotal() float64 {
	if x != nil {
		return x.Subtotal
	}
	return 0
}

func (x *SalesInvoiceGP) GetTrdisamt() float64 {
	if x != nil {
		return x.Trdisamt
	}
	return 0
}

func (x *SalesInvoiceGP) GetFrtamnt() float64 {
	if x != nil {
		return x.Frtamnt
	}
	return 0
}

func (x *SalesInvoiceGP) GetMiscamnt() float64 {
	if x != nil {
		return x.Miscamnt
	}
	return 0
}

func (x *SalesInvoiceGP) GetTaxamnt() float64 {
	if x != nil {
		return x.Taxamnt
	}
	return 0
}

func (x *SalesInvoiceGP) GetOrignumb() string {
	if x != nil {
		return x.Orignumb
	}
	return ""
}

func (x *SalesInvoiceGP) GetCrNumber() string {
	if x != nil {
		return x.CrNumber
	}
	return ""
}

func (x *SalesInvoiceGP) GetDataAttachment() *DocumentAttachment {
	if x != nil {
		return x.DataAttachment
	}
	return nil
}

type GetSalesInvoiceGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit               int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset              int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Custnumber          string `protobuf:"bytes,3,opt,name=custnumber,proto3" json:"custnumber,omitempty"`
	SiNumber            string `protobuf:"bytes,4,opt,name=si_number,json=siNumber,proto3" json:"si_number,omitempty"`
	Custname            string `protobuf:"bytes,5,opt,name=custname,proto3" json:"custname,omitempty"`
	Region              string `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	OrderChannel        string `protobuf:"bytes,7,opt,name=order_channel,json=orderChannel,proto3" json:"order_channel,omitempty"`
	SoCodeApps          string `protobuf:"bytes,8,opt,name=so_code_apps,json=soCodeApps,proto3" json:"so_code_apps,omitempty"`
	WrtId               string `protobuf:"bytes,9,opt,name=wrt_id,json=wrtId,proto3" json:"wrt_id,omitempty"`
	Locncode            string `protobuf:"bytes,10,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Ordertype           string `protobuf:"bytes,11,opt,name=ordertype,proto3" json:"ordertype,omitempty"`
	SalespersonId       string `protobuf:"bytes,12,opt,name=salesperson_id,json=salespersonId,proto3" json:"salesperson_id,omitempty"`
	Status              string `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	SoDocdateFrom       string `protobuf:"bytes,14,opt,name=so_docdate_from,json=soDocdateFrom,proto3" json:"so_docdate_from,omitempty"`
	SoDocdateTo         string `protobuf:"bytes,15,opt,name=so_docdate_to,json=soDocdateTo,proto3" json:"so_docdate_to,omitempty"`
	DocdateFrom         string `protobuf:"bytes,16,opt,name=docdate_from,json=docdateFrom,proto3" json:"docdate_from,omitempty"`
	DocdateTo           string `protobuf:"bytes,17,opt,name=docdate_to,json=docdateTo,proto3" json:"docdate_to,omitempty"`
	SoNumber            string `protobuf:"bytes,18,opt,name=so_number,json=soNumber,proto3" json:"so_number,omitempty"`
	OrderBy             string `protobuf:"bytes,19,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	GnlCustTypeId       string `protobuf:"bytes,20,opt,name=gnl_cust_type_id,json=gnlCustTypeId,proto3" json:"gnl_cust_type_id,omitempty"`
	RemainingAmountFlag string `protobuf:"bytes,21,opt,name=remaining_amount_flag,json=remainingAmountFlag,proto3" json:"remaining_amount_flag,omitempty"`
	DeltaUser           string `protobuf:"bytes,22,opt,name=delta_user,json=deltaUser,proto3" json:"delta_user,omitempty"`
	Orignumbr           string `protobuf:"bytes,23,opt,name=orignumbr,proto3" json:"orignumbr,omitempty"`
}

func (x *GetSalesInvoiceGPListRequest) Reset() {
	*x = GetSalesInvoiceGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesInvoiceGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesInvoiceGPListRequest) ProtoMessage() {}

func (x *GetSalesInvoiceGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesInvoiceGPListRequest.ProtoReflect.Descriptor instead.
func (*GetSalesInvoiceGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{406}
}

func (x *GetSalesInvoiceGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSalesInvoiceGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSalesInvoiceGPListRequest) GetCustnumber() string {
	if x != nil {
		return x.Custnumber
	}
	return ""
}

func (x *GetSalesInvoiceGPListRequest) GetSiNumber() string {
	if x != nil {
		return x.SiNumber
	}
	return ""
}

func (x *GetSalesInvoiceGPListRequest) GetCustname() string {
	if x != nil {
		return x.Custname
	}
	return ""
}

func (x *GetSalesInvoiceGPListRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetSalesInvoiceGPListRequest) GetOrderChannel() string {
	if x != nil {
		return x.OrderChannel
	}
	return ""
}

func (x *GetSalesInvoiceGPListRequest) GetSoCodeApps() string {
	if x != nil {
		return x.SoCodeApps
	}
	return ""
}

func (x *GetSalesInvoiceGPListRequest) GetWrtId() string {
	if x != nil {
		return x.WrtId
	}
	return ""
}

func (x *GetSalesInvoiceGPListRequest) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *GetSalesInvoiceGPListRequest) GetOrdertype() string {
	if x != nil {
		return x.Ordertype
	}
	return ""
}

func (x *GetSalesInvoiceGPListRequest) GetSalespersonId() string {
	if x != nil {
		return x.SalespersonId
	}
	return ""
}

func (x *GetSalesInvoiceGPListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetSalesInvoiceGPListRequest) GetSoDocdateFrom() string {
	if x != nil {
		return x.SoDocdateFrom
	}
	return ""
}

func (x *GetSalesInvoiceGPListRequest) GetSoDocdateTo() string {
	if x != nil {
		return x.SoDocdateTo
	}
	return ""
}

func (x *GetSalesInvoiceGPListRequest) GetDocdateFrom() string {
	if x != nil {
		return x.DocdateFrom
	}
	return ""
}

func (x *GetSalesInvoiceGPListRequest) GetDocdateTo() string {
	if x != nil {
		return x.DocdateTo
	}
	return ""
}

func (x *GetSalesInvoiceGPListRequest) GetSoNumber() string {
	if x != nil {
		return x.SoNumber
	}
	return ""
}

func (x *GetSalesInvoiceGPListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetSalesInvoiceGPListRequest) GetGnlCustTypeId() string {
	if x != nil {
		return x.GnlCustTypeId
	}
	return ""
}

func (x *GetSalesInvoiceGPListRequest) GetRemainingAmountFlag() string {
	if x != nil {
		return x.RemainingAmountFlag
	}
	return ""
}

func (x *GetSalesInvoiceGPListRequest) GetDeltaUser() string {
	if x != nil {
		return x.DeltaUser
	}
	return ""
}

func (x *GetSalesInvoiceGPListRequest) GetOrignumbr() string {
	if x != nil {
		return x.Orignumbr
	}
	return ""
}

type GetSalesInvoiceGPListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32             `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32             `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32             `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32             `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*SalesInvoiceGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool              `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string          `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string            `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetSalesInvoiceGPListResponse) Reset() {
	*x = GetSalesInvoiceGPListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesInvoiceGPListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesInvoiceGPListResponse) ProtoMessage() {}

func (x *GetSalesInvoiceGPListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesInvoiceGPListResponse.ProtoReflect.Descriptor instead.
func (*GetSalesInvoiceGPListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{407}
}

func (x *GetSalesInvoiceGPListResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetSalesInvoiceGPListResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetSalesInvoiceGPListResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetSalesInvoiceGPListResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetSalesInvoiceGPListResponse) GetData() []*SalesInvoiceGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetSalesInvoiceGPListResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetSalesInvoiceGPListResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetSalesInvoiceGPListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetSalesInvoiceGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid string `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSalesInvoiceGPDetailRequest) Reset() {
	*x = GetSalesInvoiceGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesInvoiceGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesInvoiceGPDetailRequest) ProtoMessage() {}

func (x *GetSalesInvoiceGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesInvoiceGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetSalesInvoiceGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{408}
}

func (x *GetSalesInvoiceGPDetailRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *GetSalesInvoiceGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSalesInvoiceGPDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32             `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32             `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32             `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32             `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*SalesInvoiceGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool              `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string          `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string            `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetSalesInvoiceGPDetailResponse) Reset() {
	*x = GetSalesInvoiceGPDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesInvoiceGPDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesInvoiceGPDetailResponse) ProtoMessage() {}

func (x *GetSalesInvoiceGPDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesInvoiceGPDetailResponse.ProtoReflect.Descriptor instead.
func (*GetSalesInvoiceGPDetailResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{409}
}

func (x *GetSalesInvoiceGPDetailResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetSalesInvoiceGPDetailResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetSalesInvoiceGPDetailResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetSalesInvoiceGPDetailResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetSalesInvoiceGPDetailResponse) GetData() []*SalesInvoiceGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetSalesInvoiceGPDetailResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetSalesInvoiceGPDetailResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetSalesInvoiceGPDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetInTransitTransferGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit       int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset      int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Orddocid    string `protobuf:"bytes,3,opt,name=orddocid,proto3" json:"orddocid,omitempty"`
	IvmTrType   string `protobuf:"bytes,4,opt,name=ivm_tr_type,json=ivmTrType,proto3" json:"ivm_tr_type,omitempty"`
	Ordrdate    string `protobuf:"bytes,5,opt,name=ordrdate,proto3" json:"ordrdate,omitempty"`
	Trnsfloc    string `protobuf:"bytes,6,opt,name=trnsfloc,proto3" json:"trnsfloc,omitempty"`
	Locncode    string `protobuf:"bytes,7,opt,name=locncode,proto3" json:"locncode,omitempty"`
	RequestDate string `protobuf:"bytes,8,opt,name=request_date,json=requestDate,proto3" json:"request_date,omitempty"`
	Etadte      string `protobuf:"bytes,9,opt,name=etadte,proto3" json:"etadte,omitempty"`
	Status      int32  `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetInTransitTransferGPListRequest) Reset() {
	*x = GetInTransitTransferGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInTransitTransferGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInTransitTransferGPListRequest) ProtoMessage() {}

func (x *GetInTransitTransferGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInTransitTransferGPListRequest.ProtoReflect.Descriptor instead.
func (*GetInTransitTransferGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{410}
}

func (x *GetInTransitTransferGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetInTransitTransferGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetInTransitTransferGPListRequest) GetOrddocid() string {
	if x != nil {
		return x.Orddocid
	}
	return ""
}

func (x *GetInTransitTransferGPListRequest) GetIvmTrType() string {
	if x != nil {
		return x.IvmTrType
	}
	return ""
}

func (x *GetInTransitTransferGPListRequest) GetOrdrdate() string {
	if x != nil {
		return x.Ordrdate
	}
	return ""
}

func (x *GetInTransitTransferGPListRequest) GetTrnsfloc() string {
	if x != nil {
		return x.Trnsfloc
	}
	return ""
}

func (x *GetInTransitTransferGPListRequest) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *GetInTransitTransferGPListRequest) GetRequestDate() string {
	if x != nil {
		return x.RequestDate
	}
	return ""
}

func (x *GetInTransitTransferGPListRequest) GetEtadte() string {
	if x != nil {
		return x.Etadte
	}
	return ""
}

func (x *GetInTransitTransferGPListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type GetInTransitTransferGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetInTransitTransferGPDetailRequest) Reset() {
	*x = GetInTransitTransferGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInTransitTransferGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInTransitTransferGPDetailRequest) ProtoMessage() {}

func (x *GetInTransitTransferGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInTransitTransferGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetInTransitTransferGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{411}
}

func (x *GetInTransitTransferGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type InTransitTransferDetailGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemnmbr          string  `protobuf:"bytes,1,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	ReasonCode        string  `protobuf:"bytes,2,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	Uofm              string  `protobuf:"bytes,3,opt,name=uofm,proto3" json:"uofm,omitempty"`
	Trnsfqty          float64 `protobuf:"fixed64,4,opt,name=trnsfqty,proto3" json:"trnsfqty,omitempty"`
	Qtyfulfi          float64 `protobuf:"fixed64,5,opt,name=qtyfulfi,proto3" json:"qtyfulfi,omitempty"`
	Qtyshppd          float64 `protobuf:"fixed64,6,opt,name=qtyshppd,proto3" json:"qtyshppd,omitempty"`
	LandedCostGroupId string  `protobuf:"bytes,7,opt,name=landed_cost_group_id,json=landedCostGroupId,proto3" json:"landed_cost_group_id,omitempty"`
	Trnsfloc          string  `protobuf:"bytes,8,opt,name=trnsfloc,proto3" json:"trnsfloc,omitempty"`
	Itlocn            string  `protobuf:"bytes,9,opt,name=itlocn,proto3" json:"itlocn,omitempty"`
	Trnstloc          string  `protobuf:"bytes,10,opt,name=trnstloc,proto3" json:"trnstloc,omitempty"`
}

func (x *InTransitTransferDetailGP) Reset() {
	*x = InTransitTransferDetailGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InTransitTransferDetailGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InTransitTransferDetailGP) ProtoMessage() {}

func (x *InTransitTransferDetailGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InTransitTransferDetailGP.ProtoReflect.Descriptor instead.
func (*InTransitTransferDetailGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{412}
}

func (x *InTransitTransferDetailGP) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *InTransitTransferDetailGP) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

func (x *InTransitTransferDetailGP) GetUofm() string {
	if x != nil {
		return x.Uofm
	}
	return ""
}

func (x *InTransitTransferDetailGP) GetTrnsfqty() float64 {
	if x != nil {
		return x.Trnsfqty
	}
	return 0
}

func (x *InTransitTransferDetailGP) GetQtyfulfi() float64 {
	if x != nil {
		return x.Qtyfulfi
	}
	return 0
}

func (x *InTransitTransferDetailGP) GetQtyshppd() float64 {
	if x != nil {
		return x.Qtyshppd
	}
	return 0
}

func (x *InTransitTransferDetailGP) GetLandedCostGroupId() string {
	if x != nil {
		return x.LandedCostGroupId
	}
	return ""
}

func (x *InTransitTransferDetailGP) GetTrnsfloc() string {
	if x != nil {
		return x.Trnsfloc
	}
	return ""
}

func (x *InTransitTransferDetailGP) GetItlocn() string {
	if x != nil {
		return x.Itlocn
	}
	return ""
}

func (x *InTransitTransferDetailGP) GetTrnstloc() string {
	if x != nil {
		return x.Trnstloc
	}
	return ""
}

type InTransitTransferGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docnumbr    string              `protobuf:"bytes,1,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	Orddocid    string              `protobuf:"bytes,2,opt,name=orddocid,proto3" json:"orddocid,omitempty"`
	Ordrdate    string              `protobuf:"bytes,3,opt,name=ordrdate,proto3" json:"ordrdate,omitempty"`
	Etadte      string              `protobuf:"bytes,4,opt,name=etadte,proto3" json:"etadte,omitempty"`
	Etatime     string              `protobuf:"bytes,5,opt,name=etatime,proto3" json:"etatime,omitempty"`
	Techid      string              `protobuf:"bytes,6,opt,name=techid,proto3" json:"techid,omitempty"`
	Offid       string              `protobuf:"bytes,7,opt,name=offid,proto3" json:"offid,omitempty"`
	Trnsfloc    []*TransferLocation `protobuf:"bytes,8,rep,name=trnsfloc,proto3" json:"trnsfloc,omitempty"`
	Itlocn      []*Location         `protobuf:"bytes,9,rep,name=itlocn,proto3" json:"itlocn,omitempty"`
	Locncode    []*LocationCode     `protobuf:"bytes,10,rep,name=locncode,proto3" json:"locncode,omitempty"`
	Shipmthd    string              `protobuf:"bytes,11,opt,name=shipmthd,proto3" json:"shipmthd,omitempty"`
	Custname    string              `protobuf:"bytes,12,opt,name=custname,proto3" json:"custname,omitempty"`
	Address1    string              `protobuf:"bytes,13,opt,name=address1,proto3" json:"address1,omitempty"`
	Address2    string              `protobuf:"bytes,14,opt,name=address2,proto3" json:"address2,omitempty"`
	Address3    string              `protobuf:"bytes,15,opt,name=address3,proto3" json:"address3,omitempty"`
	City        string              `protobuf:"bytes,16,opt,name=city,proto3" json:"city,omitempty"`
	State       string              `protobuf:"bytes,17,opt,name=state,proto3" json:"state,omitempty"`
	Zipcode     string              `protobuf:"bytes,18,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	Country     string              `protobuf:"bytes,19,opt,name=country,proto3" json:"country,omitempty"`
	Rfrncdoc    string              `protobuf:"bytes,20,opt,name=rfrncdoc,proto3" json:"rfrncdoc,omitempty"`
	TotalWeight float64             `protobuf:"fixed64,21,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
	Status      int32               `protobuf:"varint,22,opt,name=status,proto3" json:"status,omitempty"`
	StatusDesc  string              `protobuf:"bytes,23,opt,name=status_desc,json=statusDesc,proto3" json:"status_desc,omitempty"`
	TrType      []*TransferType     `protobuf:"bytes,24,rep,name=tr_type,json=trType,proto3" json:"tr_type,omitempty"`
	Details     []*TransferDetail   `protobuf:"bytes,25,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *InTransitTransferGP) Reset() {
	*x = InTransitTransferGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InTransitTransferGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InTransitTransferGP) ProtoMessage() {}

func (x *InTransitTransferGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InTransitTransferGP.ProtoReflect.Descriptor instead.
func (*InTransitTransferGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{413}
}

func (x *InTransitTransferGP) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *InTransitTransferGP) GetOrddocid() string {
	if x != nil {
		return x.Orddocid
	}
	return ""
}

func (x *InTransitTransferGP) GetOrdrdate() string {
	if x != nil {
		return x.Ordrdate
	}
	return ""
}

func (x *InTransitTransferGP) GetEtadte() string {
	if x != nil {
		return x.Etadte
	}
	return ""
}

func (x *InTransitTransferGP) GetEtatime() string {
	if x != nil {
		return x.Etatime
	}
	return ""
}

func (x *InTransitTransferGP) GetTechid() string {
	if x != nil {
		return x.Techid
	}
	return ""
}

func (x *InTransitTransferGP) GetOffid() string {
	if x != nil {
		return x.Offid
	}
	return ""
}

func (x *InTransitTransferGP) GetTrnsfloc() []*TransferLocation {
	if x != nil {
		return x.Trnsfloc
	}
	return nil
}

func (x *InTransitTransferGP) GetItlocn() []*Location {
	if x != nil {
		return x.Itlocn
	}
	return nil
}

func (x *InTransitTransferGP) GetLocncode() []*LocationCode {
	if x != nil {
		return x.Locncode
	}
	return nil
}

func (x *InTransitTransferGP) GetShipmthd() string {
	if x != nil {
		return x.Shipmthd
	}
	return ""
}

func (x *InTransitTransferGP) GetCustname() string {
	if x != nil {
		return x.Custname
	}
	return ""
}

func (x *InTransitTransferGP) GetAddress1() string {
	if x != nil {
		return x.Address1
	}
	return ""
}

func (x *InTransitTransferGP) GetAddress2() string {
	if x != nil {
		return x.Address2
	}
	return ""
}

func (x *InTransitTransferGP) GetAddress3() string {
	if x != nil {
		return x.Address3
	}
	return ""
}

func (x *InTransitTransferGP) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *InTransitTransferGP) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *InTransitTransferGP) GetZipcode() string {
	if x != nil {
		return x.Zipcode
	}
	return ""
}

func (x *InTransitTransferGP) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *InTransitTransferGP) GetRfrncdoc() string {
	if x != nil {
		return x.Rfrncdoc
	}
	return ""
}

func (x *InTransitTransferGP) GetTotalWeight() float64 {
	if x != nil {
		return x.TotalWeight
	}
	return 0
}

func (x *InTransitTransferGP) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *InTransitTransferGP) GetStatusDesc() string {
	if x != nil {
		return x.StatusDesc
	}
	return ""
}

func (x *InTransitTransferGP) GetTrType() []*TransferType {
	if x != nil {
		return x.TrType
	}
	return nil
}

func (x *InTransitTransferGP) GetDetails() []*TransferDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type TransferLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locndscr      string `protobuf:"bytes,1,opt,name=locndscr,proto3" json:"locndscr,omitempty"`
	GnlRegion     string `protobuf:"bytes,2,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	Address       string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	GnlSiteTypeId string `protobuf:"bytes,4,opt,name=gnl_site_type_id,json=gnlSiteTypeId,proto3" json:"gnl_site_type_id,omitempty"`
}

func (x *TransferLocation) Reset() {
	*x = TransferLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferLocation) ProtoMessage() {}

func (x *TransferLocation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferLocation.ProtoReflect.Descriptor instead.
func (*TransferLocation) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{414}
}

func (x *TransferLocation) GetLocndscr() string {
	if x != nil {
		return x.Locndscr
	}
	return ""
}

func (x *TransferLocation) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *TransferLocation) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TransferLocation) GetGnlSiteTypeId() string {
	if x != nil {
		return x.GnlSiteTypeId
	}
	return ""
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locndscr      string `protobuf:"bytes,1,opt,name=locndscr,proto3" json:"locndscr,omitempty"`
	GnlRegion     string `protobuf:"bytes,2,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	Address       string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	GnlSiteTypeId string `protobuf:"bytes,4,opt,name=gnl_site_type_id,json=gnlSiteTypeId,proto3" json:"gnl_site_type_id,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{415}
}

func (x *Location) GetLocndscr() string {
	if x != nil {
		return x.Locndscr
	}
	return ""
}

func (x *Location) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *Location) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Location) GetGnlSiteTypeId() string {
	if x != nil {
		return x.GnlSiteTypeId
	}
	return ""
}

type LocationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locndscr      string `protobuf:"bytes,1,opt,name=locndscr,proto3" json:"locndscr,omitempty"`
	GnlRegion     string `protobuf:"bytes,2,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	Address       string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	GnlSiteTypeId string `protobuf:"bytes,4,opt,name=gnl_site_type_id,json=gnlSiteTypeId,proto3" json:"gnl_site_type_id,omitempty"`
}

func (x *LocationCode) Reset() {
	*x = LocationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[416]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationCode) ProtoMessage() {}

func (x *LocationCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[416]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationCode.ProtoReflect.Descriptor instead.
func (*LocationCode) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{416}
}

func (x *LocationCode) GetLocndscr() string {
	if x != nil {
		return x.Locndscr
	}
	return ""
}

func (x *LocationCode) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *LocationCode) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *LocationCode) GetGnlSiteTypeId() string {
	if x != nil {
		return x.GnlSiteTypeId
	}
	return ""
}

type TransferType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docnumbr  string `protobuf:"bytes,1,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	IvmTrType int32  `protobuf:"varint,2,opt,name=ivm_tr_type,json=ivmTrType,proto3" json:"ivm_tr_type,omitempty"`
}

func (x *TransferType) Reset() {
	*x = TransferType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[417]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferType) ProtoMessage() {}

func (x *TransferType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[417]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferType.ProtoReflect.Descriptor instead.
func (*TransferType) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{417}
}

func (x *TransferType) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *TransferType) GetIvmTrType() int32 {
	if x != nil {
		return x.IvmTrType
	}
	return 0
}

type TransferDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lnitmseq          int32   `protobuf:"varint,1,opt,name=lnitmseq,proto3" json:"lnitmseq,omitempty"`
	Itemnmbr          string  `protobuf:"bytes,2,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	ReasonCode        string  `protobuf:"bytes,3,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	Uofm              string  `protobuf:"bytes,4,opt,name=uofm,proto3" json:"uofm,omitempty"`
	Trnsfqty          float64 `protobuf:"fixed64,5,opt,name=trnsfqty,proto3" json:"trnsfqty,omitempty"`
	Qtyfulfi          float64 `protobuf:"fixed64,6,opt,name=qtyfulfi,proto3" json:"qtyfulfi,omitempty"`
	Qtyshppd          float64 `protobuf:"fixed64,7,opt,name=qtyshppd,proto3" json:"qtyshppd,omitempty"`
	LandedCostGroupId string  `protobuf:"bytes,8,opt,name=landed_cost_group_id,json=landedCostGroupId,proto3" json:"landed_cost_group_id,omitempty"`
	Trnsfloc          string  `protobuf:"bytes,9,opt,name=trnsfloc,proto3" json:"trnsfloc,omitempty"`
	Itlocn            string  `protobuf:"bytes,10,opt,name=itlocn,proto3" json:"itlocn,omitempty"`
	Trnstloc          string  `protobuf:"bytes,11,opt,name=trnstloc,proto3" json:"trnstloc,omitempty"`
	Dscriptn          string  `protobuf:"bytes,12,opt,name=dscriptn,proto3" json:"dscriptn,omitempty"`
}

func (x *TransferDetail) Reset() {
	*x = TransferDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[418]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferDetail) ProtoMessage() {}

func (x *TransferDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[418]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferDetail.ProtoReflect.Descriptor instead.
func (*TransferDetail) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{418}
}

func (x *TransferDetail) GetLnitmseq() int32 {
	if x != nil {
		return x.Lnitmseq
	}
	return 0
}

func (x *TransferDetail) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *TransferDetail) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

func (x *TransferDetail) GetUofm() string {
	if x != nil {
		return x.Uofm
	}
	return ""
}

func (x *TransferDetail) GetTrnsfqty() float64 {
	if x != nil {
		return x.Trnsfqty
	}
	return 0
}

func (x *TransferDetail) GetQtyfulfi() float64 {
	if x != nil {
		return x.Qtyfulfi
	}
	return 0
}

func (x *TransferDetail) GetQtyshppd() float64 {
	if x != nil {
		return x.Qtyshppd
	}
	return 0
}

func (x *TransferDetail) GetLandedCostGroupId() string {
	if x != nil {
		return x.LandedCostGroupId
	}
	return ""
}

func (x *TransferDetail) GetTrnsfloc() string {
	if x != nil {
		return x.Trnsfloc
	}
	return ""
}

func (x *TransferDetail) GetItlocn() string {
	if x != nil {
		return x.Itlocn
	}
	return ""
}

func (x *TransferDetail) GetTrnstloc() string {
	if x != nil {
		return x.Trnstloc
	}
	return ""
}

func (x *TransferDetail) GetDscriptn() string {
	if x != nil {
		return x.Dscriptn
	}
	return ""
}

type TrType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docnumbr  string `protobuf:"bytes,1,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	IvmTrType int32  `protobuf:"varint,2,opt,name=ivm_tr_type,json=ivmTrType,proto3" json:"ivm_tr_type,omitempty"`
}

func (x *TrType) Reset() {
	*x = TrType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[419]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrType) ProtoMessage() {}

func (x *TrType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[419]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrType.ProtoReflect.Descriptor instead.
func (*TrType) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{419}
}

func (x *TrType) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *TrType) GetIvmTrType() int32 {
	if x != nil {
		return x.IvmTrType
	}
	return 0
}

type GetInTransitTransferGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32                  `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32                  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32                  `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32                  `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*InTransitTransferGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool                   `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string               `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string                 `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetInTransitTransferGPResponse) Reset() {
	*x = GetInTransitTransferGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[420]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInTransitTransferGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInTransitTransferGPResponse) ProtoMessage() {}

func (x *GetInTransitTransferGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[420]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInTransitTransferGPResponse.ProtoReflect.Descriptor instead.
func (*GetInTransitTransferGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{420}
}

func (x *GetInTransitTransferGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetInTransitTransferGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetInTransitTransferGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetInTransitTransferGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetInTransitTransferGPResponse) GetData() []*InTransitTransferGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetInTransitTransferGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetInTransitTransferGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetInTransitTransferGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetTransferRequestGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit           int32   `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset          int32   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Docnumbr        string  `protobuf:"bytes,3,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	IvmTrType       string  `protobuf:"bytes,4,opt,name=ivm_tr_type,json=ivmTrType,proto3" json:"ivm_tr_type,omitempty"`
	RequestDateFrom string  `protobuf:"bytes,5,opt,name=request_date_from,json=requestDateFrom,proto3" json:"request_date_from,omitempty"`
	RequestDateTo   string  `protobuf:"bytes,6,opt,name=request_date_to,json=requestDateTo,proto3" json:"request_date_to,omitempty"`
	IvmLocncodeFrom string  `protobuf:"bytes,7,opt,name=ivm_locncode_from,json=ivmLocncodeFrom,proto3" json:"ivm_locncode_from,omitempty"`
	IvmLocncodeTo   string  `protobuf:"bytes,8,opt,name=ivm_locncode_to,json=ivmLocncodeTo,proto3" json:"ivm_locncode_to,omitempty"`
	DocdateFrom     string  `protobuf:"bytes,9,opt,name=docdate_from,json=docdateFrom,proto3" json:"docdate_from,omitempty"`
	DocdateTo       string  `protobuf:"bytes,10,opt,name=docdate_to,json=docdateTo,proto3" json:"docdate_to,omitempty"`
	IvmReqEtaFrom   string  `protobuf:"bytes,11,opt,name=ivm_req_eta_from,json=ivmReqEtaFrom,proto3" json:"ivm_req_eta_from,omitempty"`
	IvmReqEtaTo     string  `protobuf:"bytes,12,opt,name=ivm_req_eta_to,json=ivmReqEtaTo,proto3" json:"ivm_req_eta_to,omitempty"`
	Status          []int32 `protobuf:"varint,13,rep,packed,name=status,proto3" json:"status,omitempty"`
	Orderby         string  `protobuf:"bytes,14,opt,name=orderby,proto3" json:"orderby,omitempty"`
	DocnumbrLike    string  `protobuf:"bytes,15,opt,name=docnumbr_like,json=docnumbrLike,proto3" json:"docnumbr_like,omitempty"`
}

func (x *GetTransferRequestGPListRequest) Reset() {
	*x = GetTransferRequestGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[421]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransferRequestGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferRequestGPListRequest) ProtoMessage() {}

func (x *GetTransferRequestGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[421]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferRequestGPListRequest.ProtoReflect.Descriptor instead.
func (*GetTransferRequestGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{421}
}

func (x *GetTransferRequestGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetTransferRequestGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetTransferRequestGPListRequest) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *GetTransferRequestGPListRequest) GetIvmTrType() string {
	if x != nil {
		return x.IvmTrType
	}
	return ""
}

func (x *GetTransferRequestGPListRequest) GetRequestDateFrom() string {
	if x != nil {
		return x.RequestDateFrom
	}
	return ""
}

func (x *GetTransferRequestGPListRequest) GetRequestDateTo() string {
	if x != nil {
		return x.RequestDateTo
	}
	return ""
}

func (x *GetTransferRequestGPListRequest) GetIvmLocncodeFrom() string {
	if x != nil {
		return x.IvmLocncodeFrom
	}
	return ""
}

func (x *GetTransferRequestGPListRequest) GetIvmLocncodeTo() string {
	if x != nil {
		return x.IvmLocncodeTo
	}
	return ""
}

func (x *GetTransferRequestGPListRequest) GetDocdateFrom() string {
	if x != nil {
		return x.DocdateFrom
	}
	return ""
}

func (x *GetTransferRequestGPListRequest) GetDocdateTo() string {
	if x != nil {
		return x.DocdateTo
	}
	return ""
}

func (x *GetTransferRequestGPListRequest) GetIvmReqEtaFrom() string {
	if x != nil {
		return x.IvmReqEtaFrom
	}
	return ""
}

func (x *GetTransferRequestGPListRequest) GetIvmReqEtaTo() string {
	if x != nil {
		return x.IvmReqEtaTo
	}
	return ""
}

func (x *GetTransferRequestGPListRequest) GetStatus() []int32 {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetTransferRequestGPListRequest) GetOrderby() string {
	if x != nil {
		return x.Orderby
	}
	return ""
}

func (x *GetTransferRequestGPListRequest) GetDocnumbrLike() string {
	if x != nil {
		return x.DocnumbrLike
	}
	return ""
}

type GetTransferRequestGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTransferRequestGPDetailRequest) Reset() {
	*x = GetTransferRequestGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[422]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransferRequestGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferRequestGPDetailRequest) ProtoMessage() {}

func (x *GetTransferRequestGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[422]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferRequestGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetTransferRequestGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{422}
}

func (x *GetTransferRequestGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TransferRequestDetailGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemnmbr      string  `protobuf:"bytes,1,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	Itemdesc      string  `protobuf:"bytes,2,opt,name=itemdesc,proto3" json:"itemdesc,omitempty"`
	ReasonCode    string  `protobuf:"bytes,3,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	Uofm          string  `protobuf:"bytes,4,opt,name=uofm,proto3" json:"uofm,omitempty"`
	IvmQtyRequest float64 `protobuf:"fixed64,5,opt,name=ivm_qty_request,json=ivmQtyRequest,proto3" json:"ivm_qty_request,omitempty"`
	IvmQtyFulfill float64 `protobuf:"fixed64,6,opt,name=ivm_qty_fulfill,json=ivmQtyFulfill,proto3" json:"ivm_qty_fulfill,omitempty"`
	Lnitmseq      int64   `protobuf:"varint,7,opt,name=lnitmseq,proto3" json:"lnitmseq,omitempty"`
}

func (x *TransferRequestDetailGP) Reset() {
	*x = TransferRequestDetailGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[423]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferRequestDetailGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferRequestDetailGP) ProtoMessage() {}

func (x *TransferRequestDetailGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[423]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferRequestDetailGP.ProtoReflect.Descriptor instead.
func (*TransferRequestDetailGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{423}
}

func (x *TransferRequestDetailGP) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *TransferRequestDetailGP) GetItemdesc() string {
	if x != nil {
		return x.Itemdesc
	}
	return ""
}

func (x *TransferRequestDetailGP) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

func (x *TransferRequestDetailGP) GetUofm() string {
	if x != nil {
		return x.Uofm
	}
	return ""
}

func (x *TransferRequestDetailGP) GetIvmQtyRequest() float64 {
	if x != nil {
		return x.IvmQtyRequest
	}
	return 0
}

func (x *TransferRequestDetailGP) GetIvmQtyFulfill() float64 {
	if x != nil {
		return x.IvmQtyFulfill
	}
	return 0
}

func (x *TransferRequestDetailGP) GetLnitmseq() int64 {
	if x != nil {
		return x.Lnitmseq
	}
	return 0
}

type TransferRequestGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IvmTrType       int32                      `protobuf:"varint,1,opt,name=ivm_tr_type,json=ivmTrType,proto3" json:"ivm_tr_type,omitempty"`
	IvmTrTypeDesc   string                     `protobuf:"bytes,2,opt,name=ivm_tr_type_desc,json=ivmTrTypeDesc,proto3" json:"ivm_tr_type_desc,omitempty"`
	Docnumbr        string                     `protobuf:"bytes,3,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	Docdate         string                     `protobuf:"bytes,4,opt,name=docdate,proto3" json:"docdate,omitempty"`
	RequestDate     string                     `protobuf:"bytes,5,opt,name=request_date,json=requestDate,proto3" json:"request_date,omitempty"`
	IvmReqEta       string                     `protobuf:"bytes,6,opt,name=ivm_req_eta,json=ivmReqEta,proto3" json:"ivm_req_eta,omitempty"`
	IvmLocncodeFrom []*SiteLocation            `protobuf:"bytes,7,rep,name=ivm_locncode_from,json=ivmLocncodeFrom,proto3" json:"ivm_locncode_from,omitempty"`
	IvmLocncodeTo   []*SiteLocation            `protobuf:"bytes,8,rep,name=ivm_locncode_to,json=ivmLocncodeTo,proto3" json:"ivm_locncode_to,omitempty"`
	ReasonCode      string                     `protobuf:"bytes,9,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
	TotalWeight     float64                    `protobuf:"fixed64,10,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
	IvmStatus       int32                      `protobuf:"varint,11,opt,name=ivm_status,json=ivmStatus,proto3" json:"ivm_status,omitempty"`
	IvmStatusDesc   string                     `protobuf:"bytes,12,opt,name=ivm_status_desc,json=ivmStatusDesc,proto3" json:"ivm_status_desc,omitempty"`
	Details         []*TransferRequestDetailGP `protobuf:"bytes,13,rep,name=details,proto3" json:"details,omitempty"`
	Intrxlist       []*InTransitTransfer       `protobuf:"bytes,14,rep,name=intrxlist,proto3" json:"intrxlist,omitempty"`
}

func (x *TransferRequestGP) Reset() {
	*x = TransferRequestGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[424]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferRequestGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferRequestGP) ProtoMessage() {}

func (x *TransferRequestGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[424]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferRequestGP.ProtoReflect.Descriptor instead.
func (*TransferRequestGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{424}
}

func (x *TransferRequestGP) GetIvmTrType() int32 {
	if x != nil {
		return x.IvmTrType
	}
	return 0
}

func (x *TransferRequestGP) GetIvmTrTypeDesc() string {
	if x != nil {
		return x.IvmTrTypeDesc
	}
	return ""
}

func (x *TransferRequestGP) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *TransferRequestGP) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *TransferRequestGP) GetRequestDate() string {
	if x != nil {
		return x.RequestDate
	}
	return ""
}

func (x *TransferRequestGP) GetIvmReqEta() string {
	if x != nil {
		return x.IvmReqEta
	}
	return ""
}

func (x *TransferRequestGP) GetIvmLocncodeFrom() []*SiteLocation {
	if x != nil {
		return x.IvmLocncodeFrom
	}
	return nil
}

func (x *TransferRequestGP) GetIvmLocncodeTo() []*SiteLocation {
	if x != nil {
		return x.IvmLocncodeTo
	}
	return nil
}

func (x *TransferRequestGP) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

func (x *TransferRequestGP) GetTotalWeight() float64 {
	if x != nil {
		return x.TotalWeight
	}
	return 0
}

func (x *TransferRequestGP) GetIvmStatus() int32 {
	if x != nil {
		return x.IvmStatus
	}
	return 0
}

func (x *TransferRequestGP) GetIvmStatusDesc() string {
	if x != nil {
		return x.IvmStatusDesc
	}
	return ""
}

func (x *TransferRequestGP) GetDetails() []*TransferRequestDetailGP {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *TransferRequestGP) GetIntrxlist() []*InTransitTransfer {
	if x != nil {
		return x.Intrxlist
	}
	return nil
}

type GoodsReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docnumbr    string `protobuf:"bytes,1,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	Orddocid    string `protobuf:"bytes,2,opt,name=orddocid,proto3" json:"orddocid,omitempty"`
	Poprctnm    string `protobuf:"bytes,3,opt,name=poprctnm,proto3" json:"poprctnm,omitempty"`
	Receiptdate string `protobuf:"bytes,4,opt,name=receiptdate,proto3" json:"receiptdate,omitempty"`
	Vendorid    string `protobuf:"bytes,5,opt,name=vendorid,proto3" json:"vendorid,omitempty"`
	Status      int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	StatusDesc  string `protobuf:"bytes,7,opt,name=status_desc,json=statusDesc,proto3" json:"status_desc,omitempty"`
}

func (x *GoodsReceipt) Reset() {
	*x = GoodsReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[425]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsReceipt) ProtoMessage() {}

func (x *GoodsReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[425]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsReceipt.ProtoReflect.Descriptor instead.
func (*GoodsReceipt) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{425}
}

func (x *GoodsReceipt) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *GoodsReceipt) GetOrddocid() string {
	if x != nil {
		return x.Orddocid
	}
	return ""
}

func (x *GoodsReceipt) GetPoprctnm() string {
	if x != nil {
		return x.Poprctnm
	}
	return ""
}

func (x *GoodsReceipt) GetReceiptdate() string {
	if x != nil {
		return x.Receiptdate
	}
	return ""
}

func (x *GoodsReceipt) GetVendorid() string {
	if x != nil {
		return x.Vendorid
	}
	return ""
}

func (x *GoodsReceipt) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GoodsReceipt) GetStatusDesc() string {
	if x != nil {
		return x.StatusDesc
	}
	return ""
}

type InTransitTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docnumbr     string          `protobuf:"bytes,1,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	Orddocid     string          `protobuf:"bytes,2,opt,name=orddocid,proto3" json:"orddocid,omitempty"`
	Ordrdate     string          `protobuf:"bytes,3,opt,name=ordrdate,proto3" json:"ordrdate,omitempty"`
	Status       int32           `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	StatusDesc   string          `protobuf:"bytes,5,opt,name=status_desc,json=statusDesc,proto3" json:"status_desc,omitempty"`
	GoodsReceipt []*GoodsReceipt `protobuf:"bytes,6,rep,name=goods_receipt,json=goodsReceipt,proto3" json:"goods_receipt,omitempty"`
}

func (x *InTransitTransfer) Reset() {
	*x = InTransitTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[426]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InTransitTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InTransitTransfer) ProtoMessage() {}

func (x *InTransitTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[426]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InTransitTransfer.ProtoReflect.Descriptor instead.
func (*InTransitTransfer) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{426}
}

func (x *InTransitTransfer) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *InTransitTransfer) GetOrddocid() string {
	if x != nil {
		return x.Orddocid
	}
	return ""
}

func (x *InTransitTransfer) GetOrdrdate() string {
	if x != nil {
		return x.Ordrdate
	}
	return ""
}

func (x *InTransitTransfer) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *InTransitTransfer) GetStatusDesc() string {
	if x != nil {
		return x.StatusDesc
	}
	return ""
}

func (x *InTransitTransfer) GetGoodsReceipt() []*GoodsReceipt {
	if x != nil {
		return x.GoodsReceipt
	}
	return nil
}

type SiteLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locndscr      string `protobuf:"bytes,1,opt,name=locndscr,proto3" json:"locndscr,omitempty"`
	GnlRegion     string `protobuf:"bytes,2,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	Address       string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	GnlSiteTypeId string `protobuf:"bytes,4,opt,name=gnl_site_type_id,json=gnlSiteTypeId,proto3" json:"gnl_site_type_id,omitempty"`
}

func (x *SiteLocation) Reset() {
	*x = SiteLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[427]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiteLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiteLocation) ProtoMessage() {}

func (x *SiteLocation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[427]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiteLocation.ProtoReflect.Descriptor instead.
func (*SiteLocation) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{427}
}

func (x *SiteLocation) GetLocndscr() string {
	if x != nil {
		return x.Locndscr
	}
	return ""
}

func (x *SiteLocation) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *SiteLocation) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SiteLocation) GetGnlSiteTypeId() string {
	if x != nil {
		return x.GnlSiteTypeId
	}
	return ""
}

type GetTransferRequestGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32                `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32                `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32                `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32                `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*TransferRequestGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool                 `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string             `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string               `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetTransferRequestGPResponse) Reset() {
	*x = GetTransferRequestGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[428]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransferRequestGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferRequestGPResponse) ProtoMessage() {}

func (x *GetTransferRequestGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[428]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferRequestGPResponse.ProtoReflect.Descriptor instead.
func (*GetTransferRequestGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{428}
}

func (x *GetTransferRequestGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetTransferRequestGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetTransferRequestGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetTransferRequestGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetTransferRequestGPResponse) GetData() []*TransferRequestGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetTransferRequestGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetTransferRequestGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetTransferRequestGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateSalesOrderGPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid            string                                    `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Sopnumbe           string                                    `protobuf:"bytes,2,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"`
	Docid              string                                    `protobuf:"bytes,3,opt,name=docid,proto3" json:"docid,omitempty"`
	Docdate            string                                    `protobuf:"bytes,4,opt,name=docdate,proto3" json:"docdate,omitempty"`
	Custnmbr           string                                    `protobuf:"bytes,5,opt,name=custnmbr,proto3" json:"custnmbr,omitempty"`
	Custname           string                                    `protobuf:"bytes,6,opt,name=custname,proto3" json:"custname,omitempty"`
	Prstadcd           string                                    `protobuf:"bytes,7,opt,name=prstadcd,proto3" json:"prstadcd,omitempty"`
	Curncyid           string                                    `protobuf:"bytes,8,opt,name=curncyid,proto3" json:"curncyid,omitempty"`
	Subtotal           float64                                   `protobuf:"fixed64,9,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	Trdisamt           float64                                   `protobuf:"fixed64,10,opt,name=trdisamt,proto3" json:"trdisamt,omitempty"`
	Freight            float64                                   `protobuf:"fixed64,11,opt,name=freight,proto3" json:"freight,omitempty"`
	Miscamnt           float64                                   `protobuf:"fixed64,12,opt,name=miscamnt,proto3" json:"miscamnt,omitempty"`
	Taxamnt            float64                                   `protobuf:"fixed64,13,opt,name=taxamnt,proto3" json:"taxamnt,omitempty"`
	Docamnt            float64                                   `protobuf:"fixed64,14,opt,name=docamnt,proto3" json:"docamnt,omitempty"`
	GnlRequestShipDate string                                    `protobuf:"bytes,15,opt,name=gnl_request_ship_date,json=gnlRequestShipDate,proto3" json:"gnl_request_ship_date,omitempty"`
	GnlRegion          string                                    `protobuf:"bytes,16,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	GnlWrtId           string                                    `protobuf:"bytes,17,opt,name=gnl_wrt_id,json=gnlWrtId,proto3" json:"gnl_wrt_id,omitempty"`
	GnlArchetypeId     string                                    `protobuf:"bytes,18,opt,name=gnl_archetype_id,json=gnlArchetypeId,proto3" json:"gnl_archetype_id,omitempty"`
	GnlOrderChannel    string                                    `protobuf:"bytes,19,opt,name=gnl_order_channel,json=gnlOrderChannel,proto3" json:"gnl_order_channel,omitempty"`
	GnlSoCodeApps      string                                    `protobuf:"bytes,20,opt,name=gnl_so_code_apps,json=gnlSoCodeApps,proto3" json:"gnl_so_code_apps,omitempty"`
	GnlTotalweight     float64                                   `protobuf:"fixed64,21,opt,name=gnl_totalweight,json=gnlTotalweight,proto3" json:"gnl_totalweight,omitempty"`
	Userid             string                                    `protobuf:"bytes,22,opt,name=userid,proto3" json:"userid,omitempty"`
	Detailitems        []*CreateSalesOrderGPRequest_DetailItem   `protobuf:"bytes,23,rep,name=detailitems,proto3" json:"detailitems,omitempty"`
	Locncode           string                                    `protobuf:"bytes,24,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Shipmthd           string                                    `protobuf:"bytes,25,opt,name=shipmthd,proto3" json:"shipmthd,omitempty"`
	VoucherApply       []*CreateSalesOrderGPRequest_VoucherApply `protobuf:"bytes,27,rep,name=voucher_apply,json=voucherApply,proto3" json:"voucher_apply,omitempty"`
	Pymtrmid           string                                    `protobuf:"bytes,28,opt,name=pymtrmid,proto3" json:"pymtrmid,omitempty"`
	Note               string                                    `protobuf:"bytes,29,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *CreateSalesOrderGPRequest) Reset() {
	*x = CreateSalesOrderGPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[429]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSalesOrderGPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSalesOrderGPRequest) ProtoMessage() {}

func (x *CreateSalesOrderGPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[429]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSalesOrderGPRequest.ProtoReflect.Descriptor instead.
func (*CreateSalesOrderGPRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{429}
}

func (x *CreateSalesOrderGPRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *CreateSalesOrderGPRequest) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

func (x *CreateSalesOrderGPRequest) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *CreateSalesOrderGPRequest) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *CreateSalesOrderGPRequest) GetCustnmbr() string {
	if x != nil {
		return x.Custnmbr
	}
	return ""
}

func (x *CreateSalesOrderGPRequest) GetCustname() string {
	if x != nil {
		return x.Custname
	}
	return ""
}

func (x *CreateSalesOrderGPRequest) GetPrstadcd() string {
	if x != nil {
		return x.Prstadcd
	}
	return ""
}

func (x *CreateSalesOrderGPRequest) GetCurncyid() string {
	if x != nil {
		return x.Curncyid
	}
	return ""
}

func (x *CreateSalesOrderGPRequest) GetSubtotal() float64 {
	if x != nil {
		return x.Subtotal
	}
	return 0
}

func (x *CreateSalesOrderGPRequest) GetTrdisamt() float64 {
	if x != nil {
		return x.Trdisamt
	}
	return 0
}

func (x *CreateSalesOrderGPRequest) GetFreight() float64 {
	if x != nil {
		return x.Freight
	}
	return 0
}

func (x *CreateSalesOrderGPRequest) GetMiscamnt() float64 {
	if x != nil {
		return x.Miscamnt
	}
	return 0
}

func (x *CreateSalesOrderGPRequest) GetTaxamnt() float64 {
	if x != nil {
		return x.Taxamnt
	}
	return 0
}

func (x *CreateSalesOrderGPRequest) GetDocamnt() float64 {
	if x != nil {
		return x.Docamnt
	}
	return 0
}

func (x *CreateSalesOrderGPRequest) GetGnlRequestShipDate() string {
	if x != nil {
		return x.GnlRequestShipDate
	}
	return ""
}

func (x *CreateSalesOrderGPRequest) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *CreateSalesOrderGPRequest) GetGnlWrtId() string {
	if x != nil {
		return x.GnlWrtId
	}
	return ""
}

func (x *CreateSalesOrderGPRequest) GetGnlArchetypeId() string {
	if x != nil {
		return x.GnlArchetypeId
	}
	return ""
}

func (x *CreateSalesOrderGPRequest) GetGnlOrderChannel() string {
	if x != nil {
		return x.GnlOrderChannel
	}
	return ""
}

func (x *CreateSalesOrderGPRequest) GetGnlSoCodeApps() string {
	if x != nil {
		return x.GnlSoCodeApps
	}
	return ""
}

func (x *CreateSalesOrderGPRequest) GetGnlTotalweight() float64 {
	if x != nil {
		return x.GnlTotalweight
	}
	return 0
}

func (x *CreateSalesOrderGPRequest) GetUserid() string {
	if x != nil {
		return x.Userid
	}
	return ""
}

func (x *CreateSalesOrderGPRequest) GetDetailitems() []*CreateSalesOrderGPRequest_DetailItem {
	if x != nil {
		return x.Detailitems
	}
	return nil
}

func (x *CreateSalesOrderGPRequest) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *CreateSalesOrderGPRequest) GetShipmthd() string {
	if x != nil {
		return x.Shipmthd
	}
	return ""
}

func (x *CreateSalesOrderGPRequest) GetVoucherApply() []*CreateSalesOrderGPRequest_VoucherApply {
	if x != nil {
		return x.VoucherApply
	}
	return nil
}

func (x *CreateSalesOrderGPRequest) GetPymtrmid() string {
	if x != nil {
		return x.Pymtrmid
	}
	return ""
}

func (x *CreateSalesOrderGPRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type CreateSalesOrderGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Sopnumbe string `protobuf:"bytes,3,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"`
}

func (x *CreateSalesOrderGPResponse) Reset() {
	*x = CreateSalesOrderGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[430]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSalesOrderGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSalesOrderGPResponse) ProtoMessage() {}

func (x *CreateSalesOrderGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[430]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSalesOrderGPResponse.ProtoReflect.Descriptor instead.
func (*CreateSalesOrderGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{430}
}

func (x *CreateSalesOrderGPResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateSalesOrderGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateSalesOrderGPResponse) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

type CashReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docnumbr      string                      `protobuf:"bytes,1,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	Docdate       string                      `protobuf:"bytes,2,opt,name=docdate,proto3" json:"docdate,omitempty"`
	Custnmbr      string                      `protobuf:"bytes,3,opt,name=custnmbr,proto3" json:"custnmbr,omitempty"`
	Custname      string                      `protobuf:"bytes,4,opt,name=custname,proto3" json:"custname,omitempty"`
	Curncyid      string                      `protobuf:"bytes,5,opt,name=curncyid,proto3" json:"curncyid,omitempty"`
	Cshrctyp      int32                       `protobuf:"varint,6,opt,name=cshrctyp,proto3" json:"cshrctyp,omitempty"`
	PaymentMethod string                      `protobuf:"bytes,7,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	Dcstatus      int32                       `protobuf:"varint,8,opt,name=dcstatus,proto3" json:"dcstatus,omitempty"`
	Ortrxamt      float64                     `protobuf:"fixed64,9,opt,name=ortrxamt,proto3" json:"ortrxamt,omitempty"`
	Creatddt      string                      `protobuf:"bytes,10,opt,name=creatddt,proto3" json:"creatddt,omitempty"`
	SalesInvoice  []*CashReceipt_SalesInvoice `protobuf:"bytes,11,rep,name=sales_invoice,json=salesInvoice,proto3" json:"sales_invoice,omitempty"`
	SalesOrder    []*CashReceipt_SalesOrder   `protobuf:"bytes,12,rep,name=sales_order,json=salesOrder,proto3" json:"sales_order,omitempty"`
	Ordocamt      float64                     `protobuf:"fixed64,13,opt,name=ordocamt,proto3" json:"ordocamt,omitempty"`
}

func (x *CashReceipt) Reset() {
	*x = CashReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[431]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CashReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CashReceipt) ProtoMessage() {}

func (x *CashReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[431]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CashReceipt.ProtoReflect.Descriptor instead.
func (*CashReceipt) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{431}
}

func (x *CashReceipt) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *CashReceipt) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *CashReceipt) GetCustnmbr() string {
	if x != nil {
		return x.Custnmbr
	}
	return ""
}

func (x *CashReceipt) GetCustname() string {
	if x != nil {
		return x.Custname
	}
	return ""
}

func (x *CashReceipt) GetCurncyid() string {
	if x != nil {
		return x.Curncyid
	}
	return ""
}

func (x *CashReceipt) GetCshrctyp() int32 {
	if x != nil {
		return x.Cshrctyp
	}
	return 0
}

func (x *CashReceipt) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *CashReceipt) GetDcstatus() int32 {
	if x != nil {
		return x.Dcstatus
	}
	return 0
}

func (x *CashReceipt) GetOrtrxamt() float64 {
	if x != nil {
		return x.Ortrxamt
	}
	return 0
}

func (x *CashReceipt) GetCreatddt() string {
	if x != nil {
		return x.Creatddt
	}
	return ""
}

func (x *CashReceipt) GetSalesInvoice() []*CashReceipt_SalesInvoice {
	if x != nil {
		return x.SalesInvoice
	}
	return nil
}

func (x *CashReceipt) GetSalesOrder() []*CashReceipt_SalesOrder {
	if x != nil {
		return x.SalesOrder
	}
	return nil
}

func (x *CashReceipt) GetOrdocamt() float64 {
	if x != nil {
		return x.Ordocamt
	}
	return 0
}

type GetCashReceiptListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit         int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Custnmbr      string `protobuf:"bytes,3,opt,name=custnmbr,proto3" json:"custnmbr,omitempty"`
	Docnumber     string `protobuf:"bytes,4,opt,name=docnumber,proto3" json:"docnumber,omitempty"`
	Sopnumbe      string `protobuf:"bytes,5,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"` //this is filter for si number
	GnlRegion     string `protobuf:"bytes,6,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	Locncode      string `protobuf:"bytes,7,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Status        string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	SoDocdateFrom string `protobuf:"bytes,9,opt,name=so_docdate_from,json=soDocdateFrom,proto3" json:"so_docdate_from,omitempty"`
	SoDocdateTo   string `protobuf:"bytes,10,opt,name=so_docdate_to,json=soDocdateTo,proto3" json:"so_docdate_to,omitempty"`
	DocdateFrom   string `protobuf:"bytes,11,opt,name=docdate_from,json=docdateFrom,proto3" json:"docdate_from,omitempty"`
	DocdateTo     string `protobuf:"bytes,12,opt,name=docdate_to,json=docdateTo,proto3" json:"docdate_to,omitempty"`
	SoNumber      string `protobuf:"bytes,13,opt,name=so_number,json=soNumber,proto3" json:"so_number,omitempty"`
	SiDocdateFrom string `protobuf:"bytes,14,opt,name=si_docdate_from,json=siDocdateFrom,proto3" json:"si_docdate_from,omitempty"`
	SiDocdateTo   string `protobuf:"bytes,15,opt,name=si_docdate_to,json=siDocdateTo,proto3" json:"si_docdate_to,omitempty"`
}

func (x *GetCashReceiptListRequest) Reset() {
	*x = GetCashReceiptListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[432]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCashReceiptListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCashReceiptListRequest) ProtoMessage() {}

func (x *GetCashReceiptListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[432]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCashReceiptListRequest.ProtoReflect.Descriptor instead.
func (*GetCashReceiptListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{432}
}

func (x *GetCashReceiptListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCashReceiptListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCashReceiptListRequest) GetCustnmbr() string {
	if x != nil {
		return x.Custnmbr
	}
	return ""
}

func (x *GetCashReceiptListRequest) GetDocnumber() string {
	if x != nil {
		return x.Docnumber
	}
	return ""
}

func (x *GetCashReceiptListRequest) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

func (x *GetCashReceiptListRequest) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *GetCashReceiptListRequest) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *GetCashReceiptListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetCashReceiptListRequest) GetSoDocdateFrom() string {
	if x != nil {
		return x.SoDocdateFrom
	}
	return ""
}

func (x *GetCashReceiptListRequest) GetSoDocdateTo() string {
	if x != nil {
		return x.SoDocdateTo
	}
	return ""
}

func (x *GetCashReceiptListRequest) GetDocdateFrom() string {
	if x != nil {
		return x.DocdateFrom
	}
	return ""
}

func (x *GetCashReceiptListRequest) GetDocdateTo() string {
	if x != nil {
		return x.DocdateTo
	}
	return ""
}

func (x *GetCashReceiptListRequest) GetSoNumber() string {
	if x != nil {
		return x.SoNumber
	}
	return ""
}

func (x *GetCashReceiptListRequest) GetSiDocdateFrom() string {
	if x != nil {
		return x.SiDocdateFrom
	}
	return ""
}

func (x *GetCashReceiptListRequest) GetSiDocdateTo() string {
	if x != nil {
		return x.SiDocdateTo
	}
	return ""
}

type GetCashReceiptListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32          `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32          `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32          `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32          `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*CashReceipt `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool           `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string       `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string         `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetCashReceiptListResponse) Reset() {
	*x = GetCashReceiptListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[433]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCashReceiptListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCashReceiptListResponse) ProtoMessage() {}

func (x *GetCashReceiptListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[433]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCashReceiptListResponse.ProtoReflect.Descriptor instead.
func (*GetCashReceiptListResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{433}
}

func (x *GetCashReceiptListResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetCashReceiptListResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetCashReceiptListResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetCashReceiptListResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetCashReceiptListResponse) GetData() []*CashReceipt {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetCashReceiptListResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetCashReceiptListResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetCashReceiptListResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CustomerClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Classid      string  `protobuf:"bytes,1,opt,name=classid,proto3" json:"classid,omitempty"`
	Clasdscr     string  `protobuf:"bytes,2,opt,name=clasdscr,proto3" json:"clasdscr,omitempty"`
	Crlmttyp     int32   `protobuf:"varint,3,opt,name=crlmttyp,proto3" json:"crlmttyp,omitempty"`
	CrlmttypDesc string  `protobuf:"bytes,4,opt,name=crlmttyp_desc,json=crlmttypDesc,proto3" json:"crlmttyp_desc,omitempty"`
	Crlmtamt     float64 `protobuf:"fixed64,5,opt,name=crlmtamt,proto3" json:"crlmtamt,omitempty"`
}

func (x *CustomerClass) Reset() {
	*x = CustomerClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[434]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerClass) ProtoMessage() {}

func (x *CustomerClass) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[434]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerClass.ProtoReflect.Descriptor instead.
func (*CustomerClass) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{434}
}

func (x *CustomerClass) GetClassid() string {
	if x != nil {
		return x.Classid
	}
	return ""
}

func (x *CustomerClass) GetClasdscr() string {
	if x != nil {
		return x.Clasdscr
	}
	return ""
}

func (x *CustomerClass) GetCrlmttyp() int32 {
	if x != nil {
		return x.Crlmttyp
	}
	return 0
}

func (x *CustomerClass) GetCrlmttypDesc() string {
	if x != nil {
		return x.CrlmttypDesc
	}
	return ""
}

func (x *CustomerClass) GetCrlmtamt() float64 {
	if x != nil {
		return x.Crlmtamt
	}
	return 0
}

type GetCustomerClassListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit    int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Classid  string `protobuf:"bytes,3,opt,name=classid,proto3" json:"classid,omitempty"`
	Clasdscr string `protobuf:"bytes,4,opt,name=clasdscr,proto3" json:"clasdscr,omitempty"`
}

func (x *GetCustomerClassListRequest) Reset() {
	*x = GetCustomerClassListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[435]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerClassListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerClassListRequest) ProtoMessage() {}

func (x *GetCustomerClassListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[435]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerClassListRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerClassListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{435}
}

func (x *GetCustomerClassListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCustomerClassListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCustomerClassListRequest) GetClassid() string {
	if x != nil {
		return x.Classid
	}
	return ""
}

func (x *GetCustomerClassListRequest) GetClasdscr() string {
	if x != nil {
		return x.Clasdscr
	}
	return ""
}

type GetCustomerClassResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32            `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32            `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32            `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32            `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*CustomerClass `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool             `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string         `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string           `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetCustomerClassResponse) Reset() {
	*x = GetCustomerClassResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[436]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerClassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerClassResponse) ProtoMessage() {}

func (x *GetCustomerClassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[436]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerClassResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerClassResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{436}
}

func (x *GetCustomerClassResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetCustomerClassResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetCustomerClassResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetCustomerClassResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetCustomerClassResponse) GetData() []*CustomerClass {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetCustomerClassResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetCustomerClassResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetCustomerClassResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetCustomerClassDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCustomerClassDetailRequest) Reset() {
	*x = GetCustomerClassDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[437]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerClassDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerClassDetailRequest) ProtoMessage() {}

func (x *GetCustomerClassDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[437]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerClassDetailRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerClassDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{437}
}

func (x *GetCustomerClassDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SalesPriceLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnlRegion     string `protobuf:"bytes,1,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	GnlCustTypeId string `protobuf:"bytes,2,opt,name=gnl_cust_type_id,json=gnlCustTypeId,proto3" json:"gnl_cust_type_id,omitempty"`
	Prclevel      string `protobuf:"bytes,3,opt,name=prclevel,proto3" json:"prclevel,omitempty"`
}

func (x *SalesPriceLevel) Reset() {
	*x = SalesPriceLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[438]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesPriceLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesPriceLevel) ProtoMessage() {}

func (x *SalesPriceLevel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[438]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesPriceLevel.ProtoReflect.Descriptor instead.
func (*SalesPriceLevel) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{438}
}

func (x *SalesPriceLevel) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *SalesPriceLevel) GetGnlCustTypeId() string {
	if x != nil {
		return x.GnlCustTypeId
	}
	return ""
}

func (x *SalesPriceLevel) GetPrclevel() string {
	if x != nil {
		return x.Prclevel
	}
	return ""
}

type GetSalesPriceLevelListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit         int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	GnlRegion     string `protobuf:"bytes,3,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	GnlCustTypeId string `protobuf:"bytes,4,opt,name=gnl_cust_type_id,json=gnlCustTypeId,proto3" json:"gnl_cust_type_id,omitempty"`
	Prclevel      string `protobuf:"bytes,5,opt,name=prclevel,proto3" json:"prclevel,omitempty"`
}

func (x *GetSalesPriceLevelListRequest) Reset() {
	*x = GetSalesPriceLevelListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[439]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPriceLevelListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPriceLevelListRequest) ProtoMessage() {}

func (x *GetSalesPriceLevelListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[439]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPriceLevelListRequest.ProtoReflect.Descriptor instead.
func (*GetSalesPriceLevelListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{439}
}

func (x *GetSalesPriceLevelListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSalesPriceLevelListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSalesPriceLevelListRequest) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *GetSalesPriceLevelListRequest) GetGnlCustTypeId() string {
	if x != nil {
		return x.GnlCustTypeId
	}
	return ""
}

func (x *GetSalesPriceLevelListRequest) GetPrclevel() string {
	if x != nil {
		return x.Prclevel
	}
	return ""
}

type GetSalesPriceLevelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32              `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32              `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32              `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32              `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*SalesPriceLevel `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool               `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string           `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string             `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetSalesPriceLevelResponse) Reset() {
	*x = GetSalesPriceLevelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[440]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPriceLevelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPriceLevelResponse) ProtoMessage() {}

func (x *GetSalesPriceLevelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[440]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPriceLevelResponse.ProtoReflect.Descriptor instead.
func (*GetSalesPriceLevelResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{440}
}

func (x *GetSalesPriceLevelResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetSalesPriceLevelResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetSalesPriceLevelResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetSalesPriceLevelResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetSalesPriceLevelResponse) GetData() []*SalesPriceLevel {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetSalesPriceLevelResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetSalesPriceLevelResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetSalesPriceLevelResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetSalesPriceLevelDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSalesPriceLevelDetailRequest) Reset() {
	*x = GetSalesPriceLevelDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[441]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPriceLevelDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPriceLevelDetailRequest) ProtoMessage() {}

func (x *GetSalesPriceLevelDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[441]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPriceLevelDetailRequest.ProtoReflect.Descriptor instead.
func (*GetSalesPriceLevelDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{441}
}

func (x *GetSalesPriceLevelDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ShippingMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shipmthd     string `protobuf:"bytes,1,opt,name=shipmthd,proto3" json:"shipmthd,omitempty"`
	Shmthdsc     string `protobuf:"bytes,2,opt,name=shmthdsc,proto3" json:"shmthdsc,omitempty"`
	Shiptype     int32  `protobuf:"varint,3,opt,name=shiptype,proto3" json:"shiptype,omitempty"`
	ShiptypeDesc string `protobuf:"bytes,4,opt,name=shiptype_desc,json=shiptypeDesc,proto3" json:"shiptype_desc,omitempty"`
}

func (x *ShippingMethod) Reset() {
	*x = ShippingMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[442]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShippingMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShippingMethod) ProtoMessage() {}

func (x *ShippingMethod) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[442]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShippingMethod.ProtoReflect.Descriptor instead.
func (*ShippingMethod) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{442}
}

func (x *ShippingMethod) GetShipmthd() string {
	if x != nil {
		return x.Shipmthd
	}
	return ""
}

func (x *ShippingMethod) GetShmthdsc() string {
	if x != nil {
		return x.Shmthdsc
	}
	return ""
}

func (x *ShippingMethod) GetShiptype() int32 {
	if x != nil {
		return x.Shiptype
	}
	return 0
}

func (x *ShippingMethod) GetShiptypeDesc() string {
	if x != nil {
		return x.ShiptypeDesc
	}
	return ""
}

type GetShippingMethodListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit    int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Shiptype string `protobuf:"bytes,3,opt,name=shiptype,proto3" json:"shiptype,omitempty"`
}

func (x *GetShippingMethodListRequest) Reset() {
	*x = GetShippingMethodListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[443]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShippingMethodListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShippingMethodListRequest) ProtoMessage() {}

func (x *GetShippingMethodListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[443]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShippingMethodListRequest.ProtoReflect.Descriptor instead.
func (*GetShippingMethodListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{443}
}

func (x *GetShippingMethodListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetShippingMethodListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetShippingMethodListRequest) GetShiptype() string {
	if x != nil {
		return x.Shiptype
	}
	return ""
}

type GetShippingMethodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32             `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32             `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32             `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32             `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*ShippingMethod `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool              `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string          `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string            `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetShippingMethodResponse) Reset() {
	*x = GetShippingMethodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[444]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShippingMethodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShippingMethodResponse) ProtoMessage() {}

func (x *GetShippingMethodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[444]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShippingMethodResponse.ProtoReflect.Descriptor instead.
func (*GetShippingMethodResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{444}
}

func (x *GetShippingMethodResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetShippingMethodResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShippingMethodResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetShippingMethodResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetShippingMethodResponse) GetData() []*ShippingMethod {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetShippingMethodResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetShippingMethodResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetShippingMethodResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetShippingMethodDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetShippingMethodDetailRequest) Reset() {
	*x = GetShippingMethodDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[445]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShippingMethodDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShippingMethodDetailRequest) ProtoMessage() {}

func (x *GetShippingMethodDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[445]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShippingMethodDetailRequest.ProtoReflect.Descriptor instead.
func (*GetShippingMethodDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{445}
}

func (x *GetShippingMethodDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateTransferRequestGPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid         string                                   `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Docnumbr        string                                   `protobuf:"bytes,2,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	Docdate         string                                   `protobuf:"bytes,3,opt,name=docdate,proto3" json:"docdate,omitempty"`
	IvmTrType       int32                                    `protobuf:"varint,4,opt,name=ivm_tr_type,json=ivmTrType,proto3" json:"ivm_tr_type,omitempty"`
	RequestDate     string                                   `protobuf:"bytes,5,opt,name=request_date,json=requestDate,proto3" json:"request_date,omitempty"`
	IvmReqEta       string                                   `protobuf:"bytes,6,opt,name=ivm_req_eta,json=ivmReqEta,proto3" json:"ivm_req_eta,omitempty"`
	IvmLocncodeFrom string                                   `protobuf:"bytes,7,opt,name=ivm_locncode_from,json=ivmLocncodeFrom,proto3" json:"ivm_locncode_from,omitempty"`
	IvmLocncodeTo   string                                   `protobuf:"bytes,8,opt,name=ivm_locncode_to,json=ivmLocncodeTo,proto3" json:"ivm_locncode_to,omitempty"`
	Reason_Code     string                                   `protobuf:"bytes,9,opt,name=reason_Code,json=reasonCode,proto3" json:"reason_Code,omitempty"`
	Detail          []*CreateTransferRequestGPRequest_Detail `protobuf:"bytes,10,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *CreateTransferRequestGPRequest) Reset() {
	*x = CreateTransferRequestGPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[446]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransferRequestGPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransferRequestGPRequest) ProtoMessage() {}

func (x *CreateTransferRequestGPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[446]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransferRequestGPRequest.ProtoReflect.Descriptor instead.
func (*CreateTransferRequestGPRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{446}
}

func (x *CreateTransferRequestGPRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *CreateTransferRequestGPRequest) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *CreateTransferRequestGPRequest) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *CreateTransferRequestGPRequest) GetIvmTrType() int32 {
	if x != nil {
		return x.IvmTrType
	}
	return 0
}

func (x *CreateTransferRequestGPRequest) GetRequestDate() string {
	if x != nil {
		return x.RequestDate
	}
	return ""
}

func (x *CreateTransferRequestGPRequest) GetIvmReqEta() string {
	if x != nil {
		return x.IvmReqEta
	}
	return ""
}

func (x *CreateTransferRequestGPRequest) GetIvmLocncodeFrom() string {
	if x != nil {
		return x.IvmLocncodeFrom
	}
	return ""
}

func (x *CreateTransferRequestGPRequest) GetIvmLocncodeTo() string {
	if x != nil {
		return x.IvmLocncodeTo
	}
	return ""
}

func (x *CreateTransferRequestGPRequest) GetReason_Code() string {
	if x != nil {
		return x.Reason_Code
	}
	return ""
}

func (x *CreateTransferRequestGPRequest) GetDetail() []*CreateTransferRequestGPRequest_Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type CreateTransferRequestGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Docnumbr string `protobuf:"bytes,3,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
}

func (x *CreateTransferRequestGPResponse) Reset() {
	*x = CreateTransferRequestGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[447]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransferRequestGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransferRequestGPResponse) ProtoMessage() {}

func (x *CreateTransferRequestGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[447]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransferRequestGPResponse.ProtoReflect.Descriptor instead.
func (*CreateTransferRequestGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{447}
}

func (x *CreateTransferRequestGPResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateTransferRequestGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateTransferRequestGPResponse) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

type UpdateInTransitTransferGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateInTransitTransferGPResponse) Reset() {
	*x = UpdateInTransitTransferGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[448]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInTransitTransferGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInTransitTransferGPResponse) ProtoMessage() {}

func (x *UpdateInTransitTransferGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[448]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInTransitTransferGPResponse.ProtoReflect.Descriptor instead.
func (*UpdateInTransitTransferGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{448}
}

func (x *UpdateInTransitTransferGPResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateInTransitTransferGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CommitPurchaseOrderGPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid   string `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Docnumber string `protobuf:"bytes,2,opt,name=docnumber,proto3" json:"docnumber,omitempty"`
	Docdate   string `protobuf:"bytes,3,opt,name=docdate,proto3" json:"docdate,omitempty"`
}

func (x *CommitPurchaseOrderGPRequest) Reset() {
	*x = CommitPurchaseOrderGPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[449]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitPurchaseOrderGPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitPurchaseOrderGPRequest) ProtoMessage() {}

func (x *CommitPurchaseOrderGPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[449]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitPurchaseOrderGPRequest.ProtoReflect.Descriptor instead.
func (*CommitPurchaseOrderGPRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{449}
}

func (x *CommitPurchaseOrderGPRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *CommitPurchaseOrderGPRequest) GetDocnumber() string {
	if x != nil {
		return x.Docnumber
	}
	return ""
}

func (x *CommitPurchaseOrderGPRequest) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

type PoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rcptlnnm int32   `protobuf:"varint,1,opt,name=rcptlnnm,proto3" json:"rcptlnnm,omitempty"`
	Ponumber string  `protobuf:"bytes,2,opt,name=ponumber,proto3" json:"ponumber,omitempty"`
	Itemnmbr string  `protobuf:"bytes,3,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	Itemdesc string  `protobuf:"bytes,4,opt,name=itemdesc,proto3" json:"itemdesc,omitempty"`
	Vnditnum string  `protobuf:"bytes,5,opt,name=vnditnum,proto3" json:"vnditnum,omitempty"`
	Vnditdsc string  `protobuf:"bytes,6,opt,name=vnditdsc,proto3" json:"vnditdsc,omitempty"`
	Locncode string  `protobuf:"bytes,7,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Uofm     string  `protobuf:"bytes,8,opt,name=uofm,proto3" json:"uofm,omitempty"`
	Umqtyinb float64 `protobuf:"fixed64,9,opt,name=umqtyinb,proto3" json:"umqtyinb,omitempty"`
	Qtyshppd float64 `protobuf:"fixed64,10,opt,name=qtyshppd,proto3" json:"qtyshppd,omitempty"`
	Unitcost float64 `protobuf:"fixed64,11,opt,name=unitcost,proto3" json:"unitcost,omitempty"`
	Extdcost float64 `protobuf:"fixed64,12,opt,name=extdcost,proto3" json:"extdcost,omitempty"`
	Commntid string  `protobuf:"bytes,13,opt,name=commntid,proto3" json:"commntid,omitempty"`
	Actlship string  `protobuf:"bytes,14,opt,name=actlship,proto3" json:"actlship,omitempty"`
}

func (x *PoList) Reset() {
	*x = PoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[450]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoList) ProtoMessage() {}

func (x *PoList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[450]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoList.ProtoReflect.Descriptor instead.
func (*PoList) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{450}
}

func (x *PoList) GetRcptlnnm() int32 {
	if x != nil {
		return x.Rcptlnnm
	}
	return 0
}

func (x *PoList) GetPonumber() string {
	if x != nil {
		return x.Ponumber
	}
	return ""
}

func (x *PoList) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *PoList) GetItemdesc() string {
	if x != nil {
		return x.Itemdesc
	}
	return ""
}

func (x *PoList) GetVnditnum() string {
	if x != nil {
		return x.Vnditnum
	}
	return ""
}

func (x *PoList) GetVnditdsc() string {
	if x != nil {
		return x.Vnditdsc
	}
	return ""
}

func (x *PoList) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *PoList) GetUofm() string {
	if x != nil {
		return x.Uofm
	}
	return ""
}

func (x *PoList) GetUmqtyinb() float64 {
	if x != nil {
		return x.Umqtyinb
	}
	return 0
}

func (x *PoList) GetQtyshppd() float64 {
	if x != nil {
		return x.Qtyshppd
	}
	return 0
}

func (x *PoList) GetUnitcost() float64 {
	if x != nil {
		return x.Unitcost
	}
	return 0
}

func (x *PoList) GetExtdcost() float64 {
	if x != nil {
		return x.Extdcost
	}
	return 0
}

func (x *PoList) GetCommntid() string {
	if x != nil {
		return x.Commntid
	}
	return ""
}

func (x *PoList) GetActlship() string {
	if x != nil {
		return x.Actlship
	}
	return ""
}

type IntrxList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rcptlnnm int32   `protobuf:"varint,1,opt,name=rcptlnnm,proto3" json:"rcptlnnm,omitempty"`
	Orddocid string  `protobuf:"bytes,2,opt,name=orddocid,proto3" json:"orddocid,omitempty"`
	Itemnmbr string  `protobuf:"bytes,3,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	Itemdesc string  `protobuf:"bytes,4,opt,name=itemdesc,proto3" json:"itemdesc,omitempty"`
	Vnditnum string  `protobuf:"bytes,5,opt,name=vnditnum,proto3" json:"vnditnum,omitempty"`
	Vnditdsc string  `protobuf:"bytes,6,opt,name=vnditdsc,proto3" json:"vnditdsc,omitempty"`
	Locncode string  `protobuf:"bytes,7,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Uofm     string  `protobuf:"bytes,8,opt,name=uofm,proto3" json:"uofm,omitempty"`
	Qtyorder float64 `protobuf:"fixed64,9,opt,name=qtyorder,proto3" json:"qtyorder,omitempty"`
	Qtytrnsf float64 `protobuf:"fixed64,10,opt,name=qtytrnsf,proto3" json:"qtytrnsf,omitempty"`
	Qtyshppd float64 `protobuf:"fixed64,11,opt,name=qtyshppd,proto3" json:"qtyshppd,omitempty"`
	Unitcost float64 `protobuf:"fixed64,12,opt,name=unitcost,proto3" json:"unitcost,omitempty"`
	Extdcost float64 `protobuf:"fixed64,13,opt,name=extdcost,proto3" json:"extdcost,omitempty"`
	Commntid string  `protobuf:"bytes,14,opt,name=commntid,proto3" json:"commntid,omitempty"`
	Actlship string  `protobuf:"bytes,15,opt,name=actlship,proto3" json:"actlship,omitempty"`
}

func (x *IntrxList) Reset() {
	*x = IntrxList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[451]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntrxList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntrxList) ProtoMessage() {}

func (x *IntrxList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[451]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntrxList.ProtoReflect.Descriptor instead.
func (*IntrxList) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{451}
}

func (x *IntrxList) GetRcptlnnm() int32 {
	if x != nil {
		return x.Rcptlnnm
	}
	return 0
}

func (x *IntrxList) GetOrddocid() string {
	if x != nil {
		return x.Orddocid
	}
	return ""
}

func (x *IntrxList) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *IntrxList) GetItemdesc() string {
	if x != nil {
		return x.Itemdesc
	}
	return ""
}

func (x *IntrxList) GetVnditnum() string {
	if x != nil {
		return x.Vnditnum
	}
	return ""
}

func (x *IntrxList) GetVnditdsc() string {
	if x != nil {
		return x.Vnditdsc
	}
	return ""
}

func (x *IntrxList) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *IntrxList) GetUofm() string {
	if x != nil {
		return x.Uofm
	}
	return ""
}

func (x *IntrxList) GetQtyorder() float64 {
	if x != nil {
		return x.Qtyorder
	}
	return 0
}

func (x *IntrxList) GetQtytrnsf() float64 {
	if x != nil {
		return x.Qtytrnsf
	}
	return 0
}

func (x *IntrxList) GetQtyshppd() float64 {
	if x != nil {
		return x.Qtyshppd
	}
	return 0
}

func (x *IntrxList) GetUnitcost() float64 {
	if x != nil {
		return x.Unitcost
	}
	return 0
}

func (x *IntrxList) GetExtdcost() float64 {
	if x != nil {
		return x.Extdcost
	}
	return 0
}

func (x *IntrxList) GetCommntid() string {
	if x != nil {
		return x.Commntid
	}
	return ""
}

func (x *IntrxList) GetActlship() string {
	if x != nil {
		return x.Actlship
	}
	return ""
}

type GoodsReceiptGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poptype               int32        `protobuf:"varint,1,opt,name=poptype,proto3" json:"poptype,omitempty"`
	PoptypeDesc           string       `protobuf:"bytes,2,opt,name=poptype_desc,json=poptypeDesc,proto3" json:"poptype_desc,omitempty"`
	Poprctnm              string       `protobuf:"bytes,3,opt,name=poprctnm,proto3" json:"poprctnm,omitempty"`
	Vnddocnm              string       `protobuf:"bytes,4,opt,name=vnddocnm,proto3" json:"vnddocnm,omitempty"`
	Receiptdate           string       `protobuf:"bytes,5,opt,name=receiptdate,proto3" json:"receiptdate,omitempty"`
	Actlship              string       `protobuf:"bytes,6,opt,name=actlship,proto3" json:"actlship,omitempty"`
	Bchsourc              string       `protobuf:"bytes,7,opt,name=bchsourc,proto3" json:"bchsourc,omitempty"`
	Bachnumb              string       `protobuf:"bytes,8,opt,name=bachnumb,proto3" json:"bachnumb,omitempty"`
	Vendorid              string       `protobuf:"bytes,9,opt,name=vendorid,proto3" json:"vendorid,omitempty"`
	Vendname              string       `protobuf:"bytes,10,opt,name=vendname,proto3" json:"vendname,omitempty"`
	Curncyid              string       `protobuf:"bytes,11,opt,name=curncyid,proto3" json:"curncyid,omitempty"`
	PrpRegion             string       `protobuf:"bytes,12,opt,name=prp_region,json=prpRegion,proto3" json:"prp_region,omitempty"`
	Deprtmnt              string       `protobuf:"bytes,13,opt,name=deprtmnt,proto3" json:"deprtmnt,omitempty"`
	PrpCbShrinkage        int32        `protobuf:"varint,14,opt,name=prp_cb_shrinkage,json=prpCbShrinkage,proto3" json:"prp_cb_shrinkage,omitempty"`
	PrpCbShrinkageDesc    string       `protobuf:"bytes,15,opt,name=prp_cb_shrinkage_desc,json=prpCbShrinkageDesc,proto3" json:"prp_cb_shrinkage_desc,omitempty"`
	PrpActualarrivalTime  string       `protobuf:"bytes,16,opt,name=prp_actualarrival_time,json=prpActualarrivalTime,proto3" json:"prp_actualarrival_time,omitempty"`
	PrpReceiptInbound     string       `protobuf:"bytes,17,opt,name=prp_receipt_inbound,json=prpReceiptInbound,proto3" json:"prp_receipt_inbound,omitempty"`
	Pymtrmid              string       `protobuf:"bytes,18,opt,name=pymtrmid,proto3" json:"pymtrmid,omitempty"`
	Taxschid              string       `protobuf:"bytes,19,opt,name=taxschid,proto3" json:"taxschid,omitempty"`
	Subtotal              float64      `protobuf:"fixed64,20,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	Trdisamt              float64      `protobuf:"fixed64,21,opt,name=trdisamt,proto3" json:"trdisamt,omitempty"`
	Trdpctpr              int32        `protobuf:"varint,22,opt,name=trdpctpr,proto3" json:"trdpctpr,omitempty"`
	Frtamnt               float64      `protobuf:"fixed64,23,opt,name=frtamnt,proto3" json:"frtamnt,omitempty"`
	Miscamnt              float64      `protobuf:"fixed64,24,opt,name=miscamnt,proto3" json:"miscamnt,omitempty"`
	Taxamnt               float64      `protobuf:"fixed64,25,opt,name=taxamnt,proto3" json:"taxamnt,omitempty"`
	Discdate              string       `protobuf:"bytes,26,opt,name=discdate,proto3" json:"discdate,omitempty"`
	Duedate               string       `protobuf:"bytes,27,opt,name=duedate,proto3" json:"duedate,omitempty"`
	Posteddt              string       `protobuf:"bytes,28,opt,name=posteddt,proto3" json:"posteddt,omitempty"`
	Ptdusrid              string       `protobuf:"bytes,29,opt,name=ptdusrid,proto3" json:"ptdusrid,omitempty"`
	Shipmthd              string       `protobuf:"bytes,30,opt,name=shipmthd,proto3" json:"shipmthd,omitempty"`
	TotalLandedCostAmount float64      `protobuf:"fixed64,31,opt,name=total_landed_cost_amount,json=totalLandedCostAmount,proto3" json:"total_landed_cost_amount,omitempty"`
	Invoicereceiptdate    string       `protobuf:"bytes,32,opt,name=invoicereceiptdate,proto3" json:"invoicereceiptdate,omitempty"`
	Prepaymentamount      float64      `protobuf:"fixed64,33,opt,name=prepaymentamount,proto3" json:"prepaymentamount,omitempty"`
	Status                string       `protobuf:"bytes,34,opt,name=status,proto3" json:"status,omitempty"`
	Creatddt              string       `protobuf:"bytes,35,opt,name=creatddt,proto3" json:"creatddt,omitempty"`
	Modifdt               string       `protobuf:"bytes,36,opt,name=modifdt,proto3" json:"modifdt,omitempty"`
	Polist                []*PoList    `protobuf:"bytes,37,rep,name=polist,proto3" json:"polist,omitempty"`
	Intrxlist             []*IntrxList `protobuf:"bytes,38,rep,name=intrxlist,proto3" json:"intrxlist,omitempty"`
}

func (x *GoodsReceiptGP) Reset() {
	*x = GoodsReceiptGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[452]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodsReceiptGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodsReceiptGP) ProtoMessage() {}

func (x *GoodsReceiptGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[452]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodsReceiptGP.ProtoReflect.Descriptor instead.
func (*GoodsReceiptGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{452}
}

func (x *GoodsReceiptGP) GetPoptype() int32 {
	if x != nil {
		return x.Poptype
	}
	return 0
}

func (x *GoodsReceiptGP) GetPoptypeDesc() string {
	if x != nil {
		return x.PoptypeDesc
	}
	return ""
}

func (x *GoodsReceiptGP) GetPoprctnm() string {
	if x != nil {
		return x.Poprctnm
	}
	return ""
}

func (x *GoodsReceiptGP) GetVnddocnm() string {
	if x != nil {
		return x.Vnddocnm
	}
	return ""
}

func (x *GoodsReceiptGP) GetReceiptdate() string {
	if x != nil {
		return x.Receiptdate
	}
	return ""
}

func (x *GoodsReceiptGP) GetActlship() string {
	if x != nil {
		return x.Actlship
	}
	return ""
}

func (x *GoodsReceiptGP) GetBchsourc() string {
	if x != nil {
		return x.Bchsourc
	}
	return ""
}

func (x *GoodsReceiptGP) GetBachnumb() string {
	if x != nil {
		return x.Bachnumb
	}
	return ""
}

func (x *GoodsReceiptGP) GetVendorid() string {
	if x != nil {
		return x.Vendorid
	}
	return ""
}

func (x *GoodsReceiptGP) GetVendname() string {
	if x != nil {
		return x.Vendname
	}
	return ""
}

func (x *GoodsReceiptGP) GetCurncyid() string {
	if x != nil {
		return x.Curncyid
	}
	return ""
}

func (x *GoodsReceiptGP) GetPrpRegion() string {
	if x != nil {
		return x.PrpRegion
	}
	return ""
}

func (x *GoodsReceiptGP) GetDeprtmnt() string {
	if x != nil {
		return x.Deprtmnt
	}
	return ""
}

func (x *GoodsReceiptGP) GetPrpCbShrinkage() int32 {
	if x != nil {
		return x.PrpCbShrinkage
	}
	return 0
}

func (x *GoodsReceiptGP) GetPrpCbShrinkageDesc() string {
	if x != nil {
		return x.PrpCbShrinkageDesc
	}
	return ""
}

func (x *GoodsReceiptGP) GetPrpActualarrivalTime() string {
	if x != nil {
		return x.PrpActualarrivalTime
	}
	return ""
}

func (x *GoodsReceiptGP) GetPrpReceiptInbound() string {
	if x != nil {
		return x.PrpReceiptInbound
	}
	return ""
}

func (x *GoodsReceiptGP) GetPymtrmid() string {
	if x != nil {
		return x.Pymtrmid
	}
	return ""
}

func (x *GoodsReceiptGP) GetTaxschid() string {
	if x != nil {
		return x.Taxschid
	}
	return ""
}

func (x *GoodsReceiptGP) GetSubtotal() float64 {
	if x != nil {
		return x.Subtotal
	}
	return 0
}

func (x *GoodsReceiptGP) GetTrdisamt() float64 {
	if x != nil {
		return x.Trdisamt
	}
	return 0
}

func (x *GoodsReceiptGP) GetTrdpctpr() int32 {
	if x != nil {
		return x.Trdpctpr
	}
	return 0
}

func (x *GoodsReceiptGP) GetFrtamnt() float64 {
	if x != nil {
		return x.Frtamnt
	}
	return 0
}

func (x *GoodsReceiptGP) GetMiscamnt() float64 {
	if x != nil {
		return x.Miscamnt
	}
	return 0
}

func (x *GoodsReceiptGP) GetTaxamnt() float64 {
	if x != nil {
		return x.Taxamnt
	}
	return 0
}

func (x *GoodsReceiptGP) GetDiscdate() string {
	if x != nil {
		return x.Discdate
	}
	return ""
}

func (x *GoodsReceiptGP) GetDuedate() string {
	if x != nil {
		return x.Duedate
	}
	return ""
}

func (x *GoodsReceiptGP) GetPosteddt() string {
	if x != nil {
		return x.Posteddt
	}
	return ""
}

func (x *GoodsReceiptGP) GetPtdusrid() string {
	if x != nil {
		return x.Ptdusrid
	}
	return ""
}

func (x *GoodsReceiptGP) GetShipmthd() string {
	if x != nil {
		return x.Shipmthd
	}
	return ""
}

func (x *GoodsReceiptGP) GetTotalLandedCostAmount() float64 {
	if x != nil {
		return x.TotalLandedCostAmount
	}
	return 0
}

func (x *GoodsReceiptGP) GetInvoicereceiptdate() string {
	if x != nil {
		return x.Invoicereceiptdate
	}
	return ""
}

func (x *GoodsReceiptGP) GetPrepaymentamount() float64 {
	if x != nil {
		return x.Prepaymentamount
	}
	return 0
}

func (x *GoodsReceiptGP) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GoodsReceiptGP) GetCreatddt() string {
	if x != nil {
		return x.Creatddt
	}
	return ""
}

func (x *GoodsReceiptGP) GetModifdt() string {
	if x != nil {
		return x.Modifdt
	}
	return ""
}

func (x *GoodsReceiptGP) GetPolist() []*PoList {
	if x != nil {
		return x.Polist
	}
	return nil
}

func (x *GoodsReceiptGP) GetIntrxlist() []*IntrxList {
	if x != nil {
		return x.Intrxlist
	}
	return nil
}

type GetGoodsReceiptGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit    int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Poprctnm string `protobuf:"bytes,3,opt,name=poprctnm,proto3" json:"poprctnm,omitempty"`
	Doctype  string `protobuf:"bytes,4,opt,name=doctype,proto3" json:"doctype,omitempty"`
}

func (x *GetGoodsReceiptGPListRequest) Reset() {
	*x = GetGoodsReceiptGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[453]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsReceiptGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsReceiptGPListRequest) ProtoMessage() {}

func (x *GetGoodsReceiptGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[453]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsReceiptGPListRequest.ProtoReflect.Descriptor instead.
func (*GetGoodsReceiptGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{453}
}

func (x *GetGoodsReceiptGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetGoodsReceiptGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetGoodsReceiptGPListRequest) GetPoprctnm() string {
	if x != nil {
		return x.Poprctnm
	}
	return ""
}

func (x *GetGoodsReceiptGPListRequest) GetDoctype() string {
	if x != nil {
		return x.Doctype
	}
	return ""
}

type GetGoodsReceiptGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poprctnm string `protobuf:"bytes,1,opt,name=poprctnm,proto3" json:"poprctnm,omitempty"`
	Doctype  string `protobuf:"bytes,2,opt,name=doctype,proto3" json:"doctype,omitempty"`
}

func (x *GetGoodsReceiptGPDetailRequest) Reset() {
	*x = GetGoodsReceiptGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[454]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsReceiptGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsReceiptGPDetailRequest) ProtoMessage() {}

func (x *GetGoodsReceiptGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[454]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsReceiptGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetGoodsReceiptGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{454}
}

func (x *GetGoodsReceiptGPDetailRequest) GetPoprctnm() string {
	if x != nil {
		return x.Poprctnm
	}
	return ""
}

func (x *GetGoodsReceiptGPDetailRequest) GetDoctype() string {
	if x != nil {
		return x.Doctype
	}
	return ""
}

type GetGoodsReceiptGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32             `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32             `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32             `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32             `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*GoodsReceiptGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool              `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string          `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string            `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetGoodsReceiptGPResponse) Reset() {
	*x = GetGoodsReceiptGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[455]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsReceiptGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsReceiptGPResponse) ProtoMessage() {}

func (x *GetGoodsReceiptGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[455]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsReceiptGPResponse.ProtoReflect.Descriptor instead.
func (*GetGoodsReceiptGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{455}
}

func (x *GetGoodsReceiptGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetGoodsReceiptGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetGoodsReceiptGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetGoodsReceiptGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetGoodsReceiptGPResponse) GetData() []*GoodsReceiptGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetGoodsReceiptGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetGoodsReceiptGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetGoodsReceiptGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateTransferRequestGPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid     string                                   `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Docnumbr    string                                   `protobuf:"bytes,2,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	Docdate     string                                   `protobuf:"bytes,3,opt,name=docdate,proto3" json:"docdate,omitempty"`
	RequestDate string                                   `protobuf:"bytes,4,opt,name=request_date,json=requestDate,proto3" json:"request_date,omitempty"`
	IvmReqEta   string                                   `protobuf:"bytes,5,opt,name=ivm_req_eta,json=ivmReqEta,proto3" json:"ivm_req_eta,omitempty"`
	Reason_Code string                                   `protobuf:"bytes,6,opt,name=reason_Code,json=reasonCode,proto3" json:"reason_Code,omitempty"`
	Detail      []*UpdateTransferRequestGPRequest_Detail `protobuf:"bytes,7,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *UpdateTransferRequestGPRequest) Reset() {
	*x = UpdateTransferRequestGPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[456]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTransferRequestGPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransferRequestGPRequest) ProtoMessage() {}

func (x *UpdateTransferRequestGPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[456]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransferRequestGPRequest.ProtoReflect.Descriptor instead.
func (*UpdateTransferRequestGPRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{456}
}

func (x *UpdateTransferRequestGPRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *UpdateTransferRequestGPRequest) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *UpdateTransferRequestGPRequest) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *UpdateTransferRequestGPRequest) GetRequestDate() string {
	if x != nil {
		return x.RequestDate
	}
	return ""
}

func (x *UpdateTransferRequestGPRequest) GetIvmReqEta() string {
	if x != nil {
		return x.IvmReqEta
	}
	return ""
}

func (x *UpdateTransferRequestGPRequest) GetReason_Code() string {
	if x != nil {
		return x.Reason_Code
	}
	return ""
}

func (x *UpdateTransferRequestGPRequest) GetDetail() []*UpdateTransferRequestGPRequest_Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type UpdateInTransitTransferGPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid     string                                     `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Orddocid    string                                     `protobuf:"bytes,2,opt,name=orddocid,proto3" json:"orddocid,omitempty"`
	IvmTrNumber string                                     `protobuf:"bytes,3,opt,name=ivm_tr_number,json=ivmTrNumber,proto3" json:"ivm_tr_number,omitempty"`
	Ordrdate    string                                     `protobuf:"bytes,4,opt,name=ordrdate,proto3" json:"ordrdate,omitempty"`
	Etadte      string                                     `protobuf:"bytes,5,opt,name=etadte,proto3" json:"etadte,omitempty"`
	Eta         string                                     `protobuf:"bytes,6,opt,name=eta,proto3" json:"eta,omitempty"`
	Note        string                                     `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	Detail      []*UpdateInTransitTransferGPRequest_Detail `protobuf:"bytes,8,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *UpdateInTransitTransferGPRequest) Reset() {
	*x = UpdateInTransitTransferGPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[457]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInTransitTransferGPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInTransitTransferGPRequest) ProtoMessage() {}

func (x *UpdateInTransitTransferGPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[457]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInTransitTransferGPRequest.ProtoReflect.Descriptor instead.
func (*UpdateInTransitTransferGPRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{457}
}

func (x *UpdateInTransitTransferGPRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *UpdateInTransitTransferGPRequest) GetOrddocid() string {
	if x != nil {
		return x.Orddocid
	}
	return ""
}

func (x *UpdateInTransitTransferGPRequest) GetIvmTrNumber() string {
	if x != nil {
		return x.IvmTrNumber
	}
	return ""
}

func (x *UpdateInTransitTransferGPRequest) GetOrdrdate() string {
	if x != nil {
		return x.Ordrdate
	}
	return ""
}

func (x *UpdateInTransitTransferGPRequest) GetEtadte() string {
	if x != nil {
		return x.Etadte
	}
	return ""
}

func (x *UpdateInTransitTransferGPRequest) GetEta() string {
	if x != nil {
		return x.Eta
	}
	return ""
}

func (x *UpdateInTransitTransferGPRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *UpdateInTransitTransferGPRequest) GetDetail() []*UpdateInTransitTransferGPRequest_Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type CommitTransferRequestGPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid  string                                   `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Docnumbr string                                   `protobuf:"bytes,2,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	Itlocn   string                                   `protobuf:"bytes,3,opt,name=itlocn,proto3" json:"itlocn,omitempty"`
	Detail   []*CommitTransferRequestGPRequest_Detail `protobuf:"bytes,4,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *CommitTransferRequestGPRequest) Reset() {
	*x = CommitTransferRequestGPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[458]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitTransferRequestGPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitTransferRequestGPRequest) ProtoMessage() {}

func (x *CommitTransferRequestGPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[458]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitTransferRequestGPRequest.ProtoReflect.Descriptor instead.
func (*CommitTransferRequestGPRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{458}
}

func (x *CommitTransferRequestGPRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *CommitTransferRequestGPRequest) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *CommitTransferRequestGPRequest) GetItlocn() string {
	if x != nil {
		return x.Itlocn
	}
	return ""
}

func (x *CommitTransferRequestGPRequest) GetDetail() []*CommitTransferRequestGPRequest_Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type UpdateCustomerGPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid         string                `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Custnmbr        string                `protobuf:"bytes,2,opt,name=custnmbr,proto3" json:"custnmbr,omitempty"`
	Custname        string                `protobuf:"bytes,3,opt,name=custname,proto3" json:"custname,omitempty"`
	Custclas        string                `protobuf:"bytes,4,opt,name=custclas,proto3" json:"custclas,omitempty"`
	Custpriority    string                `protobuf:"bytes,5,opt,name=custpriority,proto3" json:"custpriority,omitempty"`
	Cprcstnm        string                `protobuf:"bytes,6,opt,name=cprcstnm,proto3" json:"cprcstnm,omitempty"`
	Stmtname        string                `protobuf:"bytes,7,opt,name=stmtname,proto3" json:"stmtname,omitempty"`
	Shrtname        string                `protobuf:"bytes,8,opt,name=shrtname,proto3" json:"shrtname,omitempty"`
	Upszone         string                `protobuf:"bytes,9,opt,name=upszone,proto3" json:"upszone,omitempty"`
	Address         *UpdateAddressRequest `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`
	Shipmthd        string                `protobuf:"bytes,11,opt,name=shipmthd,proto3" json:"shipmthd,omitempty"`
	Taxschid        string                `protobuf:"bytes,12,opt,name=taxschid,proto3" json:"taxschid,omitempty"`
	Prbtadcd        string                `protobuf:"bytes,13,opt,name=prbtadcd,proto3" json:"prbtadcd,omitempty"`
	Prstadcd        string                `protobuf:"bytes,14,opt,name=prstadcd,proto3" json:"prstadcd,omitempty"`
	Staddrcd        string                `protobuf:"bytes,15,opt,name=staddrcd,proto3" json:"staddrcd,omitempty"`
	Slprsnid        string                `protobuf:"bytes,16,opt,name=slprsnid,proto3" json:"slprsnid,omitempty"`
	Pymtrmid        string                `protobuf:"bytes,17,opt,name=pymtrmid,proto3" json:"pymtrmid,omitempty"`
	Salsterr        string                `protobuf:"bytes,18,opt,name=salsterr,proto3" json:"salsterr,omitempty"`
	Userdef1        string                `protobuf:"bytes,19,opt,name=userdef1,proto3" json:"userdef1,omitempty"`
	Userdef2        string                `protobuf:"bytes,20,opt,name=userdef2,proto3" json:"userdef2,omitempty"`
	Declid          string                `protobuf:"bytes,21,opt,name=declid,proto3" json:"declid,omitempty"`
	Comment1        string                `protobuf:"bytes,22,opt,name=comment1,proto3" json:"comment1,omitempty"`
	Comment2        string                `protobuf:"bytes,23,opt,name=comment2,proto3" json:"comment2,omitempty"`
	Custdisc        int32                 `protobuf:"varint,24,opt,name=custdisc,proto3" json:"custdisc,omitempty"`
	Disgrper        int32                 `protobuf:"varint,25,opt,name=disgrper,proto3" json:"disgrper,omitempty"`
	Duegrper        int32                 `protobuf:"varint,26,opt,name=duegrper,proto3" json:"duegrper,omitempty"`
	Prclevel        string                `protobuf:"bytes,27,opt,name=prclevel,proto3" json:"prclevel,omitempty"`
	GnlCustTypeId   string                `protobuf:"bytes,28,opt,name=gnl_cust_type_id,json=gnlCustTypeId,proto3" json:"gnl_cust_type_id,omitempty"`
	GnlReferrerCode string                `protobuf:"bytes,29,opt,name=gnl_referrer_code,json=gnlReferrerCode,proto3" json:"gnl_referrer_code,omitempty"`
	GnlReferralCode string                `protobuf:"bytes,30,opt,name=gnl_referral_code,json=gnlReferralCode,proto3" json:"gnl_referral_code,omitempty"`
	GnlBusinessType int32                 `protobuf:"varint,31,opt,name=gnl_business_type,json=gnlBusinessType,proto3" json:"gnl_business_type,omitempty"`
	GnlSocialSecNum string                `protobuf:"bytes,32,opt,name=gnl_social_sec_num,json=gnlSocialSecNum,proto3" json:"gnl_social_sec_num,omitempty"`
	Hold            int32                 `protobuf:"varint,33,opt,name=hold,proto3" json:"hold,omitempty"`
	Inactive        int32                 `protobuf:"varint,34,opt,name=inactive,proto3" json:"inactive,omitempty"`
	Shipcomplete    string                `protobuf:"bytes,35,opt,name=shipcomplete,proto3" json:"shipcomplete,omitempty"`
}

func (x *UpdateCustomerGPRequest) Reset() {
	*x = UpdateCustomerGPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[459]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomerGPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomerGPRequest) ProtoMessage() {}

func (x *UpdateCustomerGPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[459]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomerGPRequest.ProtoReflect.Descriptor instead.
func (*UpdateCustomerGPRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{459}
}

func (x *UpdateCustomerGPRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetCustnmbr() string {
	if x != nil {
		return x.Custnmbr
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetCustname() string {
	if x != nil {
		return x.Custname
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetCustclas() string {
	if x != nil {
		return x.Custclas
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetCustpriority() string {
	if x != nil {
		return x.Custpriority
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetCprcstnm() string {
	if x != nil {
		return x.Cprcstnm
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetStmtname() string {
	if x != nil {
		return x.Stmtname
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetShrtname() string {
	if x != nil {
		return x.Shrtname
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetUpszone() string {
	if x != nil {
		return x.Upszone
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetAddress() *UpdateAddressRequest {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *UpdateCustomerGPRequest) GetShipmthd() string {
	if x != nil {
		return x.Shipmthd
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetTaxschid() string {
	if x != nil {
		return x.Taxschid
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetPrbtadcd() string {
	if x != nil {
		return x.Prbtadcd
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetPrstadcd() string {
	if x != nil {
		return x.Prstadcd
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetStaddrcd() string {
	if x != nil {
		return x.Staddrcd
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetSlprsnid() string {
	if x != nil {
		return x.Slprsnid
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetPymtrmid() string {
	if x != nil {
		return x.Pymtrmid
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetSalsterr() string {
	if x != nil {
		return x.Salsterr
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetUserdef1() string {
	if x != nil {
		return x.Userdef1
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetUserdef2() string {
	if x != nil {
		return x.Userdef2
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetDeclid() string {
	if x != nil {
		return x.Declid
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetComment1() string {
	if x != nil {
		return x.Comment1
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetComment2() string {
	if x != nil {
		return x.Comment2
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetCustdisc() int32 {
	if x != nil {
		return x.Custdisc
	}
	return 0
}

func (x *UpdateCustomerGPRequest) GetDisgrper() int32 {
	if x != nil {
		return x.Disgrper
	}
	return 0
}

func (x *UpdateCustomerGPRequest) GetDuegrper() int32 {
	if x != nil {
		return x.Duegrper
	}
	return 0
}

func (x *UpdateCustomerGPRequest) GetPrclevel() string {
	if x != nil {
		return x.Prclevel
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetGnlCustTypeId() string {
	if x != nil {
		return x.GnlCustTypeId
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetGnlReferrerCode() string {
	if x != nil {
		return x.GnlReferrerCode
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetGnlReferralCode() string {
	if x != nil {
		return x.GnlReferralCode
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetGnlBusinessType() int32 {
	if x != nil {
		return x.GnlBusinessType
	}
	return 0
}

func (x *UpdateCustomerGPRequest) GetGnlSocialSecNum() string {
	if x != nil {
		return x.GnlSocialSecNum
	}
	return ""
}

func (x *UpdateCustomerGPRequest) GetHold() int32 {
	if x != nil {
		return x.Hold
	}
	return 0
}

func (x *UpdateCustomerGPRequest) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *UpdateCustomerGPRequest) GetShipcomplete() string {
	if x != nil {
		return x.Shipcomplete
	}
	return ""
}

type UpdateCustomerGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateCustomerGPResponse) Reset() {
	*x = UpdateCustomerGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[460]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomerGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomerGPResponse) ProtoMessage() {}

func (x *UpdateCustomerGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[460]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomerGPResponse.ProtoReflect.Descriptor instead.
func (*UpdateCustomerGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{460}
}

func (x *UpdateCustomerGPResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateCustomerGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CommitTransferRequestGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Intransit *InTransit `protobuf:"bytes,4,opt,name=intransit,proto3" json:"intransit,omitempty"`
}

func (x *CommitTransferRequestGPResponse) Reset() {
	*x = CommitTransferRequestGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[461]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitTransferRequestGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitTransferRequestGPResponse) ProtoMessage() {}

func (x *CommitTransferRequestGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[461]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitTransferRequestGPResponse.ProtoReflect.Descriptor instead.
func (*CommitTransferRequestGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{461}
}

func (x *CommitTransferRequestGPResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CommitTransferRequestGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommitTransferRequestGPResponse) GetIntransit() *InTransit {
	if x != nil {
		return x.Intransit
	}
	return nil
}

type InTransit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orddocid string `protobuf:"bytes,1,opt,name=orddocid,proto3" json:"orddocid,omitempty"`
}

func (x *InTransit) Reset() {
	*x = InTransit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[462]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InTransit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InTransit) ProtoMessage() {}

func (x *InTransit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[462]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InTransit.ProtoReflect.Descriptor instead.
func (*InTransit) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{462}
}

func (x *InTransit) GetOrddocid() string {
	if x != nil {
		return x.Orddocid
	}
	return ""
}

type CreateSalesInvoiceGPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid            string                                      `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Orignumb           string                                      `protobuf:"bytes,2,opt,name=orignumb,proto3" json:"orignumb,omitempty"`
	Sopnumbe           string                                      `protobuf:"bytes,3,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"`
	Docid              string                                      `protobuf:"bytes,4,opt,name=docid,proto3" json:"docid,omitempty"`
	Docdate            string                                      `protobuf:"bytes,5,opt,name=docdate,proto3" json:"docdate,omitempty"`
	Custnmbr           string                                      `protobuf:"bytes,6,opt,name=custnmbr,proto3" json:"custnmbr,omitempty"`
	Custname           string                                      `protobuf:"bytes,7,opt,name=custname,proto3" json:"custname,omitempty"`
	Prstadcd           string                                      `protobuf:"bytes,8,opt,name=prstadcd,proto3" json:"prstadcd,omitempty"`
	Curncyid           string                                      `protobuf:"bytes,9,opt,name=curncyid,proto3" json:"curncyid,omitempty"`
	VoucherApply       []*CreateSalesInvoiceGPRequest_VoucherApply `protobuf:"bytes,10,rep,name=voucher_apply,json=voucherApply,proto3" json:"voucher_apply,omitempty"`
	Subtotal           float64                                     `protobuf:"fixed64,11,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	Trdisamt           float64                                     `protobuf:"fixed64,12,opt,name=trdisamt,proto3" json:"trdisamt,omitempty"`
	Freight            float64                                     `protobuf:"fixed64,13,opt,name=freight,proto3" json:"freight,omitempty"`
	Miscamnt           float64                                     `protobuf:"fixed64,14,opt,name=miscamnt,proto3" json:"miscamnt,omitempty"`
	Taxamnt            float64                                     `protobuf:"fixed64,15,opt,name=taxamnt,proto3" json:"taxamnt,omitempty"`
	Docamnt            float64                                     `protobuf:"fixed64,16,opt,name=docamnt,proto3" json:"docamnt,omitempty"`
	AmountReceived     *CreateSalesInvoiceGPRequest_AmountReceived `protobuf:"bytes,17,opt,name=amount_received,json=amountReceived,proto3" json:"amount_received,omitempty"`
	GnlRequestShipDate string                                      `protobuf:"bytes,18,opt,name=gnl_request_ship_date,json=gnlRequestShipDate,proto3" json:"gnl_request_ship_date,omitempty"`
	GnlRegion          string                                      `protobuf:"bytes,19,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	GnlWrtId           string                                      `protobuf:"bytes,20,opt,name=gnl_wrt_id,json=gnlWrtId,proto3" json:"gnl_wrt_id,omitempty"`
	GnlArchetypeId     string                                      `protobuf:"bytes,21,opt,name=gnl_archetype_id,json=gnlArchetypeId,proto3" json:"gnl_archetype_id,omitempty"`
	GnlOrderChannel    string                                      `protobuf:"bytes,22,opt,name=gnl_order_channel,json=gnlOrderChannel,proto3" json:"gnl_order_channel,omitempty"`
	GnlSoCodeApps      string                                      `protobuf:"bytes,23,opt,name=gnl_so_code_apps,json=gnlSoCodeApps,proto3" json:"gnl_so_code_apps,omitempty"`
	GnlTotalweight     float64                                     `protobuf:"fixed64,24,opt,name=gnl_totalweight,json=gnlTotalweight,proto3" json:"gnl_totalweight,omitempty"`
	Userid             string                                      `protobuf:"bytes,25,opt,name=userid,proto3" json:"userid,omitempty"`
	Detailitems        []*CreateSalesInvoiceGPRequest_DetailItem   `protobuf:"bytes,26,rep,name=detailitems,proto3" json:"detailitems,omitempty"`
	Shipmthd           string                                      `protobuf:"bytes,27,opt,name=shipmthd,proto3" json:"shipmthd,omitempty"`
	Locncode           string                                      `protobuf:"bytes,28,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Pymtrmid           string                                      `protobuf:"bytes,29,opt,name=pymtrmid,proto3" json:"pymtrmid,omitempty"`
}

func (x *CreateSalesInvoiceGPRequest) Reset() {
	*x = CreateSalesInvoiceGPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[463]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSalesInvoiceGPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSalesInvoiceGPRequest) ProtoMessage() {}

func (x *CreateSalesInvoiceGPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[463]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSalesInvoiceGPRequest.ProtoReflect.Descriptor instead.
func (*CreateSalesInvoiceGPRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{463}
}

func (x *CreateSalesInvoiceGPRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest) GetOrignumb() string {
	if x != nil {
		return x.Orignumb
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest) GetCustnmbr() string {
	if x != nil {
		return x.Custnmbr
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest) GetCustname() string {
	if x != nil {
		return x.Custname
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest) GetPrstadcd() string {
	if x != nil {
		return x.Prstadcd
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest) GetCurncyid() string {
	if x != nil {
		return x.Curncyid
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest) GetVoucherApply() []*CreateSalesInvoiceGPRequest_VoucherApply {
	if x != nil {
		return x.VoucherApply
	}
	return nil
}

func (x *CreateSalesInvoiceGPRequest) GetSubtotal() float64 {
	if x != nil {
		return x.Subtotal
	}
	return 0
}

func (x *CreateSalesInvoiceGPRequest) GetTrdisamt() float64 {
	if x != nil {
		return x.Trdisamt
	}
	return 0
}

func (x *CreateSalesInvoiceGPRequest) GetFreight() float64 {
	if x != nil {
		return x.Freight
	}
	return 0
}

func (x *CreateSalesInvoiceGPRequest) GetMiscamnt() float64 {
	if x != nil {
		return x.Miscamnt
	}
	return 0
}

func (x *CreateSalesInvoiceGPRequest) GetTaxamnt() float64 {
	if x != nil {
		return x.Taxamnt
	}
	return 0
}

func (x *CreateSalesInvoiceGPRequest) GetDocamnt() float64 {
	if x != nil {
		return x.Docamnt
	}
	return 0
}

func (x *CreateSalesInvoiceGPRequest) GetAmountReceived() *CreateSalesInvoiceGPRequest_AmountReceived {
	if x != nil {
		return x.AmountReceived
	}
	return nil
}

func (x *CreateSalesInvoiceGPRequest) GetGnlRequestShipDate() string {
	if x != nil {
		return x.GnlRequestShipDate
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest) GetGnlWrtId() string {
	if x != nil {
		return x.GnlWrtId
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest) GetGnlArchetypeId() string {
	if x != nil {
		return x.GnlArchetypeId
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest) GetGnlOrderChannel() string {
	if x != nil {
		return x.GnlOrderChannel
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest) GetGnlSoCodeApps() string {
	if x != nil {
		return x.GnlSoCodeApps
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest) GetGnlTotalweight() float64 {
	if x != nil {
		return x.GnlTotalweight
	}
	return 0
}

func (x *CreateSalesInvoiceGPRequest) GetUserid() string {
	if x != nil {
		return x.Userid
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest) GetDetailitems() []*CreateSalesInvoiceGPRequest_DetailItem {
	if x != nil {
		return x.Detailitems
	}
	return nil
}

func (x *CreateSalesInvoiceGPRequest) GetShipmthd() string {
	if x != nil {
		return x.Shipmthd
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest) GetPymtrmid() string {
	if x != nil {
		return x.Pymtrmid
	}
	return ""
}

type CreateSalesInvoiceGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Sopnumbe string `protobuf:"bytes,3,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"`
}

func (x *CreateSalesInvoiceGPResponse) Reset() {
	*x = CreateSalesInvoiceGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[464]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSalesInvoiceGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSalesInvoiceGPResponse) ProtoMessage() {}

func (x *CreateSalesInvoiceGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[464]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSalesInvoiceGPResponse.ProtoReflect.Descriptor instead.
func (*CreateSalesInvoiceGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{464}
}

func (x *CreateSalesInvoiceGPResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateSalesInvoiceGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateSalesInvoiceGPResponse) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

type CreateCashReceiptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid        string  `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Sopnumbe       string  `protobuf:"bytes,2,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"`
	AmountReceived float64 `protobuf:"fixed64,3,opt,name=amount_received,json=amountReceived,proto3" json:"amount_received,omitempty"`
	Chekbkid       string  `protobuf:"bytes,4,opt,name=chekbkid,proto3" json:"chekbkid,omitempty"`
	Docdate        string  `protobuf:"bytes,5,opt,name=docdate,proto3" json:"docdate,omitempty"`
}

func (x *CreateCashReceiptRequest) Reset() {
	*x = CreateCashReceiptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[465]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCashReceiptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCashReceiptRequest) ProtoMessage() {}

func (x *CreateCashReceiptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[465]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCashReceiptRequest.ProtoReflect.Descriptor instead.
func (*CreateCashReceiptRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{465}
}

func (x *CreateCashReceiptRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *CreateCashReceiptRequest) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

func (x *CreateCashReceiptRequest) GetAmountReceived() float64 {
	if x != nil {
		return x.AmountReceived
	}
	return 0
}

func (x *CreateCashReceiptRequest) GetChekbkid() string {
	if x != nil {
		return x.Chekbkid
	}
	return ""
}

func (x *CreateCashReceiptRequest) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

type CreateCashReceiptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Docnumbr string `protobuf:"bytes,3,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
}

func (x *CreateCashReceiptResponse) Reset() {
	*x = CreateCashReceiptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[466]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCashReceiptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCashReceiptResponse) ProtoMessage() {}

func (x *CreateCashReceiptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[466]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCashReceiptResponse.ProtoReflect.Descriptor instead.
func (*CreateCashReceiptResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{466}
}

func (x *CreateCashReceiptResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateCashReceiptResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateCashReceiptResponse) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

type CreateCashReceiptnonPBDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid  string                                    `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Bachnumb string                                    `protobuf:"bytes,2,opt,name=bachnumb,proto3" json:"bachnumb,omitempty"`
	Docnumbr string                                    `protobuf:"bytes,3,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	Custnmbr string                                    `protobuf:"bytes,4,opt,name=custnmbr,proto3" json:"custnmbr,omitempty"`
	Docdate  string                                    `protobuf:"bytes,5,opt,name=docdate,proto3" json:"docdate,omitempty"`
	Cshrctyp int32                                     `protobuf:"varint,6,opt,name=cshrctyp,proto3" json:"cshrctyp,omitempty"`
	Curncyid string                                    `protobuf:"bytes,7,opt,name=curncyid,proto3" json:"curncyid,omitempty"`
	Chekbkid string                                    `protobuf:"bytes,8,opt,name=chekbkid,proto3" json:"chekbkid,omitempty"`
	Ortrxamt float64                                   `protobuf:"fixed64,9,opt,name=ortrxamt,proto3" json:"ortrxamt,omitempty"`
	Trxdscrn string                                    `protobuf:"bytes,10,opt,name=trxdscrn,proto3" json:"trxdscrn,omitempty"`
	ApplyTo  []*CreateCashReceiptnonPBDRequest_ApplyTo `protobuf:"bytes,11,rep,name=apply_to,json=applyTo,proto3" json:"apply_to,omitempty"`
}

func (x *CreateCashReceiptnonPBDRequest) Reset() {
	*x = CreateCashReceiptnonPBDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[467]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCashReceiptnonPBDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCashReceiptnonPBDRequest) ProtoMessage() {}

func (x *CreateCashReceiptnonPBDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[467]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCashReceiptnonPBDRequest.ProtoReflect.Descriptor instead.
func (*CreateCashReceiptnonPBDRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{467}
}

func (x *CreateCashReceiptnonPBDRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *CreateCashReceiptnonPBDRequest) GetBachnumb() string {
	if x != nil {
		return x.Bachnumb
	}
	return ""
}

func (x *CreateCashReceiptnonPBDRequest) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *CreateCashReceiptnonPBDRequest) GetCustnmbr() string {
	if x != nil {
		return x.Custnmbr
	}
	return ""
}

func (x *CreateCashReceiptnonPBDRequest) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *CreateCashReceiptnonPBDRequest) GetCshrctyp() int32 {
	if x != nil {
		return x.Cshrctyp
	}
	return 0
}

func (x *CreateCashReceiptnonPBDRequest) GetCurncyid() string {
	if x != nil {
		return x.Curncyid
	}
	return ""
}

func (x *CreateCashReceiptnonPBDRequest) GetChekbkid() string {
	if x != nil {
		return x.Chekbkid
	}
	return ""
}

func (x *CreateCashReceiptnonPBDRequest) GetOrtrxamt() float64 {
	if x != nil {
		return x.Ortrxamt
	}
	return 0
}

func (x *CreateCashReceiptnonPBDRequest) GetTrxdscrn() string {
	if x != nil {
		return x.Trxdscrn
	}
	return ""
}

func (x *CreateCashReceiptnonPBDRequest) GetApplyTo() []*CreateCashReceiptnonPBDRequest_ApplyTo {
	if x != nil {
		return x.ApplyTo
	}
	return nil
}

type CreateCashReceiptnonPBDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Paymentnumber string `protobuf:"bytes,3,opt,name=paymentnumber,proto3" json:"paymentnumber,omitempty"`
}

func (x *CreateCashReceiptnonPBDResponse) Reset() {
	*x = CreateCashReceiptnonPBDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[468]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCashReceiptnonPBDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCashReceiptnonPBDResponse) ProtoMessage() {}

func (x *CreateCashReceiptnonPBDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[468]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCashReceiptnonPBDResponse.ProtoReflect.Descriptor instead.
func (*CreateCashReceiptnonPBDResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{468}
}

func (x *CreateCashReceiptnonPBDResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateCashReceiptnonPBDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateCashReceiptnonPBDResponse) GetPaymentnumber() string {
	if x != nil {
		return x.Paymentnumber
	}
	return ""
}

type CreateGoodsReceiptGPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid         string                                            `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Poprctnm        string                                            `protobuf:"bytes,2,opt,name=poprctnm,proto3" json:"poprctnm,omitempty"`
	Vnddocnm        string                                            `protobuf:"bytes,3,opt,name=vnddocnm,proto3" json:"vnddocnm,omitempty"`
	Receiptdate     string                                            `protobuf:"bytes,4,opt,name=receiptdate,proto3" json:"receiptdate,omitempty"`
	Vendorid        string                                            `protobuf:"bytes,5,opt,name=vendorid,proto3" json:"vendorid,omitempty"`
	Curncyid        string                                            `protobuf:"bytes,6,opt,name=curncyid,proto3" json:"curncyid,omitempty"`
	Subtotal        float64                                           `protobuf:"fixed64,7,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	GoodsReceiptDTL []*CreateGoodsReceiptGPRequest_GoodsReceiptDetail `protobuf:"bytes,8,rep,name=goodsReceiptDTL,proto3" json:"goodsReceiptDTL,omitempty"`
}

func (x *CreateGoodsReceiptGPRequest) Reset() {
	*x = CreateGoodsReceiptGPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[469]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodsReceiptGPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodsReceiptGPRequest) ProtoMessage() {}

func (x *CreateGoodsReceiptGPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[469]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodsReceiptGPRequest.ProtoReflect.Descriptor instead.
func (*CreateGoodsReceiptGPRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{469}
}

func (x *CreateGoodsReceiptGPRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *CreateGoodsReceiptGPRequest) GetPoprctnm() string {
	if x != nil {
		return x.Poprctnm
	}
	return ""
}

func (x *CreateGoodsReceiptGPRequest) GetVnddocnm() string {
	if x != nil {
		return x.Vnddocnm
	}
	return ""
}

func (x *CreateGoodsReceiptGPRequest) GetReceiptdate() string {
	if x != nil {
		return x.Receiptdate
	}
	return ""
}

func (x *CreateGoodsReceiptGPRequest) GetVendorid() string {
	if x != nil {
		return x.Vendorid
	}
	return ""
}

func (x *CreateGoodsReceiptGPRequest) GetCurncyid() string {
	if x != nil {
		return x.Curncyid
	}
	return ""
}

func (x *CreateGoodsReceiptGPRequest) GetSubtotal() float64 {
	if x != nil {
		return x.Subtotal
	}
	return 0
}

func (x *CreateGoodsReceiptGPRequest) GetGoodsReceiptDTL() []*CreateGoodsReceiptGPRequest_GoodsReceiptDetail {
	if x != nil {
		return x.GoodsReceiptDTL
	}
	return nil
}

type UpdateGoodsReceiptGPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid              string                                `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Poprctnm             string                                `protobuf:"bytes,2,opt,name=poprctnm,proto3" json:"poprctnm,omitempty"`
	PrpRegion            string                                `protobuf:"bytes,3,opt,name=prp_region,json=prpRegion,proto3" json:"prp_region,omitempty"`
	Note                 string                                `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
	Actlship             string                                `protobuf:"bytes,5,opt,name=actlship,proto3" json:"actlship,omitempty"`
	PrpActualarrivalTime string                                `protobuf:"bytes,6,opt,name=prp_actualarrival_time,json=prpActualarrivalTime,proto3" json:"prp_actualarrival_time,omitempty"`
	Details              []*UpdateGoodsReceiptGPRequest_Detail `protobuf:"bytes,7,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdateGoodsReceiptGPRequest) Reset() {
	*x = UpdateGoodsReceiptGPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[470]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodsReceiptGPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodsReceiptGPRequest) ProtoMessage() {}

func (x *UpdateGoodsReceiptGPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[470]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodsReceiptGPRequest.ProtoReflect.Descriptor instead.
func (*UpdateGoodsReceiptGPRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{470}
}

func (x *UpdateGoodsReceiptGPRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *UpdateGoodsReceiptGPRequest) GetPoprctnm() string {
	if x != nil {
		return x.Poprctnm
	}
	return ""
}

func (x *UpdateGoodsReceiptGPRequest) GetPrpRegion() string {
	if x != nil {
		return x.PrpRegion
	}
	return ""
}

func (x *UpdateGoodsReceiptGPRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *UpdateGoodsReceiptGPRequest) GetActlship() string {
	if x != nil {
		return x.Actlship
	}
	return ""
}

func (x *UpdateGoodsReceiptGPRequest) GetPrpActualarrivalTime() string {
	if x != nil {
		return x.PrpActualarrivalTime
	}
	return ""
}

func (x *UpdateGoodsReceiptGPRequest) GetDetails() []*UpdateGoodsReceiptGPRequest_Detail {
	if x != nil {
		return x.Details
	}
	return nil
}

type CreateSalesPaymentGPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid        string  `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Sopnumbe       string  `protobuf:"bytes,2,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"`
	AmountReceived float64 `protobuf:"fixed64,3,opt,name=amount_received,json=amountReceived,proto3" json:"amount_received,omitempty"`
	Chekbkid       string  `protobuf:"bytes,4,opt,name=chekbkid,proto3" json:"chekbkid,omitempty"`
	Docdate        string  `protobuf:"bytes,5,opt,name=docdate,proto3" json:"docdate,omitempty"`
}

func (x *CreateSalesPaymentGPRequest) Reset() {
	*x = CreateSalesPaymentGPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[471]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSalesPaymentGPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSalesPaymentGPRequest) ProtoMessage() {}

func (x *CreateSalesPaymentGPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[471]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSalesPaymentGPRequest.ProtoReflect.Descriptor instead.
func (*CreateSalesPaymentGPRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{471}
}

func (x *CreateSalesPaymentGPRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *CreateSalesPaymentGPRequest) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

func (x *CreateSalesPaymentGPRequest) GetAmountReceived() float64 {
	if x != nil {
		return x.AmountReceived
	}
	return 0
}

func (x *CreateSalesPaymentGPRequest) GetChekbkid() string {
	if x != nil {
		return x.Chekbkid
	}
	return ""
}

func (x *CreateSalesPaymentGPRequest) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

type CreateSalesPaymentGPnonPBDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid  string                                       `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Bachnumb string                                       `protobuf:"bytes,2,opt,name=bachnumb,proto3" json:"bachnumb,omitempty"`
	Docnumbr string                                       `protobuf:"bytes,3,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	Custnmbr string                                       `protobuf:"bytes,4,opt,name=custnmbr,proto3" json:"custnmbr,omitempty"`
	Docdate  string                                       `protobuf:"bytes,5,opt,name=docdate,proto3" json:"docdate,omitempty"`
	Cshrctyp int32                                        `protobuf:"varint,6,opt,name=cshrctyp,proto3" json:"cshrctyp,omitempty"`
	Curncyid string                                       `protobuf:"bytes,7,opt,name=curncyid,proto3" json:"curncyid,omitempty"`
	Chekbkid string                                       `protobuf:"bytes,8,opt,name=chekbkid,proto3" json:"chekbkid,omitempty"`
	Ortrxamt float64                                      `protobuf:"fixed64,9,opt,name=ortrxamt,proto3" json:"ortrxamt,omitempty"`
	Trxdscrn string                                       `protobuf:"bytes,10,opt,name=trxdscrn,proto3" json:"trxdscrn,omitempty"`
	ApplyTo  []*CreateSalesPaymentGPnonPBDRequest_ApplyTo `protobuf:"bytes,11,rep,name=apply_to,json=applyTo,proto3" json:"apply_to,omitempty"`
}

func (x *CreateSalesPaymentGPnonPBDRequest) Reset() {
	*x = CreateSalesPaymentGPnonPBDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[472]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSalesPaymentGPnonPBDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSalesPaymentGPnonPBDRequest) ProtoMessage() {}

func (x *CreateSalesPaymentGPnonPBDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[472]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSalesPaymentGPnonPBDRequest.ProtoReflect.Descriptor instead.
func (*CreateSalesPaymentGPnonPBDRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{472}
}

func (x *CreateSalesPaymentGPnonPBDRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *CreateSalesPaymentGPnonPBDRequest) GetBachnumb() string {
	if x != nil {
		return x.Bachnumb
	}
	return ""
}

func (x *CreateSalesPaymentGPnonPBDRequest) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *CreateSalesPaymentGPnonPBDRequest) GetCustnmbr() string {
	if x != nil {
		return x.Custnmbr
	}
	return ""
}

func (x *CreateSalesPaymentGPnonPBDRequest) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *CreateSalesPaymentGPnonPBDRequest) GetCshrctyp() int32 {
	if x != nil {
		return x.Cshrctyp
	}
	return 0
}

func (x *CreateSalesPaymentGPnonPBDRequest) GetCurncyid() string {
	if x != nil {
		return x.Curncyid
	}
	return ""
}

func (x *CreateSalesPaymentGPnonPBDRequest) GetChekbkid() string {
	if x != nil {
		return x.Chekbkid
	}
	return ""
}

func (x *CreateSalesPaymentGPnonPBDRequest) GetOrtrxamt() float64 {
	if x != nil {
		return x.Ortrxamt
	}
	return 0
}

func (x *CreateSalesPaymentGPnonPBDRequest) GetTrxdscrn() string {
	if x != nil {
		return x.Trxdscrn
	}
	return ""
}

func (x *CreateSalesPaymentGPnonPBDRequest) GetApplyTo() []*CreateSalesPaymentGPnonPBDRequest_ApplyTo {
	if x != nil {
		return x.ApplyTo
	}
	return nil
}

type CreateSalesPaymentGPnonPBDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Paymentnumber string `protobuf:"bytes,3,opt,name=paymentnumber,proto3" json:"paymentnumber,omitempty"`
}

func (x *CreateSalesPaymentGPnonPBDResponse) Reset() {
	*x = CreateSalesPaymentGPnonPBDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[473]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSalesPaymentGPnonPBDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSalesPaymentGPnonPBDResponse) ProtoMessage() {}

func (x *CreateSalesPaymentGPnonPBDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[473]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSalesPaymentGPnonPBDResponse.ProtoReflect.Descriptor instead.
func (*CreateSalesPaymentGPnonPBDResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{473}
}

func (x *CreateSalesPaymentGPnonPBDResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateSalesPaymentGPnonPBDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateSalesPaymentGPnonPBDResponse) GetPaymentnumber() string {
	if x != nil {
		return x.Paymentnumber
	}
	return ""
}

type SalesPaymentGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docnumbr      string                         `protobuf:"bytes,1,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	Docdate       string                         `protobuf:"bytes,2,opt,name=docdate,proto3" json:"docdate,omitempty"`
	Custnmbr      string                         `protobuf:"bytes,3,opt,name=custnmbr,proto3" json:"custnmbr,omitempty"`
	Custname      string                         `protobuf:"bytes,4,opt,name=custname,proto3" json:"custname,omitempty"`
	Curncyid      string                         `protobuf:"bytes,5,opt,name=curncyid,proto3" json:"curncyid,omitempty"`
	Cshrctyp      int32                          `protobuf:"varint,6,opt,name=cshrctyp,proto3" json:"cshrctyp,omitempty"`
	PaymentMethod string                         `protobuf:"bytes,7,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	Dcstatus      int32                          `protobuf:"varint,8,opt,name=dcstatus,proto3" json:"dcstatus,omitempty"`
	Ortrxamt      float64                        `protobuf:"fixed64,9,opt,name=ortrxamt,proto3" json:"ortrxamt,omitempty"`
	Creatddt      string                         `protobuf:"bytes,10,opt,name=creatddt,proto3" json:"creatddt,omitempty"`
	SalesInvoice  []*SalesPaymentGP_SalesInvoice `protobuf:"bytes,11,rep,name=sales_invoice,json=salesInvoice,proto3" json:"sales_invoice,omitempty"`
	SalesOrder    []*SalesPaymentGP_SalesOrder   `protobuf:"bytes,12,rep,name=sales_order,json=salesOrder,proto3" json:"sales_order,omitempty"`
	Ordocamt      float64                        `protobuf:"fixed64,13,opt,name=ordocamt,proto3" json:"ordocamt,omitempty"`
}

func (x *SalesPaymentGP) Reset() {
	*x = SalesPaymentGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[474]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesPaymentGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesPaymentGP) ProtoMessage() {}

func (x *SalesPaymentGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[474]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesPaymentGP.ProtoReflect.Descriptor instead.
func (*SalesPaymentGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{474}
}

func (x *SalesPaymentGP) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *SalesPaymentGP) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *SalesPaymentGP) GetCustnmbr() string {
	if x != nil {
		return x.Custnmbr
	}
	return ""
}

func (x *SalesPaymentGP) GetCustname() string {
	if x != nil {
		return x.Custname
	}
	return ""
}

func (x *SalesPaymentGP) GetCurncyid() string {
	if x != nil {
		return x.Curncyid
	}
	return ""
}

func (x *SalesPaymentGP) GetCshrctyp() int32 {
	if x != nil {
		return x.Cshrctyp
	}
	return 0
}

func (x *SalesPaymentGP) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *SalesPaymentGP) GetDcstatus() int32 {
	if x != nil {
		return x.Dcstatus
	}
	return 0
}

func (x *SalesPaymentGP) GetOrtrxamt() float64 {
	if x != nil {
		return x.Ortrxamt
	}
	return 0
}

func (x *SalesPaymentGP) GetCreatddt() string {
	if x != nil {
		return x.Creatddt
	}
	return ""
}

func (x *SalesPaymentGP) GetSalesInvoice() []*SalesPaymentGP_SalesInvoice {
	if x != nil {
		return x.SalesInvoice
	}
	return nil
}

func (x *SalesPaymentGP) GetSalesOrder() []*SalesPaymentGP_SalesOrder {
	if x != nil {
		return x.SalesOrder
	}
	return nil
}

func (x *SalesPaymentGP) GetOrdocamt() float64 {
	if x != nil {
		return x.Ordocamt
	}
	return 0
}

type GetSalesPaymentGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit         int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Docnumbr      string `protobuf:"bytes,3,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	DocdateFrom   string `protobuf:"bytes,4,opt,name=docdate_from,json=docdateFrom,proto3" json:"docdate_from,omitempty"`
	DocdateTo     string `protobuf:"bytes,5,opt,name=docdate_to,json=docdateTo,proto3" json:"docdate_to,omitempty"`
	SiDocdateFrom string `protobuf:"bytes,6,opt,name=si_docdate_from,json=siDocdateFrom,proto3" json:"si_docdate_from,omitempty"`
	SiDocdateTo   string `protobuf:"bytes,7,opt,name=si_docdate_to,json=siDocdateTo,proto3" json:"si_docdate_to,omitempty"`
	SoDocdateFrom string `protobuf:"bytes,8,opt,name=so_docdate_from,json=soDocdateFrom,proto3" json:"so_docdate_from,omitempty"`
	SoDocdateTo   string `protobuf:"bytes,9,opt,name=so_docdate_to,json=soDocdateTo,proto3" json:"so_docdate_to,omitempty"`
	Custnmbr      string `protobuf:"bytes,10,opt,name=custnmbr,proto3" json:"custnmbr,omitempty"`
	Sopnumbe      string `protobuf:"bytes,11,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"`
	GnlRegion     string `protobuf:"bytes,12,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	Locncode      string `protobuf:"bytes,13,opt,name=locncode,proto3" json:"locncode,omitempty"`
	OrderBy       string `protobuf:"bytes,14,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Status        string `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	GnlCustTypeId string `protobuf:"bytes,16,opt,name=gnl_cust_type_id,json=gnlCustTypeId,proto3" json:"gnl_cust_type_id,omitempty"`
}

func (x *GetSalesPaymentGPListRequest) Reset() {
	*x = GetSalesPaymentGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[475]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaymentGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaymentGPListRequest) ProtoMessage() {}

func (x *GetSalesPaymentGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[475]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaymentGPListRequest.ProtoReflect.Descriptor instead.
func (*GetSalesPaymentGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{475}
}

func (x *GetSalesPaymentGPListRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSalesPaymentGPListRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSalesPaymentGPListRequest) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *GetSalesPaymentGPListRequest) GetDocdateFrom() string {
	if x != nil {
		return x.DocdateFrom
	}
	return ""
}

func (x *GetSalesPaymentGPListRequest) GetDocdateTo() string {
	if x != nil {
		return x.DocdateTo
	}
	return ""
}

func (x *GetSalesPaymentGPListRequest) GetSiDocdateFrom() string {
	if x != nil {
		return x.SiDocdateFrom
	}
	return ""
}

func (x *GetSalesPaymentGPListRequest) GetSiDocdateTo() string {
	if x != nil {
		return x.SiDocdateTo
	}
	return ""
}

func (x *GetSalesPaymentGPListRequest) GetSoDocdateFrom() string {
	if x != nil {
		return x.SoDocdateFrom
	}
	return ""
}

func (x *GetSalesPaymentGPListRequest) GetSoDocdateTo() string {
	if x != nil {
		return x.SoDocdateTo
	}
	return ""
}

func (x *GetSalesPaymentGPListRequest) GetCustnmbr() string {
	if x != nil {
		return x.Custnmbr
	}
	return ""
}

func (x *GetSalesPaymentGPListRequest) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

func (x *GetSalesPaymentGPListRequest) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *GetSalesPaymentGPListRequest) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *GetSalesPaymentGPListRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetSalesPaymentGPListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetSalesPaymentGPListRequest) GetGnlCustTypeId() string {
	if x != nil {
		return x.GnlCustTypeId
	}
	return ""
}

type GetSalesPaymentGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32             `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32             `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32             `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32             `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*SalesPaymentGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool              `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       []string          `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Message      string            `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetSalesPaymentGPResponse) Reset() {
	*x = GetSalesPaymentGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[476]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaymentGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaymentGPResponse) ProtoMessage() {}

func (x *GetSalesPaymentGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[476]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaymentGPResponse.ProtoReflect.Descriptor instead.
func (*GetSalesPaymentGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{476}
}

func (x *GetSalesPaymentGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetSalesPaymentGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetSalesPaymentGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetSalesPaymentGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetSalesPaymentGPResponse) GetData() []*SalesPaymentGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetSalesPaymentGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetSalesPaymentGPResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GetSalesPaymentGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetSalesPaymentGPDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid string `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSalesPaymentGPDetailRequest) Reset() {
	*x = GetSalesPaymentGPDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[477]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesPaymentGPDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesPaymentGPDetailRequest) ProtoMessage() {}

func (x *GetSalesPaymentGPDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[477]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesPaymentGPDetailRequest.ProtoReflect.Descriptor instead.
func (*GetSalesPaymentGPDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{477}
}

func (x *GetSalesPaymentGPDetailRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *GetSalesPaymentGPDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type VoucherGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnlVoucherId       string                        `protobuf:"bytes,1,opt,name=gnl_voucher_id,json=gnlVoucherId,proto3" json:"gnl_voucher_id,omitempty"`
	GnlChannel         int32                         `protobuf:"varint,2,opt,name=gnl_channel,json=gnlChannel,proto3" json:"gnl_channel,omitempty"`
	GnlChannelDesc     string                        `protobuf:"bytes,3,opt,name=gnl_channel_desc,json=gnlChannelDesc,proto3" json:"gnl_channel_desc,omitempty"`
	GnlVoucherType     int32                         `protobuf:"varint,4,opt,name=gnl_voucher_type,json=gnlVoucherType,proto3" json:"gnl_voucher_type,omitempty"`
	GnlVoucherTypeDesc string                        `protobuf:"bytes,5,opt,name=gnl_voucher_type_desc,json=gnlVoucherTypeDesc,proto3" json:"gnl_voucher_type_desc,omitempty"`
	GnlVoucherName     string                        `protobuf:"bytes,6,opt,name=gnl_voucher_name,json=gnlVoucherName,proto3" json:"gnl_voucher_name,omitempty"`
	GnlExpenseAccount  string                        `protobuf:"bytes,7,opt,name=gnl_expense_account,json=gnlExpenseAccount,proto3" json:"gnl_expense_account,omitempty"`
	GnlVoucherCode     string                        `protobuf:"bytes,8,opt,name=gnl_voucher_code,json=gnlVoucherCode,proto3" json:"gnl_voucher_code,omitempty"`
	GnlMinimumOrder    string                        `protobuf:"bytes,9,opt,name=gnl_minimum_order,json=gnlMinimumOrder,proto3" json:"gnl_minimum_order,omitempty"`
	GnlDiscountAmount  string                        `protobuf:"bytes,10,opt,name=gnl_discount_amount,json=gnlDiscountAmount,proto3" json:"gnl_discount_amount,omitempty"`
	GnlVoucherStatus   int32                         `protobuf:"varint,11,opt,name=gnl_voucher_status,json=gnlVoucherStatus,proto3" json:"gnl_voucher_status,omitempty"`
	Inactive           int32                         `protobuf:"varint,12,opt,name=inactive,proto3" json:"inactive,omitempty"`
	InactiveDesc       string                        `protobuf:"bytes,13,opt,name=inactive_desc,json=inactiveDesc,proto3" json:"inactive_desc,omitempty"`
	Restriction        []*VoucherGP_Restriction      `protobuf:"bytes,14,rep,name=restriction,proto3" json:"restriction,omitempty"`
	AdvancedProperties []*VoucherGP_AdvancedProperty `protobuf:"bytes,15,rep,name=advanced_properties,json=advancedProperties,proto3" json:"advanced_properties,omitempty"`
}

func (x *VoucherGP) Reset() {
	*x = VoucherGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[478]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoucherGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoucherGP) ProtoMessage() {}

func (x *VoucherGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[478]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoucherGP.ProtoReflect.Descriptor instead.
func (*VoucherGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{478}
}

func (x *VoucherGP) GetGnlVoucherId() string {
	if x != nil {
		return x.GnlVoucherId
	}
	return ""
}

func (x *VoucherGP) GetGnlChannel() int32 {
	if x != nil {
		return x.GnlChannel
	}
	return 0
}

func (x *VoucherGP) GetGnlChannelDesc() string {
	if x != nil {
		return x.GnlChannelDesc
	}
	return ""
}

func (x *VoucherGP) GetGnlVoucherType() int32 {
	if x != nil {
		return x.GnlVoucherType
	}
	return 0
}

func (x *VoucherGP) GetGnlVoucherTypeDesc() string {
	if x != nil {
		return x.GnlVoucherTypeDesc
	}
	return ""
}

func (x *VoucherGP) GetGnlVoucherName() string {
	if x != nil {
		return x.GnlVoucherName
	}
	return ""
}

func (x *VoucherGP) GetGnlExpenseAccount() string {
	if x != nil {
		return x.GnlExpenseAccount
	}
	return ""
}

func (x *VoucherGP) GetGnlVoucherCode() string {
	if x != nil {
		return x.GnlVoucherCode
	}
	return ""
}

func (x *VoucherGP) GetGnlMinimumOrder() string {
	if x != nil {
		return x.GnlMinimumOrder
	}
	return ""
}

func (x *VoucherGP) GetGnlDiscountAmount() string {
	if x != nil {
		return x.GnlDiscountAmount
	}
	return ""
}

func (x *VoucherGP) GetGnlVoucherStatus() int32 {
	if x != nil {
		return x.GnlVoucherStatus
	}
	return 0
}

func (x *VoucherGP) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *VoucherGP) GetInactiveDesc() string {
	if x != nil {
		return x.InactiveDesc
	}
	return ""
}

func (x *VoucherGP) GetRestriction() []*VoucherGP_Restriction {
	if x != nil {
		return x.Restriction
	}
	return nil
}

func (x *VoucherGP) GetAdvancedProperties() []*VoucherGP_AdvancedProperty {
	if x != nil {
		return x.AdvancedProperties
	}
	return nil
}

type GetVoucherGPListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit            int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset           int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	GnlVoucherId     string `protobuf:"bytes,3,opt,name=gnl_voucher_id,json=gnlVoucherId,proto3" json:"gnl_voucher_id,omitempty"`
	GnlVoucherCode   string `protobuf:"bytes,4,opt,name=gnl_voucher_code,json=gnlVoucherCode,proto3" json:"gnl_voucher_code,omitempty"`
	GnlVoucherStatus string `protobuf:"bytes,5,opt,name=gnl_voucher_status,json=gnlVoucherStatus,proto3" json:"gnl_voucher_status,omitempty"`
	GnlStartPeriod   string `protobuf:"bytes,6,opt,name=gnl_start_period,json=gnlStartPeriod,proto3" json:"gnl_start_period,omitempty"`
	GnlEndPeriod     string `protobuf:"bytes,7,opt,name=gnl_end_period,json=gnlEndPeriod,proto3" json:"gnl_end_period,omitempty"`
}

func (x *GetVoucherGPListRequest) Reset() {
	*x = GetVoucherGPListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[479]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVoucherGPListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVoucherGPListRequest) ProtoMessage() {}

func (x *GetVoucherGPListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[479]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVoucherGPListRequest.ProtoReflect.Descriptor instead.
func (*GetVoucherGPListRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{479}
}

func (x *GetVoucherGPListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetVoucherGPListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetVoucherGPListRequest) GetGnlVoucherId() string {
	if x != nil {
		return x.GnlVoucherId
	}
	return ""
}

func (x *GetVoucherGPListRequest) GetGnlVoucherCode() string {
	if x != nil {
		return x.GnlVoucherCode
	}
	return ""
}

func (x *GetVoucherGPListRequest) GetGnlVoucherStatus() string {
	if x != nil {
		return x.GnlVoucherStatus
	}
	return ""
}

func (x *GetVoucherGPListRequest) GetGnlStartPeriod() string {
	if x != nil {
		return x.GnlStartPeriod
	}
	return ""
}

func (x *GetVoucherGPListRequest) GetGnlEndPeriod() string {
	if x != nil {
		return x.GnlEndPeriod
	}
	return ""
}

type GetVoucherGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber   int32        `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	PageSize     int32        `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	TotalPages   int32        `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	TotalRecords int32        `protobuf:"varint,4,opt,name=totalRecords,proto3" json:"totalRecords,omitempty"`
	Data         []*VoucherGP `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	Succeeded    bool         `protobuf:"varint,6,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Errors       string       `protobuf:"bytes,7,opt,name=errors,proto3" json:"errors,omitempty"`
	Message      string       `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetVoucherGPResponse) Reset() {
	*x = GetVoucherGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[480]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVoucherGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVoucherGPResponse) ProtoMessage() {}

func (x *GetVoucherGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[480]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVoucherGPResponse.ProtoReflect.Descriptor instead.
func (*GetVoucherGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{480}
}

func (x *GetVoucherGPResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetVoucherGPResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetVoucherGPResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *GetVoucherGPResponse) GetTotalRecords() int32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *GetVoucherGPResponse) GetData() []*VoucherGP {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetVoucherGPResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *GetVoucherGPResponse) GetErrors() string {
	if x != nil {
		return x.Errors
	}
	return ""
}

func (x *GetVoucherGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateVoucherGPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interid            string                                     `protobuf:"bytes,1,opt,name=interid,proto3" json:"interid,omitempty"`
	GnlVoucherId       string                                     `protobuf:"bytes,2,opt,name=gnl_voucher_id,json=gnlVoucherId,proto3" json:"gnl_voucher_id,omitempty"`
	GnlChannel         int32                                      `protobuf:"varint,3,opt,name=gnl_channel,json=gnlChannel,proto3" json:"gnl_channel,omitempty"`
	GnlVoucherType     int32                                      `protobuf:"varint,4,opt,name=gnl_voucher_type,json=gnlVoucherType,proto3" json:"gnl_voucher_type,omitempty"`
	GnlVoucherName     string                                     `protobuf:"bytes,5,opt,name=gnl_voucher_name,json=gnlVoucherName,proto3" json:"gnl_voucher_name,omitempty"`
	GnlExpenseAccount  string                                     `protobuf:"bytes,6,opt,name=gnl_expense_account,json=gnlExpenseAccount,proto3" json:"gnl_expense_account,omitempty"`
	GnlVoucherCode     string                                     `protobuf:"bytes,7,opt,name=gnl_voucher_code,json=gnlVoucherCode,proto3" json:"gnl_voucher_code,omitempty"`
	GnlMinimumOrder    int32                                      `protobuf:"varint,8,opt,name=gnl_minimum_order,json=gnlMinimumOrder,proto3" json:"gnl_minimum_order,omitempty"`
	GnlDiscountAmount  int32                                      `protobuf:"varint,9,opt,name=gnl_discount_amount,json=gnlDiscountAmount,proto3" json:"gnl_discount_amount,omitempty"`
	GnlVoucherStatus   int32                                      `protobuf:"varint,10,opt,name=gnl_voucher_status,json=gnlVoucherStatus,proto3" json:"gnl_voucher_status,omitempty"`
	Inactive           int32                                      `protobuf:"varint,11,opt,name=inactive,proto3" json:"inactive,omitempty"`
	Restriction        *CreateVoucherGPRequest_Restriction        `protobuf:"bytes,12,opt,name=restriction,proto3" json:"restriction,omitempty"`
	AdvancedProperties *CreateVoucherGPRequest_AdvancedProperties `protobuf:"bytes,13,opt,name=advanced_properties,json=advancedProperties,proto3" json:"advanced_properties,omitempty"`
}

func (x *CreateVoucherGPRequest) Reset() {
	*x = CreateVoucherGPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[481]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVoucherGPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVoucherGPRequest) ProtoMessage() {}

func (x *CreateVoucherGPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[481]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVoucherGPRequest.ProtoReflect.Descriptor instead.
func (*CreateVoucherGPRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{481}
}

func (x *CreateVoucherGPRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *CreateVoucherGPRequest) GetGnlVoucherId() string {
	if x != nil {
		return x.GnlVoucherId
	}
	return ""
}

func (x *CreateVoucherGPRequest) GetGnlChannel() int32 {
	if x != nil {
		return x.GnlChannel
	}
	return 0
}

func (x *CreateVoucherGPRequest) GetGnlVoucherType() int32 {
	if x != nil {
		return x.GnlVoucherType
	}
	return 0
}

func (x *CreateVoucherGPRequest) GetGnlVoucherName() string {
	if x != nil {
		return x.GnlVoucherName
	}
	return ""
}

func (x *CreateVoucherGPRequest) GetGnlExpenseAccount() string {
	if x != nil {
		return x.GnlExpenseAccount
	}
	return ""
}

func (x *CreateVoucherGPRequest) GetGnlVoucherCode() string {
	if x != nil {
		return x.GnlVoucherCode
	}
	return ""
}

func (x *CreateVoucherGPRequest) GetGnlMinimumOrder() int32 {
	if x != nil {
		return x.GnlMinimumOrder
	}
	return 0
}

func (x *CreateVoucherGPRequest) GetGnlDiscountAmount() int32 {
	if x != nil {
		return x.GnlDiscountAmount
	}
	return 0
}

func (x *CreateVoucherGPRequest) GetGnlVoucherStatus() int32 {
	if x != nil {
		return x.GnlVoucherStatus
	}
	return 0
}

func (x *CreateVoucherGPRequest) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *CreateVoucherGPRequest) GetRestriction() *CreateVoucherGPRequest_Restriction {
	if x != nil {
		return x.Restriction
	}
	return nil
}

func (x *CreateVoucherGPRequest) GetAdvancedProperties() *CreateVoucherGPRequest_AdvancedProperties {
	if x != nil {
		return x.AdvancedProperties
	}
	return nil
}

type CreateVoucherGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateVoucherGPResponse) Reset() {
	*x = CreateVoucherGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[482]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVoucherGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVoucherGPResponse) ProtoMessage() {}

func (x *CreateVoucherGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[482]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVoucherGPResponse.ProtoReflect.Descriptor instead.
func (*CreateVoucherGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{482}
}

func (x *CreateVoucherGPResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateVoucherGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SalesMovement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoNumber      string                         `protobuf:"bytes,1,opt,name=so_number,json=soNumber,proto3" json:"so_number,omitempty"`
	Docdate       string                         `protobuf:"bytes,2,opt,name=docdate,proto3" json:"docdate,omitempty"`
	SoStatus      string                         `protobuf:"bytes,3,opt,name=so_status,json=soStatus,proto3" json:"so_status,omitempty"`
	Picking       []*SalesMovement_Picking       `protobuf:"bytes,4,rep,name=picking,proto3" json:"picking,omitempty"`
	Checking      []*SalesMovement_Checking      `protobuf:"bytes,5,rep,name=checking,proto3" json:"checking,omitempty"`
	DeliveryOrder []*SalesMovement_DeliveryOrder `protobuf:"bytes,6,rep,name=delivery_order,json=deliveryOrder,proto3" json:"delivery_order,omitempty"`
	SiNumber      string                         `protobuf:"bytes,7,opt,name=si_number,json=siNumber,proto3" json:"si_number,omitempty"`
	SiStatus      string                         `protobuf:"bytes,8,opt,name=si_status,json=siStatus,proto3" json:"si_status,omitempty"`
	CashReceipt   []*SalesMovement_CashReceipt   `protobuf:"bytes,9,rep,name=cash_receipt,json=cashReceipt,proto3" json:"cash_receipt,omitempty"`
	SalesReturn   []*SalesMovement_SalesReturn   `protobuf:"bytes,10,rep,name=sales_return,json=salesReturn,proto3" json:"sales_return,omitempty"`
}

func (x *SalesMovement) Reset() {
	*x = SalesMovement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[483]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesMovement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesMovement) ProtoMessage() {}

func (x *SalesMovement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[483]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesMovement.ProtoReflect.Descriptor instead.
func (*SalesMovement) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{483}
}

func (x *SalesMovement) GetSoNumber() string {
	if x != nil {
		return x.SoNumber
	}
	return ""
}

func (x *SalesMovement) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *SalesMovement) GetSoStatus() string {
	if x != nil {
		return x.SoStatus
	}
	return ""
}

func (x *SalesMovement) GetPicking() []*SalesMovement_Picking {
	if x != nil {
		return x.Picking
	}
	return nil
}

func (x *SalesMovement) GetChecking() []*SalesMovement_Checking {
	if x != nil {
		return x.Checking
	}
	return nil
}

func (x *SalesMovement) GetDeliveryOrder() []*SalesMovement_DeliveryOrder {
	if x != nil {
		return x.DeliveryOrder
	}
	return nil
}

func (x *SalesMovement) GetSiNumber() string {
	if x != nil {
		return x.SiNumber
	}
	return ""
}

func (x *SalesMovement) GetSiStatus() string {
	if x != nil {
		return x.SiStatus
	}
	return ""
}

func (x *SalesMovement) GetCashReceipt() []*SalesMovement_CashReceipt {
	if x != nil {
		return x.CashReceipt
	}
	return nil
}

func (x *SalesMovement) GetSalesReturn() []*SalesMovement_SalesReturn {
	if x != nil {
		return x.SalesReturn
	}
	return nil
}

type GetSalesMovementGPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit    int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Interid  string `protobuf:"bytes,3,opt,name=interid,proto3" json:"interid,omitempty"`
	SoNumber string `protobuf:"bytes,4,opt,name=so_number,json=soNumber,proto3" json:"so_number,omitempty"`
}

func (x *GetSalesMovementGPRequest) Reset() {
	*x = GetSalesMovementGPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[484]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesMovementGPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesMovementGPRequest) ProtoMessage() {}

func (x *GetSalesMovementGPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[484]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesMovementGPRequest.ProtoReflect.Descriptor instead.
func (*GetSalesMovementGPRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{484}
}

func (x *GetSalesMovementGPRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSalesMovementGPRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSalesMovementGPRequest) GetInterid() string {
	if x != nil {
		return x.Interid
	}
	return ""
}

func (x *GetSalesMovementGPRequest) GetSoNumber() string {
	if x != nil {
		return x.SoNumber
	}
	return ""
}

type GetSalesMovementGPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*SalesMovement `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSalesMovementGPResponse) Reset() {
	*x = GetSalesMovementGPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[485]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSalesMovementGPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSalesMovementGPResponse) ProtoMessage() {}

func (x *GetSalesMovementGPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[485]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSalesMovementGPResponse.ProtoReflect.Descriptor instead.
func (*GetSalesMovementGPResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{485}
}

func (x *GetSalesMovementGPResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSalesMovementGPResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSalesMovementGPResponse) GetData() []*SalesMovement {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateFixedVaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerIdGp   string `protobuf:"bytes,1,opt,name=customer_id_gp,json=customerIdGp,proto3" json:"customer_id_gp,omitempty"`
	FixedVaPermata string `protobuf:"bytes,2,opt,name=fixed_va_permata,json=fixedVaPermata,proto3" json:"fixed_va_permata,omitempty"`
	FixedVaBca     string `protobuf:"bytes,3,opt,name=fixed_va_bca,json=fixedVaBca,proto3" json:"fixed_va_bca,omitempty"`
}

func (x *UpdateFixedVaRequest) Reset() {
	*x = UpdateFixedVaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[486]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFixedVaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFixedVaRequest) ProtoMessage() {}

func (x *UpdateFixedVaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[486]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFixedVaRequest.ProtoReflect.Descriptor instead.
func (*UpdateFixedVaRequest) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{486}
}

func (x *UpdateFixedVaRequest) GetCustomerIdGp() string {
	if x != nil {
		return x.CustomerIdGp
	}
	return ""
}

func (x *UpdateFixedVaRequest) GetFixedVaPermata() string {
	if x != nil {
		return x.FixedVaPermata
	}
	return ""
}

func (x *UpdateFixedVaRequest) GetFixedVaBca() string {
	if x != nil {
		return x.FixedVaBca
	}
	return ""
}

type UpdateFixedVaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateFixedVaResponse) Reset() {
	*x = UpdateFixedVaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[487]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFixedVaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFixedVaResponse) ProtoMessage() {}

func (x *UpdateFixedVaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[487]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFixedVaResponse.ProtoReflect.Descriptor instead.
func (*UpdateFixedVaResponse) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{487}
}

func (x *UpdateFixedVaResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateFixedVaResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ItemMasterComplexGP_PriceLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnlRegion     string  `protobuf:"bytes,1,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	GnlCustTypeId string  `protobuf:"bytes,2,opt,name=gnl_cust_type_id,json=gnlCustTypeId,proto3" json:"gnl_cust_type_id,omitempty"`
	Prclevel      string  `protobuf:"bytes,3,opt,name=prclevel,proto3" json:"prclevel,omitempty"`
	Price         float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *ItemMasterComplexGP_PriceLevel) Reset() {
	*x = ItemMasterComplexGP_PriceLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[488]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemMasterComplexGP_PriceLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemMasterComplexGP_PriceLevel) ProtoMessage() {}

func (x *ItemMasterComplexGP_PriceLevel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[488]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemMasterComplexGP_PriceLevel.ProtoReflect.Descriptor instead.
func (*ItemMasterComplexGP_PriceLevel) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ItemMasterComplexGP_PriceLevel) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *ItemMasterComplexGP_PriceLevel) GetGnlCustTypeId() string {
	if x != nil {
		return x.GnlCustTypeId
	}
	return ""
}

func (x *ItemMasterComplexGP_PriceLevel) GetPrclevel() string {
	if x != nil {
		return x.Prclevel
	}
	return ""
}

func (x *ItemMasterComplexGP_PriceLevel) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type ItemMasterComplexGP_Site struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnlRegion           string  `protobuf:"bytes,1,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	Locncode            string  `protobuf:"bytes,2,opt,name=locncode,proto3" json:"locncode,omitempty"`
	GnlCbSalability     int32   `protobuf:"varint,3,opt,name=gnl_cb_salability,json=gnlCbSalability,proto3" json:"gnl_cb_salability,omitempty"`
	GnlCbSalabilityDesc string  `protobuf:"bytes,4,opt,name=gnl_cb_salability_desc,json=gnlCbSalabilityDesc,proto3" json:"gnl_cb_salability_desc,omitempty"`
	TotalStock          float64 `protobuf:"fixed64,5,opt,name=total_stock,json=totalStock,proto3" json:"total_stock,omitempty"`
}

func (x *ItemMasterComplexGP_Site) Reset() {
	*x = ItemMasterComplexGP_Site{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[489]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemMasterComplexGP_Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemMasterComplexGP_Site) ProtoMessage() {}

func (x *ItemMasterComplexGP_Site) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[489]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemMasterComplexGP_Site.ProtoReflect.Descriptor instead.
func (*ItemMasterComplexGP_Site) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{10, 1}
}

func (x *ItemMasterComplexGP_Site) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *ItemMasterComplexGP_Site) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *ItemMasterComplexGP_Site) GetGnlCbSalability() int32 {
	if x != nil {
		return x.GnlCbSalability
	}
	return 0
}

func (x *ItemMasterComplexGP_Site) GetGnlCbSalabilityDesc() string {
	if x != nil {
		return x.GnlCbSalabilityDesc
	}
	return ""
}

func (x *ItemMasterComplexGP_Site) GetTotalStock() float64 {
	if x != nil {
		return x.TotalStock
	}
	return 0
}

type ItemMasterComplexGP_PriceTiering struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docnumbr          string  `protobuf:"bytes,1,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	GnlRegion         string  `protobuf:"bytes,2,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	EffectiveDate     string  `protobuf:"bytes,3,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	GnlMinQty         int32   `protobuf:"varint,4,opt,name=gnl_min_qty,json=gnlMinQty,proto3" json:"gnl_min_qty,omitempty"`
	GnlDiscountAmount float64 `protobuf:"fixed64,5,opt,name=gnl_discount_amount,json=gnlDiscountAmount,proto3" json:"gnl_discount_amount,omitempty"`
	GnlQuotaUser      int32   `protobuf:"varint,6,opt,name=gnl_quota_user,json=gnlQuotaUser,proto3" json:"gnl_quota_user,omitempty"`
}

func (x *ItemMasterComplexGP_PriceTiering) Reset() {
	*x = ItemMasterComplexGP_PriceTiering{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[490]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemMasterComplexGP_PriceTiering) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemMasterComplexGP_PriceTiering) ProtoMessage() {}

func (x *ItemMasterComplexGP_PriceTiering) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[490]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemMasterComplexGP_PriceTiering.ProtoReflect.Descriptor instead.
func (*ItemMasterComplexGP_PriceTiering) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{10, 2}
}

func (x *ItemMasterComplexGP_PriceTiering) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *ItemMasterComplexGP_PriceTiering) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *ItemMasterComplexGP_PriceTiering) GetEffectiveDate() string {
	if x != nil {
		return x.EffectiveDate
	}
	return ""
}

func (x *ItemMasterComplexGP_PriceTiering) GetGnlMinQty() int32 {
	if x != nil {
		return x.GnlMinQty
	}
	return 0
}

func (x *ItemMasterComplexGP_PriceTiering) GetGnlDiscountAmount() float64 {
	if x != nil {
		return x.GnlDiscountAmount
	}
	return 0
}

func (x *ItemMasterComplexGP_PriceTiering) GetGnlQuotaUser() int32 {
	if x != nil {
		return x.GnlQuotaUser
	}
	return 0
}

type SubmitPickingCheckingResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bachnumb      string                                            `protobuf:"bytes,1,opt,name=bachnumb,proto3" json:"bachnumb,omitempty"`
	Checking      *SubmitPickingCheckingResponse_Data_Checking      `protobuf:"bytes,2,opt,name=checking,proto3" json:"checking,omitempty"`
	DeliveryOrder *SubmitPickingCheckingResponse_Data_DeliveryOrder `protobuf:"bytes,3,opt,name=delivery_order,json=deliveryOrder,proto3" json:"delivery_order,omitempty"`
	SalesInvoice  *SubmitPickingCheckingResponse_Data_SalesInvoice  `protobuf:"bytes,4,opt,name=sales_invoice,json=salesInvoice,proto3" json:"sales_invoice,omitempty"`
}

func (x *SubmitPickingCheckingResponse_Data) Reset() {
	*x = SubmitPickingCheckingResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[491]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitPickingCheckingResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitPickingCheckingResponse_Data) ProtoMessage() {}

func (x *SubmitPickingCheckingResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[491]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitPickingCheckingResponse_Data.ProtoReflect.Descriptor instead.
func (*SubmitPickingCheckingResponse_Data) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{233, 0}
}

func (x *SubmitPickingCheckingResponse_Data) GetBachnumb() string {
	if x != nil {
		return x.Bachnumb
	}
	return ""
}

func (x *SubmitPickingCheckingResponse_Data) GetChecking() *SubmitPickingCheckingResponse_Data_Checking {
	if x != nil {
		return x.Checking
	}
	return nil
}

func (x *SubmitPickingCheckingResponse_Data) GetDeliveryOrder() *SubmitPickingCheckingResponse_Data_DeliveryOrder {
	if x != nil {
		return x.DeliveryOrder
	}
	return nil
}

func (x *SubmitPickingCheckingResponse_Data) GetSalesInvoice() *SubmitPickingCheckingResponse_Data_SalesInvoice {
	if x != nil {
		return x.SalesInvoice
	}
	return nil
}

type SubmitPickingCheckingResponse_Data_Checking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docnumbr string `protobuf:"bytes,1,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
}

func (x *SubmitPickingCheckingResponse_Data_Checking) Reset() {
	*x = SubmitPickingCheckingResponse_Data_Checking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[492]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitPickingCheckingResponse_Data_Checking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitPickingCheckingResponse_Data_Checking) ProtoMessage() {}

func (x *SubmitPickingCheckingResponse_Data_Checking) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[492]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitPickingCheckingResponse_Data_Checking.ProtoReflect.Descriptor instead.
func (*SubmitPickingCheckingResponse_Data_Checking) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{233, 0, 0}
}

func (x *SubmitPickingCheckingResponse_Data_Checking) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

type SubmitPickingCheckingResponse_Data_DeliveryOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docnumbr string `protobuf:"bytes,1,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
}

func (x *SubmitPickingCheckingResponse_Data_DeliveryOrder) Reset() {
	*x = SubmitPickingCheckingResponse_Data_DeliveryOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[493]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitPickingCheckingResponse_Data_DeliveryOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitPickingCheckingResponse_Data_DeliveryOrder) ProtoMessage() {}

func (x *SubmitPickingCheckingResponse_Data_DeliveryOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[493]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitPickingCheckingResponse_Data_DeliveryOrder.ProtoReflect.Descriptor instead.
func (*SubmitPickingCheckingResponse_Data_DeliveryOrder) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{233, 0, 1}
}

func (x *SubmitPickingCheckingResponse_Data_DeliveryOrder) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

type SubmitPickingCheckingResponse_Data_SalesInvoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docnumbr string `protobuf:"bytes,1,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
}

func (x *SubmitPickingCheckingResponse_Data_SalesInvoice) Reset() {
	*x = SubmitPickingCheckingResponse_Data_SalesInvoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[494]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitPickingCheckingResponse_Data_SalesInvoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitPickingCheckingResponse_Data_SalesInvoice) ProtoMessage() {}

func (x *SubmitPickingCheckingResponse_Data_SalesInvoice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[494]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitPickingCheckingResponse_Data_SalesInvoice.ProtoReflect.Descriptor instead.
func (*SubmitPickingCheckingResponse_Data_SalesInvoice) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{233, 0, 2}
}

func (x *SubmitPickingCheckingResponse_Data_SalesInvoice) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

type VendorGP_Vpymtrmid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PYMTRMID              string `protobuf:"bytes,1,opt,name=PYMTRMID,proto3" json:"PYMTRMID,omitempty"`
	Calculatedatefromdays uint32 `protobuf:"varint,2,opt,name=calculatedatefromdays,proto3" json:"calculatedatefromdays,omitempty"`
}

func (x *VendorGP_Vpymtrmid) Reset() {
	*x = VendorGP_Vpymtrmid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[495]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorGP_Vpymtrmid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorGP_Vpymtrmid) ProtoMessage() {}

func (x *VendorGP_Vpymtrmid) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[495]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorGP_Vpymtrmid.ProtoReflect.Descriptor instead.
func (*VendorGP_Vpymtrmid) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{341, 0}
}

func (x *VendorGP_Vpymtrmid) GetPYMTRMID() string {
	if x != nil {
		return x.PYMTRMID
	}
	return ""
}

func (x *VendorGP_Vpymtrmid) GetCalculatedatefromdays() uint32 {
	if x != nil {
		return x.Calculatedatefromdays
	}
	return 0
}

type VendorGP_Vorganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PRP_Vendor_Org_ID   string `protobuf:"bytes,1,opt,name=PRP_Vendor_Org_ID,json=PRPVendorOrgID,proto3" json:"PRP_Vendor_Org_ID,omitempty"`
	PRP_Vendor_Org_Desc string `protobuf:"bytes,2,opt,name=PRP_Vendor_Org_Desc,json=PRPVendorOrgDesc,proto3" json:"PRP_Vendor_Org_Desc,omitempty"`
	INACTIVE            uint32 `protobuf:"varint,3,opt,name=INACTIVE,proto3" json:"INACTIVE,omitempty"`
	INACTIVE_DESC       string `protobuf:"bytes,4,opt,name=INACTIVE_DESC,json=INACTIVEDESC,proto3" json:"INACTIVE_DESC,omitempty"`
	CREATDDT            string `protobuf:"bytes,5,opt,name=CREATDDT,proto3" json:"CREATDDT,omitempty"`
	MODIFDT             string `protobuf:"bytes,6,opt,name=MODIFDT,proto3" json:"MODIFDT,omitempty"`
	CRUSRID             string `protobuf:"bytes,7,opt,name=CRUSRID,proto3" json:"CRUSRID,omitempty"`
	MDFUSRID            string `protobuf:"bytes,8,opt,name=MDFUSRID,proto3" json:"MDFUSRID,omitempty"`
}

func (x *VendorGP_Vorganization) Reset() {
	*x = VendorGP_Vorganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[496]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorGP_Vorganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorGP_Vorganization) ProtoMessage() {}

func (x *VendorGP_Vorganization) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[496]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorGP_Vorganization.ProtoReflect.Descriptor instead.
func (*VendorGP_Vorganization) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{341, 1}
}

func (x *VendorGP_Vorganization) GetPRP_Vendor_Org_ID() string {
	if x != nil {
		return x.PRP_Vendor_Org_ID
	}
	return ""
}

func (x *VendorGP_Vorganization) GetPRP_Vendor_Org_Desc() string {
	if x != nil {
		return x.PRP_Vendor_Org_Desc
	}
	return ""
}

func (x *VendorGP_Vorganization) GetINACTIVE() uint32 {
	if x != nil {
		return x.INACTIVE
	}
	return 0
}

func (x *VendorGP_Vorganization) GetINACTIVE_DESC() string {
	if x != nil {
		return x.INACTIVE_DESC
	}
	return ""
}

func (x *VendorGP_Vorganization) GetCREATDDT() string {
	if x != nil {
		return x.CREATDDT
	}
	return ""
}

func (x *VendorGP_Vorganization) GetMODIFDT() string {
	if x != nil {
		return x.MODIFDT
	}
	return ""
}

func (x *VendorGP_Vorganization) GetCRUSRID() string {
	if x != nil {
		return x.CRUSRID
	}
	return ""
}

func (x *VendorGP_Vorganization) GetMDFUSRID() string {
	if x != nil {
		return x.MDFUSRID
	}
	return ""
}

type VendorGP_Vclassification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PRP_Vendor_CLASF_ID   string `protobuf:"bytes,1,opt,name=PRP_Vendor_CLASF_ID,json=PRPVendorCLASFID,proto3" json:"PRP_Vendor_CLASF_ID,omitempty"`
	PRP_Vendor_CLASF_Desc string `protobuf:"bytes,2,opt,name=PRP_Vendor_CLASF_Desc,json=PRPVendorCLASFDesc,proto3" json:"PRP_Vendor_CLASF_Desc,omitempty"`
	INACTIVE              uint32 `protobuf:"varint,3,opt,name=INACTIVE,proto3" json:"INACTIVE,omitempty"`
	INACTIVE_DESC         string `protobuf:"bytes,4,opt,name=INACTIVE_DESC,json=INACTIVEDESC,proto3" json:"INACTIVE_DESC,omitempty"`
	CREATDDT              string `protobuf:"bytes,5,opt,name=CREATDDT,proto3" json:"CREATDDT,omitempty"`
	MODIFDT               string `protobuf:"bytes,6,opt,name=MODIFDT,proto3" json:"MODIFDT,omitempty"`
	CRUSRID               string `protobuf:"bytes,7,opt,name=CRUSRID,proto3" json:"CRUSRID,omitempty"`
	MDFUSRID              string `protobuf:"bytes,8,opt,name=MDFUSRID,proto3" json:"MDFUSRID,omitempty"`
}

func (x *VendorGP_Vclassification) Reset() {
	*x = VendorGP_Vclassification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[497]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorGP_Vclassification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorGP_Vclassification) ProtoMessage() {}

func (x *VendorGP_Vclassification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[497]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorGP_Vclassification.ProtoReflect.Descriptor instead.
func (*VendorGP_Vclassification) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{341, 2}
}

func (x *VendorGP_Vclassification) GetPRP_Vendor_CLASF_ID() string {
	if x != nil {
		return x.PRP_Vendor_CLASF_ID
	}
	return ""
}

func (x *VendorGP_Vclassification) GetPRP_Vendor_CLASF_Desc() string {
	if x != nil {
		return x.PRP_Vendor_CLASF_Desc
	}
	return ""
}

func (x *VendorGP_Vclassification) GetINACTIVE() uint32 {
	if x != nil {
		return x.INACTIVE
	}
	return 0
}

func (x *VendorGP_Vclassification) GetINACTIVE_DESC() string {
	if x != nil {
		return x.INACTIVE_DESC
	}
	return ""
}

func (x *VendorGP_Vclassification) GetCREATDDT() string {
	if x != nil {
		return x.CREATDDT
	}
	return ""
}

func (x *VendorGP_Vclassification) GetMODIFDT() string {
	if x != nil {
		return x.MODIFDT
	}
	return ""
}

func (x *VendorGP_Vclassification) GetCRUSRID() string {
	if x != nil {
		return x.CRUSRID
	}
	return ""
}

func (x *VendorGP_Vclassification) GetMDFUSRID() string {
	if x != nil {
		return x.MDFUSRID
	}
	return ""
}

type VendorGP_Vpaymentmethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PRP_Payment_Method      string `protobuf:"bytes,1,opt,name=PRP_Payment_Method,json=PRPPaymentMethod,proto3" json:"PRP_Payment_Method,omitempty"`
	PRP_Payment_Method_Desc string `protobuf:"bytes,2,opt,name=PRP_Payment_Method_Desc,json=PRPPaymentMethodDesc,proto3" json:"PRP_Payment_Method_Desc,omitempty"`
	INACTIVE                uint32 `protobuf:"varint,3,opt,name=INACTIVE,proto3" json:"INACTIVE,omitempty"`
	INACTIVE_DESC           string `protobuf:"bytes,4,opt,name=INACTIVE_DESC,json=INACTIVEDESC,proto3" json:"INACTIVE_DESC,omitempty"`
	CREATDDT                string `protobuf:"bytes,5,opt,name=CREATDDT,proto3" json:"CREATDDT,omitempty"`
	MODIFDT                 string `protobuf:"bytes,6,opt,name=MODIFDT,proto3" json:"MODIFDT,omitempty"`
	CRUSRID                 string `protobuf:"bytes,7,opt,name=CRUSRID,proto3" json:"CRUSRID,omitempty"`
	MDFUSRID                string `protobuf:"bytes,8,opt,name=MDFUSRID,proto3" json:"MDFUSRID,omitempty"`
}

func (x *VendorGP_Vpaymentmethod) Reset() {
	*x = VendorGP_Vpaymentmethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[498]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorGP_Vpaymentmethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorGP_Vpaymentmethod) ProtoMessage() {}

func (x *VendorGP_Vpaymentmethod) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[498]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorGP_Vpaymentmethod.ProtoReflect.Descriptor instead.
func (*VendorGP_Vpaymentmethod) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{341, 3}
}

func (x *VendorGP_Vpaymentmethod) GetPRP_Payment_Method() string {
	if x != nil {
		return x.PRP_Payment_Method
	}
	return ""
}

func (x *VendorGP_Vpaymentmethod) GetPRP_Payment_Method_Desc() string {
	if x != nil {
		return x.PRP_Payment_Method_Desc
	}
	return ""
}

func (x *VendorGP_Vpaymentmethod) GetINACTIVE() uint32 {
	if x != nil {
		return x.INACTIVE
	}
	return 0
}

func (x *VendorGP_Vpaymentmethod) GetINACTIVE_DESC() string {
	if x != nil {
		return x.INACTIVE_DESC
	}
	return ""
}

func (x *VendorGP_Vpaymentmethod) GetCREATDDT() string {
	if x != nil {
		return x.CREATDDT
	}
	return ""
}

func (x *VendorGP_Vpaymentmethod) GetMODIFDT() string {
	if x != nil {
		return x.MODIFDT
	}
	return ""
}

func (x *VendorGP_Vpaymentmethod) GetCRUSRID() string {
	if x != nil {
		return x.CRUSRID
	}
	return ""
}

func (x *VendorGP_Vpaymentmethod) GetMDFUSRID() string {
	if x != nil {
		return x.MDFUSRID
	}
	return ""
}

type VendorGP_Vlatestgoodsreceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	POPRCTNM string `protobuf:"bytes,1,opt,name=POPRCTNM,proto3" json:"POPRCTNM,omitempty"`
	STATUS   string `protobuf:"bytes,2,opt,name=STATUS,proto3" json:"STATUS,omitempty"`
	CREATDDT string `protobuf:"bytes,3,opt,name=CREATDDT,proto3" json:"CREATDDT,omitempty"`
	LOCNCODE string `protobuf:"bytes,4,opt,name=LOCNCODE,proto3" json:"LOCNCODE,omitempty"`
	PONUMBER string `protobuf:"bytes,5,opt,name=PONUMBER,proto3" json:"PONUMBER,omitempty"`
	TRNUMBER string `protobuf:"bytes,6,opt,name=TRNUMBER,proto3" json:"TRNUMBER,omitempty"`
}

func (x *VendorGP_Vlatestgoodsreceipt) Reset() {
	*x = VendorGP_Vlatestgoodsreceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[499]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorGP_Vlatestgoodsreceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorGP_Vlatestgoodsreceipt) ProtoMessage() {}

func (x *VendorGP_Vlatestgoodsreceipt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[499]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorGP_Vlatestgoodsreceipt.ProtoReflect.Descriptor instead.
func (*VendorGP_Vlatestgoodsreceipt) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{341, 4}
}

func (x *VendorGP_Vlatestgoodsreceipt) GetPOPRCTNM() string {
	if x != nil {
		return x.POPRCTNM
	}
	return ""
}

func (x *VendorGP_Vlatestgoodsreceipt) GetSTATUS() string {
	if x != nil {
		return x.STATUS
	}
	return ""
}

func (x *VendorGP_Vlatestgoodsreceipt) GetCREATDDT() string {
	if x != nil {
		return x.CREATDDT
	}
	return ""
}

func (x *VendorGP_Vlatestgoodsreceipt) GetLOCNCODE() string {
	if x != nil {
		return x.LOCNCODE
	}
	return ""
}

func (x *VendorGP_Vlatestgoodsreceipt) GetPONUMBER() string {
	if x != nil {
		return x.PONUMBER
	}
	return ""
}

func (x *VendorGP_Vlatestgoodsreceipt) GetTRNUMBER() string {
	if x != nil {
		return x.TRNUMBER
	}
	return ""
}

type VendorGP_VVendorAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendorid              string                       `protobuf:"bytes,1,opt,name=vendorid,proto3" json:"vendorid,omitempty"`
	Adrscode              string                       `protobuf:"bytes,2,opt,name=adrscode,proto3" json:"adrscode,omitempty"`
	PrpAdministrativeCode *VendorGP_AdministrativeCode `protobuf:"bytes,3,opt,name=prp_administrative_code,json=prpAdministrativeCode,proto3" json:"prp_administrative_code,omitempty"`
}

func (x *VendorGP_VVendorAddress) Reset() {
	*x = VendorGP_VVendorAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[500]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorGP_VVendorAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorGP_VVendorAddress) ProtoMessage() {}

func (x *VendorGP_VVendorAddress) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[500]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorGP_VVendorAddress.ProtoReflect.Descriptor instead.
func (*VendorGP_VVendorAddress) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{341, 5}
}

func (x *VendorGP_VVendorAddress) GetVendorid() string {
	if x != nil {
		return x.Vendorid
	}
	return ""
}

func (x *VendorGP_VVendorAddress) GetAdrscode() string {
	if x != nil {
		return x.Adrscode
	}
	return ""
}

func (x *VendorGP_VVendorAddress) GetPrpAdministrativeCode() *VendorGP_AdministrativeCode {
	if x != nil {
		return x.PrpAdministrativeCode
	}
	return nil
}

type VendorGP_AdministrativeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnlAdministrativeCode string `protobuf:"bytes,1,opt,name=gnl_administrative_code,json=gnlAdministrativeCode,proto3" json:"gnl_administrative_code,omitempty"`
	GnlProvince           string `protobuf:"bytes,2,opt,name=gnl_province,json=gnlProvince,proto3" json:"gnl_province,omitempty"`
	GnlRegion             string `protobuf:"bytes,3,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	GnlCity               string `protobuf:"bytes,4,opt,name=gnl_city,json=gnlCity,proto3" json:"gnl_city,omitempty"`
	GnlDistrict           string `protobuf:"bytes,5,opt,name=gnl_district,json=gnlDistrict,proto3" json:"gnl_district,omitempty"`
	GnlSubdistrict        string `protobuf:"bytes,6,opt,name=gnl_subdistrict,json=gnlSubdistrict,proto3" json:"gnl_subdistrict,omitempty"`
	GnlZipcode            string `protobuf:"bytes,7,opt,name=gnl_zipcode,json=gnlZipcode,proto3" json:"gnl_zipcode,omitempty"`
}

func (x *VendorGP_AdministrativeCode) Reset() {
	*x = VendorGP_AdministrativeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[501]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorGP_AdministrativeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorGP_AdministrativeCode) ProtoMessage() {}

func (x *VendorGP_AdministrativeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[501]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorGP_AdministrativeCode.ProtoReflect.Descriptor instead.
func (*VendorGP_AdministrativeCode) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{341, 6}
}

func (x *VendorGP_AdministrativeCode) GetGnlAdministrativeCode() string {
	if x != nil {
		return x.GnlAdministrativeCode
	}
	return ""
}

func (x *VendorGP_AdministrativeCode) GetGnlProvince() string {
	if x != nil {
		return x.GnlProvince
	}
	return ""
}

func (x *VendorGP_AdministrativeCode) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *VendorGP_AdministrativeCode) GetGnlCity() string {
	if x != nil {
		return x.GnlCity
	}
	return ""
}

func (x *VendorGP_AdministrativeCode) GetGnlDistrict() string {
	if x != nil {
		return x.GnlDistrict
	}
	return ""
}

func (x *VendorGP_AdministrativeCode) GetGnlSubdistrict() string {
	if x != nil {
		return x.GnlSubdistrict
	}
	return ""
}

func (x *VendorGP_AdministrativeCode) GetGnlZipcode() string {
	if x != nil {
		return x.GnlZipcode
	}
	return ""
}

type HelperGP_HelperGPSites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locncode string `protobuf:"bytes,1,opt,name=locncode,proto3" json:"locncode,omitempty"`
}

func (x *HelperGP_HelperGPSites) Reset() {
	*x = HelperGP_HelperGPSites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[502]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelperGP_HelperGPSites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelperGP_HelperGPSites) ProtoMessage() {}

func (x *HelperGP_HelperGPSites) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[502]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelperGP_HelperGPSites.ProtoReflect.Descriptor instead.
func (*HelperGP_HelperGPSites) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{345, 0}
}

func (x *HelperGP_HelperGPSites) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

type SalesOrderGP_VoucherDetailGP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnLVoucherType     int32   `protobuf:"varint,1,opt,name=gnL_voucher_type,json=gnLVoucherType,proto3" json:"gnL_voucher_type,omitempty"`
	GnLVoucherTypeDesc string  `protobuf:"bytes,2,opt,name=gnL_voucher_type_desc,json=gnLVoucherTypeDesc,proto3" json:"gnL_voucher_type_desc,omitempty"`
	GnLVoucherId       string  `protobuf:"bytes,3,opt,name=gnL_voucher_id,json=gnLVoucherId,proto3" json:"gnL_voucher_id,omitempty"`
	Ordocamt           float64 `protobuf:"fixed64,4,opt,name=ordocamt,proto3" json:"ordocamt,omitempty"`
}

func (x *SalesOrderGP_VoucherDetailGP) Reset() {
	*x = SalesOrderGP_VoucherDetailGP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[503]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesOrderGP_VoucherDetailGP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesOrderGP_VoucherDetailGP) ProtoMessage() {}

func (x *SalesOrderGP_VoucherDetailGP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[503]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesOrderGP_VoucherDetailGP.ProtoReflect.Descriptor instead.
func (*SalesOrderGP_VoucherDetailGP) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{371, 0}
}

func (x *SalesOrderGP_VoucherDetailGP) GetGnLVoucherType() int32 {
	if x != nil {
		return x.GnLVoucherType
	}
	return 0
}

func (x *SalesOrderGP_VoucherDetailGP) GetGnLVoucherTypeDesc() string {
	if x != nil {
		return x.GnLVoucherTypeDesc
	}
	return ""
}

func (x *SalesOrderGP_VoucherDetailGP) GetGnLVoucherId() string {
	if x != nil {
		return x.GnLVoucherId
	}
	return ""
}

func (x *SalesOrderGP_VoucherDetailGP) GetOrdocamt() float64 {
	if x != nil {
		return x.Ordocamt
	}
	return 0
}

type SalesOrderGP_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemnmbr   string  `protobuf:"bytes,1,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	Itemdesc   string  `protobuf:"bytes,2,opt,name=itemdesc,proto3" json:"itemdesc,omitempty"`
	Quantity   float64 `protobuf:"fixed64,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Unitprce   float64 `protobuf:"fixed64,4,opt,name=unitprce,proto3" json:"unitprce,omitempty"`
	Xtndprce   float64 `protobuf:"fixed64,5,opt,name=xtndprce,proto3" json:"xtndprce,omitempty"`
	GnL_Weight float64 `protobuf:"fixed64,6,opt,name=gnL_Weight,json=gnLWeight,proto3" json:"gnL_Weight,omitempty"`
	Mrkdnamt   float64 `protobuf:"fixed64,7,opt,name=mrkdnamt,proto3" json:"mrkdnamt,omitempty"`
	Uofm       string  `protobuf:"bytes,8,opt,name=uofm,proto3" json:"uofm,omitempty"`
}

func (x *SalesOrderGP_Detail) Reset() {
	*x = SalesOrderGP_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[504]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesOrderGP_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesOrderGP_Detail) ProtoMessage() {}

func (x *SalesOrderGP_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[504]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesOrderGP_Detail.ProtoReflect.Descriptor instead.
func (*SalesOrderGP_Detail) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{371, 1}
}

func (x *SalesOrderGP_Detail) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *SalesOrderGP_Detail) GetItemdesc() string {
	if x != nil {
		return x.Itemdesc
	}
	return ""
}

func (x *SalesOrderGP_Detail) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *SalesOrderGP_Detail) GetUnitprce() float64 {
	if x != nil {
		return x.Unitprce
	}
	return 0
}

func (x *SalesOrderGP_Detail) GetXtndprce() float64 {
	if x != nil {
		return x.Xtndprce
	}
	return 0
}

func (x *SalesOrderGP_Detail) GetGnL_Weight() float64 {
	if x != nil {
		return x.GnL_Weight
	}
	return 0
}

func (x *SalesOrderGP_Detail) GetMrkdnamt() float64 {
	if x != nil {
		return x.Mrkdnamt
	}
	return 0
}

func (x *SalesOrderGP_Detail) GetUofm() string {
	if x != nil {
		return x.Uofm
	}
	return ""
}

type SalesOrderGP_TermOfPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pymtrmid string `protobuf:"bytes,1,opt,name=pymtrmid,proto3" json:"pymtrmid,omitempty"`
	Duedtds  int32  `protobuf:"varint,2,opt,name=duedtds,proto3" json:"duedtds,omitempty"`
}

func (x *SalesOrderGP_TermOfPayment) Reset() {
	*x = SalesOrderGP_TermOfPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[505]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesOrderGP_TermOfPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesOrderGP_TermOfPayment) ProtoMessage() {}

func (x *SalesOrderGP_TermOfPayment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[505]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesOrderGP_TermOfPayment.ProtoReflect.Descriptor instead.
func (*SalesOrderGP_TermOfPayment) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{371, 2}
}

func (x *SalesOrderGP_TermOfPayment) GetPymtrmid() string {
	if x != nil {
		return x.Pymtrmid
	}
	return ""
}

func (x *SalesOrderGP_TermOfPayment) GetDuedtds() int32 {
	if x != nil {
		return x.Duedtds
	}
	return 0
}

type SalesOrderGP_Territory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salsterr string `protobuf:"bytes,1,opt,name=salsterr,proto3" json:"salsterr,omitempty"`
	Slterdsc string `protobuf:"bytes,2,opt,name=slterdsc,proto3" json:"slterdsc,omitempty"`
}

func (x *SalesOrderGP_Territory) Reset() {
	*x = SalesOrderGP_Territory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[506]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesOrderGP_Territory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesOrderGP_Territory) ProtoMessage() {}

func (x *SalesOrderGP_Territory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[506]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesOrderGP_Territory.ProtoReflect.Descriptor instead.
func (*SalesOrderGP_Territory) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{371, 3}
}

func (x *SalesOrderGP_Territory) GetSalsterr() string {
	if x != nil {
		return x.Salsterr
	}
	return ""
}

func (x *SalesOrderGP_Territory) GetSlterdsc() string {
	if x != nil {
		return x.Slterdsc
	}
	return ""
}

type PurchasePlanGP_AssignedTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrpPurchaseplanUser     string `protobuf:"bytes,1,opt,name=prp_purchaseplan_user,json=prpPurchaseplanUser,proto3" json:"prp_purchaseplan_user,omitempty"`
	PrpPurchaseplanUsername string `protobuf:"bytes,2,opt,name=prp_purchaseplan_username,json=prpPurchaseplanUsername,proto3" json:"prp_purchaseplan_username,omitempty"`
	Employeeid              string `protobuf:"bytes,3,opt,name=employeeid,proto3" json:"employeeid,omitempty"`
}

func (x *PurchasePlanGP_AssignedTo) Reset() {
	*x = PurchasePlanGP_AssignedTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[507]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchasePlanGP_AssignedTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchasePlanGP_AssignedTo) ProtoMessage() {}

func (x *PurchasePlanGP_AssignedTo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[507]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchasePlanGP_AssignedTo.ProtoReflect.Descriptor instead.
func (*PurchasePlanGP_AssignedTo) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{380, 0}
}

func (x *PurchasePlanGP_AssignedTo) GetPrpPurchaseplanUser() string {
	if x != nil {
		return x.PrpPurchaseplanUser
	}
	return ""
}

func (x *PurchasePlanGP_AssignedTo) GetPrpPurchaseplanUsername() string {
	if x != nil {
		return x.PrpPurchaseplanUsername
	}
	return ""
}

func (x *PurchasePlanGP_AssignedTo) GetEmployeeid() string {
	if x != nil {
		return x.Employeeid
	}
	return ""
}

type PurchasePlanGP_CreatedBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Crusrid    string `protobuf:"bytes,1,opt,name=crusrid,proto3" json:"crusrid,omitempty"`
	Crusrname  string `protobuf:"bytes,2,opt,name=crusrname,proto3" json:"crusrname,omitempty"`
	Employeeid string `protobuf:"bytes,3,opt,name=employeeid,proto3" json:"employeeid,omitempty"`
}

func (x *PurchasePlanGP_CreatedBy) Reset() {
	*x = PurchasePlanGP_CreatedBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[508]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchasePlanGP_CreatedBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchasePlanGP_CreatedBy) ProtoMessage() {}

func (x *PurchasePlanGP_CreatedBy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[508]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchasePlanGP_CreatedBy.ProtoReflect.Descriptor instead.
func (*PurchasePlanGP_CreatedBy) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{380, 1}
}

func (x *PurchasePlanGP_CreatedBy) GetCrusrid() string {
	if x != nil {
		return x.Crusrid
	}
	return ""
}

func (x *PurchasePlanGP_CreatedBy) GetCrusrname() string {
	if x != nil {
		return x.Crusrname
	}
	return ""
}

func (x *PurchasePlanGP_CreatedBy) GetEmployeeid() string {
	if x != nil {
		return x.Employeeid
	}
	return ""
}

type PurchasePlanGP_AssignedBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrpAssignedBy     string `protobuf:"bytes,1,opt,name=prp_assigned_by,json=prpAssignedBy,proto3" json:"prp_assigned_by,omitempty"`
	PrpAssignedByName string `protobuf:"bytes,2,opt,name=prp_assigned_by_name,json=prpAssignedByName,proto3" json:"prp_assigned_by_name,omitempty"`
	Employeeid        string `protobuf:"bytes,3,opt,name=employeeid,proto3" json:"employeeid,omitempty"`
}

func (x *PurchasePlanGP_AssignedBy) Reset() {
	*x = PurchasePlanGP_AssignedBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[509]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchasePlanGP_AssignedBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchasePlanGP_AssignedBy) ProtoMessage() {}

func (x *PurchasePlanGP_AssignedBy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[509]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchasePlanGP_AssignedBy.ProtoReflect.Descriptor instead.
func (*PurchasePlanGP_AssignedBy) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{380, 2}
}

func (x *PurchasePlanGP_AssignedBy) GetPrpAssignedBy() string {
	if x != nil {
		return x.PrpAssignedBy
	}
	return ""
}

func (x *PurchasePlanGP_AssignedBy) GetPrpAssignedByName() string {
	if x != nil {
		return x.PrpAssignedByName
	}
	return ""
}

func (x *PurchasePlanGP_AssignedBy) GetEmployeeid() string {
	if x != nil {
		return x.Employeeid
	}
	return ""
}

type PurchasePlanGP_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemnmbr string  `protobuf:"bytes,1,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	Itemdesc string  `protobuf:"bytes,2,opt,name=itemdesc,proto3" json:"itemdesc,omitempty"`
	Uomschdl string  `protobuf:"bytes,3,opt,name=uomschdl,proto3" json:"uomschdl,omitempty"`
	Quantity float64 `protobuf:"fixed64,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Unitcost float64 `protobuf:"fixed64,5,opt,name=unitcost,proto3" json:"unitcost,omitempty"`
	Extdcost float64 `protobuf:"fixed64,6,opt,name=extdcost,proto3" json:"extdcost,omitempty"`
	Itemshwt int32   `protobuf:"varint,7,opt,name=itemshwt,proto3" json:"itemshwt,omitempty"`
}

func (x *PurchasePlanGP_Detail) Reset() {
	*x = PurchasePlanGP_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[510]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchasePlanGP_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchasePlanGP_Detail) ProtoMessage() {}

func (x *PurchasePlanGP_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[510]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchasePlanGP_Detail.ProtoReflect.Descriptor instead.
func (*PurchasePlanGP_Detail) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{380, 3}
}

func (x *PurchasePlanGP_Detail) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *PurchasePlanGP_Detail) GetItemdesc() string {
	if x != nil {
		return x.Itemdesc
	}
	return ""
}

func (x *PurchasePlanGP_Detail) GetUomschdl() string {
	if x != nil {
		return x.Uomschdl
	}
	return ""
}

func (x *PurchasePlanGP_Detail) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *PurchasePlanGP_Detail) GetUnitcost() float64 {
	if x != nil {
		return x.Unitcost
	}
	return 0
}

func (x *PurchasePlanGP_Detail) GetExtdcost() float64 {
	if x != nil {
		return x.Extdcost
	}
	return 0
}

func (x *PurchasePlanGP_Detail) GetItemshwt() int32 {
	if x != nil {
		return x.Itemshwt
	}
	return 0
}

type SitePP_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locncode          string                           `protobuf:"bytes,1,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Inactive          int32                            `protobuf:"varint,2,opt,name=inactive,proto3" json:"inactive,omitempty"`
	GnlDescription100 string                           `protobuf:"bytes,3,opt,name=gnl_description100,json=gnlDescription100,proto3" json:"gnl_description100,omitempty"`
	AdmDivision       []*SitePP_Location_AdminDivision `protobuf:"bytes,4,rep,name=adm_division,json=admDivision,proto3" json:"adm_division,omitempty"`
}

func (x *SitePP_Location) Reset() {
	*x = SitePP_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[511]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SitePP_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SitePP_Location) ProtoMessage() {}

func (x *SitePP_Location) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[511]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SitePP_Location.ProtoReflect.Descriptor instead.
func (*SitePP_Location) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{382, 0}
}

func (x *SitePP_Location) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *SitePP_Location) GetInactive() int32 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *SitePP_Location) GetGnlDescription100() string {
	if x != nil {
		return x.GnlDescription100
	}
	return ""
}

func (x *SitePP_Location) GetAdmDivision() []*SitePP_Location_AdminDivision {
	if x != nil {
		return x.AdmDivision
	}
	return nil
}

type SitePP_Location_AdminDivision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnlRegion      string `protobuf:"bytes,1,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	GnlSubdistrict string `protobuf:"bytes,2,opt,name=gnl_subdistrict,json=gnlSubdistrict,proto3" json:"gnl_subdistrict,omitempty"`
}

func (x *SitePP_Location_AdminDivision) Reset() {
	*x = SitePP_Location_AdminDivision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[512]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SitePP_Location_AdminDivision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SitePP_Location_AdminDivision) ProtoMessage() {}

func (x *SitePP_Location_AdminDivision) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[512]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SitePP_Location_AdminDivision.ProtoReflect.Descriptor instead.
func (*SitePP_Location_AdminDivision) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{382, 0, 0}
}

func (x *SitePP_Location_AdminDivision) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *SitePP_Location_AdminDivision) GetGnlSubdistrict() string {
	if x != nil {
		return x.GnlSubdistrict
	}
	return ""
}

type CreatePurchaseOrderGPRequest_Podtl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ord      int32   `protobuf:"varint,1,opt,name=ord,proto3" json:"ord,omitempty"`
	Itemnmbr string  `protobuf:"bytes,2,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	Uofm     string  `protobuf:"bytes,3,opt,name=uofm,proto3" json:"uofm,omitempty"`
	Qtyorder float64 `protobuf:"fixed64,4,opt,name=qtyorder,proto3" json:"qtyorder,omitempty"`
	Qtycance float64 `protobuf:"fixed64,5,opt,name=qtycance,proto3" json:"qtycance,omitempty"`
	Unitcost float64 `protobuf:"fixed64,6,opt,name=unitcost,proto3" json:"unitcost,omitempty"`
	Notetext string  `protobuf:"bytes,7,opt,name=notetext,proto3" json:"notetext,omitempty"`
}

func (x *CreatePurchaseOrderGPRequest_Podtl) Reset() {
	*x = CreatePurchaseOrderGPRequest_Podtl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[513]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePurchaseOrderGPRequest_Podtl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePurchaseOrderGPRequest_Podtl) ProtoMessage() {}

func (x *CreatePurchaseOrderGPRequest_Podtl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[513]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePurchaseOrderGPRequest_Podtl.ProtoReflect.Descriptor instead.
func (*CreatePurchaseOrderGPRequest_Podtl) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{397, 0}
}

func (x *CreatePurchaseOrderGPRequest_Podtl) GetOrd() int32 {
	if x != nil {
		return x.Ord
	}
	return 0
}

func (x *CreatePurchaseOrderGPRequest_Podtl) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *CreatePurchaseOrderGPRequest_Podtl) GetUofm() string {
	if x != nil {
		return x.Uofm
	}
	return ""
}

func (x *CreatePurchaseOrderGPRequest_Podtl) GetQtyorder() float64 {
	if x != nil {
		return x.Qtyorder
	}
	return 0
}

func (x *CreatePurchaseOrderGPRequest_Podtl) GetQtycance() float64 {
	if x != nil {
		return x.Qtycance
	}
	return 0
}

func (x *CreatePurchaseOrderGPRequest_Podtl) GetUnitcost() float64 {
	if x != nil {
		return x.Unitcost
	}
	return 0
}

func (x *CreatePurchaseOrderGPRequest_Podtl) GetNotetext() string {
	if x != nil {
		return x.Notetext
	}
	return ""
}

type CreatePurchaseOrderGPRequestCsReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreatePurchaseOrderGPRequestCsReference) Reset() {
	*x = CreatePurchaseOrderGPRequestCsReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[514]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePurchaseOrderGPRequestCsReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePurchaseOrderGPRequestCsReference) ProtoMessage() {}

func (x *CreatePurchaseOrderGPRequestCsReference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[514]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePurchaseOrderGPRequestCsReference.ProtoReflect.Descriptor instead.
func (*CreatePurchaseOrderGPRequestCsReference) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{397, 1}
}

type UpdatePurchaseOrderGPRequest_Podtl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ord      int32   `protobuf:"varint,1,opt,name=ord,proto3" json:"ord,omitempty"`
	Itemnmbr string  `protobuf:"bytes,2,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	Uofm     string  `protobuf:"bytes,3,opt,name=uofm,proto3" json:"uofm,omitempty"`
	Qtyorder float64 `protobuf:"fixed64,4,opt,name=qtyorder,proto3" json:"qtyorder,omitempty"`
	Qtycance float64 `protobuf:"fixed64,5,opt,name=qtycance,proto3" json:"qtycance,omitempty"`
	Unitcost float64 `protobuf:"fixed64,6,opt,name=unitcost,proto3" json:"unitcost,omitempty"`
	Notetext string  `protobuf:"bytes,7,opt,name=notetext,proto3" json:"notetext,omitempty"`
}

func (x *UpdatePurchaseOrderGPRequest_Podtl) Reset() {
	*x = UpdatePurchaseOrderGPRequest_Podtl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[515]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePurchaseOrderGPRequest_Podtl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePurchaseOrderGPRequest_Podtl) ProtoMessage() {}

func (x *UpdatePurchaseOrderGPRequest_Podtl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[515]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePurchaseOrderGPRequest_Podtl.ProtoReflect.Descriptor instead.
func (*UpdatePurchaseOrderGPRequest_Podtl) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{398, 0}
}

func (x *UpdatePurchaseOrderGPRequest_Podtl) GetOrd() int32 {
	if x != nil {
		return x.Ord
	}
	return 0
}

func (x *UpdatePurchaseOrderGPRequest_Podtl) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *UpdatePurchaseOrderGPRequest_Podtl) GetUofm() string {
	if x != nil {
		return x.Uofm
	}
	return ""
}

func (x *UpdatePurchaseOrderGPRequest_Podtl) GetQtyorder() float64 {
	if x != nil {
		return x.Qtyorder
	}
	return 0
}

func (x *UpdatePurchaseOrderGPRequest_Podtl) GetQtycance() float64 {
	if x != nil {
		return x.Qtycance
	}
	return 0
}

func (x *UpdatePurchaseOrderGPRequest_Podtl) GetUnitcost() float64 {
	if x != nil {
		return x.Unitcost
	}
	return 0
}

func (x *UpdatePurchaseOrderGPRequest_Podtl) GetNotetext() string {
	if x != nil {
		return x.Notetext
	}
	return ""
}

type UpdatePurchaseOrderGPRequestCsReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrpCsNo       string `protobuf:"bytes,1,opt,name=prp_cs_no,json=prpCsNo,proto3" json:"prp_cs_no,omitempty"`
	PrpVehicleNo  string `protobuf:"bytes,2,opt,name=prp_vehicle_no,json=prpVehicleNo,proto3" json:"prp_vehicle_no,omitempty"`
	PrpDriverName string `protobuf:"bytes,3,opt,name=prp_driver_name,json=prpDriverName,proto3" json:"prp_driver_name,omitempty"`
	Phonname      string `protobuf:"bytes,4,opt,name=phonname,proto3" json:"phonname,omitempty"`
}

func (x *UpdatePurchaseOrderGPRequestCsReference) Reset() {
	*x = UpdatePurchaseOrderGPRequestCsReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[516]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePurchaseOrderGPRequestCsReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePurchaseOrderGPRequestCsReference) ProtoMessage() {}

func (x *UpdatePurchaseOrderGPRequestCsReference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[516]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePurchaseOrderGPRequestCsReference.ProtoReflect.Descriptor instead.
func (*UpdatePurchaseOrderGPRequestCsReference) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{398, 1}
}

func (x *UpdatePurchaseOrderGPRequestCsReference) GetPrpCsNo() string {
	if x != nil {
		return x.PrpCsNo
	}
	return ""
}

func (x *UpdatePurchaseOrderGPRequestCsReference) GetPrpVehicleNo() string {
	if x != nil {
		return x.PrpVehicleNo
	}
	return ""
}

func (x *UpdatePurchaseOrderGPRequestCsReference) GetPrpDriverName() string {
	if x != nil {
		return x.PrpDriverName
	}
	return ""
}

func (x *UpdatePurchaseOrderGPRequestCsReference) GetPhonname() string {
	if x != nil {
		return x.Phonname
	}
	return ""
}

type SalesInvoiceGP_CashReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docnumbr      string  `protobuf:"bytes,1,opt,name=docnumbr,proto3" json:"docnumbr,omitempty"`
	TotalPaid     float64 `protobuf:"fixed64,2,opt,name=total_paid,json=totalPaid,proto3" json:"total_paid,omitempty"`
	Cshrctype     float64 `protobuf:"fixed64,3,opt,name=cshrctype,proto3" json:"cshrctype,omitempty"`
	PaymentMethod string  `protobuf:"bytes,4,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	Ortrxamt      float64 `protobuf:"fixed64,5,opt,name=ortrxamt,proto3" json:"ortrxamt,omitempty"`
	CreatedAt     string  `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *SalesInvoiceGP_CashReceipt) Reset() {
	*x = SalesInvoiceGP_CashReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[517]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesInvoiceGP_CashReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesInvoiceGP_CashReceipt) ProtoMessage() {}

func (x *SalesInvoiceGP_CashReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[517]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesInvoiceGP_CashReceipt.ProtoReflect.Descriptor instead.
func (*SalesInvoiceGP_CashReceipt) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{405, 0}
}

func (x *SalesInvoiceGP_CashReceipt) GetDocnumbr() string {
	if x != nil {
		return x.Docnumbr
	}
	return ""
}

func (x *SalesInvoiceGP_CashReceipt) GetTotalPaid() float64 {
	if x != nil {
		return x.TotalPaid
	}
	return 0
}

func (x *SalesInvoiceGP_CashReceipt) GetCshrctype() float64 {
	if x != nil {
		return x.Cshrctype
	}
	return 0
}

func (x *SalesInvoiceGP_CashReceipt) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *SalesInvoiceGP_CashReceipt) GetOrtrxamt() float64 {
	if x != nil {
		return x.Ortrxamt
	}
	return 0
}

func (x *SalesInvoiceGP_CashReceipt) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type SalesInvoiceGP_SalesOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orignumb  string `protobuf:"bytes,1,opt,name=orignumb,proto3" json:"orignumb,omitempty"`
	Custnmbr  string `protobuf:"bytes,2,opt,name=custnmbr,proto3" json:"custnmbr,omitempty"`
	Custname  string `protobuf:"bytes,3,opt,name=custname,proto3" json:"custname,omitempty"`
	GnlRegion string `protobuf:"bytes,4,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
}

func (x *SalesInvoiceGP_SalesOrder) Reset() {
	*x = SalesInvoiceGP_SalesOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[518]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesInvoiceGP_SalesOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesInvoiceGP_SalesOrder) ProtoMessage() {}

func (x *SalesInvoiceGP_SalesOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[518]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesInvoiceGP_SalesOrder.ProtoReflect.Descriptor instead.
func (*SalesInvoiceGP_SalesOrder) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{405, 1}
}

func (x *SalesInvoiceGP_SalesOrder) GetOrignumb() string {
	if x != nil {
		return x.Orignumb
	}
	return ""
}

func (x *SalesInvoiceGP_SalesOrder) GetCustnmbr() string {
	if x != nil {
		return x.Custnmbr
	}
	return ""
}

func (x *SalesInvoiceGP_SalesOrder) GetCustname() string {
	if x != nil {
		return x.Custname
	}
	return ""
}

func (x *SalesInvoiceGP_SalesOrder) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

type SalesInvoiceGP_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemnmbr string  `protobuf:"bytes,1,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	Itemdesc string  `protobuf:"bytes,2,opt,name=itemdesc,proto3" json:"itemdesc,omitempty"`
	Uofm     string  `protobuf:"bytes,3,opt,name=uofm,proto3" json:"uofm,omitempty"`
	Quantity float64 `protobuf:"fixed64,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Unitprce float64 `protobuf:"fixed64,5,opt,name=unitprce,proto3" json:"unitprce,omitempty"`
	Xtndprce float64 `protobuf:"fixed64,6,opt,name=xtndprce,proto3" json:"xtndprce,omitempty"`
}

func (x *SalesInvoiceGP_Detail) Reset() {
	*x = SalesInvoiceGP_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[519]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesInvoiceGP_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesInvoiceGP_Detail) ProtoMessage() {}

func (x *SalesInvoiceGP_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[519]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesInvoiceGP_Detail.ProtoReflect.Descriptor instead.
func (*SalesInvoiceGP_Detail) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{405, 2}
}

func (x *SalesInvoiceGP_Detail) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *SalesInvoiceGP_Detail) GetItemdesc() string {
	if x != nil {
		return x.Itemdesc
	}
	return ""
}

func (x *SalesInvoiceGP_Detail) GetUofm() string {
	if x != nil {
		return x.Uofm
	}
	return ""
}

func (x *SalesInvoiceGP_Detail) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *SalesInvoiceGP_Detail) GetUnitprce() float64 {
	if x != nil {
		return x.Unitprce
	}
	return 0
}

func (x *SalesInvoiceGP_Detail) GetXtndprce() float64 {
	if x != nil {
		return x.Xtndprce
	}
	return 0
}

type CreateSalesOrderGPRequest_DetailItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sopnumbe   string  `protobuf:"bytes,1,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"`
	Itemnmbr   string  `protobuf:"bytes,2,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	Itemdesc   string  `protobuf:"bytes,3,opt,name=itemdesc,proto3" json:"itemdesc,omitempty"`
	Locncode   string  `protobuf:"bytes,4,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Uofm       string  `protobuf:"bytes,5,opt,name=uofm,proto3" json:"uofm,omitempty"`
	Pricelvl   string  `protobuf:"bytes,6,opt,name=pricelvl,proto3" json:"pricelvl,omitempty"`
	Quantity   float64 `protobuf:"fixed64,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Unitprce   float64 `protobuf:"fixed64,8,opt,name=unitprce,proto3" json:"unitprce,omitempty"`
	Xtndprce   float64 `protobuf:"fixed64,9,opt,name=xtndprce,proto3" json:"xtndprce,omitempty"`
	GnL_Weight float64 `protobuf:"fixed64,10,opt,name=gnL_Weight,json=gnLWeight,proto3" json:"gnL_Weight,omitempty"`
}

func (x *CreateSalesOrderGPRequest_DetailItem) Reset() {
	*x = CreateSalesOrderGPRequest_DetailItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[520]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSalesOrderGPRequest_DetailItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSalesOrderGPRequest_DetailItem) ProtoMessage() {}

func (x *CreateSalesOrderGPRequest_DetailItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[520]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSalesOrderGPRequest_DetailItem.ProtoReflect.Descriptor instead.
func (*CreateSalesOrderGPRequest_DetailItem) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{429, 0}
}

func (x *CreateSalesOrderGPRequest_DetailItem) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

func (x *CreateSalesOrderGPRequest_DetailItem) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *CreateSalesOrderGPRequest_DetailItem) GetItemdesc() string {
	if x != nil {
		return x.Itemdesc
	}
	return ""
}

func (x *CreateSalesOrderGPRequest_DetailItem) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *CreateSalesOrderGPRequest_DetailItem) GetUofm() string {
	if x != nil {
		return x.Uofm
	}
	return ""
}

func (x *CreateSalesOrderGPRequest_DetailItem) GetPricelvl() string {
	if x != nil {
		return x.Pricelvl
	}
	return ""
}

func (x *CreateSalesOrderGPRequest_DetailItem) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CreateSalesOrderGPRequest_DetailItem) GetUnitprce() float64 {
	if x != nil {
		return x.Unitprce
	}
	return 0
}

func (x *CreateSalesOrderGPRequest_DetailItem) GetXtndprce() float64 {
	if x != nil {
		return x.Xtndprce
	}
	return 0
}

func (x *CreateSalesOrderGPRequest_DetailItem) GetGnL_Weight() float64 {
	if x != nil {
		return x.GnL_Weight
	}
	return 0
}

type CreateSalesOrderGPRequest_VoucherApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnlVoucherType int32   `protobuf:"varint,1,opt,name=gnl_voucher_type,json=gnlVoucherType,proto3" json:"gnl_voucher_type,omitempty"`
	GnlVoucherId   string  `protobuf:"bytes,2,opt,name=gnl_voucher_id,json=gnlVoucherId,proto3" json:"gnl_voucher_id,omitempty"`
	Ordocamt       float64 `protobuf:"fixed64,3,opt,name=ordocamt,proto3" json:"ordocamt,omitempty"`
}

func (x *CreateSalesOrderGPRequest_VoucherApply) Reset() {
	*x = CreateSalesOrderGPRequest_VoucherApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[521]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSalesOrderGPRequest_VoucherApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSalesOrderGPRequest_VoucherApply) ProtoMessage() {}

func (x *CreateSalesOrderGPRequest_VoucherApply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[521]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSalesOrderGPRequest_VoucherApply.ProtoReflect.Descriptor instead.
func (*CreateSalesOrderGPRequest_VoucherApply) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{429, 1}
}

func (x *CreateSalesOrderGPRequest_VoucherApply) GetGnlVoucherType() int32 {
	if x != nil {
		return x.GnlVoucherType
	}
	return 0
}

func (x *CreateSalesOrderGPRequest_VoucherApply) GetGnlVoucherId() string {
	if x != nil {
		return x.GnlVoucherId
	}
	return ""
}

func (x *CreateSalesOrderGPRequest_VoucherApply) GetOrdocamt() float64 {
	if x != nil {
		return x.Ordocamt
	}
	return 0
}

type CashReceipt_SalesInvoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sopnumbe  string `protobuf:"bytes,1,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"`
	Docdate   string `protobuf:"bytes,2,opt,name=docdate,proto3" json:"docdate,omitempty"`
	GnlRegion string `protobuf:"bytes,3,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	Locncode  string `protobuf:"bytes,4,opt,name=locncode,proto3" json:"locncode,omitempty"`
}

func (x *CashReceipt_SalesInvoice) Reset() {
	*x = CashReceipt_SalesInvoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[522]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CashReceipt_SalesInvoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CashReceipt_SalesInvoice) ProtoMessage() {}

func (x *CashReceipt_SalesInvoice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[522]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CashReceipt_SalesInvoice.ProtoReflect.Descriptor instead.
func (*CashReceipt_SalesInvoice) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{431, 0}
}

func (x *CashReceipt_SalesInvoice) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

func (x *CashReceipt_SalesInvoice) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *CashReceipt_SalesInvoice) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *CashReceipt_SalesInvoice) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

type CashReceipt_SalesOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orignumb string `protobuf:"bytes,1,opt,name=orignumb,proto3" json:"orignumb,omitempty"`
	Ordrdate string `protobuf:"bytes,2,opt,name=ordrdate,proto3" json:"ordrdate,omitempty"`
}

func (x *CashReceipt_SalesOrder) Reset() {
	*x = CashReceipt_SalesOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[523]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CashReceipt_SalesOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CashReceipt_SalesOrder) ProtoMessage() {}

func (x *CashReceipt_SalesOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[523]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CashReceipt_SalesOrder.ProtoReflect.Descriptor instead.
func (*CashReceipt_SalesOrder) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{431, 1}
}

func (x *CashReceipt_SalesOrder) GetOrignumb() string {
	if x != nil {
		return x.Orignumb
	}
	return ""
}

func (x *CashReceipt_SalesOrder) GetOrdrdate() string {
	if x != nil {
		return x.Ordrdate
	}
	return ""
}

type CreateTransferRequestGPRequest_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lnitmseq      int32   `protobuf:"varint,1,opt,name=lnitmseq,proto3" json:"lnitmseq,omitempty"`
	Itemnmbr      string  `protobuf:"bytes,2,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	Uofm          string  `protobuf:"bytes,3,opt,name=uofm,proto3" json:"uofm,omitempty"`
	IvmQtyRequest float64 `protobuf:"fixed64,4,opt,name=ivm_qty_request,json=ivmQtyRequest,proto3" json:"ivm_qty_request,omitempty"`
	IvmQtyFulfill float64 `protobuf:"fixed64,5,opt,name=ivm_qty_fulfill,json=ivmQtyFulfill,proto3" json:"ivm_qty_fulfill,omitempty"`
}

func (x *CreateTransferRequestGPRequest_Detail) Reset() {
	*x = CreateTransferRequestGPRequest_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[524]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransferRequestGPRequest_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransferRequestGPRequest_Detail) ProtoMessage() {}

func (x *CreateTransferRequestGPRequest_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[524]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransferRequestGPRequest_Detail.ProtoReflect.Descriptor instead.
func (*CreateTransferRequestGPRequest_Detail) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{446, 0}
}

func (x *CreateTransferRequestGPRequest_Detail) GetLnitmseq() int32 {
	if x != nil {
		return x.Lnitmseq
	}
	return 0
}

func (x *CreateTransferRequestGPRequest_Detail) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *CreateTransferRequestGPRequest_Detail) GetUofm() string {
	if x != nil {
		return x.Uofm
	}
	return ""
}

func (x *CreateTransferRequestGPRequest_Detail) GetIvmQtyRequest() float64 {
	if x != nil {
		return x.IvmQtyRequest
	}
	return 0
}

func (x *CreateTransferRequestGPRequest_Detail) GetIvmQtyFulfill() float64 {
	if x != nil {
		return x.IvmQtyFulfill
	}
	return 0
}

type UpdateTransferRequestGPRequest_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lnitmseq      int32   `protobuf:"varint,1,opt,name=lnitmseq,proto3" json:"lnitmseq,omitempty"`
	Itemnmbr      string  `protobuf:"bytes,2,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	IvmQtyRequest float64 `protobuf:"fixed64,3,opt,name=ivm_qty_request,json=ivmQtyRequest,proto3" json:"ivm_qty_request,omitempty"`
}

func (x *UpdateTransferRequestGPRequest_Detail) Reset() {
	*x = UpdateTransferRequestGPRequest_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[525]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTransferRequestGPRequest_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransferRequestGPRequest_Detail) ProtoMessage() {}

func (x *UpdateTransferRequestGPRequest_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[525]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransferRequestGPRequest_Detail.ProtoReflect.Descriptor instead.
func (*UpdateTransferRequestGPRequest_Detail) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{456, 0}
}

func (x *UpdateTransferRequestGPRequest_Detail) GetLnitmseq() int32 {
	if x != nil {
		return x.Lnitmseq
	}
	return 0
}

func (x *UpdateTransferRequestGPRequest_Detail) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *UpdateTransferRequestGPRequest_Detail) GetIvmQtyRequest() float64 {
	if x != nil {
		return x.IvmQtyRequest
	}
	return 0
}

type UpdateInTransitTransferGPRequest_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lnitmseq   int32   `protobuf:"varint,1,opt,name=lnitmseq,proto3" json:"lnitmseq,omitempty"`
	Itemnmbr   string  `protobuf:"bytes,2,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	Qtyfulfi   float64 `protobuf:"fixed64,3,opt,name=qtyfulfi,proto3" json:"qtyfulfi,omitempty"`
	ReasonCode string  `protobuf:"bytes,4,opt,name=reason_code,json=reasonCode,proto3" json:"reason_code,omitempty"`
}

func (x *UpdateInTransitTransferGPRequest_Detail) Reset() {
	*x = UpdateInTransitTransferGPRequest_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[526]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInTransitTransferGPRequest_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInTransitTransferGPRequest_Detail) ProtoMessage() {}

func (x *UpdateInTransitTransferGPRequest_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[526]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInTransitTransferGPRequest_Detail.ProtoReflect.Descriptor instead.
func (*UpdateInTransitTransferGPRequest_Detail) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{457, 0}
}

func (x *UpdateInTransitTransferGPRequest_Detail) GetLnitmseq() int32 {
	if x != nil {
		return x.Lnitmseq
	}
	return 0
}

func (x *UpdateInTransitTransferGPRequest_Detail) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *UpdateInTransitTransferGPRequest_Detail) GetQtyfulfi() float64 {
	if x != nil {
		return x.Qtyfulfi
	}
	return 0
}

func (x *UpdateInTransitTransferGPRequest_Detail) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

type CommitTransferRequestGPRequest_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lnitmseq      int32   `protobuf:"varint,1,opt,name=lnitmseq,proto3" json:"lnitmseq,omitempty"`
	IvmQtyFulfill float64 `protobuf:"fixed64,2,opt,name=ivm_qty_fulfill,json=ivmQtyFulfill,proto3" json:"ivm_qty_fulfill,omitempty"`
}

func (x *CommitTransferRequestGPRequest_Detail) Reset() {
	*x = CommitTransferRequestGPRequest_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[527]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitTransferRequestGPRequest_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitTransferRequestGPRequest_Detail) ProtoMessage() {}

func (x *CommitTransferRequestGPRequest_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[527]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitTransferRequestGPRequest_Detail.ProtoReflect.Descriptor instead.
func (*CommitTransferRequestGPRequest_Detail) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{458, 0}
}

func (x *CommitTransferRequestGPRequest_Detail) GetLnitmseq() int32 {
	if x != nil {
		return x.Lnitmseq
	}
	return 0
}

func (x *CommitTransferRequestGPRequest_Detail) GetIvmQtyFulfill() float64 {
	if x != nil {
		return x.IvmQtyFulfill
	}
	return 0
}

type CreateSalesInvoiceGPRequest_VoucherApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnlVoucherType int32   `protobuf:"varint,1,opt,name=gnl_voucher_type,json=gnlVoucherType,proto3" json:"gnl_voucher_type,omitempty"`
	GnlVoucherId   string  `protobuf:"bytes,2,opt,name=gnl_voucher_id,json=gnlVoucherId,proto3" json:"gnl_voucher_id,omitempty"`
	Ordocamt       float64 `protobuf:"fixed64,3,opt,name=ordocamt,proto3" json:"ordocamt,omitempty"`
}

func (x *CreateSalesInvoiceGPRequest_VoucherApply) Reset() {
	*x = CreateSalesInvoiceGPRequest_VoucherApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[528]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSalesInvoiceGPRequest_VoucherApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSalesInvoiceGPRequest_VoucherApply) ProtoMessage() {}

func (x *CreateSalesInvoiceGPRequest_VoucherApply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[528]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSalesInvoiceGPRequest_VoucherApply.ProtoReflect.Descriptor instead.
func (*CreateSalesInvoiceGPRequest_VoucherApply) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{463, 0}
}

func (x *CreateSalesInvoiceGPRequest_VoucherApply) GetGnlVoucherType() int32 {
	if x != nil {
		return x.GnlVoucherType
	}
	return 0
}

func (x *CreateSalesInvoiceGPRequest_VoucherApply) GetGnlVoucherId() string {
	if x != nil {
		return x.GnlVoucherId
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest_VoucherApply) GetOrdocamt() float64 {
	if x != nil {
		return x.Ordocamt
	}
	return 0
}

type CreateSalesInvoiceGPRequest_AmountReceived struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount   float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Chekbkid string  `protobuf:"bytes,2,opt,name=chekbkid,proto3" json:"chekbkid,omitempty"`
}

func (x *CreateSalesInvoiceGPRequest_AmountReceived) Reset() {
	*x = CreateSalesInvoiceGPRequest_AmountReceived{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[529]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSalesInvoiceGPRequest_AmountReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSalesInvoiceGPRequest_AmountReceived) ProtoMessage() {}

func (x *CreateSalesInvoiceGPRequest_AmountReceived) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[529]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSalesInvoiceGPRequest_AmountReceived.ProtoReflect.Descriptor instead.
func (*CreateSalesInvoiceGPRequest_AmountReceived) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{463, 1}
}

func (x *CreateSalesInvoiceGPRequest_AmountReceived) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateSalesInvoiceGPRequest_AmountReceived) GetChekbkid() string {
	if x != nil {
		return x.Chekbkid
	}
	return ""
}

type CreateSalesInvoiceGPRequest_DetailItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lnitmseq   int32   `protobuf:"varint,1,opt,name=lnitmseq,proto3" json:"lnitmseq,omitempty"`
	Itemnmbr   string  `protobuf:"bytes,2,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	Locncode   string  `protobuf:"bytes,3,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Uofm       string  `protobuf:"bytes,4,opt,name=uofm,proto3" json:"uofm,omitempty"`
	Pricelvl   string  `protobuf:"bytes,5,opt,name=pricelvl,proto3" json:"pricelvl,omitempty"`
	Quantity   float64 `protobuf:"fixed64,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Unitprce   float64 `protobuf:"fixed64,7,opt,name=unitprce,proto3" json:"unitprce,omitempty"`
	Xtndprce   float64 `protobuf:"fixed64,8,opt,name=xtndprce,proto3" json:"xtndprce,omitempty"`
	GnL_Weight int32   `protobuf:"varint,9,opt,name=gnL_Weight,json=gnLWeight,proto3" json:"gnL_Weight,omitempty"`
}

func (x *CreateSalesInvoiceGPRequest_DetailItem) Reset() {
	*x = CreateSalesInvoiceGPRequest_DetailItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[530]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSalesInvoiceGPRequest_DetailItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSalesInvoiceGPRequest_DetailItem) ProtoMessage() {}

func (x *CreateSalesInvoiceGPRequest_DetailItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[530]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSalesInvoiceGPRequest_DetailItem.ProtoReflect.Descriptor instead.
func (*CreateSalesInvoiceGPRequest_DetailItem) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{463, 2}
}

func (x *CreateSalesInvoiceGPRequest_DetailItem) GetLnitmseq() int32 {
	if x != nil {
		return x.Lnitmseq
	}
	return 0
}

func (x *CreateSalesInvoiceGPRequest_DetailItem) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest_DetailItem) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest_DetailItem) GetUofm() string {
	if x != nil {
		return x.Uofm
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest_DetailItem) GetPricelvl() string {
	if x != nil {
		return x.Pricelvl
	}
	return ""
}

func (x *CreateSalesInvoiceGPRequest_DetailItem) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CreateSalesInvoiceGPRequest_DetailItem) GetUnitprce() float64 {
	if x != nil {
		return x.Unitprce
	}
	return 0
}

func (x *CreateSalesInvoiceGPRequest_DetailItem) GetXtndprce() float64 {
	if x != nil {
		return x.Xtndprce
	}
	return 0
}

func (x *CreateSalesInvoiceGPRequest_DetailItem) GetGnL_Weight() int32 {
	if x != nil {
		return x.GnL_Weight
	}
	return 0
}

type CreateCashReceiptnonPBDRequest_ApplyTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sopnumbe    string  `protobuf:"bytes,1,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"`
	ApplyAmount float64 `protobuf:"fixed64,2,opt,name=apply_amount,json=applyAmount,proto3" json:"apply_amount,omitempty"`
}

func (x *CreateCashReceiptnonPBDRequest_ApplyTo) Reset() {
	*x = CreateCashReceiptnonPBDRequest_ApplyTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[531]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCashReceiptnonPBDRequest_ApplyTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCashReceiptnonPBDRequest_ApplyTo) ProtoMessage() {}

func (x *CreateCashReceiptnonPBDRequest_ApplyTo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[531]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCashReceiptnonPBDRequest_ApplyTo.ProtoReflect.Descriptor instead.
func (*CreateCashReceiptnonPBDRequest_ApplyTo) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{467, 0}
}

func (x *CreateCashReceiptnonPBDRequest_ApplyTo) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

func (x *CreateCashReceiptnonPBDRequest_ApplyTo) GetApplyAmount() float64 {
	if x != nil {
		return x.ApplyAmount
	}
	return 0
}

type CreateGoodsReceiptGPRequest_GoodsReceiptDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Poprctnm string  `protobuf:"bytes,1,opt,name=poprctnm,proto3" json:"poprctnm,omitempty"`
	Ponumber string  `protobuf:"bytes,2,opt,name=ponumber,proto3" json:"ponumber,omitempty"`
	Locncode string  `protobuf:"bytes,3,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Uofm     string  `protobuf:"bytes,4,opt,name=uofm,proto3" json:"uofm,omitempty"`
	Itemnmbr string  `protobuf:"bytes,5,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	Qtyshppd int32   `protobuf:"varint,6,opt,name=qtyshppd,proto3" json:"qtyshppd,omitempty"`
	Unitcost float64 `protobuf:"fixed64,7,opt,name=unitcost,proto3" json:"unitcost,omitempty"`
	Extdcost float64 `protobuf:"fixed64,8,opt,name=extdcost,proto3" json:"extdcost,omitempty"`
}

func (x *CreateGoodsReceiptGPRequest_GoodsReceiptDetail) Reset() {
	*x = CreateGoodsReceiptGPRequest_GoodsReceiptDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[532]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodsReceiptGPRequest_GoodsReceiptDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodsReceiptGPRequest_GoodsReceiptDetail) ProtoMessage() {}

func (x *CreateGoodsReceiptGPRequest_GoodsReceiptDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[532]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodsReceiptGPRequest_GoodsReceiptDetail.ProtoReflect.Descriptor instead.
func (*CreateGoodsReceiptGPRequest_GoodsReceiptDetail) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{469, 0}
}

func (x *CreateGoodsReceiptGPRequest_GoodsReceiptDetail) GetPoprctnm() string {
	if x != nil {
		return x.Poprctnm
	}
	return ""
}

func (x *CreateGoodsReceiptGPRequest_GoodsReceiptDetail) GetPonumber() string {
	if x != nil {
		return x.Ponumber
	}
	return ""
}

func (x *CreateGoodsReceiptGPRequest_GoodsReceiptDetail) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *CreateGoodsReceiptGPRequest_GoodsReceiptDetail) GetUofm() string {
	if x != nil {
		return x.Uofm
	}
	return ""
}

func (x *CreateGoodsReceiptGPRequest_GoodsReceiptDetail) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *CreateGoodsReceiptGPRequest_GoodsReceiptDetail) GetQtyshppd() int32 {
	if x != nil {
		return x.Qtyshppd
	}
	return 0
}

func (x *CreateGoodsReceiptGPRequest_GoodsReceiptDetail) GetUnitcost() float64 {
	if x != nil {
		return x.Unitcost
	}
	return 0
}

func (x *CreateGoodsReceiptGPRequest_GoodsReceiptDetail) GetExtdcost() float64 {
	if x != nil {
		return x.Extdcost
	}
	return 0
}

type UpdateGoodsReceiptGPRequest_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rcptlnnm int32   `protobuf:"varint,1,opt,name=rcptlnnm,proto3" json:"rcptlnnm,omitempty"`
	Ponumber string  `protobuf:"bytes,2,opt,name=ponumber,proto3" json:"ponumber,omitempty"`
	Locncode string  `protobuf:"bytes,3,opt,name=locncode,proto3" json:"locncode,omitempty"`
	Uofm     string  `protobuf:"bytes,4,opt,name=uofm,proto3" json:"uofm,omitempty"`
	Itemnmbr string  `protobuf:"bytes,5,opt,name=itemnmbr,proto3" json:"itemnmbr,omitempty"`
	Qtyshppd int32   `protobuf:"varint,6,opt,name=qtyshppd,proto3" json:"qtyshppd,omitempty"`
	Unitcost float64 `protobuf:"fixed64,7,opt,name=unitcost,proto3" json:"unitcost,omitempty"`
	Extdcost float64 `protobuf:"fixed64,8,opt,name=extdcost,proto3" json:"extdcost,omitempty"`
}

func (x *UpdateGoodsReceiptGPRequest_Detail) Reset() {
	*x = UpdateGoodsReceiptGPRequest_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[533]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodsReceiptGPRequest_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodsReceiptGPRequest_Detail) ProtoMessage() {}

func (x *UpdateGoodsReceiptGPRequest_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[533]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodsReceiptGPRequest_Detail.ProtoReflect.Descriptor instead.
func (*UpdateGoodsReceiptGPRequest_Detail) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{470, 0}
}

func (x *UpdateGoodsReceiptGPRequest_Detail) GetRcptlnnm() int32 {
	if x != nil {
		return x.Rcptlnnm
	}
	return 0
}

func (x *UpdateGoodsReceiptGPRequest_Detail) GetPonumber() string {
	if x != nil {
		return x.Ponumber
	}
	return ""
}

func (x *UpdateGoodsReceiptGPRequest_Detail) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *UpdateGoodsReceiptGPRequest_Detail) GetUofm() string {
	if x != nil {
		return x.Uofm
	}
	return ""
}

func (x *UpdateGoodsReceiptGPRequest_Detail) GetItemnmbr() string {
	if x != nil {
		return x.Itemnmbr
	}
	return ""
}

func (x *UpdateGoodsReceiptGPRequest_Detail) GetQtyshppd() int32 {
	if x != nil {
		return x.Qtyshppd
	}
	return 0
}

func (x *UpdateGoodsReceiptGPRequest_Detail) GetUnitcost() float64 {
	if x != nil {
		return x.Unitcost
	}
	return 0
}

func (x *UpdateGoodsReceiptGPRequest_Detail) GetExtdcost() float64 {
	if x != nil {
		return x.Extdcost
	}
	return 0
}

type CreateSalesPaymentGPnonPBDRequest_ApplyTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sopnumbe    string  `protobuf:"bytes,1,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"`
	ApplyAmount float64 `protobuf:"fixed64,2,opt,name=apply_amount,json=applyAmount,proto3" json:"apply_amount,omitempty"`
}

func (x *CreateSalesPaymentGPnonPBDRequest_ApplyTo) Reset() {
	*x = CreateSalesPaymentGPnonPBDRequest_ApplyTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[534]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSalesPaymentGPnonPBDRequest_ApplyTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSalesPaymentGPnonPBDRequest_ApplyTo) ProtoMessage() {}

func (x *CreateSalesPaymentGPnonPBDRequest_ApplyTo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[534]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSalesPaymentGPnonPBDRequest_ApplyTo.ProtoReflect.Descriptor instead.
func (*CreateSalesPaymentGPnonPBDRequest_ApplyTo) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{472, 0}
}

func (x *CreateSalesPaymentGPnonPBDRequest_ApplyTo) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

func (x *CreateSalesPaymentGPnonPBDRequest_ApplyTo) GetApplyAmount() float64 {
	if x != nil {
		return x.ApplyAmount
	}
	return 0
}

type SalesPaymentGP_SalesInvoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sopnumbe        string  `protobuf:"bytes,1,opt,name=sopnumbe,proto3" json:"sopnumbe,omitempty"`
	Docdate         string  `protobuf:"bytes,2,opt,name=docdate,proto3" json:"docdate,omitempty"`
	GnlRegion       string  `protobuf:"bytes,3,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	Locncode        string  `protobuf:"bytes,4,opt,name=locncode,proto3" json:"locncode,omitempty"`
	RemainingAmount float64 `protobuf:"fixed64,5,opt,name=remaining_amount,json=remainingAmount,proto3" json:"remaining_amount,omitempty"`
}

func (x *SalesPaymentGP_SalesInvoice) Reset() {
	*x = SalesPaymentGP_SalesInvoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[535]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesPaymentGP_SalesInvoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesPaymentGP_SalesInvoice) ProtoMessage() {}

func (x *SalesPaymentGP_SalesInvoice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[535]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesPaymentGP_SalesInvoice.ProtoReflect.Descriptor instead.
func (*SalesPaymentGP_SalesInvoice) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{474, 0}
}

func (x *SalesPaymentGP_SalesInvoice) GetSopnumbe() string {
	if x != nil {
		return x.Sopnumbe
	}
	return ""
}

func (x *SalesPaymentGP_SalesInvoice) GetDocdate() string {
	if x != nil {
		return x.Docdate
	}
	return ""
}

func (x *SalesPaymentGP_SalesInvoice) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *SalesPaymentGP_SalesInvoice) GetLocncode() string {
	if x != nil {
		return x.Locncode
	}
	return ""
}

func (x *SalesPaymentGP_SalesInvoice) GetRemainingAmount() float64 {
	if x != nil {
		return x.RemainingAmount
	}
	return 0
}

type SalesPaymentGP_SalesOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orignumb string `protobuf:"bytes,1,opt,name=orignumb,proto3" json:"orignumb,omitempty"`
	Ordrdate string `protobuf:"bytes,2,opt,name=ordrdate,proto3" json:"ordrdate,omitempty"`
}

func (x *SalesPaymentGP_SalesOrder) Reset() {
	*x = SalesPaymentGP_SalesOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[536]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesPaymentGP_SalesOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesPaymentGP_SalesOrder) ProtoMessage() {}

func (x *SalesPaymentGP_SalesOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[536]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesPaymentGP_SalesOrder.ProtoReflect.Descriptor instead.
func (*SalesPaymentGP_SalesOrder) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{474, 1}
}

func (x *SalesPaymentGP_SalesOrder) GetOrignumb() string {
	if x != nil {
		return x.Orignumb
	}
	return ""
}

func (x *SalesPaymentGP_SalesOrder) GetOrdrdate() string {
	if x != nil {
		return x.Ordrdate
	}
	return ""
}

type VoucherGP_Restriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnlRegion      string `protobuf:"bytes,1,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	GnlCustTypeId  string `protobuf:"bytes,2,opt,name=gnl_cust_type_id,json=gnlCustTypeId,proto3" json:"gnl_cust_type_id,omitempty"`
	GnlArchetypeId string `protobuf:"bytes,3,opt,name=gnl_archetype_id,json=gnlArchetypeId,proto3" json:"gnl_archetype_id,omitempty"`
	DefaultCb      int32  `protobuf:"varint,4,opt,name=default_cb,json=defaultCb,proto3" json:"default_cb,omitempty"`
}

func (x *VoucherGP_Restriction) Reset() {
	*x = VoucherGP_Restriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[537]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoucherGP_Restriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoucherGP_Restriction) ProtoMessage() {}

func (x *VoucherGP_Restriction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[537]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoucherGP_Restriction.ProtoReflect.Descriptor instead.
func (*VoucherGP_Restriction) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{478, 0}
}

func (x *VoucherGP_Restriction) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *VoucherGP_Restriction) GetGnlCustTypeId() string {
	if x != nil {
		return x.GnlCustTypeId
	}
	return ""
}

func (x *VoucherGP_Restriction) GetGnlArchetypeId() string {
	if x != nil {
		return x.GnlArchetypeId
	}
	return ""
}

func (x *VoucherGP_Restriction) GetDefaultCb() int32 {
	if x != nil {
		return x.DefaultCb
	}
	return 0
}

type VoucherGP_AdvancedProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Custnmbr              string `protobuf:"bytes,1,opt,name=custnmbr,proto3" json:"custnmbr,omitempty"`
	GnlStartPeriod        string `protobuf:"bytes,2,opt,name=gnl_start_period,json=gnlStartPeriod,proto3" json:"gnl_start_period,omitempty"`
	GnlEndPeriod          string `protobuf:"bytes,3,opt,name=gnl_end_period,json=gnlEndPeriod,proto3" json:"gnl_end_period,omitempty"`
	GnlTotalQuotaCount    string `protobuf:"bytes,4,opt,name=gnl_total_quota_count,json=gnlTotalQuotaCount,proto3" json:"gnl_total_quota_count,omitempty"`
	GnlTotalQuotaCountPe  string `protobuf:"bytes,5,opt,name=gnl_total_quota_count_pe,json=gnlTotalQuotaCountPe,proto3" json:"gnl_total_quota_count_pe,omitempty"`
	GnlRemainingOverallQu string `protobuf:"bytes,6,opt,name=gnl_remaining_overall_qu,json=gnlRemainingOverallQu,proto3" json:"gnl_remaining_overall_qu,omitempty"`
	GnlMobileVoucher      int32  `protobuf:"varint,7,opt,name=gnl_mobile_voucher,json=gnlMobileVoucher,proto3" json:"gnl_mobile_voucher,omitempty"`
}

func (x *VoucherGP_AdvancedProperty) Reset() {
	*x = VoucherGP_AdvancedProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[538]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoucherGP_AdvancedProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoucherGP_AdvancedProperty) ProtoMessage() {}

func (x *VoucherGP_AdvancedProperty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[538]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoucherGP_AdvancedProperty.ProtoReflect.Descriptor instead.
func (*VoucherGP_AdvancedProperty) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{478, 1}
}

func (x *VoucherGP_AdvancedProperty) GetCustnmbr() string {
	if x != nil {
		return x.Custnmbr
	}
	return ""
}

func (x *VoucherGP_AdvancedProperty) GetGnlStartPeriod() string {
	if x != nil {
		return x.GnlStartPeriod
	}
	return ""
}

func (x *VoucherGP_AdvancedProperty) GetGnlEndPeriod() string {
	if x != nil {
		return x.GnlEndPeriod
	}
	return ""
}

func (x *VoucherGP_AdvancedProperty) GetGnlTotalQuotaCount() string {
	if x != nil {
		return x.GnlTotalQuotaCount
	}
	return ""
}

func (x *VoucherGP_AdvancedProperty) GetGnlTotalQuotaCountPe() string {
	if x != nil {
		return x.GnlTotalQuotaCountPe
	}
	return ""
}

func (x *VoucherGP_AdvancedProperty) GetGnlRemainingOverallQu() string {
	if x != nil {
		return x.GnlRemainingOverallQu
	}
	return ""
}

func (x *VoucherGP_AdvancedProperty) GetGnlMobileVoucher() int32 {
	if x != nil {
		return x.GnlMobileVoucher
	}
	return 0
}

type CreateVoucherGPRequest_Restriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GnlRegion      string `protobuf:"bytes,1,opt,name=gnl_region,json=gnlRegion,proto3" json:"gnl_region,omitempty"`
	GnlCustTypeId  string `protobuf:"bytes,2,opt,name=gnl_cust_type_id,json=gnlCustTypeId,proto3" json:"gnl_cust_type_id,omitempty"`
	GnlArchetypeId string `protobuf:"bytes,3,opt,name=gnl_archetype_id,json=gnlArchetypeId,proto3" json:"gnl_archetype_id,omitempty"`
	DefaultCb      int32  `protobuf:"varint,4,opt,name=default_cb,json=defaultCb,proto3" json:"default_cb,omitempty"`
}

func (x *CreateVoucherGPRequest_Restriction) Reset() {
	*x = CreateVoucherGPRequest_Restriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[539]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVoucherGPRequest_Restriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVoucherGPRequest_Restriction) ProtoMessage() {}

func (x *CreateVoucherGPRequest_Restriction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[539]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVoucherGPRequest_Restriction.ProtoReflect.Descriptor instead.
func (*CreateVoucherGPRequest_Restriction) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{481, 0}
}

func (x *CreateVoucherGPRequest_Restriction) GetGnlRegion() string {
	if x != nil {
		return x.GnlRegion
	}
	return ""
}

func (x *CreateVoucherGPRequest_Restriction) GetGnlCustTypeId() string {
	if x != nil {
		return x.GnlCustTypeId
	}
	return ""
}

func (x *CreateVoucherGPRequest_Restriction) GetGnlArchetypeId() string {
	if x != nil {
		return x.GnlArchetypeId
	}
	return ""
}

func (x *CreateVoucherGPRequest_Restriction) GetDefaultCb() int32 {
	if x != nil {
		return x.DefaultCb
	}
	return 0
}

type CreateVoucherGPRequest_AdvancedProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Custnmbr              string `protobuf:"bytes,1,opt,name=custnmbr,proto3" json:"custnmbr,omitempty"`
	GnlStartPeriod        string `protobuf:"bytes,2,opt,name=gnl_start_period,json=gnlStartPeriod,proto3" json:"gnl_start_period,omitempty"`
	GnlEndPeriod          string `protobuf:"bytes,3,opt,name=gnl_end_period,json=gnlEndPeriod,proto3" json:"gnl_end_period,omitempty"`
	GnlTotalQuotaCount    int32  `protobuf:"varint,4,opt,name=gnl_total_quota_count,json=gnlTotalQuotaCount,proto3" json:"gnl_total_quota_count,omitempty"`
	GnlTotalQuotaCountPe  int32  `protobuf:"varint,5,opt,name=gnl_total_quota_count_pe,json=gnlTotalQuotaCountPe,proto3" json:"gnl_total_quota_count_pe,omitempty"`
	GnlRemainingOverallQu int32  `protobuf:"varint,6,opt,name=gnl_remaining_overall_qu,json=gnlRemainingOverallQu,proto3" json:"gnl_remaining_overall_qu,omitempty"`
	GnlMobileVoucher      int32  `protobuf:"varint,7,opt,name=gnl_mobile_voucher,json=gnlMobileVoucher,proto3" json:"gnl_mobile_voucher,omitempty"`
}

func (x *CreateVoucherGPRequest_AdvancedProperties) Reset() {
	*x = CreateVoucherGPRequest_AdvancedProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[540]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVoucherGPRequest_AdvancedProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVoucherGPRequest_AdvancedProperties) ProtoMessage() {}

func (x *CreateVoucherGPRequest_AdvancedProperties) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[540]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVoucherGPRequest_AdvancedProperties.ProtoReflect.Descriptor instead.
func (*CreateVoucherGPRequest_AdvancedProperties) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{481, 1}
}

func (x *CreateVoucherGPRequest_AdvancedProperties) GetCustnmbr() string {
	if x != nil {
		return x.Custnmbr
	}
	return ""
}

func (x *CreateVoucherGPRequest_AdvancedProperties) GetGnlStartPeriod() string {
	if x != nil {
		return x.GnlStartPeriod
	}
	return ""
}

func (x *CreateVoucherGPRequest_AdvancedProperties) GetGnlEndPeriod() string {
	if x != nil {
		return x.GnlEndPeriod
	}
	return ""
}

func (x *CreateVoucherGPRequest_AdvancedProperties) GetGnlTotalQuotaCount() int32 {
	if x != nil {
		return x.GnlTotalQuotaCount
	}
	return 0
}

func (x *CreateVoucherGPRequest_AdvancedProperties) GetGnlTotalQuotaCountPe() int32 {
	if x != nil {
		return x.GnlTotalQuotaCountPe
	}
	return 0
}

func (x *CreateVoucherGPRequest_AdvancedProperties) GetGnlRemainingOverallQu() int32 {
	if x != nil {
		return x.GnlRemainingOverallQu
	}
	return 0
}

func (x *CreateVoucherGPRequest_AdvancedProperties) GetGnlMobileVoucher() int32 {
	if x != nil {
		return x.GnlMobileVoucher
	}
	return 0
}

type SalesMovement_Picking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PickingNumber string `protobuf:"bytes,1,opt,name=picking_number,json=pickingNumber,proto3" json:"picking_number,omitempty"`
	PickingStatus string `protobuf:"bytes,2,opt,name=picking_status,json=pickingStatus,proto3" json:"picking_status,omitempty"`
}

func (x *SalesMovement_Picking) Reset() {
	*x = SalesMovement_Picking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[541]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesMovement_Picking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesMovement_Picking) ProtoMessage() {}

func (x *SalesMovement_Picking) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[541]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesMovement_Picking.ProtoReflect.Descriptor instead.
func (*SalesMovement_Picking) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{483, 0}
}

func (x *SalesMovement_Picking) GetPickingNumber() string {
	if x != nil {
		return x.PickingNumber
	}
	return ""
}

func (x *SalesMovement_Picking) GetPickingStatus() string {
	if x != nil {
		return x.PickingStatus
	}
	return ""
}

type SalesMovement_Checking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckingNumber string `protobuf:"bytes,1,opt,name=checking_number,json=checkingNumber,proto3" json:"checking_number,omitempty"`
	CheckingStatus string `protobuf:"bytes,2,opt,name=checking_status,json=checkingStatus,proto3" json:"checking_status,omitempty"`
}

func (x *SalesMovement_Checking) Reset() {
	*x = SalesMovement_Checking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[542]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesMovement_Checking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesMovement_Checking) ProtoMessage() {}

func (x *SalesMovement_Checking) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[542]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesMovement_Checking.ProtoReflect.Descriptor instead.
func (*SalesMovement_Checking) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{483, 1}
}

func (x *SalesMovement_Checking) GetCheckingNumber() string {
	if x != nil {
		return x.CheckingNumber
	}
	return ""
}

func (x *SalesMovement_Checking) GetCheckingStatus() string {
	if x != nil {
		return x.CheckingStatus
	}
	return ""
}

type SalesMovement_DeliveryOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoNumber string `protobuf:"bytes,1,opt,name=do_number,json=doNumber,proto3" json:"do_number,omitempty"`
	DoStatus string `protobuf:"bytes,2,opt,name=do_status,json=doStatus,proto3" json:"do_status,omitempty"`
}

func (x *SalesMovement_DeliveryOrder) Reset() {
	*x = SalesMovement_DeliveryOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[543]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesMovement_DeliveryOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesMovement_DeliveryOrder) ProtoMessage() {}

func (x *SalesMovement_DeliveryOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[543]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesMovement_DeliveryOrder.ProtoReflect.Descriptor instead.
func (*SalesMovement_DeliveryOrder) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{483, 2}
}

func (x *SalesMovement_DeliveryOrder) GetDoNumber() string {
	if x != nil {
		return x.DoNumber
	}
	return ""
}

func (x *SalesMovement_DeliveryOrder) GetDoStatus() string {
	if x != nil {
		return x.DoStatus
	}
	return ""
}

type SalesMovement_CashReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrNumber string `protobuf:"bytes,1,opt,name=cr_number,json=crNumber,proto3" json:"cr_number,omitempty"`
	CrStatus string `protobuf:"bytes,2,opt,name=cr_status,json=crStatus,proto3" json:"cr_status,omitempty"`
}

func (x *SalesMovement_CashReceipt) Reset() {
	*x = SalesMovement_CashReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[544]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesMovement_CashReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesMovement_CashReceipt) ProtoMessage() {}

func (x *SalesMovement_CashReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[544]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesMovement_CashReceipt.ProtoReflect.Descriptor instead.
func (*SalesMovement_CashReceipt) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{483, 3}
}

func (x *SalesMovement_CashReceipt) GetCrNumber() string {
	if x != nil {
		return x.CrNumber
	}
	return ""
}

func (x *SalesMovement_CashReceipt) GetCrStatus() string {
	if x != nil {
		return x.CrStatus
	}
	return ""
}

type SalesMovement_SalesReturn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnNumber string `protobuf:"bytes,1,opt,name=return_number,json=returnNumber,proto3" json:"return_number,omitempty"`
	ReturnStatus string `protobuf:"bytes,2,opt,name=return_status,json=returnStatus,proto3" json:"return_status,omitempty"`
}

func (x *SalesMovement_SalesReturn) Reset() {
	*x = SalesMovement_SalesReturn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[545]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SalesMovement_SalesReturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesMovement_SalesReturn) ProtoMessage() {}

func (x *SalesMovement_SalesReturn) ProtoReflect() protoreflect.Message {
	mi := &file_proto_bridge_service_bridge_service_proto_msgTypes[545]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesMovement_SalesReturn.ProtoReflect.Descriptor instead.
func (*SalesMovement_SalesReturn) Descriptor() ([]byte, []int) {
	return file_proto_bridge_service_bridge_service_proto_rawDescGZIP(), []int{483, 4}
}

func (x *SalesMovement_SalesReturn) GetReturnNumber() string {
	if x != nil {
		return x.ReturnNumber
	}
	return ""
}

func (x *SalesMovement_SalesReturn) GetReturnStatus() string {
	if x != nil {
		return x.ReturnStatus
	}
	return ""
}

var File_proto_bridge_service_bridge_service_proto protoreflect.FileDescriptor

var file_proto_bridge_service_bridge_service_proto_rawDesc = []byte{
	0x0a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf2, 0x08, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x64,
	0x6d, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x70, 0x73, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x73, 0x5a,
	0x6f, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x74, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x31, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x33, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x33, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x63, 0x61, 0x5f, 0x76,
	0x61, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x63, 0x61, 0x56, 0x61, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x56, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xe4, 0x03, 0x0a, 0x0b, 0x41, 0x64, 0x6d, 0x44,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x73, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xbd,
	0x01, 0x0a, 0x0d, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x50,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x89,
	0x02, 0x0a, 0x09, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa5, 0x02, 0x0a, 0x0c, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xdb, 0x01, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xdf, 0x01, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x10, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xaf, 0x06, 0x0a, 0x04,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x75, 0x6e, 0x69, 0x74, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x51, 0x74, 0x79,
	0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x74,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61,
	0x78, 0x51, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x79, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x67, 0x69,
	0x6c, 0x65, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x72, 0x61, 0x67, 0x69, 0x6c, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x61, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x2b, 0x0a, 0x03, 0x75, 0x6f, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6f, 0x6d, 0x52, 0x03, 0x75, 0x6f, 0x6d, 0x22, 0xd1, 0x06,
	0x0a, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d,
	0x6e, 0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d,
	0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x6d, 0x73, 0x68, 0x6e, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x6d, 0x73, 0x68, 0x6e, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x74, 0x6d, 0x67, 0x65, 0x64, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x74, 0x6d, 0x67, 0x65, 0x64, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74,
	0x6e, 0x64, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74,
	0x6e, 0x64, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x63, 0x6f,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x68, 0x77, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x68, 0x77, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x63, 0x70, 0x6c, 0x71, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x64, 0x65, 0x63, 0x70, 0x6c, 0x71, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x63, 0x70, 0x6c, 0x63, 0x75, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65,
	0x63, 0x70, 0x6c, 0x63, 0x75, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x6f, 0x70, 0x74,
	0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x61, 0x78, 0x6f, 0x70, 0x74,
	0x6e, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x74,
	0x61, 0x78, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x61,
	0x78, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x6f, 0x6d, 0x73, 0x63, 0x68, 0x64, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x6f, 0x6d, 0x73, 0x63, 0x68, 0x64, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x6e, 0x6c, 0x5f, 0x63,
	0x62, 0x5f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x67, 0x6e, 0x6c, 0x43, 0x62, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61,
	0x6c, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x35, 0x0a, 0x17, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x62, 0x5f,
	0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x67, 0x6e, 0x6c, 0x43, 0x62, 0x43, 0x61, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x12, 0x30, 0x0a, 0x14,
	0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x62, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x70, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x67, 0x6e, 0x6c, 0x43,
	0x62, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x70, 0x6f, 0x12, 0x39,
	0x0a, 0x19, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x62, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x70, 0x6f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x67, 0x6e, 0x6c, 0x43, 0x62, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x70, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2f, 0x0a, 0x13, 0x67, 0x6e, 0x6c,
	0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x67, 0x6e, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x74, 0x6d, 0x63, 0x6c, 0x73, 0x63, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x74, 0x6d, 0x63, 0x6c, 0x73, 0x63, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x6f, 0x72,
	0x71, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x6f, 0x72,
	0x71, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x6f, 0x72, 0x64, 0x71, 0x74, 0x79,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x6f, 0x72, 0x64, 0x71, 0x74,
	0x79, 0x22, 0xfd, 0x08, 0x0a, 0x13, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x47, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6f, 0x6d, 0x73, 0x63, 0x68, 0x64, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6f, 0x6d, 0x73, 0x63, 0x68, 0x64, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x71, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x71, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x6f, 0x72, 0x64, 0x71, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x6f, 0x72, 0x64, 0x71, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x68, 0x77, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x68, 0x77, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x6d, 0x63, 0x6c, 0x73, 0x63, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x6d, 0x63, 0x6c, 0x73, 0x63, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x55, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x47, 0x50,
	0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0a, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x42, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x47, 0x50,
	0x2e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x67,
	0x6e, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x77, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x67, 0x6e, 0x6c, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x77, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x0d,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x47, 0x50, 0x2e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x86, 0x01, 0x0a, 0x0a, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6e,
	0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x67, 0x6e, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x63, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x63, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x1a, 0xc3, 0x01, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x62,
	0x5f, 0x73, 0x61, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x67, 0x6e, 0x6c, 0x43, 0x62, 0x53, 0x61, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x62, 0x5f, 0x73, 0x61, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x67, 0x6e, 0x6c, 0x43, 0x62, 0x53, 0x61, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x1a, 0xe6, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6e, 0x6c, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x67,
	0x6e, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x67, 0x6e, 0x6c, 0x4d, 0x69, 0x6e, 0x51, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x67,
	0x6e, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x67, 0x6e, 0x6c, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x67,
	0x6e, 0x6c, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x6e, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x55, 0x73, 0x65,
	0x72, 0x22, 0xdc, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x99, 0x02, 0x0a, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x90, 0x02, 0x0a,
	0x04, 0x53, 0x69, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22,
	0xf1, 0x04, 0x0a, 0x06, 0x53, 0x69, 0x74, 0x65, 0x47, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x73, 0x69,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x67, 0x6e, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x64, 0x73, 0x63, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x64, 0x73, 0x63, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x53, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x53, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x33, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x33, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45,
	0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x32, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x33, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x33, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x78, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x78, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x78, 0x73,
	0x63, 0x68, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x78, 0x73,
	0x63, 0x68, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x63, 0x74, 0x61, 0x78, 0x73, 0x63, 0x68, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x63, 0x74, 0x61, 0x78, 0x73, 0x63, 0x68, 0x12,
	0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x67, 0x6e,
	0x6c, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x67, 0x6e, 0x6c,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x22, 0xe1, 0x01, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xdd, 0x02, 0x0a, 0x09, 0x54, 0x65, 0x72, 0x72,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x75, 0x62,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x82, 0x02, 0x0a, 0x03, 0x55, 0x6f, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xcc, 0x05, 0x0a,
	0x0a, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x77, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x72, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x22, 0xeb, 0x03, 0x0a, 0x0e,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x61, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x61, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xba, 0x07, 0x0a, 0x11, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x50, 0x12,
	0x1e, 0x0a, 0x0b, 0x73, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x73, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x70, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73,
	0x68, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x77, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x77, 0x72, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x69, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x50, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x72, 0x6d,
	0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x44, 0x69, 0x73, 0x63, 0x54, 0x61, 0x6b,
	0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x69, 0x73, 0x63, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x6d, 0x69, 0x73, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x74, 0x61, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x80, 0x06, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x50, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x6f, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x15,
	0x0a, 0x06, 0x75, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x75, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x5f,
	0x73, 0x68, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x71, 0x53, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x75,
	0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x74, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x71, 0x74, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x74, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x66, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x71, 0x74, 0x79, 0x46,
	0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x74, 0x79, 0x5f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x71, 0x74, 0x79, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x71,
	0x74, 0x79, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x71, 0x74, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68,
	0x69, 0x70, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x74, 0x79, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x71, 0x74, 0x79,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x03, 0x57, 0x72,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x22, 0xf4, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11,
	0x6c, 0x61, 0x73, 0x74, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xed, 0x03, 0x0a, 0x09, 0x43, 0x6f,
	0x75, 0x72, 0x69, 0x65, 0x72, 0x47, 0x50, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x6e, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x67, 0x6e, 0x6c, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6e, 0x6c, 0x43, 0x6f, 0x75, 0x72,
	0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x6e, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x6e, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x6e, 0x6c, 0x5f, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x67, 0x6e, 0x6c, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x6e,
	0x6c, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x6e, 0x6c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x45, 0x5f, 0x44,
	0x45, 0x53, 0x43, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x45, 0x44, 0x45, 0x53, 0x43, 0x12, 0x30, 0x0a, 0x11, 0x67, 0x6e, 0x6c, 0x5f, 0x65,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x10, 0x67, 0x6e, 0x6c, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x6d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x11, 0x67, 0x6e, 0x6c,
	0x5f, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x6e, 0x6c, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x67, 0x6e, 0x6c, 0x5f, 0x65, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x67, 0x6e, 0x6c, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x67, 0x6e, 0x6c, 0x5f, 0x65, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0d, 0x43, 0x6f,
	0x75, 0x72, 0x69, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x69,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x75,
	0x72, 0x69, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x50, 0x12, 0x31, 0x0a, 0x15,
	0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x6e, 0x6c,
	0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x17, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x67, 0x6e, 0x6c, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x45, 0x44,
	0x45, 0x53, 0x43, 0x22, 0xcb, 0x03, 0x0a, 0x0e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65,
	0x72, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x78, 0x5f, 0x6b, 0x6f, 0x6c, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x61,
	0x78, 0x4b, 0x6f, 0x6c, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x67,
	0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x46, 0x72,
	0x61, 0x67, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73,
	0x75, 0x62, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x15, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x61,
	0x78, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x22, 0xfc, 0x04, 0x0a, 0x10, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x47, 0x50, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x6e, 0x6c, 0x5f, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x67, 0x6e, 0x6c, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x67,
	0x6e, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x30,
	0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x6e, 0x6c, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x30, 0x30, 0x12, 0x31, 0x0a, 0x15, 0x67, 0x6e,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x6e, 0x6c, 0x43, 0x6f,
	0x75, 0x72, 0x69, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x67, 0x6e, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x6f, 0x6c, 0x69, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x6e, 0x6c, 0x4d, 0x61, 0x78, 0x4b, 0x6f, 0x6c, 0x69, 0x12,
	0x24, 0x0a, 0x0e, 0x67, 0x6e, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x67, 0x6e, 0x6c, 0x4d, 0x61, 0x78, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x6e, 0x6c, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x66, 0x72, 0x61, 0x67, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x67, 0x6e, 0x6c, 0x4d, 0x61, 0x78, 0x46, 0x72, 0x61, 0x67, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x67, 0x6e, 0x6c, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x6e, 0x6c, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x6e, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6e, 0x6c,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x67, 0x6e, 0x6c, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x67, 0x6e, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x74, 0x5f, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x67,
	0x6e, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x15, 0x67, 0x6e, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x67, 0x6e, 0x6c, 0x4d, 0x61, 0x78, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x45, 0x44, 0x45, 0x53, 0x43,
	0x22, 0xda, 0x04, 0x0a, 0x06, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x69, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72,
	0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x9c, 0x02,
	0x0a, 0x12, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x75, 0x62,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xec, 0x01, 0x0a,
	0x14, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x64, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x64, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc8, 0x05, 0x0a, 0x0c,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x45, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35, 0x0a, 0x17,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x51, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x51, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x3b, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x87, 0x02, 0x0a, 0x10, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x71, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x51, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0xa1, 0x0c, 0x0a, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13,
	0x74, 0x65, 0x72, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x74, 0x61, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x74, 0x61, 0x78, 0x50, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x5f, 0x67, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x47, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x74, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x12, 0x57, 0x0a, 0x12, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x26,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x12, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x51, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x27,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x69, 0x6e, 0x67, 0x22, 0xa2, 0x04, 0x0a, 0x11, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x71, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x74, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x61, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x61, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x78,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54,
	0x61, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x78,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74,
	0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x78, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x87, 0x03, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x61, 0x64, 0x6d, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x64, 0x6d, 0x44, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x72, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74,
	0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61,
	0x78, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5e,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7b,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb4, 0x02, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe1, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x73, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xf8, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x61, 0x64, 0x6d, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x6d, 0x44, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x22, 0xd7, 0x03, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x50,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x6b, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x6b, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x6b, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6b, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x6b, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6b, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x6b,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4c, 0x69, 0x6b, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x73, 0x22, 0xa3, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d,
	0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3f, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x7f, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x63, 0x68,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x95, 0x01, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x42, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x85, 0x01,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4b, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x7a, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8e,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22,
	0x75, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x77, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe9, 0x01, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x15, 0x0a, 0x06,
	0x75, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x75, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xd5, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x50, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x74,
	0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xcd, 0x03, 0x0a, 0x21, 0x47, 0x65, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x6c,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x6e, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x6e, 0x6c, 0x5f,
	0x73, 0x61, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x67, 0x6e, 0x6c, 0x53, 0x61, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x27, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6e, 0x6c, 0x43, 0x75,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x63, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x63, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x6e, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67,
	0x6e, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x95, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x22, 0x47,
	0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x47, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x4a, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x44, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x46, 0x72, 0x61, 0x67, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x61, 0x67, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x66, 0x72, 0x61, 0x67, 0x69, 0x6c, 0x65, 0x22, 0x49, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x72, 0x61, 0x67, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x77, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x3c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x79, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x94, 0x01, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x22, 0x81, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8d,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x8c,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x49, 0x64, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x73, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x3a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x75,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xef, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74,
	0x65, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x5f, 0x64, 0x69, 0x76, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x6d, 0x44, 0x69, 0x76,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x64, 0x73, 0x63, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x64, 0x73, 0x63, 0x72, 0x12, 0x27, 0x0a, 0x10, 0x67, 0x6e,
	0x6c, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6e, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x67, 0x6e, 0x6c, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x67, 0x6e, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x74, 0x65, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x95, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x47, 0x50, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x74,
	0x65, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x22, 0x81, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa8, 0x02,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x66, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x7f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x8c, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22,
	0x71, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6f, 0x6d, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x39, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x6f, 0x6d, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x73, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x55, 0x6f, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6f, 0x6d, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x97, 0x03, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x3e, 0x0a, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x22, 0x7f, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x81, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x7e, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe5, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x22,
	0x79, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x75,
	0x72, 0x69, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x56, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x7b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xd1, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x47, 0x50,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x62, 0x79, 0x12, 0x31, 0x0a, 0x15, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x69,
	0x65, 0x72, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x67, 0x6e, 0x6c, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x6e, 0x6c, 0x5f, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x67, 0x6e, 0x6c, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x67,
	0x6e, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x6e, 0x6c, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6e, 0x6c,
	0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x68, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x68, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x22, 0x2b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65,
	0x72, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x9b, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x47,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd6,
	0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x44, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x63, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x47, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x50,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xab, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x70, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x35, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xaf, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x43, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69,
	0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xba, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69,
	0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x67, 0x6e,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x6e, 0x6c, 0x43, 0x6f,
	0x75, 0x72, 0x69, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x17, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x67, 0x6e, 0x6c, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x22, 0x31, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xa7, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69,
	0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x76, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x57, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x57, 0x72, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57,
	0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe2, 0x0e, 0x0a, 0x08, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x6c, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x67, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61,
	0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x64, 0x65, 0x65,
	0x6d, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x1a, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x76, 0x65, 0x72,
	0x64, 0x75, 0x65, 0x44, 0x65, 0x62, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x4f,
	0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x44, 0x65, 0x62, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4b, 0x54,
	0x50, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x55, 0x72, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x4b, 0x54, 0x50, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x2c,
	0x0a, 0x11, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73,
	0x55, 0x72, 0x6c, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x0f,
	0x4b, 0x54, 0x50, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x55, 0x72, 0x6c, 0x41, 0x72, 0x72, 0x18,
	0x27, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x4b, 0x54, 0x50, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73,
	0x55, 0x72, 0x6c, 0x41, 0x72, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x55, 0x72, 0x6c, 0x41, 0x72, 0x72, 0x18, 0x28,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x73, 0x55, 0x72, 0x6c, 0x41, 0x72, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x44, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x44,
	0x12, 0x36, 0x0a, 0x16, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x16, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x65, 0x72, 0x6d,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6c, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x6c, 0x73, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0xdc, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc3, 0x01, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65,
	0x72, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x49, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x82,
	0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x31, 0x0a, 0x15, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x67, 0x6e, 0x6c, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x67, 0x6e, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x30, 0x30, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x67, 0x6e, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x31, 0x30, 0x30, 0x22, 0x32, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa9, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x50, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x50, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x7b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xda, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x7d, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x25, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x57, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x73, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x57, 0x72, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57,
	0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x92, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x7d, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3f, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x7f, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x99,
	0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x8b, 0x01, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x72, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x46, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x8d, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x29, 0x0a, 0x17, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x75,
	0x72, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x75, 0x0a, 0x18, 0x45,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x67,
	0x6e, 0x6c, 0x5f, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x67, 0x6e, 0x6c, 0x45, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x6e, 0x0a, 0x08, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x7b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x3e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x7d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x98, 0x03, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x64, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x64, 0x6d, 0x5f, 0x64,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x61, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x61, 0x78,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x49, 0x64, 0x73, 0x22, 0xab, 0x01,
	0x0a, 0x08, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22,
	0x7b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3e, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x7d, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa8, 0x01, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x6e, 0x49, 0x64, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x8b, 0x02, 0x0a, 0x04, 0x42, 0x61, 0x6e, 0x6b, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x69, 0x76,
	0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x49, 0x76, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x66,
	0x76, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x46, 0x76, 0x61, 0x22, 0x8d, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x22, 0x73, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42,
	0x61, 0x6e, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x6e, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x75, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x80, 0x02, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22,
	0xdb, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46,
	0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x81, 0x01,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x9d, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65,
	0x65, 0x47, 0x50, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6e,
	0x6c, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x69, 0x6e, 0x6f, 0x72, 0x71, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d,
	0x69, 0x6e, 0x6f, 0x72, 0x71, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x67, 0x6e, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65,
	0x65, 0x22, 0xd9, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x46, 0x65, 0x65, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6e, 0x6c, 0x43, 0x75, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x6f, 0x72,
	0x71, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x6f, 0x72,
	0x71, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x67,
	0x6e, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x22, 0x85, 0x01,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65,
	0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x47, 0x50, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x88, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x22, 0x83, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x46, 0x65, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8f, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x77, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x3c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x79, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9b, 0x01, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x8f, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x48, 0x0a, 0x22, 0x47, 0x65,
	0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9d, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x93, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a,
	0x0a, 0x24, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x25, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x95, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x42, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x99, 0x01, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x8b, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x46, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x8d,
	0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x96,
	0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x43, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9a,
	0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x8d, 0x01, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x47, 0x0a, 0x21, 0x47,
	0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x94, 0x02, 0x0a, 0x15, 0x41, 0x64, 0x6d, 0x44, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x47, 0x50,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x17, 0x67, 0x6e, 0x6c, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x67, 0x6e, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6e, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67,
	0x6e, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6e,
	0x6c, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x6e,
	0x6c, 0x43, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6e, 0x6c, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x6e, 0x6c,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x6e, 0x6c, 0x5f,
	0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x67, 0x6e, 0x6c, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb1, 0x02,
	0x0a, 0x23, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x67, 0x6e, 0x6c, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x67, 0x6e, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67,
	0x6e, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x67, 0x6e, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x6e, 0x6c, 0x43, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6e, 0x6c,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x67, 0x6e, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x67, 0x6e, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6e, 0x6c, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x37, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x47, 0x50, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb3, 0x02, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x84, 0x03, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73,
	0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x5f, 0x65, 0x74, 0x61, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x45,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x74, 0x61, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x46, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x5f,
	0x70, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x74, 0x61, 0x78, 0x50, 0x63,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x71, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x74, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x71, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x54, 0x61, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x78, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x74, 0x61, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x69,
	0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xcd, 0x01, 0x0a, 0x0b, 0x50, 0x69,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x6f, 0x63,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x0c, 0x50, 0x69,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x6f,
	0x63, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x12, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x08,
	0x64, 0x6f, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x70, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf3, 0x02, 0x0a, 0x14,
	0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x12, 0x22, 0x0a, 0x0d, 0x77, 0x6d, 0x73, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6d, 0x73, 0x50, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x6d, 0x73, 0x5f, 0x70, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77,
	0x6d, 0x73, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x74, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x74, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x77, 0x6d, 0x73, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x77, 0x6d, 0x73, 0x50, 0x69, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x77, 0x6d,
	0x73, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x77, 0x6d, 0x73,
	0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x22, 0xa6, 0x03, 0x0a, 0x14, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f,
	0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f,
	0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x6d, 0x73, 0x5f, 0x70, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x6d, 0x73, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x6d,
	0x73, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6d, 0x73, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x74, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x6d, 0x73, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x77, 0x6d, 0x73, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x35, 0x0a, 0x17, 0x77, 0x6d, 0x73, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x77, 0x6d, 0x73, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x85, 0x03, 0x0a, 0x15, 0x50,
	0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x6e, 0x64, 0x73, 0x63, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x6e, 0x64, 0x73, 0x63, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74,
	0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74,
	0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6e, 0x69, 0x74, 0x6d, 0x73, 0x65, 0x71, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6c, 0x6e, 0x69, 0x74, 0x6d, 0x73, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x76,
	0x6d, 0x5f, 0x75, 0x6f, 0x66, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x76,
	0x6d, 0x55, 0x6f, 0x66, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6d, 0x73, 0x63, 0x68, 0x64, 0x73,
	0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6d, 0x73, 0x63, 0x68, 0x64, 0x73,
	0x63, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x76, 0x6d, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x69, 0x76, 0x6d, 0x51, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x6d,
	0x73, 0x5f, 0x71, 0x74, 0x79, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x77, 0x6d, 0x73, 0x51, 0x74, 0x79, 0x50, 0x69, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0e,
	0x77, 0x6d, 0x73, 0x5f, 0x71, 0x74, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x77, 0x6d, 0x73, 0x51, 0x74, 0x79, 0x45, 0x78, 0x63, 0x65,
	0x73, 0x73, 0x22, 0xee, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e,
	0x6d, 0x62, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e,
	0x6d, 0x62, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x6e, 0x6c, 0x5f, 0x68, 0x65, 0x6c,
	0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x6e,
	0x6c, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x6d, 0x73,
	0x5f, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x77, 0x6d, 0x73, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xb1, 0x02, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x30, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x69,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb1, 0x02, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x3e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47,
	0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6e, 0x0a,
	0x0e, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6e, 0x69, 0x74, 0x6d, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c,
	0x6e, 0x69, 0x74, 0x6d, 0x73, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x76, 0x6d, 0x5f, 0x71,
	0x74, 0x79, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x69, 0x76, 0x6d, 0x51, 0x74, 0x79, 0x50, 0x69, 0x63, 0x6b, 0x73, 0x6f, 0x22, 0x9b, 0x01,
	0x0a, 0x07, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x74, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x74, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x6f, 0x0a, 0x0f, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6e,
	0x69, 0x74, 0x6d, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6e,
	0x69, 0x74, 0x6d, 0x73, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x76, 0x6d, 0x5f, 0x71, 0x74,
	0x79, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x73, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x69, 0x76, 0x6d, 0x51, 0x74, 0x79, 0x50, 0x69, 0x63, 0x6b, 0x73, 0x6f, 0x22, 0x9e, 0x02, 0x0a,
	0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x6d, 0x73, 0x5f, 0x70,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x6d, 0x73, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x76, 0x6d, 0x5f, 0x6b, 0x6f, 0x6c, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69,
	0x76, 0x6d, 0x4b, 0x6f, 0x6c, 0x69, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6d, 0x76, 0x5f, 0x6a, 0x65,
	0x6e, 0x69, 0x73, 0x5f, 0x6b, 0x6f, 0x6c, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6d, 0x76, 0x4a, 0x65, 0x6e, 0x69, 0x73, 0x4b, 0x6f, 0x6c, 0x69, 0x12, 0x3f, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xe5, 0x01,
	0x0a, 0x1c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x68, 0x6e, 0x75, 0x6d, 0x62,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x63, 0x68, 0x6e, 0x75, 0x6d, 0x62,
	0x12, 0x37, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x08, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0xfb, 0x04, 0x0a, 0x1d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0xdd, 0x03, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x61, 0x63, 0x68, 0x6e, 0x75, 0x6d, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x61, 0x63, 0x68, 0x6e, 0x75, 0x6d, 0x62, 0x12, 0x5d, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x6d, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x69, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x1a, 0x26, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x1a, 0x2b, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x1a, 0x2a, 0x0a, 0x0c, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x22, 0x74, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x65, 0x6c, 0x70,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x43, 0x0a, 0x13, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2c,
	0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x1a,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0xa8,
	0x01, 0x0a, 0x05, 0x57, 0x72, 0x74, 0x47, 0x50, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x4c, 0x5f,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6e,
	0x4c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x67, 0x6e, 0x4c, 0x5f, 0x57,
	0x52, 0x54, 0x5f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x6e, 0x4c,
	0x57, 0x52, 0x54, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x74, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x74, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x57, 0x72, 0x74, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2f,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x57, 0x72, 0x74, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xcb, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x57, 0x72, 0x74, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6e, 0x6c, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f, 0x77, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x6e, 0x6c, 0x57, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x27, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x57, 0x72, 0x74, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x94, 0x03, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x5f, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x72, 0x45, 0x74, 0x61, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x74, 0x61, 0x78, 0x50, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x4a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xbb, 0x01,
	0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x74, 0x61, 0x78, 0x50, 0x63, 0x74, 0x12,
	0x4a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x1e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x71, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x51, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x51, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x61, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x22, 0x90, 0x09, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65,
	0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x61,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x74, 0x61, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x6b, 0x75, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x6b, 0x75, 0x12, 0x22,
	0x0a, 0x0c, 0x53, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x53, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x69, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x53,
	0x69, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x52, 0x0a, 0x10, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x18,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3b,
	0x0a, 0x0b, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x52,
	0x0a, 0x73, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x45, 0x0a, 0x10, 0x73,
	0x69, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x74,
	0x65, 0x52, 0x0f, 0x73, 0x69, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x18,
	0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x69, 0x6e, 0x67, 0x22, 0xc9, 0x03, 0x0a, 0x10, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x51, 0x74, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x51, 0x74, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x74, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e,
	0x6f, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x22, 0x95, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x42, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcc, 0x05, 0x0a, 0x0c,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x67,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x76, 0x6f, 0x75, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x6f, 0x75, 0x52, 0x65, 0x64, 0x65, 0x65,
	0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x6f, 0x75, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x76, 0x6f, 0x75, 0x44, 0x69, 0x73, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x64, 0x6a, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x61, 0x64, 0x6a, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x64, 0x6a, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x6a, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x42, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x85,
	0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x91, 0x04, 0x0a, 0x0c, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x67,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61,
	0x6e, 0x6b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x61, 0x69, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x70, 0x61, 0x69, 0x64, 0x4f, 0x66, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x65, 0x12,
	0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xf6, 0x02, 0x0a, 0x10, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x13, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x51, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x6e,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x78, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74,
	0x61, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61,
	0x78, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6b, 0x75, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x6b, 0x75, 0x44,
	0x69, 0x73, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xd8, 0x06, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x68, 0x69,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f,
	0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x50, 0x72, 0x69,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x68,
	0x61, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x77, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x72, 0x74, 0x49, 0x64, 0x22, 0xf0,
	0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x42, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x3e, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x77, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x72, 0x74, 0x49,
	0x64, 0x22, 0x85, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x89, 0x02, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x6f, 0x66, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6f, 0x66, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x74, 0x79, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x71, 0x74, 0x79, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c,
	0x69, 0x76, 0x6d, 0x5f, 0x71, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x69, 0x76, 0x6d, 0x51, 0x74, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x22, 0x85,
	0x01, 0x0a, 0x12, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65,
	0x77, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x55, 0x73, 0x65, 0x72, 0x22,
	0xab, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9d, 0x02,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x3e, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x77, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x72, 0x74, 0x49, 0x64, 0x22, 0x87, 0x01,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7e, 0x0a, 0x0b, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x76, 0x6d, 0x5f, 0x63, 0x62,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x76, 0x6d, 0x43, 0x62, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x74, 0x79,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x74, 0x79,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x76, 0x6d, 0x5f, 0x71, 0x74, 0x79,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x69, 0x76, 0x6d,
	0x51, 0x74, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x22, 0xb2, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6e, 0x73, 0x65, 0x71, 0x6e,
	0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6e, 0x73, 0x65, 0x71, 0x6e,
	0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x6f, 0x66, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6f,
	0x66, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x74, 0x79, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x74, 0x79, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0c, 0x69, 0x76, 0x6d, 0x5f, 0x71, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x69, 0x76, 0x6d, 0x51, 0x74, 0x79, 0x50, 0x61, 0x63, 0x6b,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xd3, 0x02, 0x0a,
	0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x6e, 0x4c, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x69,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x6e, 0x4c,
	0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x41, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x22, 0x4b, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x92, 0x03, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x47, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6d, 0x6e, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6d, 0x6e, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x6b, 0x62, 0x6b, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x6b, 0x62, 0x6b, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x79, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x79, 0x65, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72, 0x70,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x70, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17,
	0x70, 0x72, 0x70, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70,
	0x72, 0x70, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x22, 0x4d, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x22, 0x31, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa7, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x47, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xe9, 0x04, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d,
	0x47, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x75, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x64, 0x75, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x75, 0x65, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x64, 0x74, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x75, 0x65, 0x64, 0x74, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44,
	0x61, 0x79, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x79, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x64, 0x74, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x64, 0x74, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x73, 0x63, 0x6c,
	0x63, 0x74, 0x79, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x73, 0x63, 0x6c,
	0x63, 0x74, 0x79, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x73, 0x63, 0x64, 0x6c, 0x72, 0x61, 0x6d,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x73, 0x63, 0x64, 0x6c, 0x72, 0x61, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x73, 0x63, 0x70, 0x63, 0x74, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x64, 0x73, 0x63, 0x70, 0x63, 0x74, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x61, 0x6c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x61, 0x6c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63,
	0x6e, 0x74, 0x63, 0x62, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63,
	0x6e, 0x74, 0x63, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x69, 0x73, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69,
	0x73, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x74, 0x61, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x65, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x75, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x6e, 0x6c, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x66, 0x6f, 0x72, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x67, 0x6e, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x66, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x67, 0x6e, 0x6c, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x67, 0x6e, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x66, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x22, 0xee, 0x06, 0x0a,
	0x0d, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x47, 0x50, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x6c, 0x70, 0x72, 0x73, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x6c, 0x70, 0x72, 0x73, 0x6e, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x70, 0x72, 0x73, 0x6e, 0x66, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x70, 0x72, 0x73, 0x6e, 0x66, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x70, 0x72, 0x73, 0x6e, 0x73, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x70, 0x72, 0x73, 0x6e, 0x73, 0x6d, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70,
	0x72, 0x73, 0x6e, 0x73, 0x6c, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70,
	0x72, 0x73, 0x6e, 0x73, 0x6c, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x53, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x53, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x32, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x32, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x33, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x33, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e,
	0x45, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x32,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x33, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x33, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x61, 0x78, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x63,
	0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x63,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x61, 0x70, 0x70, 0x74, 0x6f, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x61, 0x70, 0x70, 0x74, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x74, 0x6f, 0x64, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x74, 0x6f, 0x64, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x73,
	0x74, 0x6c, 0x73, 0x74, 0x79, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x73,
	0x74, 0x6c, 0x73, 0x74, 0x79, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x74, 0x6c, 0x63, 0x6f, 0x6d,
	0x74, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x74, 0x6c, 0x63, 0x6f, 0x6d,
	0x74, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x74, 0x6c, 0x63, 0x6f, 0x6d, 0x6c, 0x79, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x74, 0x6c, 0x63, 0x6f, 0x6d, 0x6c, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x73, 0x6c, 0x74, 0x64, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x73, 0x6c, 0x74, 0x64, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x73, 0x6c, 0x6c, 0x79, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x73, 0x6c, 0x6c, 0x79, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x63, 0x6f, 0x6d, 0x73, 0x6c,
	0x74, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6e, 0x63, 0x6f, 0x6d, 0x73, 0x6c,
	0x74, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x63, 0x6f, 0x6d, 0x73, 0x6c, 0x79, 0x72, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6e, 0x63, 0x6f, 0x6d, 0x73, 0x6c, 0x79, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f,
	0x67, 0x6e, 0x4c, 0x5f, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x31, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6e, 0x4c, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x72, 0x72, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x72, 0x72, 0x22, 0x89, 0x02,
	0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x47, 0x50,
	0x12, 0x27, 0x0a, 0x10, 0x67, 0x6e, 0x4c, 0x5f, 0x43, 0x75, 0x73, 0x74, 0x5f, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6e, 0x4c, 0x43,
	0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x18, 0x67, 0x6e, 0x4c,
	0x5f, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x67, 0x6e, 0x4c,
	0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x6e, 0x4c, 0x5f, 0x43, 0x75, 0x73, 0x74, 0x5f,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x6e, 0x4c,
	0x43, 0x75, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2d, 0x0a, 0x13, 0x67, 0x6e,
	0x4c, 0x5f, 0x43, 0x75, 0x73, 0x74, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x6e, 0x4c, 0x43, 0x75, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x63, 0x22, 0x96, 0x02, 0x0a, 0x0b, 0x41, 0x72,
	0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x47, 0x50, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x6c,
	0x5f, 0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6e, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x18, 0x67, 0x6e, 0x6c, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x67, 0x6e, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6e, 0x6c, 0x43, 0x75, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x67, 0x6e, 0x6c, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x67, 0x6e, 0x6c, 0x43, 0x75,
	0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x22, 0x77, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x47,
	0x50, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x64, 0x6f, 0x63, 0x69, 0x44, 0x31, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x64, 0x6f, 0x63, 0x69, 0x44, 0x31, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x64, 0x6f, 0x63, 0x69, 0x44, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x64, 0x6f, 0x63, 0x69, 0x44, 0x32, 0x22, 0xe1, 0x01, 0x0a, 0x05,
	0x55, 0x6f, 0x6d, 0x47, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6f, 0x6d, 0x73, 0x63, 0x68, 0x64,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6f, 0x6d, 0x73, 0x63, 0x68, 0x64,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6d, 0x73, 0x63, 0x68, 0x64, 0x73, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6d, 0x73, 0x63, 0x68, 0x64, 0x73, 0x63, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x61, 0x73, 0x65, 0x75, 0x6f, 0x66, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x61, 0x73, 0x65, 0x75, 0x6f, 0x66, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6d, 0x64,
	0x70, 0x71, 0x74, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x6d, 0x64,
	0x70, 0x71, 0x74, 0x79, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6f, 0x66, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6f, 0x66, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x74, 0x79,
	0x62, 0x73, 0x75, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x74, 0x79,
	0x62, 0x73, 0x75, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x71, 0x75, 0x69, 0x76, 0x75, 0x6f,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x71, 0x75, 0x69, 0x76, 0x75, 0x6f,
	0x6d, 0x12, 0x1c, 0x0a, 0x0a, 0x67, 0x6e, 0x4c, 0x5f, 0x55, 0x4f, 0x4d, 0x5f, 0x4b, 0x47, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x67, 0x6e, 0x4c, 0x55, 0x4f, 0x4d, 0x4b, 0x47, 0x22,
	0xd3, 0x0e, 0x0a, 0x0b, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x50, 0x12,
	0x2c, 0x0a, 0x12, 0x67, 0x6e, 0x4c, 0x5f, 0x43, 0x42, 0x5f, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x67, 0x6e, 0x4c,
	0x43, 0x42, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x35, 0x0a,
	0x17, 0x67, 0x6e, 0x4c, 0x5f, 0x43, 0x42, 0x5f, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x67, 0x6e, 0x4c, 0x43, 0x42, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d,
	0x44, 0x45, 0x53, 0x43, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x6e, 0x4c, 0x5f, 0x43, 0x42, 0x5f, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x4f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x67, 0x6e, 0x4c, 0x43, 0x42, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x50, 0x4f, 0x12, 0x39, 0x0a, 0x19, 0x67, 0x6e, 0x4c, 0x5f, 0x43, 0x42,
	0x5f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x4f, 0x5f, 0x44,
	0x45, 0x53, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x67, 0x6e, 0x4c, 0x43, 0x42,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x4f, 0x44, 0x45, 0x53,
	0x43, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x6d, 0x63, 0x6c, 0x73, 0x63, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x6d, 0x63, 0x6c, 0x73, 0x63, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x74, 0x6d, 0x63, 0x6c, 0x73, 0x64, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x74, 0x6d, 0x63, 0x6c, 0x73, 0x64, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x66,
	0x6c, 0x74, 0x63, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x66,
	0x6c, 0x74, 0x63, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x64,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x64,
	0x78, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x74, 0x65, 0x6d, 0x74, 0x79, 0x70, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x74, 0x79, 0x70, 0x45, 0x44, 0x45,
	0x53, 0x43, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x6d, 0x74, 0x72, 0x6b, 0x6f, 0x70, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x74, 0x6d, 0x74, 0x72, 0x6b, 0x6f, 0x70, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x74, 0x6d, 0x74, 0x72, 0x6b, 0x6f, 0x50, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x74, 0x6d, 0x74, 0x72, 0x6b, 0x6f, 0x50, 0x44,
	0x45, 0x53, 0x43, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x74, 0x6d, 0x67, 0x65, 0x64, 0x73, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x74, 0x6d, 0x67, 0x65, 0x64, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x78,
	0x6f, 0x70, 0x74, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x61, 0x78,
	0x6f, 0x70, 0x74, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x78, 0x6f, 0x70, 0x74, 0x6e,
	0x53, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61,
	0x78, 0x6f, 0x70, 0x74, 0x6e, 0x53, 0x44, 0x45, 0x53, 0x43, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74,
	0x6d, 0x74, 0x73, 0x68, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74,
	0x6d, 0x74, 0x73, 0x68, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x54, 0x61, 0x78, 0x5f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x61,
	0x78, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x54, 0x61, 0x78, 0x5f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x44, 0x65, 0x73, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x54, 0x61, 0x78, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x49, 0x74, 0x65, 0x6d, 0x5f, 0x54, 0x61, 0x78, 0x5f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x6f, 0x6d, 0x73, 0x63, 0x68, 0x64, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x6f, 0x6d, 0x73, 0x63, 0x68, 0x64, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x63, 0x74, 0x6e,
	0x6d, 0x74, 0x68, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x63, 0x74, 0x6e,
	0x6d, 0x74, 0x68, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x63, 0x74, 0x6e, 0x6d, 0x74, 0x68, 0x44,
	0x5f, 0x44, 0x45, 0x53, 0x43, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x63, 0x74,
	0x6e, 0x6d, 0x74, 0x68, 0x44, 0x44, 0x45, 0x53, 0x43, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x63,
	0x61, 0x74, 0x76, 0x6c, 0x53, 0x5f, 0x31, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x63, 0x61, 0x74, 0x76, 0x6c, 0x53, 0x31, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x63, 0x61,
	0x74, 0x76, 0x6c, 0x53, 0x5f, 0x32, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x63, 0x61, 0x74, 0x76, 0x6c, 0x53, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x63, 0x61, 0x74,
	0x76, 0x6c, 0x53, 0x5f, 0x33, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x63,
	0x61, 0x74, 0x76, 0x6c, 0x53, 0x33, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x63, 0x61, 0x74, 0x76,
	0x6c, 0x53, 0x5f, 0x34, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x63, 0x61,
	0x74, 0x76, 0x6c, 0x53, 0x34, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x63, 0x61, 0x74, 0x76, 0x6c,
	0x53, 0x5f, 0x35, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x63, 0x61, 0x74,
	0x76, 0x6c, 0x53, 0x35, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x63, 0x61, 0x74, 0x76, 0x6c, 0x53,
	0x5f, 0x36, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x63, 0x61, 0x74, 0x76,
	0x6c, 0x53, 0x36, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x70, 0x6c, 0x71, 0x74, 0x79, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x63, 0x70, 0x6c, 0x71, 0x74, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x70, 0x6c, 0x71, 0x74, 0x59, 0x5f, 0x44, 0x45, 0x53, 0x43,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x70, 0x6c, 0x71, 0x74, 0x59,
	0x44, 0x45, 0x53, 0x43, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x75, 0x72, 0x70, 0x76, 0x69, 0x64, 0x78,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x72, 0x70, 0x76, 0x69, 0x64, 0x78,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x70, 0x76, 0x69, 0x64, 0x78, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x70, 0x70, 0x76, 0x69, 0x64, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x76,
	0x72, 0x65, 0x74, 0x69, 0x64, 0x78, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x76,
	0x72, 0x65, 0x74, 0x69, 0x64, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x6d, 0x76, 0x72, 0x69,
	0x64, 0x78, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x6d, 0x76, 0x72, 0x69,
	0x64, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x63, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x63, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x6d, 0x74, 0x68, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x6d, 0x74, 0x68, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72,
	0x69, 0x63, 0x6d, 0x74, 0x68, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x6d, 0x74, 0x68, 0x44, 0x44, 0x45, 0x53, 0x43, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x63, 0x63, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x63,
	0x63, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x31,
	0x0a, 0x14, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6e, 0x74, 0x72, 0x79, 0x6f, 0x72, 0x67, 0x6e, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6e, 0x74, 0x72, 0x79, 0x6f, 0x72, 0x67, 0x6e, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x74, 0x74, 0x73, 0x74, 0x63, 0x6c, 0x76, 0x6c, 0x70, 0x72, 0x63, 0x6e,
	0x74, 0x67, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x74, 0x73, 0x74, 0x63,
	0x6c, 0x76, 0x6c, 0x70, 0x72, 0x63, 0x6e, 0x74, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x74,
	0x65, 0x78, 0x70, 0x77, 0x61, 0x72, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c,
	0x6f, 0x74, 0x65, 0x78, 0x70, 0x77, 0x61, 0x72, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x74,
	0x65, 0x78, 0x70, 0x77, 0x61, 0x72, 0x6e, 0x64, 0x61, 0x79, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x6c, 0x6f, 0x74, 0x65, 0x78, 0x70, 0x77, 0x61, 0x72, 0x6e, 0x64, 0x61, 0x79,
	0x73, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x51, 0x74, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x75, 0x73, 0x65, 0x51, 0x74, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x75, 0x73, 0x65,
	0x51, 0x74, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x75, 0x73, 0x65, 0x51,
	0x74, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x71, 0x74, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x71, 0x74, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x18, 0x71, 0x74, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x18, 0x71, 0x74, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x76, 0x73,
	0x63, 0x72, 0x76, 0x69, 0x78, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x76, 0x73,
	0x63, 0x72, 0x76, 0x69, 0x78, 0x22, 0x86, 0x04, 0x0a, 0x10, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x54,
	0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61,
	0x6c, 0x73, 0x74, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61,
	0x6c, 0x73, 0x74, 0x65, 0x72, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x74, 0x65, 0x72, 0x64,
	0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x74, 0x65, 0x72, 0x64,
	0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x70, 0x72, 0x73, 0x6e, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x70, 0x72, 0x73, 0x6e, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x74, 0x6d, 0x67, 0x72, 0x66, 0x6e, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x6d, 0x67, 0x72, 0x66, 0x6e, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74,
	0x6d, 0x67, 0x72, 0x6d, 0x6e, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x6d, 0x67, 0x72, 0x6d, 0x6e, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6d, 0x67, 0x72, 0x6c,
	0x6e, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6d, 0x67, 0x72, 0x6c,
	0x6e, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x73, 0x74, 0x74, 0x6f, 0x64, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x63, 0x6f, 0x73, 0x74, 0x74, 0x6f, 0x64, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x74, 0x6c, 0x63,
	0x6f, 0x6d, 0x74, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x74, 0x6c, 0x63,
	0x6f, 0x6d, 0x74, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x74, 0x6c, 0x63, 0x6f, 0x6d, 0x6c, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x74, 0x6c, 0x63, 0x6f, 0x6d, 0x6c, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x63, 0x6f, 0x6d, 0x73, 0x6c, 0x79, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x6e, 0x63, 0x6f, 0x6d, 0x73, 0x6c, 0x79, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x73, 0x6c, 0x6c, 0x79, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x73, 0x6c, 0x6c, 0x79, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x73, 0x74, 0x6c,
	0x73, 0x74, 0x79, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x73, 0x74, 0x6c,
	0x73, 0x74, 0x79, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x73, 0x6c, 0x74, 0x64, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x73, 0x6c, 0x74, 0x64, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x63, 0x6f, 0x6d, 0x73, 0x6c, 0x74, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x6e, 0x63, 0x6f, 0x6d, 0x73, 0x6c, 0x74, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x64, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x6e, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x64, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x64, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x64, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x64, 0x64, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x64, 0x64, 0x74, 0x22, 0xda,
	0x08, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x50, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x72, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x72, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x70, 0x72, 0x73, 0x6e, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x70, 0x72, 0x73, 0x6e, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x74, 0x68, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x74, 0x68, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x73,
	0x63, 0x68, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x78, 0x73,
	0x63, 0x68, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6e, 0x74, 0x63, 0x70, 0x72, 0x73, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6e, 0x74, 0x63, 0x70, 0x72, 0x73, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x31, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x31, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x53, 0x33, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x53, 0x33, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68,
	0x6f, 0x6e, 0x45, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e,
	0x45, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x32, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68,
	0x6f, 0x6e, 0x45, 0x33, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e,
	0x45, 0x33, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x72, 0x72,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x72, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x65, 0x46, 0x31, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x65, 0x46, 0x31, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x64, 0x65, 0x46, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x64, 0x65, 0x46, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70,
	0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68,
	0x69, 0x70, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x67, 0x6e, 0x4c, 0x5f,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x67, 0x6e, 0x4c, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x4c, 0x5f, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6e, 0x4c, 0x41,
	0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x6e,
	0x4c, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x67, 0x6e, 0x4c, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x67, 0x6e, 0x4c, 0x5f, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x6e, 0x4c, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x4c, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6e,
	0x4c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x75, 0x73,
	0x72, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x75, 0x73, 0x72,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x64, 0x64, 0x74, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x64, 0x64, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x64, 0x66, 0x75, 0x73, 0x72, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x64, 0x66, 0x75, 0x73, 0x72, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x64, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x64, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x56, 0x0a, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x76, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x76, 0x52, 0x11, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x76, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x73, 0x74, 0x61, 0x64, 0x63, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x73, 0x74, 0x61, 0x64, 0x63, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x47, 0x50,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x66, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x66, 0x6f, 0x72,
	0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa3, 0x02, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x47, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xa9, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x2f, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x47, 0x50, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa3, 0x02, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x47,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x30, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x47, 0x50,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa5, 0x02,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x47, 0x50, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6e, 0x6c,
	0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x18, 0x67,
	0x6e, 0x6c, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x67,
	0x6e, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x67, 0x6e, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x2d, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x47, 0x50, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9f, 0x02, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x47, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x49, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x47, 0x50, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x2d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9f, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55,
	0x6f, 0x6d, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x27, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x6f, 0x6d, 0x47,
	0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x93,
	0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x6f, 0x6d, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6f, 0x6d, 0x47, 0x50, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x2d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9f, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x66, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x50, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x22, 0x32, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x65, 0x72, 0x72,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xa9, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x54,
	0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xec, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47,
	0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x72, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x72, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x2b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x50, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9b, 0x02, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb8, 0x02, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x69, 0x74, 0x65,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x69, 0x74, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x69, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x63, 0x0a, 0x13, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x11, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x71, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x51, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x71,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x51, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f,
	0x71, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x51, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0xf5, 0x03, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x69, 0x74, 0x65, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x73, 0x69, 0x74, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x69, 0x74, 0x65,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x63,
	0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x74, 0x61,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x65,
	0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x43, 0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x13,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11,
	0x69, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x81, 0x02, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x51, 0x74, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x74, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x51, 0x74,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x32, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcc, 0x02, 0x0a, 0x19, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x67,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x4e,
	0x6f, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x13, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x93, 0x08, 0x0a, 0x09, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x61, 0x74, 0x61,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x61, 0x74, 0x61, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x42, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x73,
	0x69, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xf8,
	0x04, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x33, 0x0a, 0x16, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x51, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x51, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x51, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x52,
	0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x57, 0x0a, 0x13, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x11, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x54, 0x0a, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x92, 0x01, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x7d,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7f, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x95, 0x02, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x61, 0x44, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x49,
	0x74, 0x65, 0x6d, 0x22, 0xa5, 0x02, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x71, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x51,
	0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x71, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x51, 0x74,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x51, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0xb1, 0x08, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x64, 0x72, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x64, 0x72, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x70, 0x72,
	0x73, 0x6e, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x70, 0x72,
	0x73, 0x6e, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x74, 0x68, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x74, 0x68, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x73, 0x63, 0x68, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x78, 0x73, 0x63, 0x68, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6e, 0x74, 0x63, 0x70, 0x72, 0x73, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6e, 0x74, 0x63, 0x70, 0x72, 0x73, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x53, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x53, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x32,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x32,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x33, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x33, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x7a,
	0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x31, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68,
	0x6f, 0x6e, 0x45, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e,
	0x45, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x33, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x33, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x72, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x72, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x64, 0x65, 0x46, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x64, 0x65, 0x46, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x65, 0x46, 0x32,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x65, 0x46, 0x32,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x17, 0x67, 0x6e, 0x4c, 0x5f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x67, 0x6e, 0x4c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x4c, 0x5f,
	0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x67, 0x6e, 0x4c, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x6e, 0x4c, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x67, 0x6e, 0x4c, 0x4c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6e, 0x4c, 0x5f, 0x4c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67,
	0x6e, 0x4c, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e,
	0x4c, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6e, 0x4c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x75, 0x73, 0x72, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x75, 0x73, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x64, 0x64, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x64, 0x64, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x64, 0x66, 0x75, 0x73, 0x72,
	0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x64, 0x66, 0x75, 0x73, 0x72,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x64, 0x74, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x64, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x61, 0x78, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x66, 0x61, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x7a, 0x6f, 0x6e, 0x65, 0x22,
	0x45, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xcb, 0x08, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x72, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x72, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x70, 0x72, 0x73, 0x6e, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x70, 0x72, 0x73, 0x6e, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x74, 0x68, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x74, 0x68, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x61, 0x78, 0x73, 0x63, 0x68, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x61, 0x78, 0x73, 0x63, 0x68, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6e, 0x74, 0x63, 0x70,
	0x72, 0x73, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6e, 0x74, 0x63, 0x70,
	0x72, 0x73, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x31, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x31, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x33, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x33, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x7a,
	0x69, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x68, 0x6f, 0x6e, 0x45, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x32, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x32, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x33, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x68, 0x6f, 0x6e, 0x45, 0x33, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6c, 0x73, 0x74,
	0x65, 0x72, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x65, 0x46, 0x31, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x65, 0x46, 0x31, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x65, 0x46, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x65, 0x46, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x68, 0x69, 0x70, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x67,
	0x6e, 0x4c, 0x5f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x67, 0x6e,
	0x4c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x4c, 0x5f, 0x41, 0x72, 0x63, 0x68, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67,
	0x6e, 0x4c, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x23, 0x0a,
	0x0d, 0x67, 0x6e, 0x4c, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x67, 0x6e, 0x4c, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6e, 0x4c, 0x5f, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67, 0x6e, 0x4c, 0x4c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x4c, 0x5f, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x67, 0x6e, 0x4c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x75, 0x73, 0x72, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x75, 0x73, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x64, 0x64,
	0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x64, 0x64,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x64, 0x66, 0x75, 0x73, 0x72, 0x69, 0x64, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x64, 0x66, 0x75, 0x73, 0x72, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x64, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x64, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x79, 0x70, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x61, 0x78, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66,
	0x61, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x69, 0x64, 0x22, 0x45, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x52, 0x0a, 0x18, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x72, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x72, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x22,
	0x49, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x32, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x72, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x72, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x45,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4c, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x5b, 0x0a, 0x1d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x95, 0x17, 0x0a, 0x08, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x50, 0x12, 0x1a, 0x0a,
	0x08, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x45, 0x4e,
	0x44, 0x4e, 0x41, 0x4d, 0x45, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x45, 0x4e,
	0x44, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x4e, 0x44, 0x43, 0x4c, 0x53, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x4e, 0x44, 0x43, 0x4c, 0x53, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x4e, 0x44, 0x43, 0x4e, 0x54, 0x43, 0x54, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x4e, 0x44, 0x43, 0x4e, 0x54, 0x43, 0x54, 0x12, 0x1a, 0x0a,
	0x08, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x33, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x33, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x49, 0x54, 0x59, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x43, 0x49, 0x54, 0x59, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x54, 0x45, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x54, 0x41, 0x54, 0x45, 0x12, 0x18, 0x0a, 0x07, 0x5a,
	0x49, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x5a, 0x49,
	0x50, 0x43, 0x4f, 0x44, 0x45, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x48, 0x4e, 0x55, 0x4d, 0x42, 0x52, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x48, 0x4e, 0x55, 0x4d, 0x42, 0x52, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x48, 0x4e, 0x55, 0x4d, 0x42, 0x52, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x48, 0x4e, 0x55, 0x4d, 0x42, 0x52, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x48, 0x4f, 0x4e, 0x45,
	0x33, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x33, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x41, 0x58, 0x4e, 0x55, 0x4d, 0x42, 0x52, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x46, 0x41, 0x58, 0x4e, 0x55, 0x4d, 0x42, 0x52, 0x12, 0x18, 0x0a, 0x07, 0x55,
	0x50, 0x53, 0x5a, 0x4f, 0x4e, 0x45, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x55, 0x50,
	0x53, 0x5a, 0x4f, 0x4e, 0x45, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x48, 0x49, 0x50, 0x4d, 0x54, 0x48,
	0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x48, 0x49, 0x50, 0x4d, 0x54, 0x48,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x41, 0x58, 0x53, 0x43, 0x48, 0x49, 0x44, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x41, 0x58, 0x53, 0x43, 0x48, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x41, 0x43, 0x4e, 0x4d, 0x56, 0x4e, 0x44, 0x52, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x41, 0x43, 0x4e, 0x4d, 0x56, 0x4e, 0x44, 0x52, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x58, 0x49,
	0x44, 0x4e, 0x4d, 0x42, 0x52, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x58, 0x49,
	0x44, 0x4e, 0x4d, 0x42, 0x52, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x45, 0x4e, 0x44, 0x53, 0x54, 0x54,
	0x53, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x56, 0x45, 0x4e, 0x44, 0x53, 0x54, 0x54,
	0x53, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x44, 0x44, 0x54, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x44, 0x44, 0x54, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x55, 0x52, 0x4e, 0x43, 0x59, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x55, 0x52, 0x4e, 0x43, 0x59, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x58, 0x52,
	0x47, 0x4e, 0x4e, 0x55, 0x4d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x58, 0x52,
	0x47, 0x4e, 0x4e, 0x55, 0x4d, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x52, 0x44, 0x44, 0x49, 0x53, 0x43,
	0x54, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x54, 0x52, 0x44, 0x44, 0x49, 0x53, 0x43,
	0x54, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x12, 0x44, 0x0a,
	0x08, 0x50, 0x59, 0x4d, 0x54, 0x52, 0x4d, 0x49, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x50, 0x2e,
	0x56, 0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d, 0x69, 0x64, 0x52, 0x08, 0x50, 0x59, 0x4d, 0x54, 0x52,
	0x4d, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x31, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x31, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x32, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x55,
	0x53, 0x45, 0x52, 0x44, 0x45, 0x46, 0x31, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55,
	0x53, 0x45, 0x52, 0x44, 0x45, 0x46, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x53, 0x45, 0x52, 0x44,
	0x45, 0x46, 0x32, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x53, 0x45, 0x52, 0x44,
	0x45, 0x46, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x59, 0x4d, 0x4e, 0x54, 0x50, 0x52, 0x49, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x59, 0x4d, 0x4e, 0x54, 0x50, 0x52, 0x49, 0x12,
	0x50, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x47, 0x50, 0x2e, 0x56, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x56, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x50, 0x2e, 0x56, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0d, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x50,
	0x2e, 0x56, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x62,
	0x0a, 0x12, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x50, 0x2e, 0x56, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x12,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x12, 0x49, 0x0a, 0x08, 0x76, 0x61, 0x64, 0x64, 0x63, 0x64, 0x70, 0x72, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x47, 0x50, 0x2e, 0x56, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x08, 0x76, 0x61, 0x64, 0x64, 0x63, 0x64, 0x70, 0x72, 0x1a, 0x5d, 0x0a,
	0x09, 0x56, 0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x59,
	0x4d, 0x54, 0x52, 0x4d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x59,
	0x4d, 0x54, 0x52, 0x4d, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x61, 0x74, 0x65, 0x66, 0x72, 0x6f, 0x6d, 0x64, 0x61, 0x79, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x61, 0x74, 0x65, 0x66, 0x72, 0x6f, 0x6d, 0x64, 0x61, 0x79, 0x73, 0x1a, 0x96, 0x02, 0x0a,
	0x0d, 0x56, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x11, 0x50, 0x52, 0x50, 0x5f, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x4f, 0x72, 0x67,
	0x5f, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x52, 0x50, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x13, 0x50, 0x52, 0x50,
	0x5f, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x4f, 0x72, 0x67, 0x5f, 0x44, 0x65, 0x73, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x52, 0x50, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4f, 0x72, 0x67, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x49, 0x4e, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x12, 0x23, 0x0a, 0x0d, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x44, 0x45, 0x53, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x4e, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x44, 0x45, 0x53, 0x43, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x44, 0x44, 0x54, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x44, 0x44, 0x54, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x44, 0x54,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x44, 0x54, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x52, 0x55, 0x53, 0x52, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x52, 0x55, 0x53, 0x52, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x44, 0x46,
	0x55, 0x53, 0x52, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x44, 0x46,
	0x55, 0x53, 0x52, 0x49, 0x44, 0x1a, 0xa0, 0x02, 0x0a, 0x0f, 0x56, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x50, 0x52, 0x50,
	0x5f, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x46, 0x5f, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x52, 0x50, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x43, 0x4c, 0x41, 0x53, 0x46, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x15, 0x50, 0x52, 0x50, 0x5f,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x46, 0x5f, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x50, 0x52, 0x50, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x43, 0x4c, 0x41, 0x53, 0x46, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x49,
	0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x49,
	0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x12, 0x23, 0x0a, 0x0d, 0x49, 0x4e, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x44, 0x45, 0x53, 0x43, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x44, 0x44, 0x54, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x44, 0x44, 0x54, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x4f, 0x44, 0x49,
	0x46, 0x44, 0x54, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x4f, 0x44, 0x49, 0x46,
	0x44, 0x54, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x52, 0x55, 0x53, 0x52, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x52, 0x55, 0x53, 0x52, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x4d, 0x44, 0x46, 0x55, 0x53, 0x52, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4d, 0x44, 0x46, 0x55, 0x53, 0x52, 0x49, 0x44, 0x1a, 0xa2, 0x02, 0x0a, 0x0e, 0x56, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x50,
	0x52, 0x50, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x52, 0x50, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x50, 0x52, 0x50,
	0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f,
	0x44, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x50, 0x52, 0x50, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x12, 0x23, 0x0a, 0x0d,
	0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x44, 0x45, 0x53,
	0x43, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x44, 0x44, 0x54, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x44, 0x44, 0x54, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x44, 0x54, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x4f, 0x44, 0x49, 0x46, 0x44, 0x54, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x52, 0x55, 0x53, 0x52,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x52, 0x55, 0x53, 0x52, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x44, 0x46, 0x55, 0x53, 0x52, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x44, 0x46, 0x55, 0x53, 0x52, 0x49, 0x44, 0x1a, 0xb9, 0x01,
	0x0a, 0x13, 0x56, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x4f, 0x50, 0x52, 0x43, 0x54, 0x4e,
	0x4d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x4f, 0x50, 0x52, 0x43, 0x54, 0x4e,
	0x4d, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x44, 0x44, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x44, 0x44, 0x54, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x4f, 0x43, 0x4e, 0x43, 0x4f, 0x44,
	0x45, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x4f, 0x43, 0x4e, 0x43, 0x4f, 0x44,
	0x45, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x4f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x4f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x12, 0x1a, 0x0a,
	0x08, 0x54, 0x52, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x54, 0x52, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x1a, 0xb3, 0x01, 0x0a, 0x0e, 0x56, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x72, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x72, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x69, 0x0a, 0x17, 0x70, 0x72, 0x70, 0x5f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x47, 0x50, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x15, 0x70, 0x72, 0x70, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x1a,
	0x96, 0x02, 0x0a, 0x12, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x67, 0x6e, 0x6c, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x67, 0x6e, 0x6c, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x67, 0x6e, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x6e, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x6e, 0x6c, 0x43, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x67,
	0x6e, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x67, 0x6e, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x67, 0x6e, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6e, 0x6c, 0x53, 0x75, 0x62, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6e, 0x6c, 0x5f, 0x7a,
	0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x6e,
	0x6c, 0x5a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x99, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x50, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4f, 0x72, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4f, 0x72, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2a, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xdd, 0x03, 0x0a, 0x08, 0x48, 0x65, 0x6c, 0x70,
	0x65, 0x72, 0x47, 0x50, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x6e, 0x6c, 0x5f, 0x68, 0x65, 0x6c, 0x70,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x6e, 0x6c,
	0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x6e, 0x6c, 0x5f,
	0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x67, 0x6e, 0x6c, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x47, 0x50, 0x2e, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x47, 0x50, 0x53, 0x69, 0x74, 0x65,
	0x73, 0x52, 0x05, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x6e, 0x6c, 0x5f,
	0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x67, 0x6e, 0x6c, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x65, 0x6c, 0x70,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x6e,
	0x6c, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x6e, 0x6c, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6e, 0x6c, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x6e,
	0x6c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x1a, 0x2b, 0x0a, 0x0d, 0x48, 0x65,
	0x6c, 0x70, 0x65, 0x72, 0x47, 0x50, 0x53, 0x69, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa6, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x48,
	0x65, 0x6c, 0x70, 0x65, 0x72, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x67, 0x6e, 0x6c, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x6e, 0x6c, 0x48, 0x65, 0x6c, 0x70,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x6e, 0x6c, 0x5f, 0x68, 0x65, 0x6c, 0x70,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67,
	0x6e, 0x6c, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x6e, 0x6c, 0x5f,
	0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x67, 0x6e, 0x6c, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x2a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x47, 0x50, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x99, 0x02, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72,
	0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xdb, 0x04, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x6e, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x6e, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x6e, 0x64, 0x63, 0x68, 0x6b, 0x6e, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x6e, 0x64, 0x63, 0x68, 0x6b, 0x6e, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65,
	0x6e, 0x64, 0x73, 0x74, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65,
	0x6e, 0x64, 0x73, 0x74, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x70, 0x72, 0x50, 0x5f, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x4f, 0x72, 0x67, 0x5f, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x72, 0x50, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x49,
	0x44, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x72, 0x50, 0x5f, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x46, 0x5f, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x70, 0x72, 0x50, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x4c, 0x41, 0x53, 0x46, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6e, 0x64, 0x63, 0x6e, 0x74, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x76, 0x6e, 0x64, 0x63, 0x6e, 0x74, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x53, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x53, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x68, 0x6e, 0x75, 0x6d, 0x62, 0x52, 0x31,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6e, 0x75, 0x6d, 0x62, 0x52, 0x31,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x68, 0x6e, 0x75, 0x6d, 0x62, 0x52, 0x32, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6e, 0x75, 0x6d, 0x62, 0x52, 0x32, 0x12, 0x2c, 0x0a, 0x12,
	0x50, 0x52, 0x50, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x52, 0x50, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61,
	0x64, 0x64, 0x63, 0x64, 0x70, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x61,
	0x64, 0x64, 0x63, 0x64, 0x70, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x64, 0x63, 0x64, 0x70,
	0x61, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x61, 0x64, 0x63, 0x64, 0x70,
	0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x64, 0x63, 0x64, 0x73, 0x66, 0x72, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x61, 0x64, 0x63, 0x64, 0x73, 0x66, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x61, 0x64, 0x63, 0x64, 0x74, 0x72, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x61, 0x64, 0x63, 0x64, 0x74, 0x72, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x79,
	0x6d, 0x74, 0x72, 0x6d, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x79,
	0x6d, 0x74, 0x72, 0x6d, 0x69, 0x64, 0x22, 0x44, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x81, 0x01, 0x0a,
	0x1b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x72, 0x70, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70, 0x6c, 0x61, 0x6e,
	0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x70, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x12, 0x32, 0x0a, 0x15,
	0x70, 0x72, 0x70, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70, 0x6c, 0x61, 0x6e,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x70,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x22, 0x4c, 0x0a, 0x1c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x54,
	0x0a, 0x1c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x1d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x03, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x3e, 0x0a,
	0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x22, 0x83, 0x01,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x9a, 0x14, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x47, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x73, 0x74, 0x63, 0x6c, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x73, 0x74, 0x63, 0x6c, 0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x72, 0x63, 0x73, 0x74,
	0x6e, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x70, 0x72, 0x63, 0x73, 0x74,
	0x6e, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6e, 0x74, 0x63, 0x70, 0x72, 0x73, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6e, 0x74, 0x63, 0x70, 0x72, 0x73, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x74, 0x6d, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x6d, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68,
	0x72, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68,
	0x72, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x61, 0x64, 0x72, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47,
	0x50, 0x52, 0x08, 0x61, 0x64, 0x72, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x70, 0x73, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70,
	0x73, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x74, 0x68,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x74, 0x68,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x73, 0x63, 0x68, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x78, 0x73, 0x63, 0x68, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x53, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x53, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53,
	0x33, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53,
	0x33, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45,
	0x31, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x31, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x32, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45,
	0x33, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x33, 0x12,
	0x10, 0x0a, 0x03, 0x66, 0x61, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x61,
	0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x62, 0x74, 0x61, 0x64, 0x63, 0x64, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x62, 0x74, 0x61, 0x64, 0x63, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x73, 0x74, 0x61, 0x64, 0x63, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x73, 0x74, 0x61, 0x64, 0x63, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x64, 0x64, 0x72, 0x63, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x64, 0x64, 0x72, 0x63, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x70, 0x72, 0x73, 0x6e, 0x69,
	0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x70, 0x72, 0x73, 0x6e, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x6b, 0x62, 0x6b, 0x69, 0x64, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x6b, 0x62, 0x6b, 0x69, 0x64, 0x12, 0x3a, 0x0a,
	0x08, 0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d, 0x69, 0x64, 0x52,
	0x08, 0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x6c,
	0x6d, 0x74, 0x74, 0x79, 0x70, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x72, 0x6c,
	0x6d, 0x74, 0x74, 0x79, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x6c, 0x6d, 0x74, 0x74, 0x79,
	0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72,
	0x6c, 0x6d, 0x74, 0x74, 0x79, 0x70, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72,
	0x6c, 0x6d, 0x74, 0x61, 0x6d, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x72,
	0x6c, 0x6d, 0x74, 0x61, 0x6d, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x6e, 0x63, 0x79,
	0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x6e, 0x63, 0x79,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x65, 0x74, 0x70, 0x69, 0x64, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65, 0x74, 0x70, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x64, 0x69, 0x73, 0x63, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x64, 0x69, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x63, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x63, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x70, 0x79, 0x74,
	0x79, 0x70, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x70, 0x79, 0x74,
	0x79, 0x70, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x69, 0x6e, 0x70, 0x79, 0x64, 0x6c, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x70, 0x79, 0x64, 0x6c, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e,
	0x70, 0x79, 0x70, 0x63, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e,
	0x70, 0x79, 0x70, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x79,
	0x70, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6e, 0x63, 0x68, 0x61, 0x74, 0x79,
	0x70, 0x12, 0x3e, 0x0a, 0x1c, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6e, 0x63, 0x68, 0x70, 0x63, 0x6e, 0x74, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6e, 0x63, 0x68, 0x70, 0x63, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6e, 0x63, 0x68, 0x64, 0x6c, 0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6e, 0x63, 0x68, 0x64, 0x6c, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x78, 0x77,
	0x6f, 0x66, 0x74, 0x79, 0x70, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x78, 0x77,
	0x6f, 0x66, 0x74, 0x79, 0x70, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x6f, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x78, 0x77, 0x72, 0x6f, 0x66, 0x61, 0x6d, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x78, 0x77, 0x72, 0x6f, 0x66, 0x61, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x54, 0x31, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x54, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x54, 0x32, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x54, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x65,
	0x46, 0x31, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x65,
	0x46, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x65, 0x46, 0x32, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x65, 0x46, 0x32, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x61, 0x78, 0x65, 0x78, 0x6d, 0x54, 0x31, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x61, 0x78, 0x65, 0x78, 0x6d, 0x54, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61,
	0x78, 0x65, 0x78, 0x6d, 0x54, 0x32, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x78, 0x65, 0x78, 0x6d, 0x54, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x78, 0x72, 0x67, 0x6e, 0x6e,
	0x75, 0x6d, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x78, 0x72, 0x67, 0x6e, 0x6e,
	0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x6e, 0x63, 0x74, 0x79, 0x70, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x6e, 0x63, 0x74, 0x79, 0x70, 0x12, 0x2a,
	0x0a, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74,
	0x6d, 0x74, 0x63, 0x79, 0x63, 0x6c, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x6d, 0x74, 0x63, 0x79, 0x63, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x79, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x6e, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6e, 0x6b, 0x62, 0x72, 0x6e, 0x63, 0x68,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6e, 0x6b, 0x62, 0x72, 0x6e, 0x63, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x72, 0x72, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x72, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x72, 0x63, 0x61, 0x72, 0x64, 0x69, 0x64, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x72, 0x63, 0x61, 0x72, 0x64, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x63, 0x72,
	0x64, 0x6e, 0x75, 0x6d, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x63, 0x72,
	0x64, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x63, 0x72, 0x64, 0x78, 0x70, 0x64, 0x74,
	0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x63, 0x72, 0x64, 0x78, 0x70, 0x64, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x64, 0x64, 0x74, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x64, 0x64, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x64, 0x74, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x64, 0x74, 0x12, 0x55, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x44, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x50, 0x52,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x67, 0x6e, 0x6c, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x67, 0x6e, 0x6c, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x6e, 0x6c,
	0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x67, 0x6e, 0x6c, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2a,
	0x0a, 0x11, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x6e, 0x6c, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x6e,
	0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x76, 0x18, 0x49, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x76, 0x52, 0x11, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x76, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x4a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x68, 0x69, 0x70, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x9d, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xa9, 0x03, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x73, 0x74, 0x61, 0x64, 0x63, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x73, 0x74, 0x61, 0x64, 0x63, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x72, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x72, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79, 0x22, 0x2c, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x50, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xba, 0x09, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74,
	0x63, 0x6c, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74,
	0x63, 0x6c, 0x61, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x72, 0x63,
	0x73, 0x74, 0x6e, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x70, 0x72, 0x63,
	0x73, 0x74, 0x6e, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6d, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6d, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x72, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x72, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x70, 0x73, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x70, 0x73, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x74, 0x68, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x74, 0x68, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x73,
	0x63, 0x68, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x78, 0x73,
	0x63, 0x68, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x62, 0x74, 0x61, 0x64, 0x63, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x62, 0x74, 0x61, 0x64, 0x63, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x73, 0x74, 0x61, 0x64, 0x63, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x73, 0x74, 0x61, 0x64, 0x63, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x64, 0x64, 0x72, 0x63, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x64, 0x64, 0x72, 0x63, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x70, 0x72,
	0x73, 0x6e, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x70, 0x72,
	0x73, 0x6e, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x72, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x72, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x64, 0x65, 0x66, 0x31, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x64, 0x65, 0x66, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x64, 0x65, 0x66, 0x32, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x64, 0x65, 0x66, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x31, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x32, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x64, 0x69, 0x73, 0x63,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x64, 0x69, 0x73, 0x63,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x67, 0x72, 0x70, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x73, 0x67, 0x72, 0x70, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x65, 0x67, 0x72, 0x70, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x64, 0x75, 0x65, 0x67, 0x72, 0x70, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x63, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x63, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x67, 0x6e, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x6e, 0x6c,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x6e, 0x6c, 0x5f, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x67, 0x6e, 0x6c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2b, 0x0a, 0x12, 0x67, 0x6e, 0x6c, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67,
	0x6e, 0x6c, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x4e, 0x75, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6e, 0x74, 0x63, 0x70, 0x72, 0x73, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6e, 0x74, 0x63, 0x70, 0x72, 0x73, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72,
	0x6c, 0x6d, 0x74, 0x74, 0x79, 0x70, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x72,
	0x6c, 0x6d, 0x74, 0x74, 0x79, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x6c, 0x6d, 0x74, 0x74,
	0x79, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x72, 0x6c, 0x6d, 0x74, 0x74, 0x79, 0x70, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x72, 0x6c, 0x6d, 0x74, 0x61, 0x6d, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63,
	0x72, 0x6c, 0x6d, 0x74, 0x61, 0x6d, 0x74, 0x22, 0xe0, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x2a,
	0x0a, 0x11, 0x67, 0x6e, 0x4c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x6e, 0x4c, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x6e,
	0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68,
	0x69, 0x70, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x11, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x50,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x72, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x72, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x16,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xb5, 0x02, 0x0a, 0x16, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a,
	0x12, 0x63, 0x75, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x53, 0x68, 0x69,
	0x70, 0x54, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x53, 0x68, 0x69,
	0x70, 0x54, 0x6f, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x12, 0x58, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x6f, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x6f, 0x52, 0x12, 0x63,
	0x75, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x54,
	0x6f, 0x12, 0x67, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x52, 0x17, 0x63, 0x75, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x22, 0x88, 0x01, 0x0a, 0x12, 0x43,
	0x75, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x53, 0x68, 0x69, 0x70, 0x54,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x73, 0x74, 0x61, 0x64, 0x63, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x73, 0x74, 0x61, 0x64, 0x63, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x67, 0x6e, 0x4c, 0x5f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x67, 0x6e, 0x4c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x12, 0x43, 0x75, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x62, 0x74, 0x61, 0x64, 0x63, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x62, 0x74, 0x61, 0x64, 0x63, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70,
	0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68,
	0x69, 0x70, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x67, 0x6e, 0x4c, 0x5f,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x67, 0x6e, 0x4c, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x8d, 0x01, 0x0a, 0x17, 0x43, 0x75, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x64, 0x64, 0x72, 0x63, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x64, 0x64, 0x72, 0x63, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70,
	0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68,
	0x69, 0x70, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x67, 0x6e, 0x4c, 0x5f,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x67, 0x6e, 0x4c, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x5c, 0x0a, 0x08, 0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x79,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x79, 0x73, 0x22, 0xf0,
	0x12, 0x0a, 0x0c, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f,
	0x63, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x53, 0x68, 0x69, 0x70,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x53,
	0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x53, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x53, 0x53, 0x54,
	0x52, 0x49, 0x4e, 0x47, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x45, 0x53,
	0x54, 0x52, 0x49, 0x4e, 0x47, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x72, 0x66, 0x72, 0x74, 0x61, 0x6d, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f,
	0x72, 0x66, 0x72, 0x74, 0x61, 0x6d, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x73, 0x75, 0x62,
	0x74, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x73, 0x75, 0x62,
	0x74, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x61, 0x6d, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x61, 0x78, 0x61, 0x6d, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x4c, 0x5f, 0x56, 0x4f, 0x55, 0x43, 0x48, 0x45, 0x52, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x4c, 0x56, 0x4f, 0x55, 0x43, 0x48,
	0x45, 0x52, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x6e, 0x4c, 0x5f,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x67, 0x6e, 0x4c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x64, 0x64, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x64, 0x64, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x67, 0x6e, 0x4c,
	0x5f, 0x57, 0x52, 0x54, 0x5f, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67,
	0x6e, 0x4c, 0x57, 0x52, 0x54, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x4c, 0x5f, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6e, 0x4c,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x6e, 0x75,
	0x6d, 0x62, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x6e, 0x75,
	0x6d, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c,
	0x70, 0x72, 0x73, 0x6e, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c,
	0x70, 0x72, 0x73, 0x6e, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x73, 0x74, 0x61, 0x64,
	0x63, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x73, 0x74, 0x61, 0x64,
	0x63, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x47, 0x50, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x67, 0x6e, 0x4c, 0x5f, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x49,
	0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6e, 0x4c, 0x41, 0x72, 0x63, 0x68,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x6e, 0x4c, 0x5f, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x67, 0x6e, 0x4c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x10, 0x67, 0x6e, 0x4c, 0x5f, 0x53, 0x4f, 0x5f, 0x43, 0x6f,
	0x64, 0x65, 0x5f, 0x41, 0x70, 0x70, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67,
	0x6e, 0x4c, 0x53, 0x4f, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x70, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x62, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x6e,
	0x63, 0x79, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x6e,
	0x63, 0x79, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x6b, 0x6e, 0x61, 0x6d,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x6b, 0x6e, 0x61, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x74, 0x61, 0x6d, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x61, 0x63, 0x63, 0x74, 0x61, 0x6d, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x72, 0x64, 0x69, 0x73, 0x61, 0x6d, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x74, 0x72, 0x64, 0x69, 0x73, 0x61, 0x6d, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x74, 0x61,
	0x6d, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x66, 0x72, 0x74, 0x61, 0x6d,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x73, 0x63, 0x61, 0x6d, 0x6e, 0x74, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x73, 0x63, 0x61, 0x6d, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x68, 0x6e, 0x75, 0x6d, 0x62, 0x52, 0x31, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x68, 0x6e, 0x75, 0x6d, 0x62, 0x52, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x75,
	0x65, 0x64, 0x74, 0x64, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x75, 0x65,
	0x64, 0x74, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x64, 0x73, 0x63, 0x72, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x64, 0x73, 0x63, 0x72, 0x12, 0x36, 0x0a, 0x17,
	0x67, 0x6e, 0x4c, 0x5f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x67,
	0x6e, 0x4c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x72, 0x72,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6c, 0x73, 0x74, 0x65, 0x72, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x74, 0x65, 0x72, 0x64, 0x73, 0x63, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x74, 0x65, 0x72, 0x64, 0x73, 0x63, 0x12, 0x43, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47,
	0x50, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x2d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x47, 0x50, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12,
	0x2d, 0x0a, 0x03, 0x77, 0x72, 0x74, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x57, 0x72, 0x74, 0x47, 0x50, 0x52, 0x03, 0x77, 0x72, 0x74, 0x12, 0x5a,
	0x0a, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x2e, 0x54, 0x65, 0x72,
	0x6d, 0x4f, 0x66, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x74, 0x65, 0x72, 0x6d,
	0x4f, 0x66, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x09, 0x74, 0x65,
	0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x30, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47,
	0x50, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x09, 0x74, 0x65, 0x72,
	0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x31,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x74, 0x65,
	0x47, 0x50, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x76, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x18, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x2e, 0x56, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x50, 0x52, 0x07, 0x76,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x74,
	0x68, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x74,
	0x68, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x61, 0x6d, 0x6e, 0x74, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x61, 0x6d, 0x6e, 0x74, 0x1a, 0xb0, 0x01, 0x0a,
	0x0f, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x50,
	0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x4c, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x6e, 0x4c, 0x56,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x67, 0x6e,
	0x4c, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x6e, 0x4c, 0x56, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x24, 0x0a,
	0x0e, 0x67, 0x6e, 0x4c, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x6e, 0x4c, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x6f, 0x63, 0x61, 0x6d, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x6f, 0x63, 0x61, 0x6d, 0x74, 0x1a,
	0xe3, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74,
	0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74,
	0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x70, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x70, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x78, 0x74,
	0x6e, 0x64, 0x70, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x78, 0x74,
	0x6e, 0x64, 0x70, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x4c, 0x5f, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x67, 0x6e, 0x4c, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x72, 0x6b, 0x64, 0x6e, 0x61, 0x6d,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x72, 0x6b, 0x64, 0x6e, 0x61, 0x6d,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6f, 0x66, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x6f, 0x66, 0x6d, 0x1a, 0x45, 0x0a, 0x0d, 0x54, 0x65, 0x72, 0x6d, 0x4f, 0x66, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x64, 0x74, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x75, 0x65, 0x64, 0x74, 0x64, 0x73, 0x1a, 0x43, 0x0a, 0x09,
	0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6c,
	0x73, 0x74, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6c,
	0x73, 0x74, 0x65, 0x72, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x74, 0x65, 0x72, 0x64, 0x73,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x74, 0x65, 0x72, 0x64, 0x73,
	0x63, 0x22, 0xda, 0x04, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x61, 0x70, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x43, 0x6f,
	0x64, 0x65, 0x41, 0x70, 0x70, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x77, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f,
	0x63, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x63,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x5f,
	0x73, 0x68, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x53, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x27, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x5f, 0x73, 0x68, 0x69,
	0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x65, 0x71, 0x53, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x6f, 0x63, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79, 0x22, 0xa5,
	0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x36,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x30, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x1a, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x50, 0x12, 0x27, 0x0a, 0x10, 0x67, 0x6e, 0x4c, 0x5f, 0x43,
	0x75, 0x73, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x67, 0x6e, 0x4c, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x12, 0x38, 0x0a, 0x18, 0x67, 0x6e, 0x4c, 0x5f, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x67, 0x6e, 0x4c, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x45, 0x44, 0x45, 0x53, 0x43, 0x22, 0xd1, 0x01, 0x0a, 0x11,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69,
	0x76, 0x12, 0x36, 0x0a, 0x17, 0x67, 0x6e, 0x6c, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x67, 0x6e, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x6c,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x6e, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6e, 0x6c, 0x5f,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x6e, 0x6c, 0x43,
	0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x6e, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6e,
	0x6c, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x67, 0x6e, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x67, 0x6e, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x22,
	0xfe, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x70, 0x72, 0x70, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x70,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x72,
	0x70, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x70, 0x72, 0x70, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x72, 0x70, 0x5f, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x70, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x72, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x72, 0x70, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f,
	0x6f, 0x72, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x70, 0x72, 0x70, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x44, 0x65, 0x73, 0x63,
	0x22, 0x30, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xa5, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc8, 0x0c, 0x0a, 0x0e, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x50, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x70, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x72, 0x70, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70, 0x6c, 0x61, 0x6e,
	0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x70, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x69, 0x74, 0x65, 0x50, 0x50, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x13, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x50, 0x52,
	0x12, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x70, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x70, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70,
	0x6c, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x70, 0x5f, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x70, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x70, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x70, 0x72, 0x70, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70, 0x6c, 0x61,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x70, 0x5f, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x70, 0x4e, 0x6f, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x64, 0x64, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x64, 0x64, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x75, 0x73, 0x72, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x75, 0x73, 0x72, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x50, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x70, 0x72, 0x70, 0x5f, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x72, 0x70, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x51, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6f,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x50, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x54, 0x6f, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x50, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x51, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x50, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x52, 0x0a, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x1a, 0x9d, 0x01, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x70, 0x5f, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x70, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x70,
	0x72, 0x70, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x70, 0x72, 0x70, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x69, 0x64, 0x1a, 0x64, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x75, 0x73, 0x72, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x75, 0x73, 0x72, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x75, 0x73, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x75, 0x73, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x69, 0x64, 0x1a, 0x86, 0x01,
	0x0a, 0x0b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x26, 0x0a,
	0x0f, 0x70, 0x72, 0x70, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x70, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x72, 0x70, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x70, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x69, 0x64, 0x1a, 0xcc, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6f, 0x6d,
	0x73, 0x63, 0x68, 0x64, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6f, 0x6d,
	0x73, 0x63, 0x68, 0x64, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x74, 0x64, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x65, 0x78, 0x74, 0x64, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x68, 0x77, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x68, 0x77, 0x74, 0x22, 0x70, 0x0a, 0x14, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x50, 0x12, 0x29, 0x0a,
	0x11, 0x70, 0x72, 0x70, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x70, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x72, 0x70, 0x5f,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x70, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4f, 0x72, 0x67, 0x44, 0x65, 0x73, 0x63, 0x22, 0xed, 0x02, 0x0a, 0x06, 0x53, 0x69, 0x74, 0x65,
	0x50, 0x50, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x50,
	0x50, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65,
	0x49, 0x64, 0x1a, 0xa2, 0x02, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x67, 0x6e, 0x6c, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x30, 0x30, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x6e, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x31, 0x30, 0x30, 0x12, 0x56, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x5f, 0x64, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x50, 0x50, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x57,
	0x0a, 0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x67, 0x6e, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6e, 0x6c, 0x53, 0x75, 0x62, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x22, 0xa2, 0x04, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x71, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12,
	0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73,
	0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x73, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x62, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x70, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x70, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70,
	0x6c, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x09, 0x70, 0x72, 0x70, 0x5f, 0x63, 0x73, 0x5f, 0x6e, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x70, 0x43, 0x73, 0x4e, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x6f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6c, 0x69, 0x6b, 0x65, 0x22, 0x31, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xa7, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x39,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x60, 0x0a, 0x09, 0x50, 0x6f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x70, 0x72, 0x63, 0x74,
	0x6e, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x70, 0x72, 0x63, 0x74,
	0x6e, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x22, 0x8c, 0x11, 0x0a, 0x08,
	0x50, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x6e, 0x65, 0x73,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x6e, 0x65, 0x73,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f,
	0x70, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x75, 0x79, 0x65, 0x72, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e,
	0x6d, 0x62, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e,
	0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x6e, 0x64, 0x69, 0x74, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76,
	0x6e, 0x64, 0x69, 0x74, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6e, 0x64, 0x69, 0x74,
	0x64, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6e, 0x64, 0x69, 0x74,
	0x64, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x6f, 0x66, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x6f, 0x66, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6d, 0x71, 0x74, 0x79, 0x69, 0x6e, 0x62, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x6d, 0x71, 0x74, 0x79, 0x69, 0x6e, 0x62, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x74, 0x79, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x71, 0x74, 0x79, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x71,
	0x74, 0x79, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71,
	0x74, 0x79, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x63,
	0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x61, 0x6d, 0x6e, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x61, 0x78, 0x61, 0x6d, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x74, 0x64, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x65, 0x78, 0x74, 0x64, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76,
	0x69, 0x6e, 0x64, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69,
	0x6e, 0x64, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x73, 0x74, 0x64, 0x62, 0x79, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x71, 0x73, 0x74, 0x64, 0x62, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x6f, 0x63, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x6f,
	0x63, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63,
	0x74, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x70,
	0x6c, 0x63, 0x75, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x63, 0x70,
	0x6c, 0x63, 0x75, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x70, 0x6c, 0x63, 0x75, 0x72,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x63,
	0x70, 0x6c, 0x63, 0x75, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63,
	0x70, 0x6c, 0x71, 0x74, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x63,
	0x70, 0x6c, 0x71, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x70, 0x6c, 0x71, 0x74,
	0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x63, 0x70, 0x6c, 0x71, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72,
	0x6b, 0x66, 0x6c, 0x64, 0x31, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x6b,
	0x66, 0x6c, 0x64, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x6f, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x6e, 0x69, 0x64, 0x78, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x6e, 0x69, 0x64, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x75, 0x6e, 0x74, 0x63, 0x73, 0x74,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x75, 0x6e, 0x74, 0x63, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x65, 0x78, 0x74, 0x63, 0x73, 0x74, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x65, 0x78, 0x74, 0x63, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x61,
	0x78, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x61, 0x78, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x53, 0x69, 0x74, 0x65, 0x54, 0x61, 0x78, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x12, 0x2c,
	0x0a, 0x11, 0x70, 0x75, 0x72, 0x63, 0x68, 0x73, 0x69, 0x74, 0x65, 0x74, 0x78, 0x73, 0x63, 0x68,
	0x73, 0x72, 0x63, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x73, 0x69, 0x74, 0x65, 0x74, 0x78, 0x73, 0x63, 0x68, 0x73, 0x72, 0x63, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x72, 0x74, 0x61, 0x78, 0x61, 0x6d, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x6f, 0x72, 0x74, 0x61, 0x78, 0x61, 0x6d, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x63, 0x6b, 0x74,
	0x78, 0x61, 0x6d, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x63, 0x6b, 0x74,
	0x78, 0x61, 0x6d, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x74, 0x61, 0x78, 0x61, 0x6d, 0x74,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x62, 0x74, 0x61, 0x78, 0x61, 0x6d, 0x74,
	0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6c, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x74, 0x68, 0x64, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x74, 0x68, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x72, 0x69, 0x67, 0x70, 0x72, 0x6d, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x70, 0x72, 0x6d, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x73, 0x74, 0x72, 0x63, 0x70, 0x74, 0x64, 0x74, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x73, 0x74, 0x72, 0x63, 0x70, 0x74, 0x64, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x73, 0x74, 0x72, 0x63, 0x70, 0x74, 0x64, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x73, 0x74, 0x72, 0x63, 0x70, 0x74, 0x64, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x64, 0x72, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x64, 0x72, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6d, 0x70, 0x6e, 0x79,
	0x6e, 0x61, 0x6d, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6d, 0x70, 0x6e, 0x79,
	0x6e, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x31, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x53, 0x32, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x53, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53,
	0x33, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53,
	0x33, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x7a,
	0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69,
	0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x31, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x31, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x32, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x33, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x33, 0x12, 0x10, 0x0a,
	0x03, 0x66, 0x61, 0x78, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x61, 0x78, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x6e, 0x75, 0x6d,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x6e, 0x75, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x74, 0x6d, 0x74, 0x72, 0x6b, 0x6f, 0x70, 0x18, 0x41, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x69, 0x74, 0x6d, 0x74, 0x72, 0x6b, 0x6f, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x74, 0x6d, 0x74, 0x72, 0x6b, 0x6f, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x74, 0x6d, 0x74, 0x72, 0x6b, 0x6f, 0x70, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x70, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72,
	0x70, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x70, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x44, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x70, 0x72, 0x74, 0x6d, 0x6e, 0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x70, 0x72, 0x74, 0x6d, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x70,
	0x5f, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x70, 0x4c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x70, 0x72, 0x70, 0x5f, 0x70, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x70, 0x50, 0x72, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x70, 0x5f, 0x70, 0x70,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x72, 0x70, 0x50, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x70, 0x5f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x70, 0x43,
	0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xcb, 0x0c, 0x0a, 0x0f, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x75, 0x79, 0x65, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x63, 0x6b, 0x74, 0x78, 0x61, 0x6d, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x63, 0x6b, 0x74, 0x78, 0x61, 0x6d, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x62, 0x74, 0x61, 0x78, 0x61, 0x6d, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x6f, 0x62, 0x74, 0x61, 0x78, 0x61, 0x6d, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x74, 0x68, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x74, 0x68, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6d, 0x70, 0x6e, 0x79, 0x6e,
	0x61, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6d, 0x70, 0x6e, 0x79, 0x6e,
	0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x31, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x53, 0x32, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x53, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x33,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x53, 0x33,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x7a, 0x69,
	0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x31, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x31, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x68, 0x6f, 0x6e, 0x45, 0x32, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68,
	0x6f, 0x6e, 0x45, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x33, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x45, 0x33, 0x12, 0x10, 0x0a, 0x03,
	0x66, 0x61, 0x78, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x61, 0x78, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x72, 0x70, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x70, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x70, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x70, 0x72, 0x74, 0x6d, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x70, 0x72, 0x74, 0x6d, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x70, 0x5f, 0x6c,
	0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x70, 0x4c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72,
	0x70, 0x5f, 0x70, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x70, 0x50, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x70, 0x5f, 0x70, 0x70, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x72, 0x70, 0x50, 0x70, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x70, 0x72, 0x70, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70,
	0x72, 0x70, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x70, 0x5f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72,
	0x70, 0x43, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x18,
	0x70, 0x72, 0x70, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x61, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x70, 0x72, 0x70, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x61, 0x72, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x70, 0x5f, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x74,
	0x69, 0x6d, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x70, 0x45, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x72, 0x64, 0x69, 0x73, 0x61, 0x6d, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x74, 0x72, 0x64, 0x69, 0x73, 0x61, 0x6d, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x74, 0x61,
	0x6d, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x66, 0x72, 0x74, 0x61, 0x6d,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x73, 0x63, 0x63, 0x68, 0x61, 0x6d, 0x74, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x73, 0x63, 0x63, 0x68, 0x61, 0x6d, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x61, 0x78, 0x61, 0x6d, 0x6e, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x74, 0x61, 0x78, 0x61, 0x6d, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x6f,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x09,
	0x70, 0x6f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x70, 0x6f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x30, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x0b, 0x70, 0x6f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x08,
	0x70, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x31, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x08,
	0x70, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xfa, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79, 0x12, 0x29, 0x0a, 0x11, 0x70, 0x72, 0x70, 0x5f, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x70, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x72, 0x70, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x72, 0x70, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x36, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x50,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb1, 0x02,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xb1, 0x01, 0x0a, 0x14, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x50, 0x12, 0x29, 0x0a, 0x11, 0x70, 0x72,
	0x70, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x70, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x72, 0x70, 0x5f, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x70, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x22, 0x54, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x38, 0x0a, 0x26, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb5, 0x02, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbb, 0x01,
	0x0a, 0x16, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x50, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x72, 0x70, 0x5f,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x66, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x70, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x43, 0x6c, 0x61, 0x73, 0x66, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72, 0x70, 0x5f, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x66, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x70, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x43, 0x6c, 0x61, 0x73, 0x66, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x22, 0xdc, 0x08, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f,
	0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x65, 0x72, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x79, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x6e, 0x63, 0x79, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x6e, 0x63, 0x79, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x72, 0x74, 0x6d,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x70, 0x72, 0x74, 0x6d,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x61, 0x78, 0x73, 0x63, 0x68, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x61, 0x78, 0x73, 0x63, 0x68, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x64, 0x69, 0x73, 0x61,
	0x6d, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x72, 0x64, 0x69, 0x73, 0x61,
	0x6d, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x74, 0x61, 0x6d, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x66, 0x72, 0x74, 0x61, 0x6d, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x69, 0x73, 0x63, 0x61, 0x6d, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x6d, 0x69, 0x73, 0x63, 0x61, 0x6d, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x61,
	0x6d, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x61, 0x78, 0x61, 0x6d,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x70, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x72, 0x70, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70, 0x6c, 0x61, 0x6e,
	0x4e, 0x6f, 0x12, 0x61, 0x0a, 0x0c, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x63, 0x73, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x63, 0x73, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x70, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x72, 0x70, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x70, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x70, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x72, 0x70, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x72, 0x70, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x65, 0x74, 0x65, 0x78, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x6f, 0x74, 0x65, 0x74, 0x65, 0x78, 0x74, 0x12, 0x50, 0x0a, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50,
	0x6f, 0x64, 0x74, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d,
	0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a,
	0xb9, 0x01, 0x0a, 0x05, 0x50, 0x6f, 0x64, 0x74, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6f, 0x66, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6f, 0x66, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x71,
	0x74, 0x79, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71,
	0x74, 0x79, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x74, 0x79, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x74, 0x79, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x65, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x65, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x0d, 0x0a, 0x0b, 0x63,
	0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xc6, 0x09, 0x0a, 0x1c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x65, 0x72, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x79, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x6e, 0x63, 0x79, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x6e, 0x63, 0x79, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x72, 0x74, 0x6d, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x70, 0x72, 0x74, 0x6d, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x61, 0x78, 0x73, 0x63, 0x68, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x61, 0x78, 0x73, 0x63, 0x68, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x75, 0x62,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x64, 0x69, 0x73, 0x61, 0x6d,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x72, 0x64, 0x69, 0x73, 0x61, 0x6d,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x74, 0x61, 0x6d, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x66, 0x72, 0x74, 0x61, 0x6d, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x69, 0x73, 0x63, 0x61, 0x6d, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d,
	0x69, 0x73, 0x63, 0x61, 0x6d, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x61, 0x6d,
	0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x61, 0x78, 0x61, 0x6d, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x70, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x70, 0x72, 0x70, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x4e,
	0x6f, 0x12, 0x61, 0x0a, 0x0c, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x63, 0x73, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x63, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x70, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x70, 0x72, 0x70, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x70, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x72, 0x70, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x72, 0x70, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x6f, 0x74, 0x65, 0x74, 0x65, 0x78, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x6f, 0x74, 0x65, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x79, 0x6d,
	0x74, 0x72, 0x6d, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x79, 0x6d,
	0x74, 0x72, 0x6d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x50, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x64, 0x74, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x1a, 0xb9, 0x01, 0x0a, 0x05, 0x50, 0x6f, 0x64, 0x74, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6f, 0x66,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6f, 0x66, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x74, 0x79, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x71, 0x74, 0x79, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x74, 0x79,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x74, 0x79,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x63, 0x6f, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x65, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x65, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x93, 0x01,
	0x0a, 0x0b, 0x63, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x09, 0x70, 0x72, 0x70, 0x5f, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x70, 0x43, 0x73, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x70,
	0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x70, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x6f, 0x12,
	0x26, 0x0a, 0x0f, 0x70, 0x72, 0x70, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x70, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x6e, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x6e, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x70, 0x72, 0x70, 0x5f, 0x63, 0x73, 0x5f,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x70, 0x43, 0x73, 0x4e,
	0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x70, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x70, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x5f,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x6e, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x6e, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x5e, 0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x22, 0x54, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3f, 0x0a, 0x21, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xab, 0x02, 0x0a, 0x23, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x70, 0x72,
	0x70, 0x5f, 0x63, 0x73, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x70, 0x43, 0x73, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x70, 0x5f, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x72, 0x70, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x72, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x68,
	0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68,
	0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x54, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x40, 0x0a, 0x10,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xce,
	0x0c, 0x0a, 0x0e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47,
	0x50, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x73, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x70, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x6f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f,
	0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x73, 0x74,
	0x61, 0x64, 0x63, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x73, 0x74,
	0x61, 0x64, 0x63, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x70, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x62, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x6e, 0x63, 0x79, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x6e, 0x63, 0x79, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x6f, 0x63, 0x61, 0x6d, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f,
	0x72, 0x64, 0x6f, 0x63, 0x61, 0x6d, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x53, 0x0a, 0x0c, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x50, 0x2e, 0x43,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x0b, 0x63, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x47, 0x50, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x70,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x6f, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x50, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x70, 0x6d, 0x74, 0x72, 0x76, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6f, 0x72, 0x70, 0x6d, 0x74, 0x72, 0x76, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x64, 0x69, 0x73, 0x61, 0x6d, 0x74, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x72, 0x64, 0x69, 0x73, 0x61, 0x6d, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x72, 0x74, 0x61, 0x6d, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x66, 0x72, 0x74, 0x61, 0x6d, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x73, 0x63, 0x61,
	0x6d, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x73, 0x63, 0x61,
	0x6d, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x61, 0x6d, 0x6e, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x61, 0x78, 0x61, 0x6d, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x72, 0x69, 0x67, 0x6e, 0x75, 0x6d, 0x62, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x72, 0x69, 0x67, 0x6e, 0x75, 0x6d, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xc8, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x73, 0x68, 0x72, 0x63, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x73, 0x68, 0x72, 0x63, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x74, 0x72,
	0x78, 0x61, 0x6d, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x74, 0x72,
	0x78, 0x61, 0x6d, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x1a, 0x7f, 0x0a, 0x0a, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x6e, 0x75, 0x6d, 0x62, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x6e, 0x75, 0x6d, 0x62, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6e, 0x6c, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x1a, 0xa8, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x74, 0x65, 0x6d, 0x64, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6f, 0x66, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6f, 0x66, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x70,
	0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x70,
	0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x78, 0x74, 0x6e, 0x64, 0x70, 0x72, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x78, 0x74, 0x6e, 0x64, 0x70, 0x72, 0x63, 0x65, 0x22,
	0xf4, 0x05, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x69, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x61, 0x70, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x43, 0x6f,
	0x64, 0x65, 0x41, 0x70, 0x70, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x77, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6f, 0x5f, 0x64, 0x6f, 0x63,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x6f, 0x44, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22,
	0x0a, 0x0d, 0x73, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x44, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x27, 0x0a, 0x10,
	0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6e, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x69, 0x67,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x69,
	0x67, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x22, 0xa9, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x4a, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xab,
	0x02, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb4, 0x02, 0x0a,
	0x21, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b,
	0x69, 0x76, 0x6d, 0x5f, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x76, 0x6d, 0x54, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x72, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x72, 0x64, 0x72, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x6e, 0x73,
	0x66, 0x6c, 0x6f, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x6e, 0x73,
	0x66, 0x6c, 0x6f, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x74, 0x61, 0x64, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x74, 0x61, 0x64, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x35, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x50, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc1, 0x02, 0x0a, 0x19, 0x49,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d,
	0x6e, 0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d,
	0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6f, 0x66, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6f, 0x66, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x6e,
	0x73, 0x66, 0x71, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x72, 0x6e,
	0x73, 0x66, 0x71, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x74, 0x79, 0x66, 0x75, 0x6c, 0x66,
	0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x74, 0x79, 0x66, 0x75, 0x6c, 0x66,
	0x69, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x74, 0x79, 0x73, 0x68, 0x70, 0x70, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x74, 0x79, 0x73, 0x68, 0x70, 0x70, 0x64, 0x12, 0x2f, 0x0a,
	0x14, 0x6c, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x61, 0x6e,
	0x64, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x72, 0x6e, 0x73, 0x66, 0x6c, 0x6f, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x72, 0x6e, 0x73, 0x66, 0x6c, 0x6f, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74,
	0x6c, 0x6f, 0x63, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x6c, 0x6f,
	0x63, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x6e, 0x73, 0x74, 0x6c, 0x6f, 0x63, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x6e, 0x73, 0x74, 0x6c, 0x6f, 0x63, 0x22, 0xe4,
	0x06, 0x0a, 0x13, 0x49, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x47, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x72, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x72, 0x64, 0x72, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x74,
	0x61, 0x64, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x74, 0x61, 0x64,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x65, 0x63, 0x68, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65,
	0x63, 0x68, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x66, 0x66, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x66, 0x66, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x74, 0x72,
	0x6e, 0x73, 0x66, 0x6c, 0x6f, 0x63, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x74, 0x72, 0x6e, 0x73, 0x66, 0x6c, 0x6f, 0x63, 0x12, 0x36,
	0x0a, 0x06, 0x69, 0x74, 0x6c, 0x6f, 0x63, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x69, 0x74, 0x6c, 0x6f, 0x63, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x74,
	0x68, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x74,
	0x68, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x33, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x33, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x7a, 0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a,
	0x69, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x66, 0x72, 0x6e, 0x63, 0x64, 0x6f, 0x63, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x66, 0x72, 0x6e, 0x63, 0x64, 0x6f, 0x63, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3b, 0x0a, 0x07, 0x74, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x6e, 0x64, 0x73, 0x63, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x6e, 0x64, 0x73, 0x63, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6e, 0x6c, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x27, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6e, 0x6c, 0x53, 0x69,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x64, 0x73, 0x63,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x64, 0x73, 0x63,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x67, 0x6e,
	0x6c, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6e, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x64, 0x73, 0x63, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x64, 0x73, 0x63, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x67, 0x6e, 0x6c,
	0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6e, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x22, 0x4a, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x12, 0x1e,
	0x0a, 0x0b, 0x69, 0x76, 0x6d, 0x5f, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x76, 0x6d, 0x54, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xee,
	0x02, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6e, 0x69, 0x74, 0x6d, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6e, 0x69, 0x74, 0x6d, 0x73, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6f,
	0x66, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6f, 0x66, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x72, 0x6e, 0x73, 0x66, 0x71, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x74, 0x72, 0x6e, 0x73, 0x66, 0x71, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x74,
	0x79, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x74,
	0x79, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x74, 0x79, 0x73, 0x68, 0x70,
	0x70, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x74, 0x79, 0x73, 0x68, 0x70,
	0x70, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6c, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x6e, 0x73, 0x66, 0x6c, 0x6f, 0x63, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x6e, 0x73, 0x66, 0x6c, 0x6f, 0x63, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x74, 0x6c, 0x6f, 0x63, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x74, 0x6c, 0x6f, 0x63, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x6e, 0x73, 0x74,
	0x6c, 0x6f, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x6e, 0x73, 0x74,
	0x6c, 0x6f, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6e, 0x22,
	0x44, 0x0a, 0x06, 0x54, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x76, 0x6d, 0x5f, 0x74, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x76, 0x6d, 0x54,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xaf, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47,
	0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9a, 0x04, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x50,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x76, 0x6d, 0x5f, 0x74, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x76, 0x6d, 0x54,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x76, 0x6d,
	0x5f, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x76, 0x6d, 0x4c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x76, 0x6d, 0x5f, 0x6c, 0x6f, 0x63,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x76, 0x6d, 0x4c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12,
	0x27, 0x0a, 0x10, 0x69, 0x76, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x65, 0x74, 0x61, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x76, 0x6d, 0x52, 0x65,
	0x71, 0x45, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x23, 0x0a, 0x0e, 0x69, 0x76, 0x6d, 0x5f,
	0x72, 0x65, 0x71, 0x5f, 0x65, 0x74, 0x61, 0x5f, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x76, 0x6d, 0x52, 0x65, 0x71, 0x45, 0x74, 0x61, 0x54, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x5f, 0x6c, 0x69, 0x6b, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x4c, 0x69, 0x6b, 0x65, 0x22, 0x33, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf2, 0x01, 0x0a, 0x17, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x47, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x6f, 0x66, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6f,
	0x66, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x76, 0x6d, 0x5f, 0x71, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x76, 0x6d,
	0x51, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x76,
	0x6d, 0x5f, 0x71, 0x74, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x76, 0x6d, 0x51, 0x74, 0x79, 0x46, 0x75, 0x6c, 0x66, 0x69,
	0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6e, 0x69, 0x74, 0x6d, 0x73, 0x65, 0x71, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6e, 0x69, 0x74, 0x6d, 0x73, 0x65, 0x71, 0x22, 0x8c,
	0x05, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x47, 0x50, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x76, 0x6d, 0x5f, 0x74, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x76, 0x6d, 0x54, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x76, 0x6d, 0x5f, 0x74, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x76, 0x6d, 0x54, 0x72, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x76, 0x6d, 0x5f, 0x72, 0x65,
	0x71, 0x5f, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x76, 0x6d,
	0x52, 0x65, 0x71, 0x45, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x11, 0x69, 0x76, 0x6d, 0x5f, 0x6c, 0x6f,
	0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x69, 0x76, 0x6d, 0x4c, 0x6f, 0x63, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x4a, 0x0a, 0x0f, 0x69, 0x76, 0x6d, 0x5f, 0x6c, 0x6f,
	0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x76, 0x6d, 0x4c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x54, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x76, 0x6d, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x76, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x76, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x76, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x12, 0x47, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x50, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x78, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x49, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x78, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd9, 0x01,
	0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72,
	0x64, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x70, 0x72, 0x63, 0x74,
	0x6e, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x70, 0x72, 0x63, 0x74,
	0x6e, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x22, 0xe9, 0x01, 0x0a, 0x11, 0x49, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x72, 0x64, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x72, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x72, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x12, 0x47, 0x0a, 0x0d,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x64, 0x73,
	0x63, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x64, 0x73,
	0x63, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x67,
	0x6e, 0x6c, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6e, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x22, 0xab, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x8a, 0x0b, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f,
	0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f,
	0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d,
	0x62, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d,
	0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x73, 0x74, 0x61, 0x64, 0x63, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x73, 0x74, 0x61, 0x64, 0x63, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x6e, 0x63, 0x79, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x6e, 0x63, 0x79, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x64, 0x69, 0x73, 0x61, 0x6d, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x72, 0x64, 0x69, 0x73, 0x61, 0x6d, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x73, 0x63,
	0x61, 0x6d, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x73, 0x63,
	0x61, 0x6d, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x61, 0x6d, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x61, 0x78, 0x61, 0x6d, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x6f, 0x63, 0x61, 0x6d, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x64, 0x6f, 0x63, 0x61, 0x6d, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x67, 0x6e, 0x6c, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x67, 0x6e,
	0x6c, 0x5f, 0x77, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x6e, 0x6c, 0x57, 0x72, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x67, 0x6e, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x6e, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67,
	0x6e, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x27,
	0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x70,
	0x70, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6e, 0x6c, 0x53, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x41, 0x70, 0x70, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x6e, 0x6c, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x67, 0x6e, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x74, 0x68, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x74, 0x68, 0x64, 0x12, 0x61,
	0x0a, 0x0d, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18,
	0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x0c, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d, 0x69, 0x64, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x1a, 0x9f, 0x02, 0x0a, 0x0a, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d,
	0x64, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x6f, 0x66, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x6f, 0x66, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6c, 0x76, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6c, 0x76, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x6e, 0x69, 0x74, 0x70, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x75, 0x6e, 0x69, 0x74, 0x70, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x78, 0x74, 0x6e, 0x64,
	0x70, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x78, 0x74, 0x6e, 0x64,
	0x70, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x4c, 0x5f, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x67, 0x6e, 0x4c, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x1a, 0x7a, 0x0a, 0x0c, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67,
	0x6e, 0x6c, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x67, 0x6e, 0x6c, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x6e, 0x6c, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x6f, 0x63, 0x61, 0x6d, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x6f, 0x63, 0x61, 0x6d, 0x74, 0x22,
	0x66, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x22, 0xb5, 0x05, 0x0a, 0x0b, 0x43, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x6e, 0x63, 0x79, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x6e, 0x63, 0x79, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x73, 0x68, 0x72, 0x63, 0x74, 0x79, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x73, 0x68, 0x72, 0x63, 0x74, 0x79, 0x70, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x63, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x63, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x74, 0x72, 0x78, 0x61, 0x6d, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x74, 0x72, 0x78, 0x61, 0x6d, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x64, 0x64, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x64, 0x64, 0x74, 0x12, 0x53, 0x0a, 0x0d, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a,
	0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x6f, 0x63, 0x61, 0x6d, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x6f, 0x72, 0x64, 0x6f, 0x63, 0x61, 0x6d, 0x74, 0x1a, 0x7f, 0x0a, 0x0c, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x70, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x70, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x44, 0x0a, 0x0a, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x6e,
	0x75, 0x6d, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x6e,
	0x75, 0x6d, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x72, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x72, 0x64, 0x61, 0x74, 0x65, 0x22,
	0xe9, 0x03, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x61, 0x73, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x6f, 0x44, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x0d,
	0x73, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x44, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x69, 0x5f, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x69, 0x44, 0x6f, 0x63, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x69, 0x5f, 0x64, 0x6f,
	0x63, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x69, 0x44, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x22, 0xa3, 0x02, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x73, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x61, 0x73, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xa2, 0x01, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6c, 0x61, 0x73, 0x64, 0x73, 0x63, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x61, 0x73, 0x64, 0x73, 0x63, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x6c,
	0x6d, 0x74, 0x74, 0x79, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x72, 0x6c,
	0x6d, 0x74, 0x74, 0x79, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x6c, 0x6d, 0x74, 0x74, 0x79,
	0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72,
	0x6c, 0x6d, 0x74, 0x74, 0x79, 0x70, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72,
	0x6c, 0x6d, 0x74, 0x61, 0x6d, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x72,
	0x6c, 0x6d, 0x74, 0x61, 0x6d, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x64, 0x73, 0x63, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x64, 0x73, 0x63, 0x72, 0x22, 0xa3, 0x02, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x2f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x75, 0x0a, 0x0f, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67,
	0x6e, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x63, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x63, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xb1, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6e,
	0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x67, 0x6e, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x63, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x63, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xa7, 0x02, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x31, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x0e, 0x53, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x74, 0x68, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x74, 0x68, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6d, 0x74,
	0x68, 0x64, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6d, 0x74,
	0x68, 0x64, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x70, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x69, 0x70, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x74, 0x79, 0x70,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x22, 0x68, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xa5, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x38, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x30, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc4, 0x04, 0x0a, 0x1e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0b,
	0x69, 0x76, 0x6d, 0x5f, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x69, 0x76, 0x6d, 0x54, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x0b, 0x69, 0x76, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x65, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x76, 0x6d, 0x52, 0x65, 0x71, 0x45, 0x74, 0x61, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x76, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x76, 0x6d, 0x4c,
	0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x69,
	0x76, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x76, 0x6d, 0x4c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x54, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0xa4, 0x01, 0x0a, 0x06, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6e, 0x69, 0x74, 0x6d, 0x73, 0x65, 0x71,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6e, 0x69, 0x74, 0x6d, 0x73, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x6f, 0x66, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6f, 0x66, 0x6d,
	0x12, 0x26, 0x0a, 0x0f, 0x69, 0x76, 0x6d, 0x5f, 0x71, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x76, 0x6d, 0x51, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x76, 0x6d, 0x5f,
	0x71, 0x74, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x69, 0x76, 0x6d, 0x51, 0x74, 0x79, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c,
	0x22, 0x6b, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x22, 0x51, 0x0a,
	0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x70, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f,
	0x63, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x88, 0x03, 0x0a, 0x06, 0x50, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x63, 0x70, 0x74, 0x6c, 0x6e, 0x6e, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x72, 0x63, 0x70, 0x74, 0x6c, 0x6e, 0x6e, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a,
	0x08, 0x76, 0x6e, 0x64, 0x69, 0x74, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x76, 0x6e, 0x64, 0x69, 0x74, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6e, 0x64,
	0x69, 0x74, 0x64, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6e, 0x64,
	0x69, 0x74, 0x64, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6f, 0x66, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x6f, 0x66, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6d, 0x71, 0x74, 0x79, 0x69, 0x6e,
	0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x6d, 0x71, 0x74, 0x79, 0x69, 0x6e,
	0x62, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x74, 0x79, 0x73, 0x68, 0x70, 0x70, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x74, 0x79, 0x73, 0x68, 0x70, 0x70, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x6e, 0x69, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x75, 0x6e, 0x69, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74,
	0x64, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x78, 0x74,
	0x64, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x6e, 0x74, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x6e, 0x74, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6c, 0x73, 0x68, 0x69, 0x70, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x6c, 0x73, 0x68, 0x69, 0x70, 0x22, 0xa7, 0x03,
	0x0a, 0x09, 0x49, 0x6e, 0x74, 0x72, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x63, 0x70, 0x74, 0x6c, 0x6e, 0x6e, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72,
	0x63, 0x70, 0x74, 0x6c, 0x6e, 0x6e, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x64, 0x6f,
	0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x64, 0x6f,
	0x63, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x6e, 0x64, 0x69, 0x74, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76,
	0x6e, 0x64, 0x69, 0x74, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6e, 0x64, 0x69, 0x74,
	0x64, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6e, 0x64, 0x69, 0x74,
	0x64, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x6f, 0x66, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x6f, 0x66, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x74, 0x79, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x74, 0x79, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x74, 0x79, 0x74, 0x72, 0x6e, 0x73, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x71, 0x74, 0x79, 0x74, 0x72, 0x6e, 0x73, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x71,
	0x74, 0x79, 0x73, 0x68, 0x70, 0x70, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71,
	0x74, 0x79, 0x73, 0x68, 0x70, 0x70, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x63,
	0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x64, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x78, 0x74, 0x64, 0x63, 0x6f, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x63, 0x74, 0x6c, 0x73, 0x68, 0x69, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x63, 0x74, 0x6c, 0x73, 0x68, 0x69, 0x70, 0x22, 0x8b, 0x0a, 0x0a, 0x0e, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x47, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f,
	0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6f, 0x70,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x70, 0x74,
	0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x70, 0x72, 0x63,
	0x74, 0x6e, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x70, 0x72, 0x63,
	0x74, 0x6e, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6e, 0x64, 0x64, 0x6f, 0x63, 0x6e, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6e, 0x64, 0x64, 0x6f, 0x63, 0x6e, 0x6d, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6c, 0x73, 0x68, 0x69, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x6c, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x63, 0x68, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x63, 0x68, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x63,
	0x68, 0x6e, 0x75, 0x6d, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x63,
	0x68, 0x6e, 0x75, 0x6d, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x6e, 0x63, 0x79, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x6e, 0x63, 0x79, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x70,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x72,
	0x74, 0x6d, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x70, 0x72,
	0x74, 0x6d, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x70, 0x5f, 0x63, 0x62, 0x5f, 0x73,
	0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x70, 0x72, 0x70, 0x43, 0x62, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x15, 0x70, 0x72, 0x70, 0x5f, 0x63, 0x62, 0x5f, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70,
	0x72, 0x70, 0x43, 0x62, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x61,
	0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x70, 0x72, 0x70, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x61, 0x72, 0x72, 0x69,
	0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x70, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x79, 0x6d, 0x74, 0x72,
	0x6d, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x79, 0x6d, 0x74, 0x72,
	0x6d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x73, 0x63, 0x68, 0x69, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x78, 0x73, 0x63, 0x68, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x72, 0x64, 0x69, 0x73, 0x61, 0x6d, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74,
	0x72, 0x64, 0x69, 0x73, 0x61, 0x6d, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x64, 0x70, 0x63,
	0x74, 0x70, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x72, 0x64, 0x70, 0x63,
	0x74, 0x70, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x74, 0x61, 0x6d, 0x6e, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x66, 0x72, 0x74, 0x61, 0x6d, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x69, 0x73, 0x63, 0x61, 0x6d, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x6d, 0x69, 0x73, 0x63, 0x61, 0x6d, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x78,
	0x61, 0x6d, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x61, 0x78, 0x61,
	0x6d, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x75, 0x65, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x74, 0x65, 0x64, 0x64, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x74, 0x65, 0x64, 0x64, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x74, 0x64, 0x75, 0x73, 0x72, 0x69,
	0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x74, 0x64, 0x75, 0x73, 0x72, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x74, 0x68, 0x64, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x74, 0x68, 0x64, 0x12, 0x37, 0x0a,
	0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x64, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x64, 0x64, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x64, 0x64, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x64,
	0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x64, 0x74,
	0x12, 0x34, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x78, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x72, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x72,
	0x78, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x70, 0x72, 0x63, 0x74, 0x6e, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x70, 0x72, 0x63, 0x74, 0x6e, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x74, 0x79, 0x70, 0x65, 0x22, 0x56, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x47, 0x50, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x70, 0x72, 0x63, 0x74, 0x6e, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6f, 0x70, 0x72, 0x63, 0x74, 0x6e, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x47, 0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x93, 0x03, 0x0a, 0x1e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x76, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x65, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x76, 0x6d, 0x52, 0x65, 0x71, 0x45, 0x74, 0x61,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x53, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x68, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6e, 0x69, 0x74, 0x6d, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6c, 0x6e, 0x69, 0x74, 0x6d, 0x73, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x76, 0x6d, 0x5f,
	0x71, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x69, 0x76, 0x6d, 0x51, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xac, 0x03, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x76, 0x6d, 0x5f, 0x74, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x76, 0x6d, 0x54, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x72, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x72, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x74, 0x61, 0x64, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x74, 0x61,
	0x64, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x1a, 0x7d, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6e,
	0x69, 0x74, 0x6d, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6e,
	0x69, 0x74, 0x6d, 0x73, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d,
	0x62, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d,
	0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x74, 0x79, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x74, 0x79, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x91, 0x02, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x6c, 0x6f,
	0x63, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x6c, 0x6f, 0x63, 0x6e,
	0x12, 0x53, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x4c, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6e, 0x69, 0x74, 0x6d, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6c, 0x6e, 0x69, 0x74, 0x6d, 0x73, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0f, 0x69,
	0x76, 0x6d, 0x5f, 0x71, 0x74, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x76, 0x6d, 0x51, 0x74, 0x79, 0x46, 0x75, 0x6c, 0x66,
	0x69, 0x6c, 0x6c, 0x22, 0xe5, 0x08, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73,
	0x74, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73,
	0x74, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x63, 0x6c, 0x61, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x63, 0x6c, 0x61, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x70, 0x72, 0x63, 0x73, 0x74, 0x6e, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x70, 0x72, 0x63, 0x73, 0x74, 0x6e, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x74, 0x6d, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x74, 0x6d, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x72,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x72,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x73, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x73, 0x7a, 0x6f, 0x6e, 0x65, 0x12,
	0x44, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x74, 0x68,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x74, 0x68,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x73, 0x63, 0x68, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x78, 0x73, 0x63, 0x68, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x62, 0x74, 0x61, 0x64, 0x63, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x62, 0x74, 0x61, 0x64, 0x63, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x73,
	0x74, 0x61, 0x64, 0x63, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x73,
	0x74, 0x61, 0x64, 0x63, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x64, 0x64, 0x72, 0x63,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x64, 0x64, 0x72, 0x63,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x70, 0x72, 0x73, 0x6e, 0x69, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6c, 0x70, 0x72, 0x73, 0x6e, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x79, 0x6d, 0x74, 0x72, 0x6d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6c,
	0x73, 0x74, 0x65, 0x72, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6c,
	0x73, 0x74, 0x65, 0x72, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x65, 0x66,
	0x31, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x65, 0x66,
	0x31, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x65, 0x66, 0x32, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x64, 0x65, 0x66, 0x32, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x65, 0x63, 0x6c, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x31, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x31, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x64, 0x69, 0x73, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x64, 0x69, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x67, 0x72, 0x70, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x67, 0x72, 0x70, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x65, 0x67, 0x72, 0x70, 0x65,
	0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x65, 0x67, 0x72, 0x70, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x63, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x63, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x27, 0x0a,
	0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6e, 0x6c, 0x43, 0x75, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67,
	0x6e, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x67, 0x6e, 0x6c, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x67, 0x6e, 0x6c, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x67, 0x6e,
	0x6c, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x6e, 0x6c, 0x53, 0x6f, 0x63, 0x69, 0x61,
	0x6c, 0x53, 0x65, 0x63, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x68, 0x69, 0x70, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x48, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x50, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x49, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x52, 0x09, 0x69, 0x6e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x22, 0x27, 0x0a, 0x09, 0x49, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x22,
	0xad, 0x0c, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69,
	0x67, 0x6e, 0x75, 0x6d, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x69,
	0x67, 0x6e, 0x75, 0x6d, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x73,
	0x74, 0x61, 0x64, 0x63, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x73,
	0x74, 0x61, 0x64, 0x63, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x6e, 0x63, 0x79, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x6e, 0x63, 0x79, 0x69,
	0x64, 0x12, 0x63, 0x0a, 0x0d, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x0c, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x64, 0x69, 0x73, 0x61, 0x6d, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x72, 0x64, 0x69, 0x73, 0x61, 0x6d, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x73, 0x63,
	0x61, 0x6d, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x73, 0x63,
	0x61, 0x6d, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x61, 0x6d, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x61, 0x78, 0x61, 0x6d, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x6f, 0x63, 0x61, 0x6d, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x64, 0x6f, 0x63, 0x61, 0x6d, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x0f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x52, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x68,
	0x69, 0x70, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6e, 0x6c, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f, 0x77, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x6e, 0x6c, 0x57, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67,
	0x6e, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x67, 0x6e, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x6e, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x10, 0x67, 0x6e, 0x6c,
	0x5f, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6e, 0x6c, 0x53, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x70,
	0x70, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x6e, 0x6c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x67, 0x6e, 0x6c,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x74, 0x68, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x74, 0x68, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x79, 0x6d, 0x74, 0x72, 0x6d, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x79, 0x6d, 0x74, 0x72, 0x6d, 0x69, 0x64, 0x1a, 0x7a, 0x0a, 0x0c, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x76,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x67, 0x6e, 0x6c, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x6e, 0x6c, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x6e, 0x6c, 0x56, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x6f, 0x63,
	0x61, 0x6d, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x6f, 0x63,
	0x61, 0x6d, 0x74, 0x1a, 0x44, 0x0a, 0x0e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x68, 0x65, 0x6b, 0x62, 0x6b, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x68, 0x65, 0x6b, 0x62, 0x6b, 0x69, 0x64, 0x1a, 0x83, 0x02, 0x0a, 0x0a, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6e, 0x69, 0x74,
	0x6d, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6e, 0x69, 0x74,
	0x6d, 0x73, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x6f, 0x66, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6f, 0x66, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6c, 0x76, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x6c, 0x76, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74,
	0x70, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74,
	0x70, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x78, 0x74, 0x6e, 0x64, 0x70, 0x72, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x78, 0x74, 0x6e, 0x64, 0x70, 0x72, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x4c, 0x5f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x6e, 0x4c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x68, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x6b, 0x62, 0x6b, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x6b, 0x62, 0x6b, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x22, 0x65, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x22, 0xd7, 0x03, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x6e, 0x6f, 0x6e, 0x50, 0x42, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x68, 0x6e, 0x75, 0x6d, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x61, 0x63, 0x68, 0x6e, 0x75, 0x6d, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e,
	0x6d, 0x62, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e,
	0x6d, 0x62, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x73, 0x68, 0x72, 0x63, 0x74, 0x79, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x63, 0x73, 0x68, 0x72, 0x63, 0x74, 0x79, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x6e, 0x63, 0x79, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x6e, 0x63, 0x79, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x6b, 0x62, 0x6b, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x6b, 0x62, 0x6b, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x74, 0x72, 0x78, 0x61, 0x6d, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x74, 0x72, 0x78, 0x61, 0x6d, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x72, 0x78, 0x64, 0x73, 0x63, 0x72, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x72, 0x78, 0x64, 0x73, 0x63, 0x72, 0x6e, 0x12, 0x57, 0x0a, 0x08, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x68, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x6e, 0x6f, 0x6e, 0x50, 0x42, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x54, 0x6f, 0x1a, 0x48, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x75, 0x0a, 0x1f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x6e, 0x6f, 0x6e, 0x50, 0x42, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xc4, 0x04, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x70, 0x72, 0x63, 0x74, 0x6e, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6f, 0x70, 0x72, 0x63, 0x74, 0x6e, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6e, 0x64,
	0x64, 0x6f, 0x63, 0x6e, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6e, 0x64,
	0x64, 0x6f, 0x63, 0x6e, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x6e, 0x63, 0x79, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x6e, 0x63, 0x79, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x6e, 0x0a, 0x0f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x54, 0x4c, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x47, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0f, 0x67, 0x6f, 0x6f, 0x64,
	0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x54, 0x4c, 0x1a, 0xec, 0x01, 0x0a, 0x12,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x70, 0x72, 0x63, 0x74, 0x6e, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x70, 0x72, 0x63, 0x74, 0x6e, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6f, 0x66, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6f, 0x66, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74,
	0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74,
	0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x74, 0x79, 0x73, 0x68, 0x70,
	0x70, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x74, 0x79, 0x73, 0x68, 0x70,
	0x70, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x78, 0x74, 0x64, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x65, 0x78, 0x74, 0x64, 0x63, 0x6f, 0x73, 0x74, 0x22, 0x8f, 0x04, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x70, 0x72, 0x63, 0x74, 0x6e, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x70, 0x72, 0x63, 0x74, 0x6e, 0x6d,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x70, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6c, 0x73, 0x68, 0x69, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x6c, 0x73, 0x68, 0x69, 0x70, 0x12,
	0x34, 0x0a, 0x16, 0x70, 0x72, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x61, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x70, 0x72, 0x70, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xe0, 0x01, 0x0a, 0x06, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x63, 0x70, 0x74, 0x6c, 0x6e, 0x6e, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x63, 0x70, 0x74, 0x6c, 0x6e, 0x6e, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6f, 0x66, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6f, 0x66, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x74, 0x79, 0x73,
	0x68, 0x70, 0x70, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x74, 0x79, 0x73,
	0x68, 0x70, 0x70, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x63, 0x6f, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x64, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x65, 0x78, 0x74, 0x64, 0x63, 0x6f, 0x73, 0x74, 0x22, 0xb2, 0x01, 0x0a,
	0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x65, 0x6b, 0x62, 0x6b, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x68, 0x65, 0x6b, 0x62, 0x6b, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74,
	0x65, 0x22, 0xdd, 0x03, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x6e, 0x6f, 0x6e, 0x50, 0x42, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x68, 0x6e, 0x75, 0x6d, 0x62, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x63, 0x68, 0x6e, 0x75, 0x6d, 0x62, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73,
	0x74, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73,
	0x74, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x73, 0x68, 0x72, 0x63, 0x74, 0x79, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x63, 0x73, 0x68, 0x72, 0x63, 0x74, 0x79, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x6e, 0x63, 0x79, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x6e, 0x63, 0x79, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x6b, 0x62,
	0x6b, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x6b, 0x62,
	0x6b, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x74, 0x72, 0x78, 0x61, 0x6d, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x74, 0x72, 0x78, 0x61, 0x6d, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x72, 0x78, 0x64, 0x73, 0x63, 0x72, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x72, 0x78, 0x64, 0x73, 0x63, 0x72, 0x6e, 0x12, 0x5a, 0x0a, 0x08, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x6e, 0x6f, 0x6e, 0x50, 0x42, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x52, 0x07,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x1a, 0x48, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x78, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x6e, 0x6f, 0x6e, 0x50, 0x42, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xea, 0x05, 0x0a, 0x0e,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f,
	0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x6e, 0x63, 0x79, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x6e, 0x63, 0x79, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x73, 0x68, 0x72,
	0x63, 0x74, 0x79, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x73, 0x68, 0x72,
	0x63, 0x74, 0x79, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x63, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64,
	0x63, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x74, 0x72, 0x78,
	0x61, 0x6d, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x74, 0x72, 0x78,
	0x61, 0x6d, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x64, 0x64, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x64, 0x64, 0x74, 0x12,
	0x56, 0x0a, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x2e, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x50, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x6f, 0x63, 0x61, 0x6d, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x64,
	0x6f, 0x63, 0x61, 0x6d, 0x74, 0x1a, 0xaa, 0x01, 0x0a, 0x0c, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x70, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x44, 0x0a, 0x0a, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x6e, 0x75, 0x6d, 0x62, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x6e, 0x75, 0x6d, 0x62, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x72, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x72, 0x64, 0x72, 0x64, 0x61, 0x74, 0x65, 0x22, 0x91, 0x04, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x69, 0x5f, 0x64, 0x6f, 0x63, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x69, 0x44, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a,
	0x0d, 0x73, 0x69, 0x5f, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x44, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x44, 0x6f,
	0x63, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6f, 0x5f,
	0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x6f, 0x44, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x70,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x70,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6e, 0x6c, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67,
	0x6e, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0xa5, 0x02, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x4a, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xce, 0x09, 0x0a, 0x09, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x47, 0x50, 0x12, 0x24,
	0x0a, 0x0e, 0x67, 0x6e, 0x6c, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x6e, 0x6c, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x6e, 0x6c, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x67, 0x6e, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x28, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x6e, 0x6c, 0x56, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x67, 0x6e, 0x6c,
	0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x6e, 0x6c, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x28, 0x0a, 0x10,
	0x67, 0x6e, 0x6c, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6e, 0x6c, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x6e, 0x6c, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x6e, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x76, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x67, 0x6e, 0x6c, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x67, 0x6e, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x6e, 0x6c,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13,
	0x67, 0x6e, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x6e, 0x6c, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x67, 0x6e, 0x6c, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x67, 0x6e, 0x6c, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x4d, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x47,
	0x50, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x13, 0x61, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x47, 0x50, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x12, 0x61, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x9e, 0x01,
	0x0a, 0x0b, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x10,
	0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6e, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x67, 0x6e, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x62, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x62, 0x1a, 0xd0,
	0x02, 0x0a, 0x10, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x12,
	0x28, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6e, 0x6c, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x6e, 0x6c,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x67, 0x6e, 0x6c, 0x45, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x31, 0x0a, 0x15, 0x67, 0x6e, 0x6c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x67, 0x6e, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x18, 0x67, 0x6e, 0x6c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x67, 0x6e, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x67, 0x6e,
	0x6c, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x6c, 0x5f, 0x71, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x67, 0x6e,
	0x6c, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c,
	0x6c, 0x51, 0x75, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x6e, 0x6c, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x67, 0x6e, 0x6c, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x22, 0x95, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x67,
	0x6e, 0x6c, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x6e, 0x6c, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6e, 0x6c,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x67,
	0x6e, 0x6c, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x6e, 0x6c, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6e, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x6e, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x6e, 0x6c,
	0x45, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x9b, 0x02, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x47,
	0x50, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x91, 0x09, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x67, 0x6e, 0x6c, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x6e, 0x6c, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x6e, 0x6c, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67,
	0x6e, 0x6c, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6e, 0x6c, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x6e, 0x6c, 0x5f, 0x65,
	0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x6e, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x76,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x67, 0x6e, 0x6c, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x6e, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x67, 0x6e,
	0x6c, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x13, 0x67, 0x6e, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x67, 0x6e, 0x6c, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x67, 0x6e, 0x6c, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x67, 0x6e, 0x6c, 0x56, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x13, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x12, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x9e, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6e, 0x6c, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x67, 0x6e, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x67, 0x6e, 0x6c, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6e, 0x6c, 0x41, 0x72, 0x63, 0x68,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x63, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x62, 0x1a, 0xd2, 0x02, 0x0a, 0x12, 0x41, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x6e, 0x6d, 0x62, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6e, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6e, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x6e, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x6e, 0x6c,
	0x45, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x67, 0x6e, 0x6c,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x67, 0x6e, 0x6c, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x18,
	0x67, 0x6e, 0x6c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x67, 0x6e, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x67, 0x6e, 0x6c, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x71, 0x75,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x67, 0x6e, 0x6c, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x51, 0x75, 0x12, 0x2c, 0x0a,
	0x12, 0x67, 0x6e, 0x6c, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x76, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x67, 0x6e, 0x6c, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x22, 0x47, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xd4, 0x07, 0x0a, 0x0d, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4d, 0x6f,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x70, 0x69,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x12, 0x48, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x58, 0x0a, 0x0e, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x52, 0x0a, 0x0c, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x0b, 0x63, 0x61, 0x73, 0x68, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x12, 0x52, 0x0a, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x0b, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x1a, 0x57, 0x0a, 0x07, 0x50, 0x69, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x69, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x1a, 0x5c, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x49,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x47, 0x0a, 0x0b, 0x43, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x57, 0x0a, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x83,
	0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x88, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x56, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x67, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x47, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x5f,
	0x70, 0x65, 0x72, 0x6d, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x56, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a,
	0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x5f, 0x62, 0x63, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x56, 0x61, 0x42, 0x63, 0x61, 0x22,
	0x45, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x56, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xec, 0xca, 0x01, 0x0a, 0x0d, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x57, 0x72, 0x74, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x57, 0x72, 0x74, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x72, 0x74, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x57, 0x72, 0x74, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x72, 0x74, 0x47, 0x50,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x72, 0x74, 0x47, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x8d, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x47, 0x50, 0x12, 0x37, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x47,
	0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x47,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x47, 0x50, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x47, 0x50,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x69, 0x74, 0x65, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x74, 0x65, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x47, 0x50, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x72, 0x69, 0x65, 0x72, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x72, 0x69, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x73, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x47, 0x50,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x72, 0x69, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69,
	0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x50, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x50,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x50,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x84, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x50,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47,
	0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x93, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x47, 0x50, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d,
	0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x47, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x81, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x47,
	0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x47, 0x50, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x47, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x47, 0x50, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x47,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x47, 0x50, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x47, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x47, 0x50, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x47, 0x50, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x47, 0x50, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x47, 0x50, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x47, 0x50, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x47, 0x50,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x75, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x47, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x50,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9a, 0x01, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x50,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55,
	0x6f, 0x6d, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x6f, 0x6d, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6f,
	0x6d, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x55, 0x6f, 0x6d, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6f, 0x6d, 0x47, 0x50, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6f, 0x6d, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x50, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x47, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x50,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x50, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x88, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x65, 0x72, 0x72,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x36, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x65, 0x72,
	0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x50, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x50, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x47,
	0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72,
	0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x47, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72,
	0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72,
	0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x50, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x8d, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x50, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x91, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x50, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x88, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x47, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x47, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x69, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x21, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x50,
	0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x69, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48,
	0x65, 0x6c, 0x70, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x65, 0x6c, 0x70,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x3a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x44,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x6d, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x79, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x76, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x46, 0x72, 0x61, 0x67, 0x69, 0x6c, 0x65, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x72, 0x61, 0x67, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x72, 0x61, 0x67, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x53, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x49, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x49,
	0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x53, 0x69, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x73, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x61, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x55, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6f, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x6f, 0x6d, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x6f, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6f, 0x6d, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x50,
	0x41, 0x6c, 0x6c, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x50, 0x42, 0x79, 0x49, 0x44, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x72, 0x69, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x73, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x72, 0x69, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65,
	0x72, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7d, 0x0a, 0x1a, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72,
	0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65,
	0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x69, 0x65, 0x72, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x72, 0x69, 0x65, 0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x88, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x57, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x57, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x72, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x57, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x57, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6d, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x12, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x73, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x47, 0x50, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x50, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x47, 0x50, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x56, 0x61, 0x12, 0x2a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x56, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x56, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x8e, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x36,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72,
	0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x70, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x49, 0x6e, 0x49, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x49, 0x6e, 0x49, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x64, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6e, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x61, 0x6e, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x46, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65,
	0x65, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x47, 0x50, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65,
	0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x94, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9a, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x50, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x88, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x14,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x47, 0x50, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01,
	0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x50,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x50, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x47,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x47,
	0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x50,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7f, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x12, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x30, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47,
	0x50, 0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a,
	0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x37, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x30,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x47, 0x50, 0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x47, 0x50, 0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x97, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x50, 0x12, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x1c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x12, 0x39, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x50, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x50,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x50, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x50,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x50,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x8b, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x88, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x50, 0x12, 0x34, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x47, 0x50, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x47, 0x50, 0x12, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x47, 0x50, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x73, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x73, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x47, 0x50, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x47, 0x50, 0x12, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x50, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x47, 0x50,
	0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x50,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x50, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47,
	0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x88, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x47, 0x50, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x91, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x6e, 0x6f, 0x6e, 0x50, 0x42, 0x44, 0x12, 0x37,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x6e, 0x6f, 0x6e, 0x50, 0x42, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x50, 0x6e, 0x6f, 0x6e, 0x50, 0x42, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x12, 0x2f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4d, 0x6f,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x4d,
	0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x33,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x50, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x50, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x79, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x61, 0x73, 0x68, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x73, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x73, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x47, 0x50, 0x12, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x47, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x47, 0x50, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x47, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x5b, 0x5a, 0x53, 0x67, 0x69, 0x74, 0x2e, 0x65, 0x64,
	0x65, 0x6e, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x69, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x33, 0x2f, 0x65, 0x72, 0x70, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x65, 0x72, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xa2, 0x02, 0x03,
	0x45, 0x4f, 0x50, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_bridge_service_bridge_service_proto_rawDescOnce sync.Once
	file_proto_bridge_service_bridge_service_proto_rawDescData = file_proto_bridge_service_bridge_service_proto_rawDesc
)

func file_proto_bridge_service_bridge_service_proto_rawDescGZIP() []byte {
	file_proto_bridge_service_bridge_service_proto_rawDescOnce.Do(func() {
		file_proto_bridge_service_bridge_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_bridge_service_bridge_service_proto_rawDescData)
	})
	return file_proto_bridge_service_bridge_service_proto_rawDescData
}

var file_proto_bridge_service_bridge_service_proto_msgTypes = make([]protoimpl.MessageInfo, 546)
var file_proto_bridge_service_bridge_service_proto_goTypes = []interface{}{
	(*Address)(nil),                                          // 0: proto.bridge_service.Address
	(*AdmDivision)(nil),                                      // 1: proto.bridge_service.AdmDivision
	(*AdmDivisionGP)(nil),                                    // 2: proto.bridge_service.AdmDivisionGP
	(*Archetype)(nil),                                        // 3: proto.bridge_service.Archetype
	(*CustomerType)(nil),                                     // 4: proto.bridge_service.CustomerType
	(*Class)(nil),                                            // 5: proto.bridge_service.Class
	(*OrderType)(nil),                                        // 6: proto.bridge_service.OrderType
	(*SalesPaymentTerm)(nil),                                 // 7: proto.bridge_service.SalesPaymentTerm
	(*Item)(nil),                                             // 8: proto.bridge_service.Item
	(*ItemGP)(nil),                                           // 9: proto.bridge_service.ItemGP
	(*ItemMasterComplexGP)(nil),                              // 10: proto.bridge_service.ItemMasterComplexGP
	(*Region)(nil),                                           // 11: proto.bridge_service.Region
	(*Salesperson)(nil),                                      // 12: proto.bridge_service.Salesperson
	(*Site)(nil),                                             // 13: proto.bridge_service.Site
	(*SiteGP)(nil),                                           // 14: proto.bridge_service.SiteGP
	(*SubDistrict)(nil),                                      // 15: proto.bridge_service.SubDistrict
	(*Territory)(nil),                                        // 16: proto.bridge_service.Territory
	(*Uom)(nil),                                              // 17: proto.bridge_service.Uom
	(*SalesOrder)(nil),                                       // 18: proto.bridge_service.SalesOrder
	(*SalesOrderItem)(nil),                                   // 19: proto.bridge_service.SalesOrderItem
	(*TransactionListGP)(nil),                                // 20: proto.bridge_service.TransactionListGP
	(*TransactionDetailGP)(nil),                              // 21: proto.bridge_service.TransactionDetailGP
	(*Wrt)(nil),                                              // 22: proto.bridge_service.Wrt
	(*Courier)(nil),                                          // 23: proto.bridge_service.Courier
	(*CourierGP)(nil),                                        // 24: proto.bridge_service.CourierGP
	(*CourierVendor)(nil),                                    // 25: proto.bridge_service.CourierVendor
	(*CourierVendorGP)(nil),                                  // 26: proto.bridge_service.CourierVendorGP
	(*VehicleProfile)(nil),                                   // 27: proto.bridge_service.VehicleProfile
	(*VehicleProfileGP)(nil),                                 // 28: proto.bridge_service.VehicleProfileGP
	(*Vendor)(nil),                                           // 29: proto.bridge_service.Vendor
	(*VendorOrganization)(nil),                               // 30: proto.bridge_service.VendorOrganization
	(*VendorClassification)(nil),                             // 31: proto.bridge_service.VendorClassification
	(*PurchasePlan)(nil),                                     // 32: proto.bridge_service.PurchasePlan
	(*PurchasePlanItem)(nil),                                 // 33: proto.bridge_service.PurchasePlanItem
	(*PurchaseOrder)(nil),                                    // 34: proto.bridge_service.PurchaseOrder
	(*PurchaseOrderItem)(nil),                                // 35: proto.bridge_service.PurchaseOrderItem
	(*GetAddressListRequest)(nil),                            // 36: proto.bridge_service.GetAddressListRequest
	(*GetAddressListResponse)(nil),                           // 37: proto.bridge_service.GetAddressListResponse
	(*GetAddressDetailRequest)(nil),                          // 38: proto.bridge_service.GetAddressDetailRequest
	(*GetAddressDetailResponse)(nil),                         // 39: proto.bridge_service.GetAddressDetailResponse
	(*GetAdmDivisionListRequest)(nil),                        // 40: proto.bridge_service.GetAdmDivisionListRequest
	(*GetAdmDivisionListResponse)(nil),                       // 41: proto.bridge_service.GetAdmDivisionListResponse
	(*GetAdmDivisionDetailRequest)(nil),                      // 42: proto.bridge_service.GetAdmDivisionDetailRequest
	(*GetAdmDivisionDetailResponse)(nil),                     // 43: proto.bridge_service.GetAdmDivisionDetailResponse
	(*GetAdmDivisionGPListRequest)(nil),                      // 44: proto.bridge_service.GetAdmDivisionGPListRequest
	(*GetAdmDivisionGPDetailRequest)(nil),                    // 45: proto.bridge_service.GetAdmDivisionGPDetailRequest
	(*GetAdmDivisionGPResponse)(nil),                         // 46: proto.bridge_service.GetAdmDivisionGPResponse
	(*GetArchetypeListRequest)(nil),                          // 47: proto.bridge_service.GetArchetypeListRequest
	(*GetArchetypeListResponse)(nil),                         // 48: proto.bridge_service.GetArchetypeListResponse
	(*GetArchetypeDetailRequest)(nil),                        // 49: proto.bridge_service.GetArchetypeDetailRequest
	(*GetArchetypeDetailResponse)(nil),                       // 50: proto.bridge_service.GetArchetypeDetailResponse
	(*GetCustomerTypeListRequest)(nil),                       // 51: proto.bridge_service.GetCustomerTypeListRequest
	(*GetCustomerTypeListResponse)(nil),                      // 52: proto.bridge_service.GetCustomerTypeListResponse
	(*GetCustomerTypeDetailRequest)(nil),                     // 53: proto.bridge_service.GetCustomerTypeDetailRequest
	(*GetCustomerTypeDetailResponse)(nil),                    // 54: proto.bridge_service.GetCustomerTypeDetailResponse
	(*UpdateCustomerRequest)(nil),                            // 55: proto.bridge_service.UpdateCustomerRequest
	(*UpdateCustomerResponse)(nil),                           // 56: proto.bridge_service.UpdateCustomerResponse
	(*GetClassListRequest)(nil),                              // 57: proto.bridge_service.GetClassListRequest
	(*GetClassListResponse)(nil),                             // 58: proto.bridge_service.GetClassListResponse
	(*GetClassDetailRequest)(nil),                            // 59: proto.bridge_service.GetClassDetailRequest
	(*GetClassDetailResponse)(nil),                           // 60: proto.bridge_service.GetClassDetailResponse
	(*GetItemListRequest)(nil),                               // 61: proto.bridge_service.GetItemListRequest
	(*GetItemListResponse)(nil),                              // 62: proto.bridge_service.GetItemListResponse
	(*GetItemDetailRequest)(nil),                             // 63: proto.bridge_service.GetItemDetailRequest
	(*GetItemDetailResponse)(nil),                            // 64: proto.bridge_service.GetItemDetailResponse
	(*GetItemGPListRequest)(nil),                             // 65: proto.bridge_service.GetItemGPListRequest
	(*GetItemMasterComplexGPListRequest)(nil),                // 66: proto.bridge_service.GetItemMasterComplexGPListRequest
	(*GetItemGPDetailRequest)(nil),                           // 67: proto.bridge_service.GetItemGPDetailRequest
	(*GetItemGPResponse)(nil),                                // 68: proto.bridge_service.GetItemGPResponse
	(*GetItemMasterComplexGPListResponse)(nil),               // 69: proto.bridge_service.GetItemMasterComplexGPListResponse
	(*UpdateItemPackableRequest)(nil),                        // 70: proto.bridge_service.UpdateItemPackableRequest
	(*UpdateItemPackableResponse)(nil),                       // 71: proto.bridge_service.UpdateItemPackableResponse
	(*UpdateItemFragileRequest)(nil),                         // 72: proto.bridge_service.UpdateItemFragileRequest
	(*UpdateItemFragileResponse)(nil),                        // 73: proto.bridge_service.UpdateItemFragileResponse
	(*GetRegionListRequest)(nil),                             // 74: proto.bridge_service.GetRegionListRequest
	(*GetRegionListResponse)(nil),                            // 75: proto.bridge_service.GetRegionListResponse
	(*GetRegionDetailRequest)(nil),                           // 76: proto.bridge_service.GetRegionDetailRequest
	(*GetRegionDetailResponse)(nil),                          // 77: proto.bridge_service.GetRegionDetailResponse
	(*GetSalespersonListRequest)(nil),                        // 78: proto.bridge_service.GetSalespersonListRequest
	(*GetSalespersonListResponse)(nil),                       // 79: proto.bridge_service.GetSalespersonListResponse
	(*GetSalespersonDetailRequest)(nil),                      // 80: proto.bridge_service.GetSalespersonDetailRequest
	(*GetSalespersonDetailResponse)(nil),                     // 81: proto.bridge_service.GetSalespersonDetailResponse
	(*GetSiteListRequest)(nil),                               // 82: proto.bridge_service.GetSiteListRequest
	(*GetSiteInIdsListRequest)(nil),                          // 83: proto.bridge_service.GetSiteInIdsListRequest
	(*GetSiteListResponse)(nil),                              // 84: proto.bridge_service.GetSiteListResponse
	(*GetSiteDetailRequest)(nil),                             // 85: proto.bridge_service.GetSiteDetailRequest
	(*GetSiteDetailResponse)(nil),                            // 86: proto.bridge_service.GetSiteDetailResponse
	(*GetSiteGPListRequest)(nil),                             // 87: proto.bridge_service.GetSiteGPListRequest
	(*GetSiteGPDetailRequest)(nil),                           // 88: proto.bridge_service.GetSiteGPDetailRequest
	(*GetSiteGPResponse)(nil),                                // 89: proto.bridge_service.GetSiteGPResponse
	(*GetSubDistrictListRequest)(nil),                        // 90: proto.bridge_service.GetSubDistrictListRequest
	(*GetSubDistrictListResponse)(nil),                       // 91: proto.bridge_service.GetSubDistrictListResponse
	(*GetSubDistrictDetailRequest)(nil),                      // 92: proto.bridge_service.GetSubDistrictDetailRequest
	(*GetSubDistrictDetailResponse)(nil),                     // 93: proto.bridge_service.GetSubDistrictDetailResponse
	(*GetTerritoryListRequest)(nil),                          // 94: proto.bridge_service.GetTerritoryListRequest
	(*GetTerritoryListResponse)(nil),                         // 95: proto.bridge_service.GetTerritoryListResponse
	(*GetTerritoryDetailRequest)(nil),                        // 96: proto.bridge_service.GetTerritoryDetailRequest
	(*GetTerritoryDetailResponse)(nil),                       // 97: proto.bridge_service.GetTerritoryDetailResponse
	(*GetUomListRequest)(nil),                                // 98: proto.bridge_service.GetUomListRequest
	(*GetUomListResponse)(nil),                               // 99: proto.bridge_service.GetUomListResponse
	(*GetUomDetailRequest)(nil),                              // 100: proto.bridge_service.GetUomDetailRequest
	(*GetUomDetailResponse)(nil),                             // 101: proto.bridge_service.GetUomDetailResponse
	(*GetSalesOrderListRequest)(nil),                         // 102: proto.bridge_service.GetSalesOrderListRequest
	(*GetSalesOrderListResponse)(nil),                        // 103: proto.bridge_service.GetSalesOrderListResponse
	(*GetSalesOrderDetailRequest)(nil),                       // 104: proto.bridge_service.GetSalesOrderDetailRequest
	(*GetSalesOrderDetailResponse)(nil),                      // 105: proto.bridge_service.GetSalesOrderDetailResponse
	(*CreateSalesOrderRequest)(nil),                          // 106: proto.bridge_service.CreateSalesOrderRequest
	(*CreateSalesOrderResponse)(nil),                         // 107: proto.bridge_service.CreateSalesOrderResponse
	(*GetCourierListRequest)(nil),                            // 108: proto.bridge_service.GetCourierListRequest
	(*GetCourierListResponse)(nil),                           // 109: proto.bridge_service.GetCourierListResponse
	(*GetCourierDetailRequest)(nil),                          // 110: proto.bridge_service.GetCourierDetailRequest
	(*GetCourierDetailResponse)(nil),                         // 111: proto.bridge_service.GetCourierDetailResponse
	(*GetCourierGPListRequest)(nil),                          // 112: proto.bridge_service.GetCourierGPListRequest
	(*GetCourierGPDetailRequest)(nil),                        // 113: proto.bridge_service.GetCourierGPDetailRequest
	(*GetCourierGPResponse)(nil),                             // 114: proto.bridge_service.GetCourierGPResponse
	(*GetSalesOrderItemListRequest)(nil),                     // 115: proto.bridge_service.GetSalesOrderItemListRequest
	(*GetSalesOrderItemListResponse)(nil),                    // 116: proto.bridge_service.GetSalesOrderItemListResponse
	(*GetSalesOrderItemDetailRequest)(nil),                   // 117: proto.bridge_service.GetSalesOrderItemDetailRequest
	(*GetSalesOrderItemDetailResponse)(nil),                  // 118: proto.bridge_service.GetSalesOrderItemDetailResponse
	(*GetTransactionListGPListRequest)(nil),                  // 119: proto.bridge_service.GetTransactionListGPListRequest
	(*GetTransactionListGPDetailRequest)(nil),                // 120: proto.bridge_service.GetTransactionListGPDetailRequest
	(*GetTransactionListGPResponse)(nil),                     // 121: proto.bridge_service.GetTransactionListGPResponse
	(*GetTransactionDetailGPListRequest)(nil),                // 122: proto.bridge_service.GetTransactionDetailGPListRequest
	(*GetTransactionDetailGPDetailRequest)(nil),              // 123: proto.bridge_service.GetTransactionDetailGPDetailRequest
	(*GetTransactionDetailGPResponse)(nil),                   // 124: proto.bridge_service.GetTransactionDetailGPResponse
	(*GetCourierVendorListRequest)(nil),                      // 125: proto.bridge_service.GetCourierVendorListRequest
	(*GetCourierVendorListResponse)(nil),                     // 126: proto.bridge_service.GetCourierVendorListResponse
	(*GetCourierVendorDetailRequest)(nil),                    // 127: proto.bridge_service.GetCourierVendorDetailRequest
	(*GetCourierVendorDetailResponse)(nil),                   // 128: proto.bridge_service.GetCourierVendorDetailResponse
	(*GetCourierVendorGPListRequest)(nil),                    // 129: proto.bridge_service.GetCourierVendorGPListRequest
	(*GetCourierVendorGPDetailRequest)(nil),                  // 130: proto.bridge_service.GetCourierVendorGPDetailRequest
	(*GetCourierVendorGPResponse)(nil),                       // 131: proto.bridge_service.GetCourierVendorGPResponse
	(*GetWrtListRequest)(nil),                                // 132: proto.bridge_service.GetWrtListRequest
	(*GetWrtListResponse)(nil),                               // 133: proto.bridge_service.GetWrtListResponse
	(*Customer)(nil),                                         // 134: proto.bridge_service.Customer
	(*GetCustomerListRequest)(nil),                           // 135: proto.bridge_service.GetCustomerListRequest
	(*GetVehicleProfileListRequest)(nil),                     // 136: proto.bridge_service.GetVehicleProfileListRequest
	(*GetVehicleProfileListResponse)(nil),                    // 137: proto.bridge_service.GetVehicleProfileListResponse
	(*GetVehicleProfileDetailRequest)(nil),                   // 138: proto.bridge_service.GetVehicleProfileDetailRequest
	(*GetVehicleProfileDetailResponse)(nil),                  // 139: proto.bridge_service.GetVehicleProfileDetailResponse
	(*GetVehicleProfileGPListRequest)(nil),                   // 140: proto.bridge_service.GetVehicleProfileGPListRequest
	(*GetVehicleProfileGPDetailRequest)(nil),                 // 141: proto.bridge_service.GetVehicleProfileGPDetailRequest
	(*GetVehicleProfileGPResponse)(nil),                      // 142: proto.bridge_service.GetVehicleProfileGPResponse
	(*GetCustomerListResponse)(nil),                          // 143: proto.bridge_service.GetCustomerListResponse
	(*GetCustomerDetailRequest)(nil),                         // 144: proto.bridge_service.GetCustomerDetailRequest
	(*GetCustomerDetailResponse)(nil),                        // 145: proto.bridge_service.GetCustomerDetailResponse
	(*GetWrtDetailRequest)(nil),                              // 146: proto.bridge_service.GetWrtDetailRequest
	(*GetWrtDetailResponse)(nil),                             // 147: proto.bridge_service.GetWrtDetailResponse
	(*GetOrderTypeListRequest)(nil),                          // 148: proto.bridge_service.GetOrderTypeListRequest
	(*GetOrderTypeListResponse)(nil),                         // 149: proto.bridge_service.GetOrderTypeListResponse
	(*GetOrderTypeDetailRequest)(nil),                        // 150: proto.bridge_service.GetOrderTypeDetailRequest
	(*GetOrderTypeDetailResponse)(nil),                       // 151: proto.bridge_service.GetOrderTypeDetailResponse
	(*GetSalesPaymentTermListRequest)(nil),                   // 152: proto.bridge_service.GetSalesPaymentTermListRequest
	(*GetSalesPaymentTermListResponse)(nil),                  // 153: proto.bridge_service.GetSalesPaymentTermListResponse
	(*GetSalesPaymentTermDetailRequest)(nil),                 // 154: proto.bridge_service.GetSalesPaymentTermDetailRequest
	(*GetSalesPaymentTermDetailResponse)(nil),                // 155: proto.bridge_service.GetSalesPaymentTermDetailResponse
	(*EmergencyCourierRequest)(nil),                          // 156: proto.bridge_service.EmergencyCourierRequest
	(*EmergencyCourierResponse)(nil),                         // 157: proto.bridge_service.EmergencyCourierResponse
	(*Division)(nil),                                         // 158: proto.bridge_service.Division
	(*GetDivisionListRequest)(nil),                           // 159: proto.bridge_service.GetDivisionListRequest
	(*GetDivisionListResponse)(nil),                          // 160: proto.bridge_service.GetDivisionListResponse
	(*GetDivisionDetailRequest)(nil),                         // 161: proto.bridge_service.GetDivisionDetailRequest
	(*GetDivisionDetailResponse)(nil),                        // 162: proto.bridge_service.GetDivisionDetailResponse
	(*GetAddressListWithExcludedIdsRequest)(nil),             // 163: proto.bridge_service.GetAddressListWithExcludedIdsRequest
	(*District)(nil),                                         // 164: proto.bridge_service.District
	(*GetDistrictListRequest)(nil),                           // 165: proto.bridge_service.GetDistrictListRequest
	(*GetDistrictListResponse)(nil),                          // 166: proto.bridge_service.GetDistrictListResponse
	(*GetDistrictDetailRequest)(nil),                         // 167: proto.bridge_service.GetDistrictDetailRequest
	(*GetDistrictDetailResponse)(nil),                        // 168: proto.bridge_service.GetDistrictDetailResponse
	(*GetDistrictInIdsListRequest)(nil),                      // 169: proto.bridge_service.GetDistrictInIdsListRequest
	(*Bank)(nil),                                             // 170: proto.bridge_service.Bank
	(*GetBankListRequest)(nil),                               // 171: proto.bridge_service.GetBankListRequest
	(*GetBankListResponse)(nil),                              // 172: proto.bridge_service.GetBankListResponse
	(*GetBankDetailRequest)(nil),                             // 173: proto.bridge_service.GetBankDetailRequest
	(*GetBankDetailResponse)(nil),                            // 174: proto.bridge_service.GetBankDetailResponse
	(*DeliveryFee)(nil),                                      // 175: proto.bridge_service.DeliveryFee
	(*GetDeliveryFeeListRequest)(nil),                        // 176: proto.bridge_service.GetDeliveryFeeListRequest
	(*GetDeliveryFeeListResponse)(nil),                       // 177: proto.bridge_service.GetDeliveryFeeListResponse
	(*DeliveryFeeGP)(nil),                                    // 178: proto.bridge_service.DeliveryFeeGP
	(*GetDeliveryFeeGPListRequest)(nil),                      // 179: proto.bridge_service.GetDeliveryFeeGPListRequest
	(*GetDeliveryFeeGPListResponse)(nil),                     // 180: proto.bridge_service.GetDeliveryFeeGPListResponse
	(*GetDeliveryFeeDetailRequest)(nil),                      // 181: proto.bridge_service.GetDeliveryFeeDetailRequest
	(*GetDeliveryFeeDetailResponse)(nil),                     // 182: proto.bridge_service.GetDeliveryFeeDetailResponse
	(*GetVendorListRequest)(nil),                             // 183: proto.bridge_service.GetVendorListRequest
	(*GetVendorListResponse)(nil),                            // 184: proto.bridge_service.GetVendorListResponse
	(*GetVendorDetailRequest)(nil),                           // 185: proto.bridge_service.GetVendorDetailRequest
	(*GetVendorDetailResponse)(nil),                          // 186: proto.bridge_service.GetVendorDetailResponse
	(*GetVendorOrganizationListRequest)(nil),                 // 187: proto.bridge_service.GetVendorOrganizationListRequest
	(*GetVendorOrganizationListResponse)(nil),                // 188: proto.bridge_service.GetVendorOrganizationListResponse
	(*GetVendorOrganizationDetailRequest)(nil),               // 189: proto.bridge_service.GetVendorOrganizationDetailRequest
	(*GetVendorOrganizationDetailResponse)(nil),              // 190: proto.bridge_service.GetVendorOrganizationDetailResponse
	(*GetVendorClassificationListRequest)(nil),               // 191: proto.bridge_service.GetVendorClassificationListRequest
	(*GetVendorClassificationListResponse)(nil),              // 192: proto.bridge_service.GetVendorClassificationListResponse
	(*GetVendorClassificationDetailRequest)(nil),             // 193: proto.bridge_service.GetVendorClassificationDetailRequest
	(*GetVendorClassificationDetailResponse)(nil),            // 194: proto.bridge_service.GetVendorClassificationDetailResponse
	(*GetPurchasePlanListRequest)(nil),                       // 195: proto.bridge_service.GetPurchasePlanListRequest
	(*GetPurchasePlanListResponse)(nil),                      // 196: proto.bridge_service.GetPurchasePlanListResponse
	(*GetPurchasePlanDetailRequest)(nil),                     // 197: proto.bridge_service.GetPurchasePlanDetailRequest
	(*GetPurchasePlanDetailResponse)(nil),                    // 198: proto.bridge_service.GetPurchasePlanDetailResponse
	(*GetPurchasePlanItemListRequest)(nil),                   // 199: proto.bridge_service.GetPurchasePlanItemListRequest
	(*GetPurchasePlanItemListResponse)(nil),                  // 200: proto.bridge_service.GetPurchasePlanItemListResponse
	(*GetPurchasePlanItemDetailRequest)(nil),                 // 201: proto.bridge_service.GetPurchasePlanItemDetailRequest
	(*GetPurchasePlanItemDetailResponse)(nil),                // 202: proto.bridge_service.GetPurchasePlanItemDetailResponse
	(*GetPurchaseOrderListRequest)(nil),                      // 203: proto.bridge_service.GetPurchaseOrderListRequest
	(*GetPurchaseOrderListResponse)(nil),                     // 204: proto.bridge_service.GetPurchaseOrderListResponse
	(*GetPurchaseOrderDetailRequest)(nil),                    // 205: proto.bridge_service.GetPurchaseOrderDetailRequest
	(*GetPurchaseOrderDetailResponse)(nil),                   // 206: proto.bridge_service.GetPurchaseOrderDetailResponse
	(*GetPurchaseOrderItemListRequest)(nil),                  // 207: proto.bridge_service.GetPurchaseOrderItemListRequest
	(*GetPurchaseOrderItemListResponse)(nil),                 // 208: proto.bridge_service.GetPurchaseOrderItemListResponse
	(*GetPurchaseOrderItemDetailRequest)(nil),                // 209: proto.bridge_service.GetPurchaseOrderItemDetailRequest
	(*GetPurchaseOrderItemDetailResponse)(nil),               // 210: proto.bridge_service.GetPurchaseOrderItemDetailResponse
	(*AdmDivisionCoverageGP)(nil),                            // 211: proto.bridge_service.AdmDivisionCoverageGP
	(*GetAdmDivisionCoverageGPListRequest)(nil),              // 212: proto.bridge_service.GetAdmDivisionCoverageGPListRequest
	(*GetAdmDivisionCoverageGPDetailRequest)(nil),            // 213: proto.bridge_service.GetAdmDivisionCoverageGPDetailRequest
	(*GetAdmDivisionCoverageGPResponse)(nil),                 // 214: proto.bridge_service.GetAdmDivisionCoverageGPResponse
	(*CreatePurchaseOrderRequest)(nil),                       // 215: proto.bridge_service.CreatePurchaseOrderRequest
	(*CreatePurchaseOrderItemRequest)(nil),                   // 216: proto.bridge_service.CreatePurchaseOrderItemRequest
	(*CreatePurchaseOrderGPResponse)(nil),                    // 217: proto.bridge_service.CreatePurchaseOrderGPResponse
	(*PickingList)(nil),                                      // 218: proto.bridge_service.PickingList
	(*PickingOrder)(nil),                                     // 219: proto.bridge_service.PickingOrder
	(*PickingOrderDetail)(nil),                               // 220: proto.bridge_service.PickingOrderDetail
	(*PickingOrderGPHeader)(nil),                             // 221: proto.bridge_service.PickingOrderGPHeader
	(*PickingOrderGPDetail)(nil),                             // 222: proto.bridge_service.PickingOrderGPDetail
	(*PickingOrderGPProduct)(nil),                            // 223: proto.bridge_service.PickingOrderGPProduct
	(*GetPickingOrderGPHeaderRequest)(nil),                   // 224: proto.bridge_service.GetPickingOrderGPHeaderRequest
	(*GetPickingOrderGPHeaderResponse)(nil),                  // 225: proto.bridge_service.GetPickingOrderGPHeaderResponse
	(*GetPickingOrderGPDetailRequest)(nil),                   // 226: proto.bridge_service.GetPickingOrderGPDetailRequest
	(*GetPickingOrderGPDetailResponse)(nil),                  // 227: proto.bridge_service.GetPickingOrderGPDetailResponse
	(*PickingDetails)(nil),                                   // 228: proto.bridge_service.PickingDetails
	(*Picking)(nil),                                          // 229: proto.bridge_service.Picking
	(*CheckingDetails)(nil),                                  // 230: proto.bridge_service.CheckingDetails
	(*Checking)(nil),                                         // 231: proto.bridge_service.Checking
	(*SubmitPickingCheckingRequest)(nil),                     // 232: proto.bridge_service.SubmitPickingCheckingRequest
	(*SubmitPickingCheckingResponse)(nil),                    // 233: proto.bridge_service.SubmitPickingCheckingResponse
	(*LoginHelperRequest)(nil),                               // 234: proto.bridge_service.LoginHelperRequest
	(*LoginHelperResponse)(nil),                              // 235: proto.bridge_service.LoginHelperResponse
	(*CommitPurchaseOrderRequest)(nil),                       // 236: proto.bridge_service.CommitPurchaseOrderRequest
	(*CancelPurchaseOrderRequest)(nil),                       // 237: proto.bridge_service.CancelPurchaseOrderRequest
	(*WrtGP)(nil),                                            // 238: proto.bridge_service.WrtGP
	(*GetWrtGPResponse)(nil),                                 // 239: proto.bridge_service.GetWrtGPResponse
	(*GetWrtGPListRequest)(nil),                              // 240: proto.bridge_service.GetWrtGPListRequest
	(*GetWrtGPDetailRequest)(nil),                            // 241: proto.bridge_service.GetWrtGPDetailRequest
	(*UpdatePurchaseOrderRequest)(nil),                       // 242: proto.bridge_service.UpdatePurchaseOrderRequest
	(*UpdateProductPurchaseOrderRequest)(nil),                // 243: proto.bridge_service.UpdateProductPurchaseOrderRequest
	(*UpdatePurchaseOrderItemRequest)(nil),                   // 244: proto.bridge_service.UpdatePurchaseOrderItemRequest
	(*ItemTransfer)(nil),                                     // 245: proto.bridge_service.ItemTransfer
	(*ItemTransferItem)(nil),                                 // 246: proto.bridge_service.ItemTransferItem
	(*GetItemTransferListRequest)(nil),                       // 247: proto.bridge_service.GetItemTransferListRequest
	(*GetItemTransferListResponse)(nil),                      // 248: proto.bridge_service.GetItemTransferListResponse
	(*GetItemTransferDetailRequest)(nil),                     // 249: proto.bridge_service.GetItemTransferDetailRequest
	(*GetItemTransferDetailResponse)(nil),                    // 250: proto.bridge_service.GetItemTransferDetailResponse
	(*SalesInvoice)(nil),                                     // 251: proto.bridge_service.SalesInvoice
	(*GetSalesInvoiceDetailRequest)(nil),                     // 252: proto.bridge_service.GetSalesInvoiceDetailRequest
	(*GetSalesInvoiceDetailResponse)(nil),                    // 253: proto.bridge_service.GetSalesInvoiceDetailResponse
	(*SalesPayment)(nil),                                     // 254: proto.bridge_service.SalesPayment
	(*GetSalesPaymentListRequest)(nil),                       // 255: proto.bridge_service.GetSalesPaymentListRequest
	(*GetSalesPaymentListResponse)(nil),                      // 256: proto.bridge_service.GetSalesPaymentListResponse
	(*GetSalesPaymentDetailRequest)(nil),                     // 257: proto.bridge_service.GetSalesPaymentDetailRequest
	(*GetSalesPaymentDetailResponse)(nil),                    // 258: proto.bridge_service.GetSalesPaymentDetailResponse
	(*SalesInvoiceItem)(nil),                                 // 259: proto.bridge_service.SalesInvoiceItem
	(*GetSalesInvoiceItemListRequest)(nil),                   // 260: proto.bridge_service.GetSalesInvoiceItemListRequest
	(*GetSalesInvoiceItemListResponse)(nil),                  // 261: proto.bridge_service.GetSalesInvoiceItemListResponse
	(*DeliveryOrder)(nil),                                    // 262: proto.bridge_service.DeliveryOrder
	(*GetDeliveryOrderListRequest)(nil),                      // 263: proto.bridge_service.GetDeliveryOrderListRequest
	(*GetDeliveryOrderListResponse)(nil),                     // 264: proto.bridge_service.GetDeliveryOrderListResponse
	(*DeliveryOrderGP)(nil),                                  // 265: proto.bridge_service.DeliveryOrderGP
	(*ItemDetail)(nil),                                       // 266: proto.bridge_service.ItemDetail
	(*DocumentAttachment)(nil),                               // 267: proto.bridge_service.DocumentAttachment
	(*GetDeliveryOrderGPListRequest)(nil),                    // 268: proto.bridge_service.GetDeliveryOrderGPListRequest
	(*GetDeliveryOrderGPListResponse)(nil),                   // 269: proto.bridge_service.GetDeliveryOrderGPListResponse
	(*GetDeliveryOrderDetailRequest)(nil),                    // 270: proto.bridge_service.GetDeliveryOrderDetailRequest
	(*GetDeliveryOrderDetailResponse)(nil),                   // 271: proto.bridge_service.GetDeliveryOrderDetailResponse
	(*DetailOrder)(nil),                                      // 272: proto.bridge_service.DetailOrder
	(*DetailItem)(nil),                                       // 273: proto.bridge_service.DetailItem
	(*CreateDeliveryOrderRequest)(nil),                       // 274: proto.bridge_service.CreateDeliveryOrderRequest
	(*CreateDeliveryOrderResponse)(nil),                      // 275: proto.bridge_service.CreateDeliveryOrderResponse
	(*PaymentMethodGP)(nil),                                  // 276: proto.bridge_service.PaymentMethodGP
	(*GetPaymentMethodGPListRequest)(nil),                    // 277: proto.bridge_service.GetPaymentMethodGPListRequest
	(*GetPaymentMethodGPDetailRequest)(nil),                  // 278: proto.bridge_service.GetPaymentMethodGPDetailRequest
	(*GetPaymentMethodGPResponse)(nil),                       // 279: proto.bridge_service.GetPaymentMethodGPResponse
	(*PaymentTermGP)(nil),                                    // 280: proto.bridge_service.PaymentTermGP
	(*SalesPersonGP)(nil),                                    // 281: proto.bridge_service.SalesPersonGP
	(*CustomerTypeGP)(nil),                                   // 282: proto.bridge_service.CustomerTypeGP
	(*ArchetypeGP)(nil),                                      // 283: proto.bridge_service.ArchetypeGP
	(*OrderTypeGP)(nil),                                      // 284: proto.bridge_service.OrderTypeGP
	(*UomGP)(nil),                                            // 285: proto.bridge_service.UomGP
	(*ItemClassGP)(nil),                                      // 286: proto.bridge_service.ItemClassGP
	(*SalesTerritoryGP)(nil),                                 // 287: proto.bridge_service.SalesTerritoryGP
	(*AddressGP)(nil),                                        // 288: proto.bridge_service.AddressGP
	(*GetPaymentTermGPListRequest)(nil),                      // 289: proto.bridge_service.GetPaymentTermGPListRequest
	(*GetPaymentTermGPDetailRequest)(nil),                    // 290: proto.bridge_service.GetPaymentTermGPDetailRequest
	(*GetPaymentTermGPResponse)(nil),                         // 291: proto.bridge_service.GetPaymentTermGPResponse
	(*GetSalesPersonGPListRequest)(nil),                      // 292: proto.bridge_service.GetSalesPersonGPListRequest
	(*GetSalesPersonGPDetailRequest)(nil),                    // 293: proto.bridge_service.GetSalesPersonGPDetailRequest
	(*GetSalesPersonGPResponse)(nil),                         // 294: proto.bridge_service.GetSalesPersonGPResponse
	(*GetCustomerTypeGPListRequest)(nil),                     // 295: proto.bridge_service.GetCustomerTypeGPListRequest
	(*GetCustomerTypeGPDetailRequest)(nil),                   // 296: proto.bridge_service.GetCustomerTypeGPDetailRequest
	(*GetCustomerTypeGPResponse)(nil),                        // 297: proto.bridge_service.GetCustomerTypeGPResponse
	(*GetArchetypeGPListRequest)(nil),                        // 298: proto.bridge_service.GetArchetypeGPListRequest
	(*GetArchetypeGPDetailRequest)(nil),                      // 299: proto.bridge_service.GetArchetypeGPDetailRequest
	(*GetArchetypeGPResponse)(nil),                           // 300: proto.bridge_service.GetArchetypeGPResponse
	(*GetOrderTypeGPListRequest)(nil),                        // 301: proto.bridge_service.GetOrderTypeGPListRequest
	(*GetOrderTypeGPDetailRequest)(nil),                      // 302: proto.bridge_service.GetOrderTypeGPDetailRequest
	(*GetOrderTypeGPResponse)(nil),                           // 303: proto.bridge_service.GetOrderTypeGPResponse
	(*GetUomGPListRequest)(nil),                              // 304: proto.bridge_service.GetUomGPListRequest
	(*GetUomGPDetailRequest)(nil),                            // 305: proto.bridge_service.GetUomGPDetailRequest
	(*GetUomGPResponse)(nil),                                 // 306: proto.bridge_service.GetUomGPResponse
	(*GetItemClassGPListRequest)(nil),                        // 307: proto.bridge_service.GetItemClassGPListRequest
	(*GetItemClassGPDetailRequest)(nil),                      // 308: proto.bridge_service.GetItemClassGPDetailRequest
	(*GetItemClassGPResponse)(nil),                           // 309: proto.bridge_service.GetItemClassGPResponse
	(*GetSalesTerritoryGPListRequest)(nil),                   // 310: proto.bridge_service.GetSalesTerritoryGPListRequest
	(*GetSalesTerritoryGPDetailRequest)(nil),                 // 311: proto.bridge_service.GetSalesTerritoryGPDetailRequest
	(*GetSalesTerritoryGPResponse)(nil),                      // 312: proto.bridge_service.GetSalesTerritoryGPResponse
	(*GetAddressGPListRequest)(nil),                          // 313: proto.bridge_service.GetAddressGPListRequest
	(*GetAddressGPDetailRequest)(nil),                        // 314: proto.bridge_service.GetAddressGPDetailRequest
	(*GetAddressGPResponse)(nil),                             // 315: proto.bridge_service.GetAddressGPResponse
	(*CreateItemTransferRequest)(nil),                        // 316: proto.bridge_service.CreateItemTransferRequest
	(*CreateItemTransferItemRequest)(nil),                    // 317: proto.bridge_service.CreateItemTransferItemRequest
	(*UpdateItemTransferRequest)(nil),                        // 318: proto.bridge_service.UpdateItemTransferRequest
	(*UpdateItemTransferItemRequest)(nil),                    // 319: proto.bridge_service.UpdateItemTransferItemRequest
	(*GetItemTransferItemDetailRequest)(nil),                 // 320: proto.bridge_service.GetItemTransferItemDetailRequest
	(*GetItemTransferItemDetailResponse)(nil),                // 321: proto.bridge_service.GetItemTransferItemDetailResponse
	(*CommitItemTransferRequest)(nil),                        // 322: proto.bridge_service.CommitItemTransferRequest
	(*Receiving)(nil),                                        // 323: proto.bridge_service.Receiving
	(*ReceivingItem)(nil),                                    // 324: proto.bridge_service.ReceivingItem
	(*GetReceivingListRequest)(nil),                          // 325: proto.bridge_service.GetReceivingListRequest
	(*GetReceivingListResponse)(nil),                         // 326: proto.bridge_service.GetReceivingListResponse
	(*GetReceivingDetailRequest)(nil),                        // 327: proto.bridge_service.GetReceivingDetailRequest
	(*GetReceivingDetailResponse)(nil),                       // 328: proto.bridge_service.GetReceivingDetailResponse
	(*CreateReceivingRequest)(nil),                           // 329: proto.bridge_service.CreateReceivingRequest
	(*CreateReceivingItemRequest)(nil),                       // 330: proto.bridge_service.CreateReceivingItemRequest
	(*CreateAddressRequest)(nil),                             // 331: proto.bridge_service.CreateAddressRequest
	(*CreateAddressResponse)(nil),                            // 332: proto.bridge_service.CreateAddressResponse
	(*UpdateAddressRequest)(nil),                             // 333: proto.bridge_service.UpdateAddressRequest
	(*UpdateAddressResponse)(nil),                            // 334: proto.bridge_service.UpdateAddressResponse
	(*SetDefaultAddressRequest)(nil),                         // 335: proto.bridge_service.SetDefaultAddressRequest
	(*SetDefaultAddressResponse)(nil),                        // 336: proto.bridge_service.SetDefaultAddressResponse
	(*DeleteAddressRequest)(nil),                             // 337: proto.bridge_service.DeleteAddressRequest
	(*DeleteAddressResponse)(nil),                            // 338: proto.bridge_service.DeleteAddressResponse
	(*ConfirmReceivingRequest)(nil),                          // 339: proto.bridge_service.ConfirmReceivingRequest
	(*ReceivingListinDetailResponse)(nil),                    // 340: proto.bridge_service.ReceivingListinDetailResponse
	(*VendorGP)(nil),                                         // 341: proto.bridge_service.VendorGP
	(*GetVendorGPResponse)(nil),                              // 342: proto.bridge_service.GetVendorGPResponse
	(*GetVendorGPListRequest)(nil),                           // 343: proto.bridge_service.GetVendorGPListRequest
	(*GetVendorGPDetailRequest)(nil),                         // 344: proto.bridge_service.GetVendorGPDetailRequest
	(*HelperGP)(nil),                                         // 345: proto.bridge_service.HelperGP
	(*GetHelperGPListRequest)(nil),                           // 346: proto.bridge_service.GetHelperGPListRequest
	(*GetHelperGPDetailRequest)(nil),                         // 347: proto.bridge_service.GetHelperGPDetailRequest
	(*GetHelperGPResponse)(nil),                              // 348: proto.bridge_service.GetHelperGPResponse
	(*CreateVendorRequest)(nil),                              // 349: proto.bridge_service.CreateVendorRequest
	(*CreateVendorResponse)(nil),                             // 350: proto.bridge_service.CreateVendorResponse
	(*AssignPurchasePlanGPRequest)(nil),                      // 351: proto.bridge_service.AssignPurchasePlanGPRequest
	(*AssignPurchasePlanGPResponse)(nil),                     // 352: proto.bridge_service.AssignPurchasePlanGPResponse
	(*CancelPurchaseOrderGPRequest)(nil),                     // 353: proto.bridge_service.CancelPurchaseOrderGPRequest
	(*CancelPurchaseOrderGPResponse)(nil),                    // 354: proto.bridge_service.CancelPurchaseOrderGPResponse
	(*CancelAssignPurchasePlanRequest)(nil),                  // 355: proto.bridge_service.CancelAssignPurchasePlanRequest
	(*CancelAssignPurchasePlanResponse)(nil),                 // 356: proto.bridge_service.CancelAssignPurchasePlanResponse
	(*GetSalesInvoiceListRequest)(nil),                       // 357: proto.bridge_service.GetSalesInvoiceListRequest
	(*GetSalesInvoiceListResponse)(nil),                      // 358: proto.bridge_service.GetSalesInvoiceListResponse
	(*CustomerGP)(nil),                                       // 359: proto.bridge_service.CustomerGP
	(*GetCustomerGPResponse)(nil),                            // 360: proto.bridge_service.GetCustomerGPResponse
	(*GetCustomerGPListRequest)(nil),                         // 361: proto.bridge_service.GetCustomerGPListRequest
	(*GetCustomerGPDetailRequest)(nil),                       // 362: proto.bridge_service.GetCustomerGPDetailRequest
	(*CreateCustomerGPRequest)(nil),                          // 363: proto.bridge_service.CreateCustomerGPRequest
	(*CreateCustomerGPResponse)(nil),                         // 364: proto.bridge_service.CreateCustomerGPResponse
	(*CustomerAddressGP)(nil),                                // 365: proto.bridge_service.CustomerAddressGP
	(*AdministrativeDivision)(nil),                           // 366: proto.bridge_service.AdministrativeDivision
	(*CustAddrTypeShipTo)(nil),                               // 367: proto.bridge_service.CustAddrTypeShipTo
	(*CustAddrTypeBillTo)(nil),                               // 368: proto.bridge_service.CustAddrTypeBillTo
	(*CustAddrTypeStatementTo)(nil),                          // 369: proto.bridge_service.CustAddrTypeStatementTo
	(*Pymtrmid)(nil),                                         // 370: proto.bridge_service.pymtrmid
	(*SalesOrderGP)(nil),                                     // 371: proto.bridge_service.SalesOrderGP
	(*GetSalesOrderGPListRequest)(nil),                       // 372: proto.bridge_service.GetSalesOrderGPListRequest
	(*GetSalesOrderGPListResponse)(nil),                      // 373: proto.bridge_service.GetSalesOrderGPListResponse
	(*GetSalesOrderGPListByIDRequest)(nil),                   // 374: proto.bridge_service.GetSalesOrderGPListByIDRequest
	(*CustomerTypefromCustomerGP)(nil),                       // 375: proto.bridge_service.CustomerTypefromCustomerGP
	(*AdministrativeDiv)(nil),                                // 376: proto.bridge_service.AdministrativeDiv
	(*GetPurchasePlanGPListRequest)(nil),                     // 377: proto.bridge_service.GetPurchasePlanGPListRequest
	(*GetPurchasePlanGPDetailRequest)(nil),                   // 378: proto.bridge_service.GetPurchasePlanGPDetailRequest
	(*GetPurchasePlanGPResponse)(nil),                        // 379: proto.bridge_service.GetPurchasePlanGPResponse
	(*PurchasePlanGP)(nil),                                   // 380: proto.bridge_service.PurchasePlanGP
	(*VendorOrganizationPP)(nil),                             // 381: proto.bridge_service.VendorOrganizationPP
	(*SitePP)(nil),                                           // 382: proto.bridge_service.SitePP
	(*GetPurchaseOrderGPListRequest)(nil),                    // 383: proto.bridge_service.GetPurchaseOrderGPListRequest
	(*GetPurchaseOrderGPDetailRequest)(nil),                  // 384: proto.bridge_service.GetPurchaseOrderGPDetailRequest
	(*GetPurchaseOrderGPResponse)(nil),                       // 385: proto.bridge_service.GetPurchaseOrderGPResponse
	(*Poinvoice)(nil),                                        // 386: proto.bridge_service.Poinvoice
	(*PoDetail)(nil),                                         // 387: proto.bridge_service.PoDetail
	(*PurchaseOrderGP)(nil),                                  // 388: proto.bridge_service.PurchaseOrderGP
	(*GetVendorOrganizationGPListRequest)(nil),               // 389: proto.bridge_service.GetVendorOrganizationGPListRequest
	(*GetVendorOrganizationGPDetailRequest)(nil),             // 390: proto.bridge_service.GetVendorOrganizationGPDetailRequest
	(*GetVendorOrganizationGPResponse)(nil),                  // 391: proto.bridge_service.GetVendorOrganizationGPResponse
	(*VendorOrganizationGP)(nil),                             // 392: proto.bridge_service.VendorOrganizationGP
	(*GetVendorClassificationGPListRequest)(nil),             // 393: proto.bridge_service.GetVendorClassificationGPListRequest
	(*GetVendorClassificationGPDetailRequest)(nil),           // 394: proto.bridge_service.GetVendorClassificationGPDetailRequest
	(*GetVendorClassificationGPResponse)(nil),                // 395: proto.bridge_service.GetVendorClassificationGPResponse
	(*VendorClassificationGP)(nil),                           // 396: proto.bridge_service.VendorClassificationGP
	(*CreatePurchaseOrderGPRequest)(nil),                     // 397: proto.bridge_service.CreatePurchaseOrderGPRequest
	(*UpdatePurchaseOrderGPRequest)(nil),                     // 398: proto.bridge_service.UpdatePurchaseOrderGPRequest
	(*CreateConsolidatedShipmentGPRequest)(nil),              // 399: proto.bridge_service.CreateConsolidatedShipmentGPRequest
	(*CreateConsolidatedShipmentGPResponse)(nil),             // 400: proto.bridge_service.CreateConsolidatedShipmentGPResponse
	(*PurchaseOrderConsolidatedShipment)(nil),                // 401: proto.bridge_service.PurchaseOrderConsolidatedShipment
	(*UpdateConsolidatedShipmentGPRequest)(nil),              // 402: proto.bridge_service.UpdateConsolidatedShipmentGPRequest
	(*UpdateConsolidatedShipmentGPResponse)(nil),             // 403: proto.bridge_service.UpdateConsolidatedShipmentGPResponse
	(*CommonGPResponse)(nil),                                 // 404: proto.bridge_service.CommonGPResponse
	(*SalesInvoiceGP)(nil),                                   // 405: proto.bridge_service.SalesInvoiceGP
	(*GetSalesInvoiceGPListRequest)(nil),                     // 406: proto.bridge_service.GetSalesInvoiceGPListRequest
	(*GetSalesInvoiceGPListResponse)(nil),                    // 407: proto.bridge_service.GetSalesInvoiceGPListResponse
	(*GetSalesInvoiceGPDetailRequest)(nil),                   // 408: proto.bridge_service.GetSalesInvoiceGPDetailRequest
	(*GetSalesInvoiceGPDetailResponse)(nil),                  // 409: proto.bridge_service.GetSalesInvoiceGPDetailResponse
	(*GetInTransitTransferGPListRequest)(nil),                // 410: proto.bridge_service.GetInTransitTransferGPListRequest
	(*GetInTransitTransferGPDetailRequest)(nil),              // 411: proto.bridge_service.GetInTransitTransferGPDetailRequest
	(*InTransitTransferDetailGP)(nil),                        // 412: proto.bridge_service.InTransitTransferDetailGP
	(*InTransitTransferGP)(nil),                              // 413: proto.bridge_service.InTransitTransferGP
	(*TransferLocation)(nil),                                 // 414: proto.bridge_service.TransferLocation
	(*Location)(nil),                                         // 415: proto.bridge_service.Location
	(*LocationCode)(nil),                                     // 416: proto.bridge_service.LocationCode
	(*TransferType)(nil),                                     // 417: proto.bridge_service.TransferType
	(*TransferDetail)(nil),                                   // 418: proto.bridge_service.TransferDetail
	(*TrType)(nil),                                           // 419: proto.bridge_service.TrType
	(*GetInTransitTransferGPResponse)(nil),                   // 420: proto.bridge_service.GetInTransitTransferGPResponse
	(*GetTransferRequestGPListRequest)(nil),                  // 421: proto.bridge_service.GetTransferRequestGPListRequest
	(*GetTransferRequestGPDetailRequest)(nil),                // 422: proto.bridge_service.GetTransferRequestGPDetailRequest
	(*TransferRequestDetailGP)(nil),                          // 423: proto.bridge_service.TransferRequestDetailGP
	(*TransferRequestGP)(nil),                                // 424: proto.bridge_service.TransferRequestGP
	(*GoodsReceipt)(nil),                                     // 425: proto.bridge_service.GoodsReceipt
	(*InTransitTransfer)(nil),                                // 426: proto.bridge_service.InTransitTransfer
	(*SiteLocation)(nil),                                     // 427: proto.bridge_service.SiteLocation
	(*GetTransferRequestGPResponse)(nil),                     // 428: proto.bridge_service.GetTransferRequestGPResponse
	(*CreateSalesOrderGPRequest)(nil),                        // 429: proto.bridge_service.CreateSalesOrderGPRequest
	(*CreateSalesOrderGPResponse)(nil),                       // 430: proto.bridge_service.CreateSalesOrderGPResponse
	(*CashReceipt)(nil),                                      // 431: proto.bridge_service.CashReceipt
	(*GetCashReceiptListRequest)(nil),                        // 432: proto.bridge_service.GetCashReceiptListRequest
	(*GetCashReceiptListResponse)(nil),                       // 433: proto.bridge_service.GetCashReceiptListResponse
	(*CustomerClass)(nil),                                    // 434: proto.bridge_service.CustomerClass
	(*GetCustomerClassListRequest)(nil),                      // 435: proto.bridge_service.GetCustomerClassListRequest
	(*GetCustomerClassResponse)(nil),                         // 436: proto.bridge_service.GetCustomerClassResponse
	(*GetCustomerClassDetailRequest)(nil),                    // 437: proto.bridge_service.GetCustomerClassDetailRequest
	(*SalesPriceLevel)(nil),                                  // 438: proto.bridge_service.SalesPriceLevel
	(*GetSalesPriceLevelListRequest)(nil),                    // 439: proto.bridge_service.GetSalesPriceLevelListRequest
	(*GetSalesPriceLevelResponse)(nil),                       // 440: proto.bridge_service.GetSalesPriceLevelResponse
	(*GetSalesPriceLevelDetailRequest)(nil),                  // 441: proto.bridge_service.GetSalesPriceLevelDetailRequest
	(*ShippingMethod)(nil),                                   // 442: proto.bridge_service.ShippingMethod
	(*GetShippingMethodListRequest)(nil),                     // 443: proto.bridge_service.GetShippingMethodListRequest
	(*GetShippingMethodResponse)(nil),                        // 444: proto.bridge_service.GetShippingMethodResponse
	(*GetShippingMethodDetailRequest)(nil),                   // 445: proto.bridge_service.GetShippingMethodDetailRequest
	(*CreateTransferRequestGPRequest)(nil),                   // 446: proto.bridge_service.CreateTransferRequestGPRequest
	(*CreateTransferRequestGPResponse)(nil),                  // 447: proto.bridge_service.CreateTransferRequestGPResponse
	(*UpdateInTransitTransferGPResponse)(nil),                // 448: proto.bridge_service.UpdateInTransitTransferGPResponse
	(*CommitPurchaseOrderGPRequest)(nil),                     // 449: proto.bridge_service.CommitPurchaseOrderGPRequest
	(*PoList)(nil),                                           // 450: proto.bridge_service.PoList
	(*IntrxList)(nil),                                        // 451: proto.bridge_service.IntrxList
	(*GoodsReceiptGP)(nil),                                   // 452: proto.bridge_service.GoodsReceiptGP
	(*GetGoodsReceiptGPListRequest)(nil),                     // 453: proto.bridge_service.GetGoodsReceiptGPListRequest
	(*GetGoodsReceiptGPDetailRequest)(nil),                   // 454: proto.bridge_service.GetGoodsReceiptGPDetailRequest
	(*GetGoodsReceiptGPResponse)(nil),                        // 455: proto.bridge_service.GetGoodsReceiptGPResponse
	(*UpdateTransferRequestGPRequest)(nil),                   // 456: proto.bridge_service.UpdateTransferRequestGPRequest
	(*UpdateInTransitTransferGPRequest)(nil),                 // 457: proto.bridge_service.UpdateInTransitTransferGPRequest
	(*CommitTransferRequestGPRequest)(nil),                   // 458: proto.bridge_service.CommitTransferRequestGPRequest
	(*UpdateCustomerGPRequest)(nil),                          // 459: proto.bridge_service.UpdateCustomerGPRequest
	(*UpdateCustomerGPResponse)(nil),                         // 460: proto.bridge_service.UpdateCustomerGPResponse
	(*CommitTransferRequestGPResponse)(nil),                  // 461: proto.bridge_service.CommitTransferRequestGPResponse
	(*InTransit)(nil),                                        // 462: proto.bridge_service.InTransit
	(*CreateSalesInvoiceGPRequest)(nil),                      // 463: proto.bridge_service.CreateSalesInvoiceGPRequest
	(*CreateSalesInvoiceGPResponse)(nil),                     // 464: proto.bridge_service.CreateSalesInvoiceGPResponse
	(*CreateCashReceiptRequest)(nil),                         // 465: proto.bridge_service.CreateCashReceiptRequest
	(*CreateCashReceiptResponse)(nil),                        // 466: proto.bridge_service.CreateCashReceiptResponse
	(*CreateCashReceiptnonPBDRequest)(nil),                   // 467: proto.bridge_service.CreateCashReceiptnonPBDRequest
	(*CreateCashReceiptnonPBDResponse)(nil),                  // 468: proto.bridge_service.CreateCashReceiptnonPBDResponse
	(*CreateGoodsReceiptGPRequest)(nil),                      // 469: proto.bridge_service.CreateGoodsReceiptGPRequest
	(*UpdateGoodsReceiptGPRequest)(nil),                      // 470: proto.bridge_service.UpdateGoodsReceiptGPRequest
	(*CreateSalesPaymentGPRequest)(nil),                      // 471: proto.bridge_service.CreateSalesPaymentGPRequest
	(*CreateSalesPaymentGPnonPBDRequest)(nil),                // 472: proto.bridge_service.CreateSalesPaymentGPnonPBDRequest
	(*CreateSalesPaymentGPnonPBDResponse)(nil),               // 473: proto.bridge_service.CreateSalesPaymentGPnonPBDResponse
	(*SalesPaymentGP)(nil),                                   // 474: proto.bridge_service.SalesPaymentGP
	(*GetSalesPaymentGPListRequest)(nil),                     // 475: proto.bridge_service.GetSalesPaymentGPListRequest
	(*GetSalesPaymentGPResponse)(nil),                        // 476: proto.bridge_service.GetSalesPaymentGPResponse
	(*GetSalesPaymentGPDetailRequest)(nil),                   // 477: proto.bridge_service.GetSalesPaymentGPDetailRequest
	(*VoucherGP)(nil),                                        // 478: proto.bridge_service.VoucherGP
	(*GetVoucherGPListRequest)(nil),                          // 479: proto.bridge_service.GetVoucherGPListRequest
	(*GetVoucherGPResponse)(nil),                             // 480: proto.bridge_service.GetVoucherGPResponse
	(*CreateVoucherGPRequest)(nil),                           // 481: proto.bridge_service.CreateVoucherGPRequest
	(*CreateVoucherGPResponse)(nil),                          // 482: proto.bridge_service.CreateVoucherGPResponse
	(*SalesMovement)(nil),                                    // 483: proto.bridge_service.SalesMovement
	(*GetSalesMovementGPRequest)(nil),                        // 484: proto.bridge_service.GetSalesMovementGPRequest
	(*GetSalesMovementGPResponse)(nil),                       // 485: proto.bridge_service.GetSalesMovementGPResponse
	(*UpdateFixedVaRequest)(nil),                             // 486: proto.bridge_service.UpdateFixedVaRequest
	(*UpdateFixedVaResponse)(nil),                            // 487: proto.bridge_service.UpdateFixedVaResponse
	(*ItemMasterComplexGP_PriceLevel)(nil),                   // 488: proto.bridge_service.ItemMasterComplexGP.PriceLevel
	(*ItemMasterComplexGP_Site)(nil),                         // 489: proto.bridge_service.ItemMasterComplexGP.Site
	(*ItemMasterComplexGP_PriceTiering)(nil),                 // 490: proto.bridge_service.ItemMasterComplexGP.PriceTiering
	(*SubmitPickingCheckingResponse_Data)(nil),               // 491: proto.bridge_service.SubmitPickingCheckingResponse.Data
	(*SubmitPickingCheckingResponse_Data_Checking)(nil),      // 492: proto.bridge_service.SubmitPickingCheckingResponse.Data.Checking
	(*SubmitPickingCheckingResponse_Data_DeliveryOrder)(nil), // 493: proto.bridge_service.SubmitPickingCheckingResponse.Data.DeliveryOrder
	(*SubmitPickingCheckingResponse_Data_SalesInvoice)(nil),  // 494: proto.bridge_service.SubmitPickingCheckingResponse.Data.SalesInvoice
	(*VendorGP_Vpymtrmid)(nil),                               // 495: proto.bridge_service.VendorGP.Vpymtrmid
	(*VendorGP_Vorganization)(nil),                           // 496: proto.bridge_service.VendorGP.Vorganization
	(*VendorGP_Vclassification)(nil),                         // 497: proto.bridge_service.VendorGP.Vclassification
	(*VendorGP_Vpaymentmethod)(nil),                          // 498: proto.bridge_service.VendorGP.Vpaymentmethod
	(*VendorGP_Vlatestgoodsreceipt)(nil),                     // 499: proto.bridge_service.VendorGP.Vlatestgoodsreceipt
	(*VendorGP_VVendorAddress)(nil),                          // 500: proto.bridge_service.VendorGP.VVendorAddress
	(*VendorGP_AdministrativeCode)(nil),                      // 501: proto.bridge_service.VendorGP.AdministrativeCode
	(*HelperGP_HelperGPSites)(nil),                           // 502: proto.bridge_service.HelperGP.HelperGPSites
	(*SalesOrderGP_VoucherDetailGP)(nil),                     // 503: proto.bridge_service.SalesOrderGP.VoucherDetailGP
	(*SalesOrderGP_Detail)(nil),                              // 504: proto.bridge_service.SalesOrderGP.Detail
	(*SalesOrderGP_TermOfPayment)(nil),                       // 505: proto.bridge_service.SalesOrderGP.TermOfPayment
	(*SalesOrderGP_Territory)(nil),                           // 506: proto.bridge_service.SalesOrderGP.Territory
	(*PurchasePlanGP_AssignedTo)(nil),                        // 507: proto.bridge_service.PurchasePlanGP.Assigned_to
	(*PurchasePlanGP_CreatedBy)(nil),                         // 508: proto.bridge_service.PurchasePlanGP.Created_by
	(*PurchasePlanGP_AssignedBy)(nil),                        // 509: proto.bridge_service.PurchasePlanGP.Assigned_by
	(*PurchasePlanGP_Detail)(nil),                            // 510: proto.bridge_service.PurchasePlanGP.Detail
	(*SitePP_Location)(nil),                                  // 511: proto.bridge_service.SitePP.Location
	(*SitePP_Location_AdminDivision)(nil),                    // 512: proto.bridge_service.SitePP.Location.AdminDivision
	(*CreatePurchaseOrderGPRequest_Podtl)(nil),               // 513: proto.bridge_service.CreatePurchaseOrderGPRequest.Podtl
	(*CreatePurchaseOrderGPRequestCsReference)(nil),          // 514: proto.bridge_service.CreatePurchaseOrderGPRequest.csReference
	(*UpdatePurchaseOrderGPRequest_Podtl)(nil),               // 515: proto.bridge_service.UpdatePurchaseOrderGPRequest.Podtl
	(*UpdatePurchaseOrderGPRequestCsReference)(nil),          // 516: proto.bridge_service.UpdatePurchaseOrderGPRequest.csReference
	(*SalesInvoiceGP_CashReceipt)(nil),                       // 517: proto.bridge_service.SalesInvoiceGP.CashReceipt
	(*SalesInvoiceGP_SalesOrder)(nil),                        // 518: proto.bridge_service.SalesInvoiceGP.SalesOrder
	(*SalesInvoiceGP_Detail)(nil),                            // 519: proto.bridge_service.SalesInvoiceGP.Detail
	(*CreateSalesOrderGPRequest_DetailItem)(nil),             // 520: proto.bridge_service.CreateSalesOrderGPRequest.DetailItem
	(*CreateSalesOrderGPRequest_VoucherApply)(nil),           // 521: proto.bridge_service.CreateSalesOrderGPRequest.VoucherApply
	(*CashReceipt_SalesInvoice)(nil),                         // 522: proto.bridge_service.CashReceipt.SalesInvoice
	(*CashReceipt_SalesOrder)(nil),                           // 523: proto.bridge_service.CashReceipt.SalesOrder
	(*CreateTransferRequestGPRequest_Detail)(nil),            // 524: proto.bridge_service.CreateTransferRequestGPRequest.Detail
	(*UpdateTransferRequestGPRequest_Detail)(nil),            // 525: proto.bridge_service.UpdateTransferRequestGPRequest.Detail
	(*UpdateInTransitTransferGPRequest_Detail)(nil),          // 526: proto.bridge_service.UpdateInTransitTransferGPRequest.Detail
	(*CommitTransferRequestGPRequest_Detail)(nil),            // 527: proto.bridge_service.CommitTransferRequestGPRequest.Detail
	(*CreateSalesInvoiceGPRequest_VoucherApply)(nil),         // 528: proto.bridge_service.CreateSalesInvoiceGPRequest.VoucherApply
	(*CreateSalesInvoiceGPRequest_AmountReceived)(nil),       // 529: proto.bridge_service.CreateSalesInvoiceGPRequest.AmountReceived
	(*CreateSalesInvoiceGPRequest_DetailItem)(nil),           // 530: proto.bridge_service.CreateSalesInvoiceGPRequest.DetailItem
	(*CreateCashReceiptnonPBDRequest_ApplyTo)(nil),           // 531: proto.bridge_service.CreateCashReceiptnonPBDRequest.ApplyTo
	(*CreateGoodsReceiptGPRequest_GoodsReceiptDetail)(nil),   // 532: proto.bridge_service.CreateGoodsReceiptGPRequest.GoodsReceiptDetail
	(*UpdateGoodsReceiptGPRequest_Detail)(nil),               // 533: proto.bridge_service.UpdateGoodsReceiptGPRequest.Detail
	(*CreateSalesPaymentGPnonPBDRequest_ApplyTo)(nil),        // 534: proto.bridge_service.CreateSalesPaymentGPnonPBDRequest.ApplyTo
	(*SalesPaymentGP_SalesInvoice)(nil),                      // 535: proto.bridge_service.SalesPaymentGP.SalesInvoice
	(*SalesPaymentGP_SalesOrder)(nil),                        // 536: proto.bridge_service.SalesPaymentGP.SalesOrder
	(*VoucherGP_Restriction)(nil),                            // 537: proto.bridge_service.VoucherGP.Restriction
	(*VoucherGP_AdvancedProperty)(nil),                       // 538: proto.bridge_service.VoucherGP.AdvancedProperty
	(*CreateVoucherGPRequest_Restriction)(nil),               // 539: proto.bridge_service.CreateVoucherGPRequest.Restriction
	(*CreateVoucherGPRequest_AdvancedProperties)(nil),        // 540: proto.bridge_service.CreateVoucherGPRequest.AdvancedProperties
	(*SalesMovement_Picking)(nil),                            // 541: proto.bridge_service.SalesMovement.Picking
	(*SalesMovement_Checking)(nil),                           // 542: proto.bridge_service.SalesMovement.Checking
	(*SalesMovement_DeliveryOrder)(nil),                      // 543: proto.bridge_service.SalesMovement.DeliveryOrder
	(*SalesMovement_CashReceipt)(nil),                        // 544: proto.bridge_service.SalesMovement.CashReceipt
	(*SalesMovement_SalesReturn)(nil),                        // 545: proto.bridge_service.SalesMovement.SalesReturn
	(*timestamppb.Timestamp)(nil),                            // 546: google.protobuf.Timestamp
}
var file_proto_bridge_service_bridge_service_proto_depIdxs = []int32{
	546, // 0: proto.bridge_service.Address.created_at:type_name -> google.protobuf.Timestamp
	546, // 1: proto.bridge_service.Address.updated_at:type_name -> google.protobuf.Timestamp
	546, // 2: proto.bridge_service.AdmDivision.created_at:type_name -> google.protobuf.Timestamp
	546, // 3: proto.bridge_service.AdmDivision.updated_at:type_name -> google.protobuf.Timestamp
	546, // 4: proto.bridge_service.Archetype.created_at:type_name -> google.protobuf.Timestamp
	546, // 5: proto.bridge_service.Archetype.updated_at:type_name -> google.protobuf.Timestamp
	546, // 6: proto.bridge_service.CustomerType.created_at:type_name -> google.protobuf.Timestamp
	546, // 7: proto.bridge_service.CustomerType.updated_at:type_name -> google.protobuf.Timestamp
	546, // 8: proto.bridge_service.Class.created_at:type_name -> google.protobuf.Timestamp
	546, // 9: proto.bridge_service.Class.updated_at:type_name -> google.protobuf.Timestamp
	546, // 10: proto.bridge_service.OrderType.created_at:type_name -> google.protobuf.Timestamp
	546, // 11: proto.bridge_service.OrderType.updated_at:type_name -> google.protobuf.Timestamp
	546, // 12: proto.bridge_service.SalesPaymentTerm.created_at:type_name -> google.protobuf.Timestamp
	546, // 13: proto.bridge_service.SalesPaymentTerm.updated_at:type_name -> google.protobuf.Timestamp
	546, // 14: proto.bridge_service.Item.created_at:type_name -> google.protobuf.Timestamp
	546, // 15: proto.bridge_service.Item.updated_at:type_name -> google.protobuf.Timestamp
	17,  // 16: proto.bridge_service.Item.uom:type_name -> proto.bridge_service.Uom
	488, // 17: proto.bridge_service.ItemMasterComplexGP.price_level:type_name -> proto.bridge_service.ItemMasterComplexGP.PriceLevel
	489, // 18: proto.bridge_service.ItemMasterComplexGP.site:type_name -> proto.bridge_service.ItemMasterComplexGP.Site
	490, // 19: proto.bridge_service.ItemMasterComplexGP.price_tiering:type_name -> proto.bridge_service.ItemMasterComplexGP.PriceTiering
	546, // 20: proto.bridge_service.Region.created_at:type_name -> google.protobuf.Timestamp
	546, // 21: proto.bridge_service.Region.updated_at:type_name -> google.protobuf.Timestamp
	546, // 22: proto.bridge_service.Salesperson.created_at:type_name -> google.protobuf.Timestamp
	546, // 23: proto.bridge_service.Salesperson.updated_at:type_name -> google.protobuf.Timestamp
	546, // 24: proto.bridge_service.Site.created_at:type_name -> google.protobuf.Timestamp
	546, // 25: proto.bridge_service.Site.updated_at:type_name -> google.protobuf.Timestamp
	11,  // 26: proto.bridge_service.Site.region:type_name -> proto.bridge_service.Region
	546, // 27: proto.bridge_service.SubDistrict.created_at:type_name -> google.protobuf.Timestamp
	546, // 28: proto.bridge_service.SubDistrict.updated_at:type_name -> google.protobuf.Timestamp
	546, // 29: proto.bridge_service.Territory.created_at:type_name -> google.protobuf.Timestamp
	546, // 30: proto.bridge_service.Territory.updated_at:type_name -> google.protobuf.Timestamp
	546, // 31: proto.bridge_service.Uom.created_at:type_name -> google.protobuf.Timestamp
	546, // 32: proto.bridge_service.Uom.updated_at:type_name -> google.protobuf.Timestamp
	546, // 33: proto.bridge_service.SalesOrder.order_date:type_name -> google.protobuf.Timestamp
	546, // 34: proto.bridge_service.SalesOrder.created_date:type_name -> google.protobuf.Timestamp
	546, // 35: proto.bridge_service.SalesOrder.modified_date:type_name -> google.protobuf.Timestamp
	546, // 36: proto.bridge_service.SalesOrder.finished_date:type_name -> google.protobuf.Timestamp
	546, // 37: proto.bridge_service.SalesOrder.created_at:type_name -> google.protobuf.Timestamp
	546, // 38: proto.bridge_service.SalesOrder.updated_at:type_name -> google.protobuf.Timestamp
	546, // 39: proto.bridge_service.SalesOrderItem.created_at:type_name -> google.protobuf.Timestamp
	546, // 40: proto.bridge_service.SalesOrderItem.updated_at:type_name -> google.protobuf.Timestamp
	11,  // 41: proto.bridge_service.Wrt.region:type_name -> proto.bridge_service.Region
	546, // 42: proto.bridge_service.Courier.last_emergency_time:type_name -> google.protobuf.Timestamp
	546, // 43: proto.bridge_service.Vendor.created_at:type_name -> google.protobuf.Timestamp
	546, // 44: proto.bridge_service.PurchasePlan.recognition_date:type_name -> google.protobuf.Timestamp
	546, // 45: proto.bridge_service.PurchasePlan.eta_date:type_name -> google.protobuf.Timestamp
	546, // 46: proto.bridge_service.PurchasePlan.assigned_at:type_name -> google.protobuf.Timestamp
	546, // 47: proto.bridge_service.PurchasePlan.created_at:type_name -> google.protobuf.Timestamp
	546, // 48: proto.bridge_service.PurchaseOrder.recognition_date:type_name -> google.protobuf.Timestamp
	546, // 49: proto.bridge_service.PurchaseOrder.eta_date:type_name -> google.protobuf.Timestamp
	546, // 50: proto.bridge_service.PurchaseOrder.updated_at:type_name -> google.protobuf.Timestamp
	546, // 51: proto.bridge_service.PurchaseOrder.created_at:type_name -> google.protobuf.Timestamp
	546, // 52: proto.bridge_service.PurchaseOrder.committed_at:type_name -> google.protobuf.Timestamp
	546, // 53: proto.bridge_service.PurchaseOrder.assigned_at:type_name -> google.protobuf.Timestamp
	35,  // 54: proto.bridge_service.PurchaseOrder.PurchaseOrderItems:type_name -> proto.bridge_service.PurchaseOrderItem
	340, // 55: proto.bridge_service.PurchaseOrder.receiving:type_name -> proto.bridge_service.ReceivingListinDetailResponse
	8,   // 56: proto.bridge_service.PurchaseOrderItem.item:type_name -> proto.bridge_service.Item
	0,   // 57: proto.bridge_service.GetAddressListResponse.data:type_name -> proto.bridge_service.Address
	0,   // 58: proto.bridge_service.GetAddressDetailResponse.data:type_name -> proto.bridge_service.Address
	1,   // 59: proto.bridge_service.GetAdmDivisionListResponse.data:type_name -> proto.bridge_service.AdmDivision
	1,   // 60: proto.bridge_service.GetAdmDivisionDetailResponse.data:type_name -> proto.bridge_service.AdmDivision
	2,   // 61: proto.bridge_service.GetAdmDivisionGPResponse.data:type_name -> proto.bridge_service.AdmDivisionGP
	3,   // 62: proto.bridge_service.GetArchetypeListResponse.data:type_name -> proto.bridge_service.Archetype
	3,   // 63: proto.bridge_service.GetArchetypeDetailResponse.data:type_name -> proto.bridge_service.Archetype
	4,   // 64: proto.bridge_service.GetCustomerTypeListResponse.data:type_name -> proto.bridge_service.CustomerType
	4,   // 65: proto.bridge_service.GetCustomerTypeDetailResponse.data:type_name -> proto.bridge_service.CustomerType
	134, // 66: proto.bridge_service.UpdateCustomerRequest.data:type_name -> proto.bridge_service.Customer
	134, // 67: proto.bridge_service.UpdateCustomerResponse.data:type_name -> proto.bridge_service.Customer
	5,   // 68: proto.bridge_service.GetClassListResponse.data:type_name -> proto.bridge_service.Class
	5,   // 69: proto.bridge_service.GetClassDetailResponse.data:type_name -> proto.bridge_service.Class
	8,   // 70: proto.bridge_service.GetItemListResponse.data:type_name -> proto.bridge_service.Item
	8,   // 71: proto.bridge_service.GetItemDetailResponse.data:type_name -> proto.bridge_service.Item
	9,   // 72: proto.bridge_service.GetItemGPResponse.data:type_name -> proto.bridge_service.ItemGP
	10,  // 73: proto.bridge_service.GetItemMasterComplexGPListResponse.data:type_name -> proto.bridge_service.ItemMasterComplexGP
	11,  // 74: proto.bridge_service.GetRegionListResponse.data:type_name -> proto.bridge_service.Region
	11,  // 75: proto.bridge_service.GetRegionDetailResponse.data:type_name -> proto.bridge_service.Region
	12,  // 76: proto.bridge_service.GetSalespersonListResponse.data:type_name -> proto.bridge_service.Salesperson
	12,  // 77: proto.bridge_service.GetSalespersonDetailResponse.data:type_name -> proto.bridge_service.Salesperson
	13,  // 78: proto.bridge_service.GetSiteListResponse.data:type_name -> proto.bridge_service.Site
	13,  // 79: proto.bridge_service.GetSiteDetailResponse.data:type_name -> proto.bridge_service.Site
	14,  // 80: proto.bridge_service.GetSiteGPResponse.data:type_name -> proto.bridge_service.SiteGP
	15,  // 81: proto.bridge_service.GetSubDistrictListResponse.data:type_name -> proto.bridge_service.SubDistrict
	15,  // 82: proto.bridge_service.GetSubDistrictDetailResponse.data:type_name -> proto.bridge_service.SubDistrict
	16,  // 83: proto.bridge_service.GetTerritoryListResponse.data:type_name -> proto.bridge_service.Territory
	16,  // 84: proto.bridge_service.GetTerritoryDetailResponse.data:type_name -> proto.bridge_service.Territory
	17,  // 85: proto.bridge_service.GetUomListResponse.data:type_name -> proto.bridge_service.Uom
	17,  // 86: proto.bridge_service.GetUomDetailResponse.data:type_name -> proto.bridge_service.Uom
	546, // 87: proto.bridge_service.GetSalesOrderListRequest.order_date_from:type_name -> google.protobuf.Timestamp
	546, // 88: proto.bridge_service.GetSalesOrderListRequest.order_date_to:type_name -> google.protobuf.Timestamp
	18,  // 89: proto.bridge_service.GetSalesOrderListResponse.data:type_name -> proto.bridge_service.SalesOrder
	18,  // 90: proto.bridge_service.GetSalesOrderDetailResponse.data:type_name -> proto.bridge_service.SalesOrder
	18,  // 91: proto.bridge_service.CreateSalesOrderRequest.data:type_name -> proto.bridge_service.SalesOrder
	19,  // 92: proto.bridge_service.CreateSalesOrderRequest.dataitem:type_name -> proto.bridge_service.SalesOrderItem
	18,  // 93: proto.bridge_service.CreateSalesOrderResponse.data:type_name -> proto.bridge_service.SalesOrder
	23,  // 94: proto.bridge_service.GetCourierListResponse.data:type_name -> proto.bridge_service.Courier
	23,  // 95: proto.bridge_service.GetCourierDetailResponse.data:type_name -> proto.bridge_service.Courier
	24,  // 96: proto.bridge_service.GetCourierGPResponse.data:type_name -> proto.bridge_service.CourierGP
	19,  // 97: proto.bridge_service.GetSalesOrderItemListResponse.data:type_name -> proto.bridge_service.SalesOrderItem
	19,  // 98: proto.bridge_service.GetSalesOrderItemDetailResponse.data:type_name -> proto.bridge_service.SalesOrderItem
	20,  // 99: proto.bridge_service.GetTransactionListGPResponse.data:type_name -> proto.bridge_service.TransactionListGP
	21,  // 100: proto.bridge_service.GetTransactionDetailGPResponse.data:type_name -> proto.bridge_service.TransactionDetailGP
	25,  // 101: proto.bridge_service.GetCourierVendorListResponse.data:type_name -> proto.bridge_service.CourierVendor
	25,  // 102: proto.bridge_service.GetCourierVendorDetailResponse.data:type_name -> proto.bridge_service.CourierVendor
	26,  // 103: proto.bridge_service.GetCourierVendorGPResponse.data:type_name -> proto.bridge_service.CourierVendorGP
	22,  // 104: proto.bridge_service.GetWrtListResponse.data:type_name -> proto.bridge_service.Wrt
	546, // 105: proto.bridge_service.Customer.birth_date:type_name -> google.protobuf.Timestamp
	546, // 106: proto.bridge_service.Customer.createdAt:type_name -> google.protobuf.Timestamp
	546, // 107: proto.bridge_service.Customer.last_updated_at:type_name -> google.protobuf.Timestamp
	27,  // 108: proto.bridge_service.GetVehicleProfileListResponse.data:type_name -> proto.bridge_service.VehicleProfile
	27,  // 109: proto.bridge_service.GetVehicleProfileDetailResponse.data:type_name -> proto.bridge_service.VehicleProfile
	28,  // 110: proto.bridge_service.GetVehicleProfileGPResponse.data:type_name -> proto.bridge_service.VehicleProfileGP
	134, // 111: proto.bridge_service.GetCustomerListResponse.data:type_name -> proto.bridge_service.Customer
	134, // 112: proto.bridge_service.GetCustomerDetailResponse.data:type_name -> proto.bridge_service.Customer
	22,  // 113: proto.bridge_service.GetWrtDetailResponse.data:type_name -> proto.bridge_service.Wrt
	6,   // 114: proto.bridge_service.GetOrderTypeListResponse.data:type_name -> proto.bridge_service.OrderType
	6,   // 115: proto.bridge_service.GetOrderTypeDetailResponse.data:type_name -> proto.bridge_service.OrderType
	7,   // 116: proto.bridge_service.GetSalesPaymentTermListResponse.data:type_name -> proto.bridge_service.SalesPaymentTerm
	7,   // 117: proto.bridge_service.GetSalesPaymentTermDetailResponse.data:type_name -> proto.bridge_service.SalesPaymentTerm
	158, // 118: proto.bridge_service.GetDivisionListResponse.data:type_name -> proto.bridge_service.Division
	158, // 119: proto.bridge_service.GetDivisionDetailResponse.data:type_name -> proto.bridge_service.Division
	164, // 120: proto.bridge_service.GetDistrictListResponse.data:type_name -> proto.bridge_service.District
	164, // 121: proto.bridge_service.GetDistrictDetailResponse.data:type_name -> proto.bridge_service.District
	170, // 122: proto.bridge_service.GetBankListResponse.data:type_name -> proto.bridge_service.Bank
	170, // 123: proto.bridge_service.GetBankDetailResponse.data:type_name -> proto.bridge_service.Bank
	175, // 124: proto.bridge_service.GetDeliveryFeeListResponse.data:type_name -> proto.bridge_service.DeliveryFee
	178, // 125: proto.bridge_service.GetDeliveryFeeGPListResponse.data:type_name -> proto.bridge_service.DeliveryFeeGP
	175, // 126: proto.bridge_service.GetDeliveryFeeDetailResponse.data:type_name -> proto.bridge_service.DeliveryFee
	29,  // 127: proto.bridge_service.GetVendorListResponse.data:type_name -> proto.bridge_service.Vendor
	29,  // 128: proto.bridge_service.GetVendorDetailResponse.data:type_name -> proto.bridge_service.Vendor
	30,  // 129: proto.bridge_service.GetVendorOrganizationListResponse.data:type_name -> proto.bridge_service.VendorOrganization
	30,  // 130: proto.bridge_service.GetVendorOrganizationDetailResponse.data:type_name -> proto.bridge_service.VendorOrganization
	31,  // 131: proto.bridge_service.GetVendorClassificationListResponse.data:type_name -> proto.bridge_service.VendorClassification
	31,  // 132: proto.bridge_service.GetVendorClassificationDetailResponse.data:type_name -> proto.bridge_service.VendorClassification
	32,  // 133: proto.bridge_service.GetPurchasePlanListResponse.data:type_name -> proto.bridge_service.PurchasePlan
	32,  // 134: proto.bridge_service.GetPurchasePlanDetailResponse.data:type_name -> proto.bridge_service.PurchasePlan
	33,  // 135: proto.bridge_service.GetPurchasePlanItemListResponse.data:type_name -> proto.bridge_service.PurchasePlanItem
	33,  // 136: proto.bridge_service.GetPurchasePlanItemDetailResponse.data:type_name -> proto.bridge_service.PurchasePlanItem
	34,  // 137: proto.bridge_service.GetPurchaseOrderListResponse.data:type_name -> proto.bridge_service.PurchaseOrder
	34,  // 138: proto.bridge_service.GetPurchaseOrderDetailResponse.data:type_name -> proto.bridge_service.PurchaseOrder
	35,  // 139: proto.bridge_service.GetPurchaseOrderItemListResponse.data:type_name -> proto.bridge_service.PurchaseOrderItem
	35,  // 140: proto.bridge_service.GetPurchaseOrderItemDetailResponse.data:type_name -> proto.bridge_service.PurchaseOrderItem
	211, // 141: proto.bridge_service.GetAdmDivisionCoverageGPResponse.data:type_name -> proto.bridge_service.AdmDivisionCoverageGP
	216, // 142: proto.bridge_service.CreatePurchaseOrderRequest.items:type_name -> proto.bridge_service.CreatePurchaseOrderItemRequest
	546, // 143: proto.bridge_service.PickingList.doc_date:type_name -> google.protobuf.Timestamp
	546, // 144: proto.bridge_service.PickingList.request_ship_date:type_name -> google.protobuf.Timestamp
	546, // 145: proto.bridge_service.PickingOrder.doc_date:type_name -> google.protobuf.Timestamp
	546, // 146: proto.bridge_service.PickingOrderDetail.doc_date:type_name -> google.protobuf.Timestamp
	223, // 147: proto.bridge_service.PickingOrderGPDetail.details:type_name -> proto.bridge_service.PickingOrderGPProduct
	221, // 148: proto.bridge_service.GetPickingOrderGPHeaderResponse.data:type_name -> proto.bridge_service.PickingOrderGPHeader
	222, // 149: proto.bridge_service.GetPickingOrderGPDetailResponse.data:type_name -> proto.bridge_service.PickingOrderGPDetail
	228, // 150: proto.bridge_service.Picking.details:type_name -> proto.bridge_service.PickingDetails
	230, // 151: proto.bridge_service.Checking.details:type_name -> proto.bridge_service.CheckingDetails
	229, // 152: proto.bridge_service.SubmitPickingCheckingRequest.picking:type_name -> proto.bridge_service.Picking
	231, // 153: proto.bridge_service.SubmitPickingCheckingRequest.checking:type_name -> proto.bridge_service.Checking
	491, // 154: proto.bridge_service.SubmitPickingCheckingResponse.data:type_name -> proto.bridge_service.SubmitPickingCheckingResponse.Data
	238, // 155: proto.bridge_service.GetWrtGPResponse.data:type_name -> proto.bridge_service.WrtGP
	244, // 156: proto.bridge_service.UpdatePurchaseOrderRequest.items:type_name -> proto.bridge_service.UpdatePurchaseOrderItemRequest
	244, // 157: proto.bridge_service.UpdateProductPurchaseOrderRequest.items:type_name -> proto.bridge_service.UpdatePurchaseOrderItemRequest
	546, // 158: proto.bridge_service.ItemTransfer.request_date:type_name -> google.protobuf.Timestamp
	546, // 159: proto.bridge_service.ItemTransfer.recognition_date:type_name -> google.protobuf.Timestamp
	546, // 160: proto.bridge_service.ItemTransfer.eta_date:type_name -> google.protobuf.Timestamp
	546, // 161: proto.bridge_service.ItemTransfer.ata_date:type_name -> google.protobuf.Timestamp
	546, // 162: proto.bridge_service.ItemTransfer.updated_at:type_name -> google.protobuf.Timestamp
	246, // 163: proto.bridge_service.ItemTransfer.ItemTransferItem:type_name -> proto.bridge_service.ItemTransferItem
	13,  // 164: proto.bridge_service.ItemTransfer.site_origin:type_name -> proto.bridge_service.Site
	13,  // 165: proto.bridge_service.ItemTransfer.site_destination:type_name -> proto.bridge_service.Site
	340, // 166: proto.bridge_service.ItemTransfer.receiving:type_name -> proto.bridge_service.ReceivingListinDetailResponse
	245, // 167: proto.bridge_service.ItemTransferItem.transfer_item:type_name -> proto.bridge_service.ItemTransfer
	8,   // 168: proto.bridge_service.ItemTransferItem.item:type_name -> proto.bridge_service.Item
	245, // 169: proto.bridge_service.GetItemTransferListResponse.data:type_name -> proto.bridge_service.ItemTransfer
	245, // 170: proto.bridge_service.GetItemTransferDetailResponse.data:type_name -> proto.bridge_service.ItemTransfer
	546, // 171: proto.bridge_service.SalesInvoice.recognition_date:type_name -> google.protobuf.Timestamp
	546, // 172: proto.bridge_service.SalesInvoice.due_date:type_name -> google.protobuf.Timestamp
	251, // 173: proto.bridge_service.GetSalesInvoiceDetailResponse.data:type_name -> proto.bridge_service.SalesInvoice
	546, // 174: proto.bridge_service.SalesPayment.recognition_date:type_name -> google.protobuf.Timestamp
	546, // 175: proto.bridge_service.SalesPayment.created_at:type_name -> google.protobuf.Timestamp
	546, // 176: proto.bridge_service.SalesPayment.received_date:type_name -> google.protobuf.Timestamp
	254, // 177: proto.bridge_service.GetSalesPaymentListResponse.data:type_name -> proto.bridge_service.SalesPayment
	254, // 178: proto.bridge_service.GetSalesPaymentDetailResponse.data:type_name -> proto.bridge_service.SalesPayment
	259, // 179: proto.bridge_service.GetSalesInvoiceItemListResponse.data:type_name -> proto.bridge_service.SalesInvoiceItem
	546, // 180: proto.bridge_service.DeliveryOrder.recognition_date:type_name -> google.protobuf.Timestamp
	546, // 181: proto.bridge_service.DeliveryOrder.created_at:type_name -> google.protobuf.Timestamp
	546, // 182: proto.bridge_service.DeliveryOrder.updated_at:type_name -> google.protobuf.Timestamp
	546, // 183: proto.bridge_service.DeliveryOrder.confirmed_at:type_name -> google.protobuf.Timestamp
	546, // 184: proto.bridge_service.DeliveryOrder.cancelled_at:type_name -> google.protobuf.Timestamp
	546, // 185: proto.bridge_service.GetDeliveryOrderListRequest.order_date_from:type_name -> google.protobuf.Timestamp
	546, // 186: proto.bridge_service.GetDeliveryOrderListRequest.order_date_to:type_name -> google.protobuf.Timestamp
	262, // 187: proto.bridge_service.GetDeliveryOrderListResponse.data:type_name -> proto.bridge_service.DeliveryOrder
	266, // 188: proto.bridge_service.DeliveryOrderGP.details:type_name -> proto.bridge_service.ItemDetail
	267, // 189: proto.bridge_service.DeliveryOrderGP.dataAttachment:type_name -> proto.bridge_service.DocumentAttachment
	265, // 190: proto.bridge_service.GetDeliveryOrderGPListResponse.data:type_name -> proto.bridge_service.DeliveryOrderGP
	546, // 191: proto.bridge_service.GetDeliveryOrderDetailRequest.order_date_from:type_name -> google.protobuf.Timestamp
	546, // 192: proto.bridge_service.GetDeliveryOrderDetailRequest.order_date_to:type_name -> google.protobuf.Timestamp
	262, // 193: proto.bridge_service.GetDeliveryOrderDetailResponse.data:type_name -> proto.bridge_service.DeliveryOrder
	272, // 194: proto.bridge_service.CreateDeliveryOrderRequest.detail_order:type_name -> proto.bridge_service.DetailOrder
	273, // 195: proto.bridge_service.CreateDeliveryOrderRequest.detail_item:type_name -> proto.bridge_service.DetailItem
	276, // 196: proto.bridge_service.GetPaymentMethodGPResponse.data:type_name -> proto.bridge_service.PaymentMethodGP
	376, // 197: proto.bridge_service.AddressGP.administrative_div:type_name -> proto.bridge_service.AdministrativeDiv
	280, // 198: proto.bridge_service.GetPaymentTermGPResponse.data:type_name -> proto.bridge_service.PaymentTermGP
	281, // 199: proto.bridge_service.GetSalesPersonGPResponse.data:type_name -> proto.bridge_service.SalesPersonGP
	282, // 200: proto.bridge_service.GetCustomerTypeGPResponse.data:type_name -> proto.bridge_service.CustomerTypeGP
	283, // 201: proto.bridge_service.GetArchetypeGPResponse.data:type_name -> proto.bridge_service.ArchetypeGP
	284, // 202: proto.bridge_service.GetOrderTypeGPResponse.data:type_name -> proto.bridge_service.OrderTypeGP
	285, // 203: proto.bridge_service.GetUomGPResponse.data:type_name -> proto.bridge_service.UomGP
	286, // 204: proto.bridge_service.GetItemClassGPResponse.data:type_name -> proto.bridge_service.ItemClassGP
	287, // 205: proto.bridge_service.GetSalesTerritoryGPResponse.data:type_name -> proto.bridge_service.SalesTerritoryGP
	288, // 206: proto.bridge_service.GetAddressGPResponse.data:type_name -> proto.bridge_service.AddressGP
	317, // 207: proto.bridge_service.CreateItemTransferRequest.item_transfer_items:type_name -> proto.bridge_service.CreateItemTransferItemRequest
	319, // 208: proto.bridge_service.UpdateItemTransferRequest.item_transfer_items:type_name -> proto.bridge_service.UpdateItemTransferItemRequest
	246, // 209: proto.bridge_service.GetItemTransferItemDetailResponse.data:type_name -> proto.bridge_service.ItemTransferItem
	319, // 210: proto.bridge_service.CommitItemTransferRequest.item_transfer_items:type_name -> proto.bridge_service.UpdateItemTransferItemRequest
	546, // 211: proto.bridge_service.Receiving.ata_date:type_name -> google.protobuf.Timestamp
	546, // 212: proto.bridge_service.Receiving.created_at:type_name -> google.protobuf.Timestamp
	546, // 213: proto.bridge_service.Receiving.confirmed_at:type_name -> google.protobuf.Timestamp
	546, // 214: proto.bridge_service.Receiving.updated_at:type_name -> google.protobuf.Timestamp
	13,  // 215: proto.bridge_service.Receiving.site:type_name -> proto.bridge_service.Site
	34,  // 216: proto.bridge_service.Receiving.purchase_order:type_name -> proto.bridge_service.PurchaseOrder
	245, // 217: proto.bridge_service.Receiving.item_transfer:type_name -> proto.bridge_service.ItemTransfer
	324, // 218: proto.bridge_service.Receiving.receiving_items:type_name -> proto.bridge_service.ReceivingItem
	323, // 219: proto.bridge_service.ReceivingItem.receiving:type_name -> proto.bridge_service.Receiving
	35,  // 220: proto.bridge_service.ReceivingItem.purchase_order_item:type_name -> proto.bridge_service.PurchaseOrderItem
	246, // 221: proto.bridge_service.ReceivingItem.item_transfer_item:type_name -> proto.bridge_service.ItemTransferItem
	8,   // 222: proto.bridge_service.ReceivingItem.item:type_name -> proto.bridge_service.Item
	323, // 223: proto.bridge_service.GetReceivingListResponse.data:type_name -> proto.bridge_service.Receiving
	323, // 224: proto.bridge_service.GetReceivingDetailResponse.data:type_name -> proto.bridge_service.Receiving
	330, // 225: proto.bridge_service.CreateReceivingRequest.receiving_item:type_name -> proto.bridge_service.CreateReceivingItemRequest
	495, // 226: proto.bridge_service.VendorGP.PYMTRMID:type_name -> proto.bridge_service.VendorGP.Vpymtrmid
	496, // 227: proto.bridge_service.VendorGP.Organization:type_name -> proto.bridge_service.VendorGP.Vorganization
	497, // 228: proto.bridge_service.VendorGP.Classification:type_name -> proto.bridge_service.VendorGP.Vclassification
	498, // 229: proto.bridge_service.VendorGP.PaymentMethod:type_name -> proto.bridge_service.VendorGP.Vpaymentmethod
	499, // 230: proto.bridge_service.VendorGP.LatestGoodsReceipt:type_name -> proto.bridge_service.VendorGP.Vlatestgoodsreceipt
	500, // 231: proto.bridge_service.VendorGP.vaddcdpr:type_name -> proto.bridge_service.VendorGP.VVendorAddress
	341, // 232: proto.bridge_service.GetVendorGPResponse.data:type_name -> proto.bridge_service.VendorGP
	502, // 233: proto.bridge_service.HelperGP.sites:type_name -> proto.bridge_service.HelperGP.HelperGPSites
	345, // 234: proto.bridge_service.GetHelperGPResponse.data:type_name -> proto.bridge_service.HelperGP
	546, // 235: proto.bridge_service.GetSalesInvoiceListRequest.order_date_from:type_name -> google.protobuf.Timestamp
	546, // 236: proto.bridge_service.GetSalesInvoiceListRequest.order_date_to:type_name -> google.protobuf.Timestamp
	251, // 237: proto.bridge_service.GetSalesInvoiceListResponse.data:type_name -> proto.bridge_service.SalesInvoice
	365, // 238: proto.bridge_service.CustomerGP.adrscode:type_name -> proto.bridge_service.CustomerAddressGP
	370, // 239: proto.bridge_service.CustomerGP.pymtrmid:type_name -> proto.bridge_service.pymtrmid
	375, // 240: proto.bridge_service.CustomerGP.customer_type:type_name -> proto.bridge_service.CustomerTypefromCustomerGP
	376, // 241: proto.bridge_service.CustomerGP.administrative_div:type_name -> proto.bridge_service.AdministrativeDiv
	359, // 242: proto.bridge_service.GetCustomerGPResponse.data:type_name -> proto.bridge_service.CustomerGP
	331, // 243: proto.bridge_service.CreateCustomerGPRequest.address:type_name -> proto.bridge_service.CreateAddressRequest
	366, // 244: proto.bridge_service.CustomerAddressGP.administrativeDivision:type_name -> proto.bridge_service.AdministrativeDivision
	367, // 245: proto.bridge_service.AdministrativeDivision.custAddrTypeShipTo:type_name -> proto.bridge_service.CustAddrTypeShipTo
	368, // 246: proto.bridge_service.AdministrativeDivision.custAddrTypeBillTo:type_name -> proto.bridge_service.CustAddrTypeBillTo
	369, // 247: proto.bridge_service.AdministrativeDivision.custAddrTypeStatementTo:type_name -> proto.bridge_service.CustAddrTypeStatementTo
	288, // 248: proto.bridge_service.SalesOrderGP.address:type_name -> proto.bridge_service.AddressGP
	504, // 249: proto.bridge_service.SalesOrderGP.details:type_name -> proto.bridge_service.SalesOrderGP.Detail
	359, // 250: proto.bridge_service.SalesOrderGP.customer:type_name -> proto.bridge_service.CustomerGP
	238, // 251: proto.bridge_service.SalesOrderGP.wrt:type_name -> proto.bridge_service.WrtGP
	505, // 252: proto.bridge_service.SalesOrderGP.term_of_payments:type_name -> proto.bridge_service.SalesOrderGP.TermOfPayment
	506, // 253: proto.bridge_service.SalesOrderGP.territory:type_name -> proto.bridge_service.SalesOrderGP.Territory
	14,  // 254: proto.bridge_service.SalesOrderGP.site:type_name -> proto.bridge_service.SiteGP
	503, // 255: proto.bridge_service.SalesOrderGP.voucher:type_name -> proto.bridge_service.SalesOrderGP.VoucherDetailGP
	371, // 256: proto.bridge_service.GetSalesOrderGPListResponse.data:type_name -> proto.bridge_service.SalesOrderGP
	380, // 257: proto.bridge_service.GetPurchasePlanGPResponse.data:type_name -> proto.bridge_service.PurchasePlanGP
	511, // 258: proto.bridge_service.PurchasePlanGP.site_id:type_name -> proto.bridge_service.SitePP.Location
	381, // 259: proto.bridge_service.PurchasePlanGP.vendor_organization:type_name -> proto.bridge_service.VendorOrganizationPP
	510, // 260: proto.bridge_service.PurchasePlanGP.detail:type_name -> proto.bridge_service.PurchasePlanGP.Detail
	507, // 261: proto.bridge_service.PurchasePlanGP.assigned_to:type_name -> proto.bridge_service.PurchasePlanGP.Assigned_to
	508, // 262: proto.bridge_service.PurchasePlanGP.created_by:type_name -> proto.bridge_service.PurchasePlanGP.Created_by
	509, // 263: proto.bridge_service.PurchasePlanGP.assigned_by:type_name -> proto.bridge_service.PurchasePlanGP.Assigned_by
	511, // 264: proto.bridge_service.SitePP.site_id:type_name -> proto.bridge_service.SitePP.Location
	388, // 265: proto.bridge_service.GetPurchaseOrderGPResponse.data:type_name -> proto.bridge_service.PurchaseOrderGP
	386, // 266: proto.bridge_service.PurchaseOrderGP.poinvoice:type_name -> proto.bridge_service.Poinvoice
	386, // 267: proto.bridge_service.PurchaseOrderGP.poreceiving:type_name -> proto.bridge_service.Poinvoice
	387, // 268: proto.bridge_service.PurchaseOrderGP.poDetail:type_name -> proto.bridge_service.PoDetail
	392, // 269: proto.bridge_service.GetVendorOrganizationGPResponse.data:type_name -> proto.bridge_service.VendorOrganizationGP
	396, // 270: proto.bridge_service.GetVendorClassificationGPResponse.data:type_name -> proto.bridge_service.VendorClassificationGP
	514, // 271: proto.bridge_service.CreatePurchaseOrderGPRequest.cs_reference:type_name -> proto.bridge_service.CreatePurchaseOrderGPRequest.csReference
	513, // 272: proto.bridge_service.CreatePurchaseOrderGPRequest.detail:type_name -> proto.bridge_service.CreatePurchaseOrderGPRequest.Podtl
	516, // 273: proto.bridge_service.UpdatePurchaseOrderGPRequest.cs_reference:type_name -> proto.bridge_service.UpdatePurchaseOrderGPRequest.csReference
	515, // 274: proto.bridge_service.UpdatePurchaseOrderGPRequest.detail:type_name -> proto.bridge_service.UpdatePurchaseOrderGPRequest.Podtl
	401, // 275: proto.bridge_service.CreateConsolidatedShipmentGPRequest.purchase_order:type_name -> proto.bridge_service.PurchaseOrderConsolidatedShipment
	401, // 276: proto.bridge_service.UpdateConsolidatedShipmentGPRequest.purchase_order:type_name -> proto.bridge_service.PurchaseOrderConsolidatedShipment
	517, // 277: proto.bridge_service.SalesInvoiceGP.cash_receipt:type_name -> proto.bridge_service.SalesInvoiceGP.CashReceipt
	518, // 278: proto.bridge_service.SalesInvoiceGP.sales_order:type_name -> proto.bridge_service.SalesInvoiceGP.SalesOrder
	519, // 279: proto.bridge_service.SalesInvoiceGP.details:type_name -> proto.bridge_service.SalesInvoiceGP.Detail
	267, // 280: proto.bridge_service.SalesInvoiceGP.dataAttachment:type_name -> proto.bridge_service.DocumentAttachment
	405, // 281: proto.bridge_service.GetSalesInvoiceGPListResponse.data:type_name -> proto.bridge_service.SalesInvoiceGP
	405, // 282: proto.bridge_service.GetSalesInvoiceGPDetailResponse.data:type_name -> proto.bridge_service.SalesInvoiceGP
	414, // 283: proto.bridge_service.InTransitTransferGP.trnsfloc:type_name -> proto.bridge_service.TransferLocation
	415, // 284: proto.bridge_service.InTransitTransferGP.itlocn:type_name -> proto.bridge_service.Location
	416, // 285: proto.bridge_service.InTransitTransferGP.locncode:type_name -> proto.bridge_service.LocationCode
	417, // 286: proto.bridge_service.InTransitTransferGP.tr_type:type_name -> proto.bridge_service.TransferType
	418, // 287: proto.bridge_service.InTransitTransferGP.details:type_name -> proto.bridge_service.TransferDetail
	413, // 288: proto.bridge_service.GetInTransitTransferGPResponse.data:type_name -> proto.bridge_service.InTransitTransferGP
	427, // 289: proto.bridge_service.TransferRequestGP.ivm_locncode_from:type_name -> proto.bridge_service.SiteLocation
	427, // 290: proto.bridge_service.TransferRequestGP.ivm_locncode_to:type_name -> proto.bridge_service.SiteLocation
	423, // 291: proto.bridge_service.TransferRequestGP.details:type_name -> proto.bridge_service.TransferRequestDetailGP
	426, // 292: proto.bridge_service.TransferRequestGP.intrxlist:type_name -> proto.bridge_service.InTransitTransfer
	425, // 293: proto.bridge_service.InTransitTransfer.goods_receipt:type_name -> proto.bridge_service.GoodsReceipt
	424, // 294: proto.bridge_service.GetTransferRequestGPResponse.data:type_name -> proto.bridge_service.TransferRequestGP
	520, // 295: proto.bridge_service.CreateSalesOrderGPRequest.detailitems:type_name -> proto.bridge_service.CreateSalesOrderGPRequest.DetailItem
	521, // 296: proto.bridge_service.CreateSalesOrderGPRequest.voucher_apply:type_name -> proto.bridge_service.CreateSalesOrderGPRequest.VoucherApply
	522, // 297: proto.bridge_service.CashReceipt.sales_invoice:type_name -> proto.bridge_service.CashReceipt.SalesInvoice
	523, // 298: proto.bridge_service.CashReceipt.sales_order:type_name -> proto.bridge_service.CashReceipt.SalesOrder
	431, // 299: proto.bridge_service.GetCashReceiptListResponse.data:type_name -> proto.bridge_service.CashReceipt
	434, // 300: proto.bridge_service.GetCustomerClassResponse.data:type_name -> proto.bridge_service.CustomerClass
	438, // 301: proto.bridge_service.GetSalesPriceLevelResponse.data:type_name -> proto.bridge_service.SalesPriceLevel
	442, // 302: proto.bridge_service.GetShippingMethodResponse.data:type_name -> proto.bridge_service.ShippingMethod
	524, // 303: proto.bridge_service.CreateTransferRequestGPRequest.detail:type_name -> proto.bridge_service.CreateTransferRequestGPRequest.Detail
	450, // 304: proto.bridge_service.GoodsReceiptGP.polist:type_name -> proto.bridge_service.PoList
	451, // 305: proto.bridge_service.GoodsReceiptGP.intrxlist:type_name -> proto.bridge_service.IntrxList
	452, // 306: proto.bridge_service.GetGoodsReceiptGPResponse.data:type_name -> proto.bridge_service.GoodsReceiptGP
	525, // 307: proto.bridge_service.UpdateTransferRequestGPRequest.detail:type_name -> proto.bridge_service.UpdateTransferRequestGPRequest.Detail
	526, // 308: proto.bridge_service.UpdateInTransitTransferGPRequest.detail:type_name -> proto.bridge_service.UpdateInTransitTransferGPRequest.Detail
	527, // 309: proto.bridge_service.CommitTransferRequestGPRequest.detail:type_name -> proto.bridge_service.CommitTransferRequestGPRequest.Detail
	333, // 310: proto.bridge_service.UpdateCustomerGPRequest.address:type_name -> proto.bridge_service.UpdateAddressRequest
	462, // 311: proto.bridge_service.CommitTransferRequestGPResponse.intransit:type_name -> proto.bridge_service.InTransit
	528, // 312: proto.bridge_service.CreateSalesInvoiceGPRequest.voucher_apply:type_name -> proto.bridge_service.CreateSalesInvoiceGPRequest.VoucherApply
	529, // 313: proto.bridge_service.CreateSalesInvoiceGPRequest.amount_received:type_name -> proto.bridge_service.CreateSalesInvoiceGPRequest.AmountReceived
	530, // 314: proto.bridge_service.CreateSalesInvoiceGPRequest.detailitems:type_name -> proto.bridge_service.CreateSalesInvoiceGPRequest.DetailItem
	531, // 315: proto.bridge_service.CreateCashReceiptnonPBDRequest.apply_to:type_name -> proto.bridge_service.CreateCashReceiptnonPBDRequest.ApplyTo
	532, // 316: proto.bridge_service.CreateGoodsReceiptGPRequest.goodsReceiptDTL:type_name -> proto.bridge_service.CreateGoodsReceiptGPRequest.GoodsReceiptDetail
	533, // 317: proto.bridge_service.UpdateGoodsReceiptGPRequest.details:type_name -> proto.bridge_service.UpdateGoodsReceiptGPRequest.Detail
	534, // 318: proto.bridge_service.CreateSalesPaymentGPnonPBDRequest.apply_to:type_name -> proto.bridge_service.CreateSalesPaymentGPnonPBDRequest.ApplyTo
	535, // 319: proto.bridge_service.SalesPaymentGP.sales_invoice:type_name -> proto.bridge_service.SalesPaymentGP.SalesInvoice
	536, // 320: proto.bridge_service.SalesPaymentGP.sales_order:type_name -> proto.bridge_service.SalesPaymentGP.SalesOrder
	474, // 321: proto.bridge_service.GetSalesPaymentGPResponse.data:type_name -> proto.bridge_service.SalesPaymentGP
	537, // 322: proto.bridge_service.VoucherGP.restriction:type_name -> proto.bridge_service.VoucherGP.Restriction
	538, // 323: proto.bridge_service.VoucherGP.advanced_properties:type_name -> proto.bridge_service.VoucherGP.AdvancedProperty
	478, // 324: proto.bridge_service.GetVoucherGPResponse.data:type_name -> proto.bridge_service.VoucherGP
	539, // 325: proto.bridge_service.CreateVoucherGPRequest.restriction:type_name -> proto.bridge_service.CreateVoucherGPRequest.Restriction
	540, // 326: proto.bridge_service.CreateVoucherGPRequest.advanced_properties:type_name -> proto.bridge_service.CreateVoucherGPRequest.AdvancedProperties
	541, // 327: proto.bridge_service.SalesMovement.picking:type_name -> proto.bridge_service.SalesMovement.Picking
	542, // 328: proto.bridge_service.SalesMovement.checking:type_name -> proto.bridge_service.SalesMovement.Checking
	543, // 329: proto.bridge_service.SalesMovement.delivery_order:type_name -> proto.bridge_service.SalesMovement.DeliveryOrder
	544, // 330: proto.bridge_service.SalesMovement.cash_receipt:type_name -> proto.bridge_service.SalesMovement.CashReceipt
	545, // 331: proto.bridge_service.SalesMovement.sales_return:type_name -> proto.bridge_service.SalesMovement.SalesReturn
	483, // 332: proto.bridge_service.GetSalesMovementGPResponse.data:type_name -> proto.bridge_service.SalesMovement
	492, // 333: proto.bridge_service.SubmitPickingCheckingResponse.Data.checking:type_name -> proto.bridge_service.SubmitPickingCheckingResponse.Data.Checking
	493, // 334: proto.bridge_service.SubmitPickingCheckingResponse.Data.delivery_order:type_name -> proto.bridge_service.SubmitPickingCheckingResponse.Data.DeliveryOrder
	494, // 335: proto.bridge_service.SubmitPickingCheckingResponse.Data.sales_invoice:type_name -> proto.bridge_service.SubmitPickingCheckingResponse.Data.SalesInvoice
	501, // 336: proto.bridge_service.VendorGP.VVendorAddress.prp_administrative_code:type_name -> proto.bridge_service.VendorGP.AdministrativeCode
	512, // 337: proto.bridge_service.SitePP.Location.adm_division:type_name -> proto.bridge_service.SitePP.Location.AdminDivision
	240, // 338: proto.bridge_service.BridgeService.GetWrtGPList:input_type -> proto.bridge_service.GetWrtGPListRequest
	241, // 339: proto.bridge_service.BridgeService.GetWrtGPDetail:input_type -> proto.bridge_service.GetWrtGPDetailRequest
	65,  // 340: proto.bridge_service.BridgeService.GetItemGPList:input_type -> proto.bridge_service.GetItemGPListRequest
	66,  // 341: proto.bridge_service.BridgeService.GetItemMasterComplexGP:input_type -> proto.bridge_service.GetItemMasterComplexGPListRequest
	67,  // 342: proto.bridge_service.BridgeService.GetItemGPDetail:input_type -> proto.bridge_service.GetItemGPDetailRequest
	87,  // 343: proto.bridge_service.BridgeService.GetSiteGPList:input_type -> proto.bridge_service.GetSiteGPListRequest
	88,  // 344: proto.bridge_service.BridgeService.GetSiteGPDetail:input_type -> proto.bridge_service.GetSiteGPDetailRequest
	112, // 345: proto.bridge_service.BridgeService.GetCourierGPList:input_type -> proto.bridge_service.GetCourierGPListRequest
	113, // 346: proto.bridge_service.BridgeService.GetCourierGPDetail:input_type -> proto.bridge_service.GetCourierGPDetailRequest
	129, // 347: proto.bridge_service.BridgeService.GetCourierVendorGPList:input_type -> proto.bridge_service.GetCourierVendorGPListRequest
	130, // 348: proto.bridge_service.BridgeService.GetCourierVendorGPDetail:input_type -> proto.bridge_service.GetCourierVendorGPDetailRequest
	140, // 349: proto.bridge_service.BridgeService.GetVehicleProfileGPList:input_type -> proto.bridge_service.GetVehicleProfileGPListRequest
	141, // 350: proto.bridge_service.BridgeService.GetVehicleProfileGPDetail:input_type -> proto.bridge_service.GetVehicleProfileGPDetailRequest
	44,  // 351: proto.bridge_service.BridgeService.GetAdmDivisionGPList:input_type -> proto.bridge_service.GetAdmDivisionGPListRequest
	45,  // 352: proto.bridge_service.BridgeService.GetAdmDivisionGPDetail:input_type -> proto.bridge_service.GetAdmDivisionGPDetailRequest
	212, // 353: proto.bridge_service.BridgeService.GetAdmDivisionCoverageGPList:input_type -> proto.bridge_service.GetAdmDivisionCoverageGPListRequest
	213, // 354: proto.bridge_service.BridgeService.GetAdmDivisionCoverageGPDetail:input_type -> proto.bridge_service.GetAdmDivisionCoverageGPDetailRequest
	277, // 355: proto.bridge_service.BridgeService.GetPaymentMethodGPList:input_type -> proto.bridge_service.GetPaymentMethodGPListRequest
	278, // 356: proto.bridge_service.BridgeService.GetPaymentMethodGPDetail:input_type -> proto.bridge_service.GetPaymentMethodGPDetailRequest
	289, // 357: proto.bridge_service.BridgeService.GetPaymentTermGPList:input_type -> proto.bridge_service.GetPaymentTermGPListRequest
	290, // 358: proto.bridge_service.BridgeService.GetPaymentTermGPDetail:input_type -> proto.bridge_service.GetPaymentTermGPDetailRequest
	292, // 359: proto.bridge_service.BridgeService.GetSalesPersonGPList:input_type -> proto.bridge_service.GetSalesPersonGPListRequest
	293, // 360: proto.bridge_service.BridgeService.GetSalesPersonGPDetail:input_type -> proto.bridge_service.GetSalesPersonGPDetailRequest
	295, // 361: proto.bridge_service.BridgeService.GetCustomerTypeGPList:input_type -> proto.bridge_service.GetCustomerTypeGPListRequest
	296, // 362: proto.bridge_service.BridgeService.GetCustomerTypeGPDetail:input_type -> proto.bridge_service.GetCustomerTypeGPDetailRequest
	298, // 363: proto.bridge_service.BridgeService.GetArchetypeGPList:input_type -> proto.bridge_service.GetArchetypeGPListRequest
	299, // 364: proto.bridge_service.BridgeService.GetArchetypeGPDetail:input_type -> proto.bridge_service.GetArchetypeGPDetailRequest
	301, // 365: proto.bridge_service.BridgeService.GetOrderTypeGPList:input_type -> proto.bridge_service.GetOrderTypeGPListRequest
	302, // 366: proto.bridge_service.BridgeService.GetOrderTypeGPDetail:input_type -> proto.bridge_service.GetOrderTypeGPDetailRequest
	393, // 367: proto.bridge_service.BridgeService.GetVendorClassificationGPList:input_type -> proto.bridge_service.GetVendorClassificationGPListRequest
	394, // 368: proto.bridge_service.BridgeService.GetVendorClassificationGPDetail:input_type -> proto.bridge_service.GetVendorClassificationGPDetailRequest
	304, // 369: proto.bridge_service.BridgeService.GetUomGPList:input_type -> proto.bridge_service.GetUomGPListRequest
	305, // 370: proto.bridge_service.BridgeService.GetUomGPDetail:input_type -> proto.bridge_service.GetUomGPDetailRequest
	307, // 371: proto.bridge_service.BridgeService.GetItemClassGPList:input_type -> proto.bridge_service.GetItemClassGPListRequest
	308, // 372: proto.bridge_service.BridgeService.GetItemClassGPDetail:input_type -> proto.bridge_service.GetItemClassGPDetailRequest
	310, // 373: proto.bridge_service.BridgeService.GetSalesTerritoryGPList:input_type -> proto.bridge_service.GetSalesTerritoryGPListRequest
	311, // 374: proto.bridge_service.BridgeService.GetSalesTerritoryGPDetail:input_type -> proto.bridge_service.GetSalesTerritoryGPDetailRequest
	361, // 375: proto.bridge_service.BridgeService.GetCustomerGPList:input_type -> proto.bridge_service.GetCustomerGPListRequest
	362, // 376: proto.bridge_service.BridgeService.GetCustomerGPDetail:input_type -> proto.bridge_service.GetCustomerGPDetailRequest
	313, // 377: proto.bridge_service.BridgeService.GetAddressGPList:input_type -> proto.bridge_service.GetAddressGPListRequest
	314, // 378: proto.bridge_service.BridgeService.GetAddressGPDetail:input_type -> proto.bridge_service.GetAddressGPDetailRequest
	343, // 379: proto.bridge_service.BridgeService.GetVendorGPList:input_type -> proto.bridge_service.GetVendorGPListRequest
	344, // 380: proto.bridge_service.BridgeService.GetVendorGPDetail:input_type -> proto.bridge_service.GetVendorGPDetailRequest
	346, // 381: proto.bridge_service.BridgeService.GetHelperGPList:input_type -> proto.bridge_service.GetHelperGPListRequest
	347, // 382: proto.bridge_service.BridgeService.GetHelperGPDetail:input_type -> proto.bridge_service.GetHelperGPDetailRequest
	331, // 383: proto.bridge_service.BridgeService.CreateAddress:input_type -> proto.bridge_service.CreateAddressRequest
	333, // 384: proto.bridge_service.BridgeService.UpdateAddress:input_type -> proto.bridge_service.UpdateAddressRequest
	335, // 385: proto.bridge_service.BridgeService.SetDefaultAddress:input_type -> proto.bridge_service.SetDefaultAddressRequest
	337, // 386: proto.bridge_service.BridgeService.DeleteAddress:input_type -> proto.bridge_service.DeleteAddressRequest
	119, // 387: proto.bridge_service.BridgeService.GetTransactionListGPList:input_type -> proto.bridge_service.GetTransactionListGPListRequest
	120, // 388: proto.bridge_service.BridgeService.GetTransactionListGPDetail:input_type -> proto.bridge_service.GetTransactionListGPDetailRequest
	122, // 389: proto.bridge_service.BridgeService.GetTransactionDetailGPList:input_type -> proto.bridge_service.GetTransactionDetailGPListRequest
	123, // 390: proto.bridge_service.BridgeService.GetTransactionDetailGPDetail:input_type -> proto.bridge_service.GetTransactionDetailGPDetailRequest
	429, // 391: proto.bridge_service.BridgeService.CreateSalesOrderGP:input_type -> proto.bridge_service.CreateSalesOrderGPRequest
	224, // 392: proto.bridge_service.BridgeService.GetPickingOrderGPHeader:input_type -> proto.bridge_service.GetPickingOrderGPHeaderRequest
	226, // 393: proto.bridge_service.BridgeService.GetPickingOrderGPDetail:input_type -> proto.bridge_service.GetPickingOrderGPDetailRequest
	232, // 394: proto.bridge_service.BridgeService.SubmitPickingCheckingPickingOrder:input_type -> proto.bridge_service.SubmitPickingCheckingRequest
	234, // 395: proto.bridge_service.BridgeService.LoginHelper:input_type -> proto.bridge_service.LoginHelperRequest
	36,  // 396: proto.bridge_service.BridgeService.GetAddressList:input_type -> proto.bridge_service.GetAddressListRequest
	163, // 397: proto.bridge_service.BridgeService.GetAddressListWithExcludedIds:input_type -> proto.bridge_service.GetAddressListWithExcludedIdsRequest
	38,  // 398: proto.bridge_service.BridgeService.GetAddressDetail:input_type -> proto.bridge_service.GetAddressDetailRequest
	40,  // 399: proto.bridge_service.BridgeService.GetAdmDivisionList:input_type -> proto.bridge_service.GetAdmDivisionListRequest
	42,  // 400: proto.bridge_service.BridgeService.GetAdmDivisionDetail:input_type -> proto.bridge_service.GetAdmDivisionDetailRequest
	47,  // 401: proto.bridge_service.BridgeService.GetArchetypeList:input_type -> proto.bridge_service.GetArchetypeListRequest
	49,  // 402: proto.bridge_service.BridgeService.GetArchetypeDetail:input_type -> proto.bridge_service.GetArchetypeDetailRequest
	51,  // 403: proto.bridge_service.BridgeService.GetCustomerTypeList:input_type -> proto.bridge_service.GetCustomerTypeListRequest
	53,  // 404: proto.bridge_service.BridgeService.GetCustomerTypeDetail:input_type -> proto.bridge_service.GetCustomerTypeDetailRequest
	57,  // 405: proto.bridge_service.BridgeService.GetClassList:input_type -> proto.bridge_service.GetClassListRequest
	59,  // 406: proto.bridge_service.BridgeService.GetClassDetail:input_type -> proto.bridge_service.GetClassDetailRequest
	61,  // 407: proto.bridge_service.BridgeService.GetItemList:input_type -> proto.bridge_service.GetItemListRequest
	63,  // 408: proto.bridge_service.BridgeService.GetItemDetail:input_type -> proto.bridge_service.GetItemDetailRequest
	70,  // 409: proto.bridge_service.BridgeService.UpdateItemPackable:input_type -> proto.bridge_service.UpdateItemPackableRequest
	72,  // 410: proto.bridge_service.BridgeService.UpdateItemFragile:input_type -> proto.bridge_service.UpdateItemFragileRequest
	74,  // 411: proto.bridge_service.BridgeService.GetRegionList:input_type -> proto.bridge_service.GetRegionListRequest
	76,  // 412: proto.bridge_service.BridgeService.GetRegionDetail:input_type -> proto.bridge_service.GetRegionDetailRequest
	78,  // 413: proto.bridge_service.BridgeService.GetSalespersonList:input_type -> proto.bridge_service.GetSalespersonListRequest
	80,  // 414: proto.bridge_service.BridgeService.GetSalespersonDetail:input_type -> proto.bridge_service.GetSalespersonDetailRequest
	82,  // 415: proto.bridge_service.BridgeService.GetSiteList:input_type -> proto.bridge_service.GetSiteListRequest
	83,  // 416: proto.bridge_service.BridgeService.GetSiteInIdsList:input_type -> proto.bridge_service.GetSiteInIdsListRequest
	85,  // 417: proto.bridge_service.BridgeService.GetSiteDetail:input_type -> proto.bridge_service.GetSiteDetailRequest
	90,  // 418: proto.bridge_service.BridgeService.GetSubDistrictList:input_type -> proto.bridge_service.GetSubDistrictListRequest
	92,  // 419: proto.bridge_service.BridgeService.GetSubDistrictDetail:input_type -> proto.bridge_service.GetSubDistrictDetailRequest
	94,  // 420: proto.bridge_service.BridgeService.GetTerritoryList:input_type -> proto.bridge_service.GetTerritoryListRequest
	96,  // 421: proto.bridge_service.BridgeService.GetTerritoryDetail:input_type -> proto.bridge_service.GetTerritoryDetailRequest
	98,  // 422: proto.bridge_service.BridgeService.GetUomList:input_type -> proto.bridge_service.GetUomListRequest
	100, // 423: proto.bridge_service.BridgeService.GetUomDetail:input_type -> proto.bridge_service.GetUomDetailRequest
	102, // 424: proto.bridge_service.BridgeService.GetSalesOrderList:input_type -> proto.bridge_service.GetSalesOrderListRequest
	104, // 425: proto.bridge_service.BridgeService.GetSalesOrderDetail:input_type -> proto.bridge_service.GetSalesOrderDetailRequest
	115, // 426: proto.bridge_service.BridgeService.GetSalesOrderItemList:input_type -> proto.bridge_service.GetSalesOrderItemListRequest
	117, // 427: proto.bridge_service.BridgeService.GetSalesOrderItemDetail:input_type -> proto.bridge_service.GetSalesOrderItemDetailRequest
	106, // 428: proto.bridge_service.BridgeService.CreateSalesOrder:input_type -> proto.bridge_service.CreateSalesOrderRequest
	372, // 429: proto.bridge_service.BridgeService.GetSalesOrderListGPAll:input_type -> proto.bridge_service.GetSalesOrderGPListRequest
	374, // 430: proto.bridge_service.BridgeService.GetSalesOrderListGPByID:input_type -> proto.bridge_service.GetSalesOrderGPListByIDRequest
	108, // 431: proto.bridge_service.BridgeService.GetCourierList:input_type -> proto.bridge_service.GetCourierListRequest
	110, // 432: proto.bridge_service.BridgeService.GetCourierDetail:input_type -> proto.bridge_service.GetCourierDetailRequest
	156, // 433: proto.bridge_service.BridgeService.ActivateEmergencyCourier:input_type -> proto.bridge_service.EmergencyCourierRequest
	156, // 434: proto.bridge_service.BridgeService.DeactivateEmergencyCourier:input_type -> proto.bridge_service.EmergencyCourierRequest
	125, // 435: proto.bridge_service.BridgeService.GetCourierVendorList:input_type -> proto.bridge_service.GetCourierVendorListRequest
	127, // 436: proto.bridge_service.BridgeService.GetCourierVendorDetail:input_type -> proto.bridge_service.GetCourierVendorDetailRequest
	136, // 437: proto.bridge_service.BridgeService.GetVehicleProfileList:input_type -> proto.bridge_service.GetVehicleProfileListRequest
	138, // 438: proto.bridge_service.BridgeService.GetVehicleProfileDetail:input_type -> proto.bridge_service.GetVehicleProfileDetailRequest
	132, // 439: proto.bridge_service.BridgeService.GetWrtList:input_type -> proto.bridge_service.GetWrtListRequest
	146, // 440: proto.bridge_service.BridgeService.GetWrtDetail:input_type -> proto.bridge_service.GetWrtDetailRequest
	135, // 441: proto.bridge_service.BridgeService.GetCustomerList:input_type -> proto.bridge_service.GetCustomerListRequest
	144, // 442: proto.bridge_service.BridgeService.GetCustomerDetail:input_type -> proto.bridge_service.GetCustomerDetailRequest
	55,  // 443: proto.bridge_service.BridgeService.UpdateCustomer:input_type -> proto.bridge_service.UpdateCustomerRequest
	363, // 444: proto.bridge_service.BridgeService.CreateCustomerGP:input_type -> proto.bridge_service.CreateCustomerGPRequest
	459, // 445: proto.bridge_service.BridgeService.UpdateCustomerGP:input_type -> proto.bridge_service.UpdateCustomerGPRequest
	486, // 446: proto.bridge_service.BridgeService.UpdateFixedVa:input_type -> proto.bridge_service.UpdateFixedVaRequest
	148, // 447: proto.bridge_service.BridgeService.GetOrderTypeList:input_type -> proto.bridge_service.GetOrderTypeListRequest
	150, // 448: proto.bridge_service.BridgeService.GetOrderTypeDetail:input_type -> proto.bridge_service.GetOrderTypeDetailRequest
	152, // 449: proto.bridge_service.BridgeService.GetSalesPaymentTermList:input_type -> proto.bridge_service.GetSalesPaymentTermListRequest
	154, // 450: proto.bridge_service.BridgeService.GetSalesPaymentTermDetail:input_type -> proto.bridge_service.GetSalesPaymentTermDetailRequest
	159, // 451: proto.bridge_service.BridgeService.GetDivisionList:input_type -> proto.bridge_service.GetDivisionListRequest
	161, // 452: proto.bridge_service.BridgeService.GetDivisionDetail:input_type -> proto.bridge_service.GetDivisionDetailRequest
	165, // 453: proto.bridge_service.BridgeService.GetDistrictList:input_type -> proto.bridge_service.GetDistrictListRequest
	167, // 454: proto.bridge_service.BridgeService.GetDistrictDetail:input_type -> proto.bridge_service.GetDistrictDetailRequest
	169, // 455: proto.bridge_service.BridgeService.GetDistrictInIdsList:input_type -> proto.bridge_service.GetDistrictInIdsListRequest
	171, // 456: proto.bridge_service.BridgeService.GetBankList:input_type -> proto.bridge_service.GetBankListRequest
	173, // 457: proto.bridge_service.BridgeService.GetBankDetail:input_type -> proto.bridge_service.GetBankDetailRequest
	176, // 458: proto.bridge_service.BridgeService.GetDeliveryFeeList:input_type -> proto.bridge_service.GetDeliveryFeeListRequest
	181, // 459: proto.bridge_service.BridgeService.GetDeliveryFeeDetail:input_type -> proto.bridge_service.GetDeliveryFeeDetailRequest
	179, // 460: proto.bridge_service.BridgeService.GetDeliveryFeeGPList:input_type -> proto.bridge_service.GetDeliveryFeeGPListRequest
	183, // 461: proto.bridge_service.BridgeService.GetVendorList:input_type -> proto.bridge_service.GetVendorListRequest
	185, // 462: proto.bridge_service.BridgeService.GetVendorDetail:input_type -> proto.bridge_service.GetVendorDetailRequest
	349, // 463: proto.bridge_service.BridgeService.CreateVendor:input_type -> proto.bridge_service.CreateVendorRequest
	187, // 464: proto.bridge_service.BridgeService.GetVendorOrganizationList:input_type -> proto.bridge_service.GetVendorOrganizationListRequest
	189, // 465: proto.bridge_service.BridgeService.GetVendorOrganizationDetail:input_type -> proto.bridge_service.GetVendorOrganizationDetailRequest
	191, // 466: proto.bridge_service.BridgeService.GetVendorClassificationList:input_type -> proto.bridge_service.GetVendorClassificationListRequest
	193, // 467: proto.bridge_service.BridgeService.GetVendorClassificationDetail:input_type -> proto.bridge_service.GetVendorClassificationDetailRequest
	389, // 468: proto.bridge_service.BridgeService.GetVendorOrganizationGPList:input_type -> proto.bridge_service.GetVendorOrganizationGPListRequest
	390, // 469: proto.bridge_service.BridgeService.GetVendorOrganizationGPDetail:input_type -> proto.bridge_service.GetVendorOrganizationGPDetailRequest
	195, // 470: proto.bridge_service.BridgeService.GetPurchasePlanList:input_type -> proto.bridge_service.GetPurchasePlanListRequest
	197, // 471: proto.bridge_service.BridgeService.GetPurchasePlanDetail:input_type -> proto.bridge_service.GetPurchasePlanDetailRequest
	199, // 472: proto.bridge_service.BridgeService.GetPurchasePlanItemList:input_type -> proto.bridge_service.GetPurchasePlanItemListRequest
	201, // 473: proto.bridge_service.BridgeService.GetPurchasePlanItemDetail:input_type -> proto.bridge_service.GetPurchasePlanItemDetailRequest
	351, // 474: proto.bridge_service.BridgeService.AssignPurchasePlanGP:input_type -> proto.bridge_service.AssignPurchasePlanGPRequest
	355, // 475: proto.bridge_service.BridgeService.CancelAssignPurchasePlan:input_type -> proto.bridge_service.CancelAssignPurchasePlanRequest
	377, // 476: proto.bridge_service.BridgeService.GetPurchasePlanGPList:input_type -> proto.bridge_service.GetPurchasePlanGPListRequest
	378, // 477: proto.bridge_service.BridgeService.GetPurchasePlanGPDetail:input_type -> proto.bridge_service.GetPurchasePlanGPDetailRequest
	215, // 478: proto.bridge_service.BridgeService.CreatePurchaseOrder:input_type -> proto.bridge_service.CreatePurchaseOrderRequest
	397, // 479: proto.bridge_service.BridgeService.CreatePurchaseOrderGP:input_type -> proto.bridge_service.CreatePurchaseOrderGPRequest
	242, // 480: proto.bridge_service.BridgeService.UpdatePurchaseOrder:input_type -> proto.bridge_service.UpdatePurchaseOrderRequest
	398, // 481: proto.bridge_service.BridgeService.UpdatePurchaseOrderGP:input_type -> proto.bridge_service.UpdatePurchaseOrderGPRequest
	243, // 482: proto.bridge_service.BridgeService.UpdateProductPurchaseOrder:input_type -> proto.bridge_service.UpdateProductPurchaseOrderRequest
	203, // 483: proto.bridge_service.BridgeService.GetPurchaseOrderList:input_type -> proto.bridge_service.GetPurchaseOrderListRequest
	205, // 484: proto.bridge_service.BridgeService.GetPurchaseOrderDetail:input_type -> proto.bridge_service.GetPurchaseOrderDetailRequest
	207, // 485: proto.bridge_service.BridgeService.GetPurchaseOrderItemList:input_type -> proto.bridge_service.GetPurchaseOrderItemListRequest
	209, // 486: proto.bridge_service.BridgeService.GetPurchaseOrderItemDetail:input_type -> proto.bridge_service.GetPurchaseOrderItemDetailRequest
	236, // 487: proto.bridge_service.BridgeService.CommitPurchaseOrder:input_type -> proto.bridge_service.CommitPurchaseOrderRequest
	237, // 488: proto.bridge_service.BridgeService.CancelPurchaseOrder:input_type -> proto.bridge_service.CancelPurchaseOrderRequest
	353, // 489: proto.bridge_service.BridgeService.CancelPurchaseOrderGP:input_type -> proto.bridge_service.CancelPurchaseOrderGPRequest
	383, // 490: proto.bridge_service.BridgeService.GetPurchaseOrderGPList:input_type -> proto.bridge_service.GetPurchaseOrderGPListRequest
	384, // 491: proto.bridge_service.BridgeService.GetPurchaseOrderGPDetail:input_type -> proto.bridge_service.GetPurchaseOrderGPDetailRequest
	449, // 492: proto.bridge_service.BridgeService.CommitPurchaseOrderGP:input_type -> proto.bridge_service.CommitPurchaseOrderGPRequest
	399, // 493: proto.bridge_service.BridgeService.CreateConsolidatedShipmentGP:input_type -> proto.bridge_service.CreateConsolidatedShipmentGPRequest
	402, // 494: proto.bridge_service.BridgeService.UpdateConsolidatedShipmentGP:input_type -> proto.bridge_service.UpdateConsolidatedShipmentGPRequest
	247, // 495: proto.bridge_service.BridgeService.GetItemTransferList:input_type -> proto.bridge_service.GetItemTransferListRequest
	249, // 496: proto.bridge_service.BridgeService.GetItemTransferDetail:input_type -> proto.bridge_service.GetItemTransferDetailRequest
	320, // 497: proto.bridge_service.BridgeService.GetItemTransferItemDetail:input_type -> proto.bridge_service.GetItemTransferItemDetailRequest
	316, // 498: proto.bridge_service.BridgeService.CreateItemTransfer:input_type -> proto.bridge_service.CreateItemTransferRequest
	318, // 499: proto.bridge_service.BridgeService.UpdateItemTransfer:input_type -> proto.bridge_service.UpdateItemTransferRequest
	322, // 500: proto.bridge_service.BridgeService.CommitItemTransfer:input_type -> proto.bridge_service.CommitItemTransferRequest
	410, // 501: proto.bridge_service.BridgeService.GetInTransitTransferGPList:input_type -> proto.bridge_service.GetInTransitTransferGPListRequest
	411, // 502: proto.bridge_service.BridgeService.GetInTransitTransferGPDetail:input_type -> proto.bridge_service.GetInTransitTransferGPDetailRequest
	421, // 503: proto.bridge_service.BridgeService.GetTransferRequestGPList:input_type -> proto.bridge_service.GetTransferRequestGPListRequest
	422, // 504: proto.bridge_service.BridgeService.GetTransferRequestGPDetail:input_type -> proto.bridge_service.GetTransferRequestGPDetailRequest
	446, // 505: proto.bridge_service.BridgeService.CreateTransferRequestGP:input_type -> proto.bridge_service.CreateTransferRequestGPRequest
	456, // 506: proto.bridge_service.BridgeService.UpdateTransferRequestGP:input_type -> proto.bridge_service.UpdateTransferRequestGPRequest
	457, // 507: proto.bridge_service.BridgeService.UpdateInTransitTransferGP:input_type -> proto.bridge_service.UpdateInTransitTransferGPRequest
	458, // 508: proto.bridge_service.BridgeService.CommitTransferRequestGP:input_type -> proto.bridge_service.CommitTransferRequestGPRequest
	325, // 509: proto.bridge_service.BridgeService.GetReceivingList:input_type -> proto.bridge_service.GetReceivingListRequest
	327, // 510: proto.bridge_service.BridgeService.GetReceivingDetail:input_type -> proto.bridge_service.GetReceivingDetailRequest
	329, // 511: proto.bridge_service.BridgeService.CreateReceiving:input_type -> proto.bridge_service.CreateReceivingRequest
	339, // 512: proto.bridge_service.BridgeService.ConfirmReceiving:input_type -> proto.bridge_service.ConfirmReceivingRequest
	453, // 513: proto.bridge_service.BridgeService.GetGoodsReceiptGPList:input_type -> proto.bridge_service.GetGoodsReceiptGPListRequest
	454, // 514: proto.bridge_service.BridgeService.GetGoodsReceiptGPDetail:input_type -> proto.bridge_service.GetGoodsReceiptGPDetailRequest
	469, // 515: proto.bridge_service.BridgeService.CreateGoodsReceiptGP:input_type -> proto.bridge_service.CreateGoodsReceiptGPRequest
	470, // 516: proto.bridge_service.BridgeService.UpdateGoodsReceiptGP:input_type -> proto.bridge_service.UpdateGoodsReceiptGPRequest
	357, // 517: proto.bridge_service.BridgeService.GetSalesInvoiceList:input_type -> proto.bridge_service.GetSalesInvoiceListRequest
	406, // 518: proto.bridge_service.BridgeService.GetSalesInvoiceGPList:input_type -> proto.bridge_service.GetSalesInvoiceGPListRequest
	408, // 519: proto.bridge_service.BridgeService.GetSalesInvoiceGPDetail:input_type -> proto.bridge_service.GetSalesInvoiceGPDetailRequest
	252, // 520: proto.bridge_service.BridgeService.GetSalesInvoiceDetail:input_type -> proto.bridge_service.GetSalesInvoiceDetailRequest
	255, // 521: proto.bridge_service.BridgeService.GetSalesPaymentList:input_type -> proto.bridge_service.GetSalesPaymentListRequest
	257, // 522: proto.bridge_service.BridgeService.GetSalesPaymentDetail:input_type -> proto.bridge_service.GetSalesPaymentDetailRequest
	260, // 523: proto.bridge_service.BridgeService.GetSalesInvoiceItemList:input_type -> proto.bridge_service.GetSalesInvoiceItemListRequest
	463, // 524: proto.bridge_service.BridgeService.CreateSalesInvoiceGP:input_type -> proto.bridge_service.CreateSalesInvoiceGPRequest
	471, // 525: proto.bridge_service.BridgeService.CreateSalesPaymentGP:input_type -> proto.bridge_service.CreateSalesPaymentGPRequest
	472, // 526: proto.bridge_service.BridgeService.CreateSalesPaymentGPnonPBD:input_type -> proto.bridge_service.CreateSalesPaymentGPnonPBDRequest
	475, // 527: proto.bridge_service.BridgeService.GetSalesPaymentGPList:input_type -> proto.bridge_service.GetSalesPaymentGPListRequest
	477, // 528: proto.bridge_service.BridgeService.GetSalesPaymentGPDetail:input_type -> proto.bridge_service.GetSalesPaymentGPDetailRequest
	484, // 529: proto.bridge_service.BridgeService.GetSalesMovementGP:input_type -> proto.bridge_service.GetSalesMovementGPRequest
	270, // 530: proto.bridge_service.BridgeService.GetDeliveryOrderDetail:input_type -> proto.bridge_service.GetDeliveryOrderDetailRequest
	274, // 531: proto.bridge_service.BridgeService.CreateDeliveryOrder:input_type -> proto.bridge_service.CreateDeliveryOrderRequest
	268, // 532: proto.bridge_service.BridgeService.GetDeliveryOrderListGP:input_type -> proto.bridge_service.GetDeliveryOrderGPListRequest
	432, // 533: proto.bridge_service.BridgeService.GetCashReceiptList:input_type -> proto.bridge_service.GetCashReceiptListRequest
	465, // 534: proto.bridge_service.BridgeService.CreateCashReceipt:input_type -> proto.bridge_service.CreateCashReceiptRequest
	435, // 535: proto.bridge_service.BridgeService.GetCustomerClassList:input_type -> proto.bridge_service.GetCustomerClassListRequest
	437, // 536: proto.bridge_service.BridgeService.GetCustomerClassDetail:input_type -> proto.bridge_service.GetCustomerClassDetailRequest
	439, // 537: proto.bridge_service.BridgeService.GetSalesPriceLevelList:input_type -> proto.bridge_service.GetSalesPriceLevelListRequest
	441, // 538: proto.bridge_service.BridgeService.GetSalesPriceLevelDetail:input_type -> proto.bridge_service.GetSalesPriceLevelDetailRequest
	443, // 539: proto.bridge_service.BridgeService.GetShippingMethodList:input_type -> proto.bridge_service.GetShippingMethodListRequest
	445, // 540: proto.bridge_service.BridgeService.GetShippingMethodDetail:input_type -> proto.bridge_service.GetShippingMethodDetailRequest
	481, // 541: proto.bridge_service.BridgeService.CreateVoucherGP:input_type -> proto.bridge_service.CreateVoucherGPRequest
	479, // 542: proto.bridge_service.BridgeService.GetVoucherGPList:input_type -> proto.bridge_service.GetVoucherGPListRequest
	239, // 543: proto.bridge_service.BridgeService.GetWrtGPList:output_type -> proto.bridge_service.GetWrtGPResponse
	239, // 544: proto.bridge_service.BridgeService.GetWrtGPDetail:output_type -> proto.bridge_service.GetWrtGPResponse
	68,  // 545: proto.bridge_service.BridgeService.GetItemGPList:output_type -> proto.bridge_service.GetItemGPResponse
	69,  // 546: proto.bridge_service.BridgeService.GetItemMasterComplexGP:output_type -> proto.bridge_service.GetItemMasterComplexGPListResponse
	68,  // 547: proto.bridge_service.BridgeService.GetItemGPDetail:output_type -> proto.bridge_service.GetItemGPResponse
	89,  // 548: proto.bridge_service.BridgeService.GetSiteGPList:output_type -> proto.bridge_service.GetSiteGPResponse
	89,  // 549: proto.bridge_service.BridgeService.GetSiteGPDetail:output_type -> proto.bridge_service.GetSiteGPResponse
	114, // 550: proto.bridge_service.BridgeService.GetCourierGPList:output_type -> proto.bridge_service.GetCourierGPResponse
	114, // 551: proto.bridge_service.BridgeService.GetCourierGPDetail:output_type -> proto.bridge_service.GetCourierGPResponse
	131, // 552: proto.bridge_service.BridgeService.GetCourierVendorGPList:output_type -> proto.bridge_service.GetCourierVendorGPResponse
	131, // 553: proto.bridge_service.BridgeService.GetCourierVendorGPDetail:output_type -> proto.bridge_service.GetCourierVendorGPResponse
	142, // 554: proto.bridge_service.BridgeService.GetVehicleProfileGPList:output_type -> proto.bridge_service.GetVehicleProfileGPResponse
	142, // 555: proto.bridge_service.BridgeService.GetVehicleProfileGPDetail:output_type -> proto.bridge_service.GetVehicleProfileGPResponse
	46,  // 556: proto.bridge_service.BridgeService.GetAdmDivisionGPList:output_type -> proto.bridge_service.GetAdmDivisionGPResponse
	46,  // 557: proto.bridge_service.BridgeService.GetAdmDivisionGPDetail:output_type -> proto.bridge_service.GetAdmDivisionGPResponse
	214, // 558: proto.bridge_service.BridgeService.GetAdmDivisionCoverageGPList:output_type -> proto.bridge_service.GetAdmDivisionCoverageGPResponse
	214, // 559: proto.bridge_service.BridgeService.GetAdmDivisionCoverageGPDetail:output_type -> proto.bridge_service.GetAdmDivisionCoverageGPResponse
	279, // 560: proto.bridge_service.BridgeService.GetPaymentMethodGPList:output_type -> proto.bridge_service.GetPaymentMethodGPResponse
	279, // 561: proto.bridge_service.BridgeService.GetPaymentMethodGPDetail:output_type -> proto.bridge_service.GetPaymentMethodGPResponse
	291, // 562: proto.bridge_service.BridgeService.GetPaymentTermGPList:output_type -> proto.bridge_service.GetPaymentTermGPResponse
	291, // 563: proto.bridge_service.BridgeService.GetPaymentTermGPDetail:output_type -> proto.bridge_service.GetPaymentTermGPResponse
	294, // 564: proto.bridge_service.BridgeService.GetSalesPersonGPList:output_type -> proto.bridge_service.GetSalesPersonGPResponse
	294, // 565: proto.bridge_service.BridgeService.GetSalesPersonGPDetail:output_type -> proto.bridge_service.GetSalesPersonGPResponse
	297, // 566: proto.bridge_service.BridgeService.GetCustomerTypeGPList:output_type -> proto.bridge_service.GetCustomerTypeGPResponse
	297, // 567: proto.bridge_service.BridgeService.GetCustomerTypeGPDetail:output_type -> proto.bridge_service.GetCustomerTypeGPResponse
	300, // 568: proto.bridge_service.BridgeService.GetArchetypeGPList:output_type -> proto.bridge_service.GetArchetypeGPResponse
	300, // 569: proto.bridge_service.BridgeService.GetArchetypeGPDetail:output_type -> proto.bridge_service.GetArchetypeGPResponse
	303, // 570: proto.bridge_service.BridgeService.GetOrderTypeGPList:output_type -> proto.bridge_service.GetOrderTypeGPResponse
	303, // 571: proto.bridge_service.BridgeService.GetOrderTypeGPDetail:output_type -> proto.bridge_service.GetOrderTypeGPResponse
	395, // 572: proto.bridge_service.BridgeService.GetVendorClassificationGPList:output_type -> proto.bridge_service.GetVendorClassificationGPResponse
	395, // 573: proto.bridge_service.BridgeService.GetVendorClassificationGPDetail:output_type -> proto.bridge_service.GetVendorClassificationGPResponse
	306, // 574: proto.bridge_service.BridgeService.GetUomGPList:output_type -> proto.bridge_service.GetUomGPResponse
	306, // 575: proto.bridge_service.BridgeService.GetUomGPDetail:output_type -> proto.bridge_service.GetUomGPResponse
	309, // 576: proto.bridge_service.BridgeService.GetItemClassGPList:output_type -> proto.bridge_service.GetItemClassGPResponse
	309, // 577: proto.bridge_service.BridgeService.GetItemClassGPDetail:output_type -> proto.bridge_service.GetItemClassGPResponse
	312, // 578: proto.bridge_service.BridgeService.GetSalesTerritoryGPList:output_type -> proto.bridge_service.GetSalesTerritoryGPResponse
	312, // 579: proto.bridge_service.BridgeService.GetSalesTerritoryGPDetail:output_type -> proto.bridge_service.GetSalesTerritoryGPResponse
	360, // 580: proto.bridge_service.BridgeService.GetCustomerGPList:output_type -> proto.bridge_service.GetCustomerGPResponse
	360, // 581: proto.bridge_service.BridgeService.GetCustomerGPDetail:output_type -> proto.bridge_service.GetCustomerGPResponse
	315, // 582: proto.bridge_service.BridgeService.GetAddressGPList:output_type -> proto.bridge_service.GetAddressGPResponse
	315, // 583: proto.bridge_service.BridgeService.GetAddressGPDetail:output_type -> proto.bridge_service.GetAddressGPResponse
	342, // 584: proto.bridge_service.BridgeService.GetVendorGPList:output_type -> proto.bridge_service.GetVendorGPResponse
	342, // 585: proto.bridge_service.BridgeService.GetVendorGPDetail:output_type -> proto.bridge_service.GetVendorGPResponse
	348, // 586: proto.bridge_service.BridgeService.GetHelperGPList:output_type -> proto.bridge_service.GetHelperGPResponse
	348, // 587: proto.bridge_service.BridgeService.GetHelperGPDetail:output_type -> proto.bridge_service.GetHelperGPResponse
	332, // 588: proto.bridge_service.BridgeService.CreateAddress:output_type -> proto.bridge_service.CreateAddressResponse
	334, // 589: proto.bridge_service.BridgeService.UpdateAddress:output_type -> proto.bridge_service.UpdateAddressResponse
	336, // 590: proto.bridge_service.BridgeService.SetDefaultAddress:output_type -> proto.bridge_service.SetDefaultAddressResponse
	338, // 591: proto.bridge_service.BridgeService.DeleteAddress:output_type -> proto.bridge_service.DeleteAddressResponse
	121, // 592: proto.bridge_service.BridgeService.GetTransactionListGPList:output_type -> proto.bridge_service.GetTransactionListGPResponse
	121, // 593: proto.bridge_service.BridgeService.GetTransactionListGPDetail:output_type -> proto.bridge_service.GetTransactionListGPResponse
	124, // 594: proto.bridge_service.BridgeService.GetTransactionDetailGPList:output_type -> proto.bridge_service.GetTransactionDetailGPResponse
	124, // 595: proto.bridge_service.BridgeService.GetTransactionDetailGPDetail:output_type -> proto.bridge_service.GetTransactionDetailGPResponse
	430, // 596: proto.bridge_service.BridgeService.CreateSalesOrderGP:output_type -> proto.bridge_service.CreateSalesOrderGPResponse
	225, // 597: proto.bridge_service.BridgeService.GetPickingOrderGPHeader:output_type -> proto.bridge_service.GetPickingOrderGPHeaderResponse
	227, // 598: proto.bridge_service.BridgeService.GetPickingOrderGPDetail:output_type -> proto.bridge_service.GetPickingOrderGPDetailResponse
	233, // 599: proto.bridge_service.BridgeService.SubmitPickingCheckingPickingOrder:output_type -> proto.bridge_service.SubmitPickingCheckingResponse
	235, // 600: proto.bridge_service.BridgeService.LoginHelper:output_type -> proto.bridge_service.LoginHelperResponse
	37,  // 601: proto.bridge_service.BridgeService.GetAddressList:output_type -> proto.bridge_service.GetAddressListResponse
	37,  // 602: proto.bridge_service.BridgeService.GetAddressListWithExcludedIds:output_type -> proto.bridge_service.GetAddressListResponse
	39,  // 603: proto.bridge_service.BridgeService.GetAddressDetail:output_type -> proto.bridge_service.GetAddressDetailResponse
	41,  // 604: proto.bridge_service.BridgeService.GetAdmDivisionList:output_type -> proto.bridge_service.GetAdmDivisionListResponse
	43,  // 605: proto.bridge_service.BridgeService.GetAdmDivisionDetail:output_type -> proto.bridge_service.GetAdmDivisionDetailResponse
	48,  // 606: proto.bridge_service.BridgeService.GetArchetypeList:output_type -> proto.bridge_service.GetArchetypeListResponse
	50,  // 607: proto.bridge_service.BridgeService.GetArchetypeDetail:output_type -> proto.bridge_service.GetArchetypeDetailResponse
	52,  // 608: proto.bridge_service.BridgeService.GetCustomerTypeList:output_type -> proto.bridge_service.GetCustomerTypeListResponse
	54,  // 609: proto.bridge_service.BridgeService.GetCustomerTypeDetail:output_type -> proto.bridge_service.GetCustomerTypeDetailResponse
	58,  // 610: proto.bridge_service.BridgeService.GetClassList:output_type -> proto.bridge_service.GetClassListResponse
	60,  // 611: proto.bridge_service.BridgeService.GetClassDetail:output_type -> proto.bridge_service.GetClassDetailResponse
	62,  // 612: proto.bridge_service.BridgeService.GetItemList:output_type -> proto.bridge_service.GetItemListResponse
	64,  // 613: proto.bridge_service.BridgeService.GetItemDetail:output_type -> proto.bridge_service.GetItemDetailResponse
	71,  // 614: proto.bridge_service.BridgeService.UpdateItemPackable:output_type -> proto.bridge_service.UpdateItemPackableResponse
	73,  // 615: proto.bridge_service.BridgeService.UpdateItemFragile:output_type -> proto.bridge_service.UpdateItemFragileResponse
	75,  // 616: proto.bridge_service.BridgeService.GetRegionList:output_type -> proto.bridge_service.GetRegionListResponse
	77,  // 617: proto.bridge_service.BridgeService.GetRegionDetail:output_type -> proto.bridge_service.GetRegionDetailResponse
	79,  // 618: proto.bridge_service.BridgeService.GetSalespersonList:output_type -> proto.bridge_service.GetSalespersonListResponse
	81,  // 619: proto.bridge_service.BridgeService.GetSalespersonDetail:output_type -> proto.bridge_service.GetSalespersonDetailResponse
	84,  // 620: proto.bridge_service.BridgeService.GetSiteList:output_type -> proto.bridge_service.GetSiteListResponse
	84,  // 621: proto.bridge_service.BridgeService.GetSiteInIdsList:output_type -> proto.bridge_service.GetSiteListResponse
	86,  // 622: proto.bridge_service.BridgeService.GetSiteDetail:output_type -> proto.bridge_service.GetSiteDetailResponse
	91,  // 623: proto.bridge_service.BridgeService.GetSubDistrictList:output_type -> proto.bridge_service.GetSubDistrictListResponse
	93,  // 624: proto.bridge_service.BridgeService.GetSubDistrictDetail:output_type -> proto.bridge_service.GetSubDistrictDetailResponse
	95,  // 625: proto.bridge_service.BridgeService.GetTerritoryList:output_type -> proto.bridge_service.GetTerritoryListResponse
	97,  // 626: proto.bridge_service.BridgeService.GetTerritoryDetail:output_type -> proto.bridge_service.GetTerritoryDetailResponse
	99,  // 627: proto.bridge_service.BridgeService.GetUomList:output_type -> proto.bridge_service.GetUomListResponse
	101, // 628: proto.bridge_service.BridgeService.GetUomDetail:output_type -> proto.bridge_service.GetUomDetailResponse
	103, // 629: proto.bridge_service.BridgeService.GetSalesOrderList:output_type -> proto.bridge_service.GetSalesOrderListResponse
	105, // 630: proto.bridge_service.BridgeService.GetSalesOrderDetail:output_type -> proto.bridge_service.GetSalesOrderDetailResponse
	116, // 631: proto.bridge_service.BridgeService.GetSalesOrderItemList:output_type -> proto.bridge_service.GetSalesOrderItemListResponse
	118, // 632: proto.bridge_service.BridgeService.GetSalesOrderItemDetail:output_type -> proto.bridge_service.GetSalesOrderItemDetailResponse
	107, // 633: proto.bridge_service.BridgeService.CreateSalesOrder:output_type -> proto.bridge_service.CreateSalesOrderResponse
	373, // 634: proto.bridge_service.BridgeService.GetSalesOrderListGPAll:output_type -> proto.bridge_service.GetSalesOrderGPListResponse
	373, // 635: proto.bridge_service.BridgeService.GetSalesOrderListGPByID:output_type -> proto.bridge_service.GetSalesOrderGPListResponse
	109, // 636: proto.bridge_service.BridgeService.GetCourierList:output_type -> proto.bridge_service.GetCourierListResponse
	111, // 637: proto.bridge_service.BridgeService.GetCourierDetail:output_type -> proto.bridge_service.GetCourierDetailResponse
	157, // 638: proto.bridge_service.BridgeService.ActivateEmergencyCourier:output_type -> proto.bridge_service.EmergencyCourierResponse
	157, // 639: proto.bridge_service.BridgeService.DeactivateEmergencyCourier:output_type -> proto.bridge_service.EmergencyCourierResponse
	126, // 640: proto.bridge_service.BridgeService.GetCourierVendorList:output_type -> proto.bridge_service.GetCourierVendorListResponse
	128, // 641: proto.bridge_service.BridgeService.GetCourierVendorDetail:output_type -> proto.bridge_service.GetCourierVendorDetailResponse
	137, // 642: proto.bridge_service.BridgeService.GetVehicleProfileList:output_type -> proto.bridge_service.GetVehicleProfileListResponse
	139, // 643: proto.bridge_service.BridgeService.GetVehicleProfileDetail:output_type -> proto.bridge_service.GetVehicleProfileDetailResponse
	133, // 644: proto.bridge_service.BridgeService.GetWrtList:output_type -> proto.bridge_service.GetWrtListResponse
	147, // 645: proto.bridge_service.BridgeService.GetWrtDetail:output_type -> proto.bridge_service.GetWrtDetailResponse
	143, // 646: proto.bridge_service.BridgeService.GetCustomerList:output_type -> proto.bridge_service.GetCustomerListResponse
	145, // 647: proto.bridge_service.BridgeService.GetCustomerDetail:output_type -> proto.bridge_service.GetCustomerDetailResponse
	56,  // 648: proto.bridge_service.BridgeService.UpdateCustomer:output_type -> proto.bridge_service.UpdateCustomerResponse
	364, // 649: proto.bridge_service.BridgeService.CreateCustomerGP:output_type -> proto.bridge_service.CreateCustomerGPResponse
	460, // 650: proto.bridge_service.BridgeService.UpdateCustomerGP:output_type -> proto.bridge_service.UpdateCustomerGPResponse
	487, // 651: proto.bridge_service.BridgeService.UpdateFixedVa:output_type -> proto.bridge_service.UpdateFixedVaResponse
	149, // 652: proto.bridge_service.BridgeService.GetOrderTypeList:output_type -> proto.bridge_service.GetOrderTypeListResponse
	151, // 653: proto.bridge_service.BridgeService.GetOrderTypeDetail:output_type -> proto.bridge_service.GetOrderTypeDetailResponse
	153, // 654: proto.bridge_service.BridgeService.GetSalesPaymentTermList:output_type -> proto.bridge_service.GetSalesPaymentTermListResponse
	155, // 655: proto.bridge_service.BridgeService.GetSalesPaymentTermDetail:output_type -> proto.bridge_service.GetSalesPaymentTermDetailResponse
	160, // 656: proto.bridge_service.BridgeService.GetDivisionList:output_type -> proto.bridge_service.GetDivisionListResponse
	162, // 657: proto.bridge_service.BridgeService.GetDivisionDetail:output_type -> proto.bridge_service.GetDivisionDetailResponse
	166, // 658: proto.bridge_service.BridgeService.GetDistrictList:output_type -> proto.bridge_service.GetDistrictListResponse
	168, // 659: proto.bridge_service.BridgeService.GetDistrictDetail:output_type -> proto.bridge_service.GetDistrictDetailResponse
	166, // 660: proto.bridge_service.BridgeService.GetDistrictInIdsList:output_type -> proto.bridge_service.GetDistrictListResponse
	172, // 661: proto.bridge_service.BridgeService.GetBankList:output_type -> proto.bridge_service.GetBankListResponse
	174, // 662: proto.bridge_service.BridgeService.GetBankDetail:output_type -> proto.bridge_service.GetBankDetailResponse
	177, // 663: proto.bridge_service.BridgeService.GetDeliveryFeeList:output_type -> proto.bridge_service.GetDeliveryFeeListResponse
	182, // 664: proto.bridge_service.BridgeService.GetDeliveryFeeDetail:output_type -> proto.bridge_service.GetDeliveryFeeDetailResponse
	180, // 665: proto.bridge_service.BridgeService.GetDeliveryFeeGPList:output_type -> proto.bridge_service.GetDeliveryFeeGPListResponse
	184, // 666: proto.bridge_service.BridgeService.GetVendorList:output_type -> proto.bridge_service.GetVendorListResponse
	186, // 667: proto.bridge_service.BridgeService.GetVendorDetail:output_type -> proto.bridge_service.GetVendorDetailResponse
	350, // 668: proto.bridge_service.BridgeService.CreateVendor:output_type -> proto.bridge_service.CreateVendorResponse
	188, // 669: proto.bridge_service.BridgeService.GetVendorOrganizationList:output_type -> proto.bridge_service.GetVendorOrganizationListResponse
	190, // 670: proto.bridge_service.BridgeService.GetVendorOrganizationDetail:output_type -> proto.bridge_service.GetVendorOrganizationDetailResponse
	192, // 671: proto.bridge_service.BridgeService.GetVendorClassificationList:output_type -> proto.bridge_service.GetVendorClassificationListResponse
	194, // 672: proto.bridge_service.BridgeService.GetVendorClassificationDetail:output_type -> proto.bridge_service.GetVendorClassificationDetailResponse
	391, // 673: proto.bridge_service.BridgeService.GetVendorOrganizationGPList:output_type -> proto.bridge_service.GetVendorOrganizationGPResponse
	391, // 674: proto.bridge_service.BridgeService.GetVendorOrganizationGPDetail:output_type -> proto.bridge_service.GetVendorOrganizationGPResponse
	196, // 675: proto.bridge_service.BridgeService.GetPurchasePlanList:output_type -> proto.bridge_service.GetPurchasePlanListResponse
	198, // 676: proto.bridge_service.BridgeService.GetPurchasePlanDetail:output_type -> proto.bridge_service.GetPurchasePlanDetailResponse
	200, // 677: proto.bridge_service.BridgeService.GetPurchasePlanItemList:output_type -> proto.bridge_service.GetPurchasePlanItemListResponse
	202, // 678: proto.bridge_service.BridgeService.GetPurchasePlanItemDetail:output_type -> proto.bridge_service.GetPurchasePlanItemDetailResponse
	352, // 679: proto.bridge_service.BridgeService.AssignPurchasePlanGP:output_type -> proto.bridge_service.AssignPurchasePlanGPResponse
	356, // 680: proto.bridge_service.BridgeService.CancelAssignPurchasePlan:output_type -> proto.bridge_service.CancelAssignPurchasePlanResponse
	379, // 681: proto.bridge_service.BridgeService.GetPurchasePlanGPList:output_type -> proto.bridge_service.GetPurchasePlanGPResponse
	379, // 682: proto.bridge_service.BridgeService.GetPurchasePlanGPDetail:output_type -> proto.bridge_service.GetPurchasePlanGPResponse
	206, // 683: proto.bridge_service.BridgeService.CreatePurchaseOrder:output_type -> proto.bridge_service.GetPurchaseOrderDetailResponse
	217, // 684: proto.bridge_service.BridgeService.CreatePurchaseOrderGP:output_type -> proto.bridge_service.CreatePurchaseOrderGPResponse
	206, // 685: proto.bridge_service.BridgeService.UpdatePurchaseOrder:output_type -> proto.bridge_service.GetPurchaseOrderDetailResponse
	217, // 686: proto.bridge_service.BridgeService.UpdatePurchaseOrderGP:output_type -> proto.bridge_service.CreatePurchaseOrderGPResponse
	206, // 687: proto.bridge_service.BridgeService.UpdateProductPurchaseOrder:output_type -> proto.bridge_service.GetPurchaseOrderDetailResponse
	204, // 688: proto.bridge_service.BridgeService.GetPurchaseOrderList:output_type -> proto.bridge_service.GetPurchaseOrderListResponse
	206, // 689: proto.bridge_service.BridgeService.GetPurchaseOrderDetail:output_type -> proto.bridge_service.GetPurchaseOrderDetailResponse
	208, // 690: proto.bridge_service.BridgeService.GetPurchaseOrderItemList:output_type -> proto.bridge_service.GetPurchaseOrderItemListResponse
	210, // 691: proto.bridge_service.BridgeService.GetPurchaseOrderItemDetail:output_type -> proto.bridge_service.GetPurchaseOrderItemDetailResponse
	206, // 692: proto.bridge_service.BridgeService.CommitPurchaseOrder:output_type -> proto.bridge_service.GetPurchaseOrderDetailResponse
	206, // 693: proto.bridge_service.BridgeService.CancelPurchaseOrder:output_type -> proto.bridge_service.GetPurchaseOrderDetailResponse
	354, // 694: proto.bridge_service.BridgeService.CancelPurchaseOrderGP:output_type -> proto.bridge_service.CancelPurchaseOrderGPResponse
	385, // 695: proto.bridge_service.BridgeService.GetPurchaseOrderGPList:output_type -> proto.bridge_service.GetPurchaseOrderGPResponse
	385, // 696: proto.bridge_service.BridgeService.GetPurchaseOrderGPDetail:output_type -> proto.bridge_service.GetPurchaseOrderGPResponse
	447, // 697: proto.bridge_service.BridgeService.CommitPurchaseOrderGP:output_type -> proto.bridge_service.CreateTransferRequestGPResponse
	400, // 698: proto.bridge_service.BridgeService.CreateConsolidatedShipmentGP:output_type -> proto.bridge_service.CreateConsolidatedShipmentGPResponse
	403, // 699: proto.bridge_service.BridgeService.UpdateConsolidatedShipmentGP:output_type -> proto.bridge_service.UpdateConsolidatedShipmentGPResponse
	248, // 700: proto.bridge_service.BridgeService.GetItemTransferList:output_type -> proto.bridge_service.GetItemTransferListResponse
	250, // 701: proto.bridge_service.BridgeService.GetItemTransferDetail:output_type -> proto.bridge_service.GetItemTransferDetailResponse
	321, // 702: proto.bridge_service.BridgeService.GetItemTransferItemDetail:output_type -> proto.bridge_service.GetItemTransferItemDetailResponse
	250, // 703: proto.bridge_service.BridgeService.CreateItemTransfer:output_type -> proto.bridge_service.GetItemTransferDetailResponse
	250, // 704: proto.bridge_service.BridgeService.UpdateItemTransfer:output_type -> proto.bridge_service.GetItemTransferDetailResponse
	250, // 705: proto.bridge_service.BridgeService.CommitItemTransfer:output_type -> proto.bridge_service.GetItemTransferDetailResponse
	420, // 706: proto.bridge_service.BridgeService.GetInTransitTransferGPList:output_type -> proto.bridge_service.GetInTransitTransferGPResponse
	420, // 707: proto.bridge_service.BridgeService.GetInTransitTransferGPDetail:output_type -> proto.bridge_service.GetInTransitTransferGPResponse
	428, // 708: proto.bridge_service.BridgeService.GetTransferRequestGPList:output_type -> proto.bridge_service.GetTransferRequestGPResponse
	428, // 709: proto.bridge_service.BridgeService.GetTransferRequestGPDetail:output_type -> proto.bridge_service.GetTransferRequestGPResponse
	447, // 710: proto.bridge_service.BridgeService.CreateTransferRequestGP:output_type -> proto.bridge_service.CreateTransferRequestGPResponse
	447, // 711: proto.bridge_service.BridgeService.UpdateTransferRequestGP:output_type -> proto.bridge_service.CreateTransferRequestGPResponse
	448, // 712: proto.bridge_service.BridgeService.UpdateInTransitTransferGP:output_type -> proto.bridge_service.UpdateInTransitTransferGPResponse
	461, // 713: proto.bridge_service.BridgeService.CommitTransferRequestGP:output_type -> proto.bridge_service.CommitTransferRequestGPResponse
	326, // 714: proto.bridge_service.BridgeService.GetReceivingList:output_type -> proto.bridge_service.GetReceivingListResponse
	328, // 715: proto.bridge_service.BridgeService.GetReceivingDetail:output_type -> proto.bridge_service.GetReceivingDetailResponse
	328, // 716: proto.bridge_service.BridgeService.CreateReceiving:output_type -> proto.bridge_service.GetReceivingDetailResponse
	328, // 717: proto.bridge_service.BridgeService.ConfirmReceiving:output_type -> proto.bridge_service.GetReceivingDetailResponse
	455, // 718: proto.bridge_service.BridgeService.GetGoodsReceiptGPList:output_type -> proto.bridge_service.GetGoodsReceiptGPResponse
	455, // 719: proto.bridge_service.BridgeService.GetGoodsReceiptGPDetail:output_type -> proto.bridge_service.GetGoodsReceiptGPResponse
	447, // 720: proto.bridge_service.BridgeService.CreateGoodsReceiptGP:output_type -> proto.bridge_service.CreateTransferRequestGPResponse
	447, // 721: proto.bridge_service.BridgeService.UpdateGoodsReceiptGP:output_type -> proto.bridge_service.CreateTransferRequestGPResponse
	358, // 722: proto.bridge_service.BridgeService.GetSalesInvoiceList:output_type -> proto.bridge_service.GetSalesInvoiceListResponse
	407, // 723: proto.bridge_service.BridgeService.GetSalesInvoiceGPList:output_type -> proto.bridge_service.GetSalesInvoiceGPListResponse
	409, // 724: proto.bridge_service.BridgeService.GetSalesInvoiceGPDetail:output_type -> proto.bridge_service.GetSalesInvoiceGPDetailResponse
	253, // 725: proto.bridge_service.BridgeService.GetSalesInvoiceDetail:output_type -> proto.bridge_service.GetSalesInvoiceDetailResponse
	256, // 726: proto.bridge_service.BridgeService.GetSalesPaymentList:output_type -> proto.bridge_service.GetSalesPaymentListResponse
	258, // 727: proto.bridge_service.BridgeService.GetSalesPaymentDetail:output_type -> proto.bridge_service.GetSalesPaymentDetailResponse
	261, // 728: proto.bridge_service.BridgeService.GetSalesInvoiceItemList:output_type -> proto.bridge_service.GetSalesInvoiceItemListResponse
	464, // 729: proto.bridge_service.BridgeService.CreateSalesInvoiceGP:output_type -> proto.bridge_service.CreateSalesInvoiceGPResponse
	464, // 730: proto.bridge_service.BridgeService.CreateSalesPaymentGP:output_type -> proto.bridge_service.CreateSalesInvoiceGPResponse
	473, // 731: proto.bridge_service.BridgeService.CreateSalesPaymentGPnonPBD:output_type -> proto.bridge_service.CreateSalesPaymentGPnonPBDResponse
	476, // 732: proto.bridge_service.BridgeService.GetSalesPaymentGPList:output_type -> proto.bridge_service.GetSalesPaymentGPResponse
	476, // 733: proto.bridge_service.BridgeService.GetSalesPaymentGPDetail:output_type -> proto.bridge_service.GetSalesPaymentGPResponse
	485, // 734: proto.bridge_service.BridgeService.GetSalesMovementGP:output_type -> proto.bridge_service.GetSalesMovementGPResponse
	271, // 735: proto.bridge_service.BridgeService.GetDeliveryOrderDetail:output_type -> proto.bridge_service.GetDeliveryOrderDetailResponse
	275, // 736: proto.bridge_service.BridgeService.CreateDeliveryOrder:output_type -> proto.bridge_service.CreateDeliveryOrderResponse
	269, // 737: proto.bridge_service.BridgeService.GetDeliveryOrderListGP:output_type -> proto.bridge_service.GetDeliveryOrderGPListResponse
	433, // 738: proto.bridge_service.BridgeService.GetCashReceiptList:output_type -> proto.bridge_service.GetCashReceiptListResponse
	466, // 739: proto.bridge_service.BridgeService.CreateCashReceipt:output_type -> proto.bridge_service.CreateCashReceiptResponse
	436, // 740: proto.bridge_service.BridgeService.GetCustomerClassList:output_type -> proto.bridge_service.GetCustomerClassResponse
	436, // 741: proto.bridge_service.BridgeService.GetCustomerClassDetail:output_type -> proto.bridge_service.GetCustomerClassResponse
	440, // 742: proto.bridge_service.BridgeService.GetSalesPriceLevelList:output_type -> proto.bridge_service.GetSalesPriceLevelResponse
	440, // 743: proto.bridge_service.BridgeService.GetSalesPriceLevelDetail:output_type -> proto.bridge_service.GetSalesPriceLevelResponse
	444, // 744: proto.bridge_service.BridgeService.GetShippingMethodList:output_type -> proto.bridge_service.GetShippingMethodResponse
	444, // 745: proto.bridge_service.BridgeService.GetShippingMethodDetail:output_type -> proto.bridge_service.GetShippingMethodResponse
	482, // 746: proto.bridge_service.BridgeService.CreateVoucherGP:output_type -> proto.bridge_service.CreateVoucherGPResponse
	480, // 747: proto.bridge_service.BridgeService.GetVoucherGPList:output_type -> proto.bridge_service.GetVoucherGPResponse
	543, // [543:748] is the sub-list for method output_type
	338, // [338:543] is the sub-list for method input_type
	338, // [338:338] is the sub-list for extension type_name
	338, // [338:338] is the sub-list for extension extendee
	0,   // [0:338] is the sub-list for field type_name
}

func init() { file_proto_bridge_service_bridge_service_proto_init() }
func file_proto_bridge_service_bridge_service_proto_init() {
	if File_proto_bridge_service_bridge_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_bridge_service_bridge_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdmDivision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdmDivisionGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Archetype); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Class); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesPaymentTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemMasterComplexGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Region); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Salesperson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Site); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SiteGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubDistrict); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Territory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesOrderItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionListGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionDetailGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wrt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Courier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourierGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourierVendor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourierVendorGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleProfileGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vendor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorClassification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchasePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchasePlanItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseOrderItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdmDivisionListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdmDivisionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdmDivisionDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdmDivisionDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdmDivisionGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdmDivisionGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdmDivisionGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArchetypeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArchetypeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArchetypeDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArchetypeDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerTypeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerTypeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerTypeDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerTypeDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClassListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClassListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClassDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClassDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemMasterComplexGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemMasterComplexGPListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateItemPackableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateItemPackableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateItemFragileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateItemFragileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegionListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegionDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegionDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalespersonListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalespersonListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalespersonDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalespersonDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSiteListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSiteInIdsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSiteListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSiteDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSiteDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSiteGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSiteGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSiteGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubDistrictListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubDistrictListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubDistrictDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubDistrictDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTerritoryListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTerritoryListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTerritoryDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTerritoryDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUomListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUomListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUomDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUomDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesOrderListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesOrderListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesOrderDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesOrderDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSalesOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSalesOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCourierListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCourierListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCourierDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCourierDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCourierGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCourierGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCourierGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesOrderItemListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesOrderItemListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesOrderItemDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesOrderItemDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionListGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionListGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionListGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionDetailGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionDetailGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionDetailGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCourierVendorListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCourierVendorListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCourierVendorDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCourierVendorDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCourierVendorGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCourierVendorGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCourierVendorGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWrtListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWrtListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Customer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVehicleProfileListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVehicleProfileListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVehicleProfileDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVehicleProfileDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVehicleProfileGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVehicleProfileGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVehicleProfileGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWrtDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWrtDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderTypeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderTypeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderTypeDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderTypeDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaymentTermListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaymentTermListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaymentTermDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaymentTermDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmergencyCourierRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmergencyCourierResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Division); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDivisionListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDivisionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDivisionDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDivisionDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressListWithExcludedIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*District); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDistrictListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDistrictListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDistrictDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDistrictDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDistrictInIdsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBankListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBankListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBankDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBankDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeliveryFeeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeliveryFeeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryFeeGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeliveryFeeGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeliveryFeeGPListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeliveryFeeDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeliveryFeeDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorOrganizationListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorOrganizationListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorOrganizationDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorOrganizationDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorClassificationListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorClassificationListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorClassificationDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorClassificationDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchasePlanListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchasePlanListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchasePlanDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchasePlanDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchasePlanItemListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchasePlanItemListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchasePlanItemDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchasePlanItemDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseOrderListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseOrderListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseOrderDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseOrderDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseOrderItemListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseOrderItemListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseOrderItemDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseOrderItemDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdmDivisionCoverageGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdmDivisionCoverageGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdmDivisionCoverageGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdmDivisionCoverageGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePurchaseOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePurchaseOrderItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePurchaseOrderGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickingOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickingOrderDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickingOrderGPHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickingOrderGPDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickingOrderGPProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPickingOrderGPHeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPickingOrderGPHeaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPickingOrderGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPickingOrderGPDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickingDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Picking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckingDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Checking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitPickingCheckingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitPickingCheckingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginHelperRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginHelperResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitPurchaseOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelPurchaseOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WrtGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWrtGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWrtGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWrtGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePurchaseOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProductPurchaseOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePurchaseOrderItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemTransferItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemTransferListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemTransferListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemTransferDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemTransferDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesInvoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesInvoiceDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesInvoiceDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaymentListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaymentListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaymentDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaymentDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesInvoiceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesInvoiceItemListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesInvoiceItemListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeliveryOrderListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeliveryOrderListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryOrderGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeliveryOrderGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeliveryOrderGPListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeliveryOrderDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeliveryOrderDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeliveryOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeliveryOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethodGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentMethodGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentMethodGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentMethodGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentTermGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesPersonGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerTypeGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchetypeGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderTypeGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UomGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemClassGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesTerritoryGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentTermGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentTermGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentTermGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPersonGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPersonGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPersonGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerTypeGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerTypeGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerTypeGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArchetypeGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArchetypeGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArchetypeGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderTypeGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderTypeGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderTypeGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUomGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUomGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUomGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemClassGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemClassGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemClassGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesTerritoryGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesTerritoryGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesTerritoryGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateItemTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateItemTransferItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateItemTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateItemTransferItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemTransferItemDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemTransferItemDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitItemTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Receiving); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivingItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReceivingListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReceivingListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReceivingDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReceivingDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReceivingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReceivingItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmReceivingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivingListinDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelperGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHelperGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHelperGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHelperGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVendorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVendorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignPurchasePlanGPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignPurchasePlanGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelPurchaseOrderGPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelPurchaseOrderGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelAssignPurchasePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelAssignPurchasePlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesInvoiceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesInvoiceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCustomerGPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCustomerGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerAddressGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdministrativeDivision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustAddrTypeShipTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustAddrTypeBillTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustAddrTypeStatementTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pymtrmid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesOrderGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesOrderGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesOrderGPListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesOrderGPListByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerTypefromCustomerGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdministrativeDiv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchasePlanGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchasePlanGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchasePlanGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchasePlanGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorOrganizationPP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SitePP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseOrderGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseOrderGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseOrderGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Poinvoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseOrderGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorOrganizationGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorOrganizationGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorOrganizationGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorOrganizationGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorClassificationGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorClassificationGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVendorClassificationGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorClassificationGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[397].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePurchaseOrderGPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[398].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePurchaseOrderGPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[399].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConsolidatedShipmentGPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[400].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConsolidatedShipmentGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[401].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseOrderConsolidatedShipment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[402].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConsolidatedShipmentGPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[403].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConsolidatedShipmentGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[404].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[405].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesInvoiceGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[406].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesInvoiceGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[407].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesInvoiceGPListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[408].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesInvoiceGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[409].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesInvoiceGPDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[410].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInTransitTransferGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[411].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInTransitTransferGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[412].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InTransitTransferDetailGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[413].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InTransitTransferGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[414].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[415].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[416].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[417].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[418].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[419].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[420].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInTransitTransferGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[421].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransferRequestGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[422].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransferRequestGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[423].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferRequestDetailGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[424].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferRequestGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[425].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[426].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InTransitTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[427].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SiteLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[428].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransferRequestGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[429].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSalesOrderGPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[430].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSalesOrderGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[431].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CashReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[432].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCashReceiptListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[433].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCashReceiptListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[434].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[435].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerClassListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[436].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerClassResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[437].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerClassDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[438].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesPriceLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[439].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPriceLevelListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[440].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPriceLevelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[441].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPriceLevelDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[442].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShippingMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[443].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShippingMethodListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[444].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShippingMethodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[445].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShippingMethodDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[446].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransferRequestGPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[447].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransferRequestGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[448].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInTransitTransferGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[449].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitPurchaseOrderGPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[450].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[451].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntrxList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[452].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodsReceiptGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[453].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsReceiptGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[454].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsReceiptGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[455].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsReceiptGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[456].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTransferRequestGPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[457].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInTransitTransferGPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[458].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitTransferRequestGPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[459].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomerGPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[460].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomerGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[461].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitTransferRequestGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[462].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InTransit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[463].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSalesInvoiceGPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[464].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSalesInvoiceGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[465].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCashReceiptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[466].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCashReceiptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[467].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCashReceiptnonPBDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[468].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCashReceiptnonPBDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[469].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodsReceiptGPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[470].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodsReceiptGPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[471].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSalesPaymentGPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[472].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSalesPaymentGPnonPBDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[473].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSalesPaymentGPnonPBDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[474].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesPaymentGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[475].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaymentGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[476].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaymentGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[477].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesPaymentGPDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[478].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoucherGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[479].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVoucherGPListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[480].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVoucherGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[481].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVoucherGPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[482].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVoucherGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[483].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesMovement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[484].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesMovementGPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[485].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSalesMovementGPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[486].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFixedVaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[487].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFixedVaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[488].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemMasterComplexGP_PriceLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[489].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemMasterComplexGP_Site); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[490].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemMasterComplexGP_PriceTiering); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[491].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitPickingCheckingResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[492].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitPickingCheckingResponse_Data_Checking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[493].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitPickingCheckingResponse_Data_DeliveryOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[494].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitPickingCheckingResponse_Data_SalesInvoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[495].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorGP_Vpymtrmid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[496].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorGP_Vorganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[497].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorGP_Vclassification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[498].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorGP_Vpaymentmethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[499].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorGP_Vlatestgoodsreceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[500].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorGP_VVendorAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[501].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorGP_AdministrativeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[502].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelperGP_HelperGPSites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[503].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesOrderGP_VoucherDetailGP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[504].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesOrderGP_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[505].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesOrderGP_TermOfPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[506].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesOrderGP_Territory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[507].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchasePlanGP_AssignedTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[508].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchasePlanGP_CreatedBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[509].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchasePlanGP_AssignedBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[510].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchasePlanGP_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[511].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SitePP_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[512].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SitePP_Location_AdminDivision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[513].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePurchaseOrderGPRequest_Podtl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[514].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePurchaseOrderGPRequestCsReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[515].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePurchaseOrderGPRequest_Podtl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[516].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePurchaseOrderGPRequestCsReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[517].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesInvoiceGP_CashReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[518].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesInvoiceGP_SalesOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[519].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesInvoiceGP_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[520].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSalesOrderGPRequest_DetailItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[521].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSalesOrderGPRequest_VoucherApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[522].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CashReceipt_SalesInvoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[523].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CashReceipt_SalesOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[524].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransferRequestGPRequest_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[525].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTransferRequestGPRequest_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[526].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInTransitTransferGPRequest_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[527].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitTransferRequestGPRequest_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[528].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSalesInvoiceGPRequest_VoucherApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[529].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSalesInvoiceGPRequest_AmountReceived); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[530].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSalesInvoiceGPRequest_DetailItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[531].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCashReceiptnonPBDRequest_ApplyTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[532].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodsReceiptGPRequest_GoodsReceiptDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[533].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodsReceiptGPRequest_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[534].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSalesPaymentGPnonPBDRequest_ApplyTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[535].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesPaymentGP_SalesInvoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[536].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesPaymentGP_SalesOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[537].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoucherGP_Restriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[538].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoucherGP_AdvancedProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[539].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVoucherGPRequest_Restriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[540].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVoucherGPRequest_AdvancedProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[541].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesMovement_Picking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[542].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesMovement_Checking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[543].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesMovement_DeliveryOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[544].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesMovement_CashReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_bridge_service_bridge_service_proto_msgTypes[545].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SalesMovement_SalesReturn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_bridge_service_bridge_service_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_proto_bridge_service_bridge_service_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_proto_bridge_service_bridge_service_proto_msgTypes[238].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_bridge_service_bridge_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   546,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_bridge_service_bridge_service_proto_goTypes,
		DependencyIndexes: file_proto_bridge_service_bridge_service_proto_depIdxs,
		MessageInfos:      file_proto_bridge_service_bridge_service_proto_msgTypes,
	}.Build()
	File_proto_bridge_service_bridge_service_proto = out.File
	file_proto_bridge_service_bridge_service_proto_rawDesc = nil
	file_proto_bridge_service_bridge_service_proto_goTypes = nil
	file_proto_bridge_service_bridge_service_proto_depIdxs = nil
}
