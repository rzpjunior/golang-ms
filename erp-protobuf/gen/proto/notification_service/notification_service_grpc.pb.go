// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: proto/notification_service/notification_service.proto

package notification_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	SendNotificationTransaction(ctx context.Context, in *SendNotificationTransactionRequest, opts ...grpc.CallOption) (*SendNotificationTransactionResponse, error)
	GetNotificationTransactionList(ctx context.Context, in *GetNotificationTransactionListRequest, opts ...grpc.CallOption) (*GetNotificationTransactionListResponse, error)
	UpdateReadNotificationTransaction(ctx context.Context, in *UpdateReadNotificationTransactionRequest, opts ...grpc.CallOption) (*UpdateReadNotificationTransactionResponse, error)
	CountUnreadNotificationTransaction(ctx context.Context, in *CountUnreadNotificationTransactionRequest, opts ...grpc.CallOption) (*CountUnreadNotificationTransactionResponse, error)
	SendNotificationCampaign(ctx context.Context, in *SendNotificationCampaignRequest, opts ...grpc.CallOption) (*SendNotificationCampaignResponse, error)
	GetNotificationCampaignList(ctx context.Context, in *GetNotificationCampaignListRequest, opts ...grpc.CallOption) (*GetNotificationCampaignListResponse, error)
	UpdateReadNotificationCampaign(ctx context.Context, in *UpdateReadNotificationCampaignRequest, opts ...grpc.CallOption) (*UpdateReadNotificationCampaignResponse, error)
	CountUnreadNotificationCampaign(ctx context.Context, in *CountUnreadNotificationCampaignRequest, opts ...grpc.CallOption) (*CountUnreadNotificationCampaignResponse, error)
	SendNotificationHelper(ctx context.Context, in *SendNotificationHelperRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	SendNotificationPurchaser(ctx context.Context, in *SendNotificationPurchaserRequest, opts ...grpc.CallOption) (*SendNotificationPurchaserResponse, error)
	SendNotificationCancelSalesOrder(ctx context.Context, in *SendNotificationCancelSalesOrderRequest, opts ...grpc.CallOption) (*SendNotificationCancelSalesOrderResponse, error)
	SendNotificationPaymentReminder(ctx context.Context, in *SendNotificationPaymentReminderRequest, opts ...grpc.CallOption) (*SendNotificationPaymentReminderResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) SendNotificationTransaction(ctx context.Context, in *SendNotificationTransactionRequest, opts ...grpc.CallOption) (*SendNotificationTransactionResponse, error) {
	out := new(SendNotificationTransactionResponse)
	err := c.cc.Invoke(ctx, "/proto.notification_service.NotificationService/SendNotificationTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotificationTransactionList(ctx context.Context, in *GetNotificationTransactionListRequest, opts ...grpc.CallOption) (*GetNotificationTransactionListResponse, error) {
	out := new(GetNotificationTransactionListResponse)
	err := c.cc.Invoke(ctx, "/proto.notification_service.NotificationService/GetNotificationTransactionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UpdateReadNotificationTransaction(ctx context.Context, in *UpdateReadNotificationTransactionRequest, opts ...grpc.CallOption) (*UpdateReadNotificationTransactionResponse, error) {
	out := new(UpdateReadNotificationTransactionResponse)
	err := c.cc.Invoke(ctx, "/proto.notification_service.NotificationService/UpdateReadNotificationTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) CountUnreadNotificationTransaction(ctx context.Context, in *CountUnreadNotificationTransactionRequest, opts ...grpc.CallOption) (*CountUnreadNotificationTransactionResponse, error) {
	out := new(CountUnreadNotificationTransactionResponse)
	err := c.cc.Invoke(ctx, "/proto.notification_service.NotificationService/CountUnreadNotificationTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendNotificationCampaign(ctx context.Context, in *SendNotificationCampaignRequest, opts ...grpc.CallOption) (*SendNotificationCampaignResponse, error) {
	out := new(SendNotificationCampaignResponse)
	err := c.cc.Invoke(ctx, "/proto.notification_service.NotificationService/SendNotificationCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotificationCampaignList(ctx context.Context, in *GetNotificationCampaignListRequest, opts ...grpc.CallOption) (*GetNotificationCampaignListResponse, error) {
	out := new(GetNotificationCampaignListResponse)
	err := c.cc.Invoke(ctx, "/proto.notification_service.NotificationService/GetNotificationCampaignList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UpdateReadNotificationCampaign(ctx context.Context, in *UpdateReadNotificationCampaignRequest, opts ...grpc.CallOption) (*UpdateReadNotificationCampaignResponse, error) {
	out := new(UpdateReadNotificationCampaignResponse)
	err := c.cc.Invoke(ctx, "/proto.notification_service.NotificationService/UpdateReadNotificationCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) CountUnreadNotificationCampaign(ctx context.Context, in *CountUnreadNotificationCampaignRequest, opts ...grpc.CallOption) (*CountUnreadNotificationCampaignResponse, error) {
	out := new(CountUnreadNotificationCampaignResponse)
	err := c.cc.Invoke(ctx, "/proto.notification_service.NotificationService/CountUnreadNotificationCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendNotificationHelper(ctx context.Context, in *SendNotificationHelperRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/proto.notification_service.NotificationService/SendNotificationHelper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendNotificationPurchaser(ctx context.Context, in *SendNotificationPurchaserRequest, opts ...grpc.CallOption) (*SendNotificationPurchaserResponse, error) {
	out := new(SendNotificationPurchaserResponse)
	err := c.cc.Invoke(ctx, "/proto.notification_service.NotificationService/SendNotificationPurchaser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendNotificationCancelSalesOrder(ctx context.Context, in *SendNotificationCancelSalesOrderRequest, opts ...grpc.CallOption) (*SendNotificationCancelSalesOrderResponse, error) {
	out := new(SendNotificationCancelSalesOrderResponse)
	err := c.cc.Invoke(ctx, "/proto.notification_service.NotificationService/SendNotificationCancelSalesOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SendNotificationPaymentReminder(ctx context.Context, in *SendNotificationPaymentReminderRequest, opts ...grpc.CallOption) (*SendNotificationPaymentReminderResponse, error) {
	out := new(SendNotificationPaymentReminderResponse)
	err := c.cc.Invoke(ctx, "/proto.notification_service.NotificationService/SendNotificationPaymentReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations should embed UnimplementedNotificationServiceServer
// for forward compatibility
type NotificationServiceServer interface {
	SendNotificationTransaction(context.Context, *SendNotificationTransactionRequest) (*SendNotificationTransactionResponse, error)
	GetNotificationTransactionList(context.Context, *GetNotificationTransactionListRequest) (*GetNotificationTransactionListResponse, error)
	UpdateReadNotificationTransaction(context.Context, *UpdateReadNotificationTransactionRequest) (*UpdateReadNotificationTransactionResponse, error)
	CountUnreadNotificationTransaction(context.Context, *CountUnreadNotificationTransactionRequest) (*CountUnreadNotificationTransactionResponse, error)
	SendNotificationCampaign(context.Context, *SendNotificationCampaignRequest) (*SendNotificationCampaignResponse, error)
	GetNotificationCampaignList(context.Context, *GetNotificationCampaignListRequest) (*GetNotificationCampaignListResponse, error)
	UpdateReadNotificationCampaign(context.Context, *UpdateReadNotificationCampaignRequest) (*UpdateReadNotificationCampaignResponse, error)
	CountUnreadNotificationCampaign(context.Context, *CountUnreadNotificationCampaignRequest) (*CountUnreadNotificationCampaignResponse, error)
	SendNotificationHelper(context.Context, *SendNotificationHelperRequest) (*SuccessResponse, error)
	SendNotificationPurchaser(context.Context, *SendNotificationPurchaserRequest) (*SendNotificationPurchaserResponse, error)
	SendNotificationCancelSalesOrder(context.Context, *SendNotificationCancelSalesOrderRequest) (*SendNotificationCancelSalesOrderResponse, error)
	SendNotificationPaymentReminder(context.Context, *SendNotificationPaymentReminderRequest) (*SendNotificationPaymentReminderResponse, error)
}

// UnimplementedNotificationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (UnimplementedNotificationServiceServer) SendNotificationTransaction(context.Context, *SendNotificationTransactionRequest) (*SendNotificationTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotificationTransaction not implemented")
}
func (UnimplementedNotificationServiceServer) GetNotificationTransactionList(context.Context, *GetNotificationTransactionListRequest) (*GetNotificationTransactionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationTransactionList not implemented")
}
func (UnimplementedNotificationServiceServer) UpdateReadNotificationTransaction(context.Context, *UpdateReadNotificationTransactionRequest) (*UpdateReadNotificationTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReadNotificationTransaction not implemented")
}
func (UnimplementedNotificationServiceServer) CountUnreadNotificationTransaction(context.Context, *CountUnreadNotificationTransactionRequest) (*CountUnreadNotificationTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountUnreadNotificationTransaction not implemented")
}
func (UnimplementedNotificationServiceServer) SendNotificationCampaign(context.Context, *SendNotificationCampaignRequest) (*SendNotificationCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotificationCampaign not implemented")
}
func (UnimplementedNotificationServiceServer) GetNotificationCampaignList(context.Context, *GetNotificationCampaignListRequest) (*GetNotificationCampaignListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationCampaignList not implemented")
}
func (UnimplementedNotificationServiceServer) UpdateReadNotificationCampaign(context.Context, *UpdateReadNotificationCampaignRequest) (*UpdateReadNotificationCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReadNotificationCampaign not implemented")
}
func (UnimplementedNotificationServiceServer) CountUnreadNotificationCampaign(context.Context, *CountUnreadNotificationCampaignRequest) (*CountUnreadNotificationCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountUnreadNotificationCampaign not implemented")
}
func (UnimplementedNotificationServiceServer) SendNotificationHelper(context.Context, *SendNotificationHelperRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotificationHelper not implemented")
}
func (UnimplementedNotificationServiceServer) SendNotificationPurchaser(context.Context, *SendNotificationPurchaserRequest) (*SendNotificationPurchaserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotificationPurchaser not implemented")
}
func (UnimplementedNotificationServiceServer) SendNotificationCancelSalesOrder(context.Context, *SendNotificationCancelSalesOrderRequest) (*SendNotificationCancelSalesOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotificationCancelSalesOrder not implemented")
}
func (UnimplementedNotificationServiceServer) SendNotificationPaymentReminder(context.Context, *SendNotificationPaymentReminderRequest) (*SendNotificationPaymentReminderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotificationPaymentReminder not implemented")
}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_SendNotificationTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendNotificationTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.notification_service.NotificationService/SendNotificationTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendNotificationTransaction(ctx, req.(*SendNotificationTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotificationTransactionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationTransactionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotificationTransactionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.notification_service.NotificationService/GetNotificationTransactionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotificationTransactionList(ctx, req.(*GetNotificationTransactionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UpdateReadNotificationTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReadNotificationTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UpdateReadNotificationTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.notification_service.NotificationService/UpdateReadNotificationTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UpdateReadNotificationTransaction(ctx, req.(*UpdateReadNotificationTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_CountUnreadNotificationTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountUnreadNotificationTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).CountUnreadNotificationTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.notification_service.NotificationService/CountUnreadNotificationTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).CountUnreadNotificationTransaction(ctx, req.(*CountUnreadNotificationTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendNotificationCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendNotificationCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.notification_service.NotificationService/SendNotificationCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendNotificationCampaign(ctx, req.(*SendNotificationCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotificationCampaignList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationCampaignListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotificationCampaignList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.notification_service.NotificationService/GetNotificationCampaignList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotificationCampaignList(ctx, req.(*GetNotificationCampaignListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UpdateReadNotificationCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReadNotificationCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UpdateReadNotificationCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.notification_service.NotificationService/UpdateReadNotificationCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UpdateReadNotificationCampaign(ctx, req.(*UpdateReadNotificationCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_CountUnreadNotificationCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountUnreadNotificationCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).CountUnreadNotificationCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.notification_service.NotificationService/CountUnreadNotificationCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).CountUnreadNotificationCampaign(ctx, req.(*CountUnreadNotificationCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendNotificationHelper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationHelperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendNotificationHelper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.notification_service.NotificationService/SendNotificationHelper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendNotificationHelper(ctx, req.(*SendNotificationHelperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendNotificationPurchaser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationPurchaserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendNotificationPurchaser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.notification_service.NotificationService/SendNotificationPurchaser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendNotificationPurchaser(ctx, req.(*SendNotificationPurchaserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendNotificationCancelSalesOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationCancelSalesOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendNotificationCancelSalesOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.notification_service.NotificationService/SendNotificationCancelSalesOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendNotificationCancelSalesOrder(ctx, req.(*SendNotificationCancelSalesOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SendNotificationPaymentReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationPaymentReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).SendNotificationPaymentReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.notification_service.NotificationService/SendNotificationPaymentReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).SendNotificationPaymentReminder(ctx, req.(*SendNotificationPaymentReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.notification_service.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNotificationTransaction",
			Handler:    _NotificationService_SendNotificationTransaction_Handler,
		},
		{
			MethodName: "GetNotificationTransactionList",
			Handler:    _NotificationService_GetNotificationTransactionList_Handler,
		},
		{
			MethodName: "UpdateReadNotificationTransaction",
			Handler:    _NotificationService_UpdateReadNotificationTransaction_Handler,
		},
		{
			MethodName: "CountUnreadNotificationTransaction",
			Handler:    _NotificationService_CountUnreadNotificationTransaction_Handler,
		},
		{
			MethodName: "SendNotificationCampaign",
			Handler:    _NotificationService_SendNotificationCampaign_Handler,
		},
		{
			MethodName: "GetNotificationCampaignList",
			Handler:    _NotificationService_GetNotificationCampaignList_Handler,
		},
		{
			MethodName: "UpdateReadNotificationCampaign",
			Handler:    _NotificationService_UpdateReadNotificationCampaign_Handler,
		},
		{
			MethodName: "CountUnreadNotificationCampaign",
			Handler:    _NotificationService_CountUnreadNotificationCampaign_Handler,
		},
		{
			MethodName: "SendNotificationHelper",
			Handler:    _NotificationService_SendNotificationHelper_Handler,
		},
		{
			MethodName: "SendNotificationPurchaser",
			Handler:    _NotificationService_SendNotificationPurchaser_Handler,
		},
		{
			MethodName: "SendNotificationCancelSalesOrder",
			Handler:    _NotificationService_SendNotificationCancelSalesOrder_Handler,
		},
		{
			MethodName: "SendNotificationPaymentReminder",
			Handler:    _NotificationService_SendNotificationPaymentReminder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/notification_service/notification_service.proto",
}
