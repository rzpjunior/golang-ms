// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: proto/crm_service/crm_service.proto

package crm_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrmServiceClient is the client API for CrmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrmServiceClient interface {
	GetProspectiveCustomerList(ctx context.Context, in *GetProspectiveCustomerListRequest, opts ...grpc.CallOption) (*GetProspectiveCustomerListResponse, error)
	GetProspectiveCustomerDetail(ctx context.Context, in *GetProspectiveCustomerDetailRequest, opts ...grpc.CallOption) (*GetProspectiveCustomerDetailResponse, error)
	DeleteProspectiveCustomer(ctx context.Context, in *DeleteProspectiveCustomerRequest, opts ...grpc.CallOption) (*DeleteProspectiveCustomerResponse, error)
	GetSalesAssignmentList(ctx context.Context, in *GetSalesAssignmentListRequest, opts ...grpc.CallOption) (*GetSalesAssignmentListResponse, error)
	GetSalesAssignmentDetail(ctx context.Context, in *GetSalesAssignmentDetailRequest, opts ...grpc.CallOption) (*GetSalesAssignmentDetailResponse, error)
	GetSalesAssignmentItemList(ctx context.Context, in *GetSalesAssignmentItemListRequest, opts ...grpc.CallOption) (*GetSalesAssignmentItemListResponse, error)
	GetSalesAssignmentItemDetail(ctx context.Context, in *GetSalesAssignmentItemDetailRequest, opts ...grpc.CallOption) (*GetSalesAssignmentItemDetailResponse, error)
	GetSalesAssignmentObjectiveList(ctx context.Context, in *GetSalesAssignmentObjectiveListRequest, opts ...grpc.CallOption) (*GetSalesAssignmentObjectiveListResponse, error)
	GetSalesAssignmentObjectiveDetail(ctx context.Context, in *GetSalesAssignmentObjectiveDetailRequest, opts ...grpc.CallOption) (*GetSalesAssignmentObjectiveDetailResponse, error)
	CheckTaskCustomerAcquisitionActive(ctx context.Context, in *CheckTaskCustomerAcquisitionRequest, opts ...grpc.CallOption) (*CheckTaskCustomerAcquisitionResponse, error)
	CheckTaskSalesAssignmentItemActive(ctx context.Context, in *CheckTaskSalesAssignmentItemRequest, opts ...grpc.CallOption) (*CheckTaskSalesAssignmentItemResponse, error)
	SubmitTaskVisitFU(ctx context.Context, in *UpdateSubmitTaskVisitFURequest, opts ...grpc.CallOption) (*UpdateSubmitTaskVisitFUResponse, error)
	CheckoutTaskVisitFU(ctx context.Context, in *CheckoutTaskVisitFURequest, opts ...grpc.CallOption) (*CheckoutTaskVisitFUResponse, error)
	BulkCheckoutTaskVisitFU(ctx context.Context, in *BulkCheckoutTaskVisitFURequest, opts ...grpc.CallOption) (*BulkCheckoutTaskVisitFUResponse, error)
	SubmitTaskCustomerAcquisition(ctx context.Context, in *SubmitTaskCustomerAcquisitionRequest, opts ...grpc.CallOption) (*SubmitTaskCustomerAcquisitionResponse, error)
	SubmitTaskFailed(ctx context.Context, in *SubmitTaskFailedRequest, opts ...grpc.CallOption) (*SubmitTaskFailedResponse, error)
	CreateSalesAssignmentItem(ctx context.Context, in *CreateSalesAssignmentItemRequest, opts ...grpc.CallOption) (*GetSalesAssignmentItemDetailResponse, error)
	GetCustomerAcquisitionById(ctx context.Context, in *GetCustomerAcquisitionByIdRequest, opts ...grpc.CallOption) (*GetCustomerAcquisitionDetailResponse, error)
	GetCustomerAcquisitionList(ctx context.Context, in *GetCustomerAcquisitionListRequest, opts ...grpc.CallOption) (*GetCustomerAcquisitionListResponse, error)
	GetCustomerAcquisitionListWithExcludedIds(ctx context.Context, in *GetCustomerAcquisitionListWithExcludedIdsRequest, opts ...grpc.CallOption) (*GetCustomerAcquisitionListResponse, error)
	GetCountCustomerAcquisition(ctx context.Context, in *GetCountCustomerAcquisitionRequest, opts ...grpc.CallOption) (*GetCountCustomerAcquisitionResponse, error)
	GetSalesSubmissionList(ctx context.Context, in *GetSalesSubmissionListRequest, opts ...grpc.CallOption) (*GetSalesAssignmentItemListResponse, error)
	GetCustomerDetail(ctx context.Context, in *GetCustomerDetailRequest, opts ...grpc.CallOption) (*GetCustomerDetailResponse, error)
	UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*UpdateCustomerResponse, error)
	CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error)
	CreateProspectiveCustomer(ctx context.Context, in *CreateProspectiveCustomerRequest, opts ...grpc.CallOption) (*CreateProspectiveCustomerResponse, error)
	GetCustomerID(ctx context.Context, in *GetCustomerIDRequest, opts ...grpc.CallOption) (*GetCustomerIDResponse, error)
	UpdateFixedVa(ctx context.Context, in *UpdateFixedVaRequest, opts ...grpc.CallOption) (*UpdateFixedVaResponse, error)
}

type crmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCrmServiceClient(cc grpc.ClientConnInterface) CrmServiceClient {
	return &crmServiceClient{cc}
}

func (c *crmServiceClient) GetProspectiveCustomerList(ctx context.Context, in *GetProspectiveCustomerListRequest, opts ...grpc.CallOption) (*GetProspectiveCustomerListResponse, error) {
	out := new(GetProspectiveCustomerListResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/GetProspectiveCustomerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) GetProspectiveCustomerDetail(ctx context.Context, in *GetProspectiveCustomerDetailRequest, opts ...grpc.CallOption) (*GetProspectiveCustomerDetailResponse, error) {
	out := new(GetProspectiveCustomerDetailResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/GetProspectiveCustomerDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) DeleteProspectiveCustomer(ctx context.Context, in *DeleteProspectiveCustomerRequest, opts ...grpc.CallOption) (*DeleteProspectiveCustomerResponse, error) {
	out := new(DeleteProspectiveCustomerResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/DeleteProspectiveCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) GetSalesAssignmentList(ctx context.Context, in *GetSalesAssignmentListRequest, opts ...grpc.CallOption) (*GetSalesAssignmentListResponse, error) {
	out := new(GetSalesAssignmentListResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/GetSalesAssignmentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) GetSalesAssignmentDetail(ctx context.Context, in *GetSalesAssignmentDetailRequest, opts ...grpc.CallOption) (*GetSalesAssignmentDetailResponse, error) {
	out := new(GetSalesAssignmentDetailResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/GetSalesAssignmentDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) GetSalesAssignmentItemList(ctx context.Context, in *GetSalesAssignmentItemListRequest, opts ...grpc.CallOption) (*GetSalesAssignmentItemListResponse, error) {
	out := new(GetSalesAssignmentItemListResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/GetSalesAssignmentItemList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) GetSalesAssignmentItemDetail(ctx context.Context, in *GetSalesAssignmentItemDetailRequest, opts ...grpc.CallOption) (*GetSalesAssignmentItemDetailResponse, error) {
	out := new(GetSalesAssignmentItemDetailResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/GetSalesAssignmentItemDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) GetSalesAssignmentObjectiveList(ctx context.Context, in *GetSalesAssignmentObjectiveListRequest, opts ...grpc.CallOption) (*GetSalesAssignmentObjectiveListResponse, error) {
	out := new(GetSalesAssignmentObjectiveListResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/GetSalesAssignmentObjectiveList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) GetSalesAssignmentObjectiveDetail(ctx context.Context, in *GetSalesAssignmentObjectiveDetailRequest, opts ...grpc.CallOption) (*GetSalesAssignmentObjectiveDetailResponse, error) {
	out := new(GetSalesAssignmentObjectiveDetailResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/GetSalesAssignmentObjectiveDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) CheckTaskCustomerAcquisitionActive(ctx context.Context, in *CheckTaskCustomerAcquisitionRequest, opts ...grpc.CallOption) (*CheckTaskCustomerAcquisitionResponse, error) {
	out := new(CheckTaskCustomerAcquisitionResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/CheckTaskCustomerAcquisitionActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) CheckTaskSalesAssignmentItemActive(ctx context.Context, in *CheckTaskSalesAssignmentItemRequest, opts ...grpc.CallOption) (*CheckTaskSalesAssignmentItemResponse, error) {
	out := new(CheckTaskSalesAssignmentItemResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/CheckTaskSalesAssignmentItemActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) SubmitTaskVisitFU(ctx context.Context, in *UpdateSubmitTaskVisitFURequest, opts ...grpc.CallOption) (*UpdateSubmitTaskVisitFUResponse, error) {
	out := new(UpdateSubmitTaskVisitFUResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/SubmitTaskVisitFU", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) CheckoutTaskVisitFU(ctx context.Context, in *CheckoutTaskVisitFURequest, opts ...grpc.CallOption) (*CheckoutTaskVisitFUResponse, error) {
	out := new(CheckoutTaskVisitFUResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/CheckoutTaskVisitFU", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) BulkCheckoutTaskVisitFU(ctx context.Context, in *BulkCheckoutTaskVisitFURequest, opts ...grpc.CallOption) (*BulkCheckoutTaskVisitFUResponse, error) {
	out := new(BulkCheckoutTaskVisitFUResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/BulkCheckoutTaskVisitFU", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) SubmitTaskCustomerAcquisition(ctx context.Context, in *SubmitTaskCustomerAcquisitionRequest, opts ...grpc.CallOption) (*SubmitTaskCustomerAcquisitionResponse, error) {
	out := new(SubmitTaskCustomerAcquisitionResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/SubmitTaskCustomerAcquisition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) SubmitTaskFailed(ctx context.Context, in *SubmitTaskFailedRequest, opts ...grpc.CallOption) (*SubmitTaskFailedResponse, error) {
	out := new(SubmitTaskFailedResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/SubmitTaskFailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) CreateSalesAssignmentItem(ctx context.Context, in *CreateSalesAssignmentItemRequest, opts ...grpc.CallOption) (*GetSalesAssignmentItemDetailResponse, error) {
	out := new(GetSalesAssignmentItemDetailResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/CreateSalesAssignmentItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) GetCustomerAcquisitionById(ctx context.Context, in *GetCustomerAcquisitionByIdRequest, opts ...grpc.CallOption) (*GetCustomerAcquisitionDetailResponse, error) {
	out := new(GetCustomerAcquisitionDetailResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/GetCustomerAcquisitionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) GetCustomerAcquisitionList(ctx context.Context, in *GetCustomerAcquisitionListRequest, opts ...grpc.CallOption) (*GetCustomerAcquisitionListResponse, error) {
	out := new(GetCustomerAcquisitionListResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/GetCustomerAcquisitionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) GetCustomerAcquisitionListWithExcludedIds(ctx context.Context, in *GetCustomerAcquisitionListWithExcludedIdsRequest, opts ...grpc.CallOption) (*GetCustomerAcquisitionListResponse, error) {
	out := new(GetCustomerAcquisitionListResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/GetCustomerAcquisitionListWithExcludedIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) GetCountCustomerAcquisition(ctx context.Context, in *GetCountCustomerAcquisitionRequest, opts ...grpc.CallOption) (*GetCountCustomerAcquisitionResponse, error) {
	out := new(GetCountCustomerAcquisitionResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/GetCountCustomerAcquisition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) GetSalesSubmissionList(ctx context.Context, in *GetSalesSubmissionListRequest, opts ...grpc.CallOption) (*GetSalesAssignmentItemListResponse, error) {
	out := new(GetSalesAssignmentItemListResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/GetSalesSubmissionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) GetCustomerDetail(ctx context.Context, in *GetCustomerDetailRequest, opts ...grpc.CallOption) (*GetCustomerDetailResponse, error) {
	out := new(GetCustomerDetailResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/GetCustomerDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*UpdateCustomerResponse, error) {
	out := new(UpdateCustomerResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/UpdateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error) {
	out := new(CreateCustomerResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/CreateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) CreateProspectiveCustomer(ctx context.Context, in *CreateProspectiveCustomerRequest, opts ...grpc.CallOption) (*CreateProspectiveCustomerResponse, error) {
	out := new(CreateProspectiveCustomerResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/CreateProspectiveCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) GetCustomerID(ctx context.Context, in *GetCustomerIDRequest, opts ...grpc.CallOption) (*GetCustomerIDResponse, error) {
	out := new(GetCustomerIDResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/GetCustomerID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) UpdateFixedVa(ctx context.Context, in *UpdateFixedVaRequest, opts ...grpc.CallOption) (*UpdateFixedVaResponse, error) {
	out := new(UpdateFixedVaResponse)
	err := c.cc.Invoke(ctx, "/proto.crm_service.CrmService/UpdateFixedVa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrmServiceServer is the server API for CrmService service.
// All implementations should embed UnimplementedCrmServiceServer
// for forward compatibility
type CrmServiceServer interface {
	GetProspectiveCustomerList(context.Context, *GetProspectiveCustomerListRequest) (*GetProspectiveCustomerListResponse, error)
	GetProspectiveCustomerDetail(context.Context, *GetProspectiveCustomerDetailRequest) (*GetProspectiveCustomerDetailResponse, error)
	DeleteProspectiveCustomer(context.Context, *DeleteProspectiveCustomerRequest) (*DeleteProspectiveCustomerResponse, error)
	GetSalesAssignmentList(context.Context, *GetSalesAssignmentListRequest) (*GetSalesAssignmentListResponse, error)
	GetSalesAssignmentDetail(context.Context, *GetSalesAssignmentDetailRequest) (*GetSalesAssignmentDetailResponse, error)
	GetSalesAssignmentItemList(context.Context, *GetSalesAssignmentItemListRequest) (*GetSalesAssignmentItemListResponse, error)
	GetSalesAssignmentItemDetail(context.Context, *GetSalesAssignmentItemDetailRequest) (*GetSalesAssignmentItemDetailResponse, error)
	GetSalesAssignmentObjectiveList(context.Context, *GetSalesAssignmentObjectiveListRequest) (*GetSalesAssignmentObjectiveListResponse, error)
	GetSalesAssignmentObjectiveDetail(context.Context, *GetSalesAssignmentObjectiveDetailRequest) (*GetSalesAssignmentObjectiveDetailResponse, error)
	CheckTaskCustomerAcquisitionActive(context.Context, *CheckTaskCustomerAcquisitionRequest) (*CheckTaskCustomerAcquisitionResponse, error)
	CheckTaskSalesAssignmentItemActive(context.Context, *CheckTaskSalesAssignmentItemRequest) (*CheckTaskSalesAssignmentItemResponse, error)
	SubmitTaskVisitFU(context.Context, *UpdateSubmitTaskVisitFURequest) (*UpdateSubmitTaskVisitFUResponse, error)
	CheckoutTaskVisitFU(context.Context, *CheckoutTaskVisitFURequest) (*CheckoutTaskVisitFUResponse, error)
	BulkCheckoutTaskVisitFU(context.Context, *BulkCheckoutTaskVisitFURequest) (*BulkCheckoutTaskVisitFUResponse, error)
	SubmitTaskCustomerAcquisition(context.Context, *SubmitTaskCustomerAcquisitionRequest) (*SubmitTaskCustomerAcquisitionResponse, error)
	SubmitTaskFailed(context.Context, *SubmitTaskFailedRequest) (*SubmitTaskFailedResponse, error)
	CreateSalesAssignmentItem(context.Context, *CreateSalesAssignmentItemRequest) (*GetSalesAssignmentItemDetailResponse, error)
	GetCustomerAcquisitionById(context.Context, *GetCustomerAcquisitionByIdRequest) (*GetCustomerAcquisitionDetailResponse, error)
	GetCustomerAcquisitionList(context.Context, *GetCustomerAcquisitionListRequest) (*GetCustomerAcquisitionListResponse, error)
	GetCustomerAcquisitionListWithExcludedIds(context.Context, *GetCustomerAcquisitionListWithExcludedIdsRequest) (*GetCustomerAcquisitionListResponse, error)
	GetCountCustomerAcquisition(context.Context, *GetCountCustomerAcquisitionRequest) (*GetCountCustomerAcquisitionResponse, error)
	GetSalesSubmissionList(context.Context, *GetSalesSubmissionListRequest) (*GetSalesAssignmentItemListResponse, error)
	GetCustomerDetail(context.Context, *GetCustomerDetailRequest) (*GetCustomerDetailResponse, error)
	UpdateCustomer(context.Context, *UpdateCustomerRequest) (*UpdateCustomerResponse, error)
	CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error)
	CreateProspectiveCustomer(context.Context, *CreateProspectiveCustomerRequest) (*CreateProspectiveCustomerResponse, error)
	GetCustomerID(context.Context, *GetCustomerIDRequest) (*GetCustomerIDResponse, error)
	UpdateFixedVa(context.Context, *UpdateFixedVaRequest) (*UpdateFixedVaResponse, error)
}

// UnimplementedCrmServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCrmServiceServer struct {
}

func (UnimplementedCrmServiceServer) GetProspectiveCustomerList(context.Context, *GetProspectiveCustomerListRequest) (*GetProspectiveCustomerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProspectiveCustomerList not implemented")
}
func (UnimplementedCrmServiceServer) GetProspectiveCustomerDetail(context.Context, *GetProspectiveCustomerDetailRequest) (*GetProspectiveCustomerDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProspectiveCustomerDetail not implemented")
}
func (UnimplementedCrmServiceServer) DeleteProspectiveCustomer(context.Context, *DeleteProspectiveCustomerRequest) (*DeleteProspectiveCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProspectiveCustomer not implemented")
}
func (UnimplementedCrmServiceServer) GetSalesAssignmentList(context.Context, *GetSalesAssignmentListRequest) (*GetSalesAssignmentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesAssignmentList not implemented")
}
func (UnimplementedCrmServiceServer) GetSalesAssignmentDetail(context.Context, *GetSalesAssignmentDetailRequest) (*GetSalesAssignmentDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesAssignmentDetail not implemented")
}
func (UnimplementedCrmServiceServer) GetSalesAssignmentItemList(context.Context, *GetSalesAssignmentItemListRequest) (*GetSalesAssignmentItemListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesAssignmentItemList not implemented")
}
func (UnimplementedCrmServiceServer) GetSalesAssignmentItemDetail(context.Context, *GetSalesAssignmentItemDetailRequest) (*GetSalesAssignmentItemDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesAssignmentItemDetail not implemented")
}
func (UnimplementedCrmServiceServer) GetSalesAssignmentObjectiveList(context.Context, *GetSalesAssignmentObjectiveListRequest) (*GetSalesAssignmentObjectiveListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesAssignmentObjectiveList not implemented")
}
func (UnimplementedCrmServiceServer) GetSalesAssignmentObjectiveDetail(context.Context, *GetSalesAssignmentObjectiveDetailRequest) (*GetSalesAssignmentObjectiveDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesAssignmentObjectiveDetail not implemented")
}
func (UnimplementedCrmServiceServer) CheckTaskCustomerAcquisitionActive(context.Context, *CheckTaskCustomerAcquisitionRequest) (*CheckTaskCustomerAcquisitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTaskCustomerAcquisitionActive not implemented")
}
func (UnimplementedCrmServiceServer) CheckTaskSalesAssignmentItemActive(context.Context, *CheckTaskSalesAssignmentItemRequest) (*CheckTaskSalesAssignmentItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTaskSalesAssignmentItemActive not implemented")
}
func (UnimplementedCrmServiceServer) SubmitTaskVisitFU(context.Context, *UpdateSubmitTaskVisitFURequest) (*UpdateSubmitTaskVisitFUResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTaskVisitFU not implemented")
}
func (UnimplementedCrmServiceServer) CheckoutTaskVisitFU(context.Context, *CheckoutTaskVisitFURequest) (*CheckoutTaskVisitFUResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckoutTaskVisitFU not implemented")
}
func (UnimplementedCrmServiceServer) BulkCheckoutTaskVisitFU(context.Context, *BulkCheckoutTaskVisitFURequest) (*BulkCheckoutTaskVisitFUResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCheckoutTaskVisitFU not implemented")
}
func (UnimplementedCrmServiceServer) SubmitTaskCustomerAcquisition(context.Context, *SubmitTaskCustomerAcquisitionRequest) (*SubmitTaskCustomerAcquisitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTaskCustomerAcquisition not implemented")
}
func (UnimplementedCrmServiceServer) SubmitTaskFailed(context.Context, *SubmitTaskFailedRequest) (*SubmitTaskFailedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTaskFailed not implemented")
}
func (UnimplementedCrmServiceServer) CreateSalesAssignmentItem(context.Context, *CreateSalesAssignmentItemRequest) (*GetSalesAssignmentItemDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSalesAssignmentItem not implemented")
}
func (UnimplementedCrmServiceServer) GetCustomerAcquisitionById(context.Context, *GetCustomerAcquisitionByIdRequest) (*GetCustomerAcquisitionDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerAcquisitionById not implemented")
}
func (UnimplementedCrmServiceServer) GetCustomerAcquisitionList(context.Context, *GetCustomerAcquisitionListRequest) (*GetCustomerAcquisitionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerAcquisitionList not implemented")
}
func (UnimplementedCrmServiceServer) GetCustomerAcquisitionListWithExcludedIds(context.Context, *GetCustomerAcquisitionListWithExcludedIdsRequest) (*GetCustomerAcquisitionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerAcquisitionListWithExcludedIds not implemented")
}
func (UnimplementedCrmServiceServer) GetCountCustomerAcquisition(context.Context, *GetCountCustomerAcquisitionRequest) (*GetCountCustomerAcquisitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountCustomerAcquisition not implemented")
}
func (UnimplementedCrmServiceServer) GetSalesSubmissionList(context.Context, *GetSalesSubmissionListRequest) (*GetSalesAssignmentItemListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesSubmissionList not implemented")
}
func (UnimplementedCrmServiceServer) GetCustomerDetail(context.Context, *GetCustomerDetailRequest) (*GetCustomerDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerDetail not implemented")
}
func (UnimplementedCrmServiceServer) UpdateCustomer(context.Context, *UpdateCustomerRequest) (*UpdateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomer not implemented")
}
func (UnimplementedCrmServiceServer) CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedCrmServiceServer) CreateProspectiveCustomer(context.Context, *CreateProspectiveCustomerRequest) (*CreateProspectiveCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProspectiveCustomer not implemented")
}
func (UnimplementedCrmServiceServer) GetCustomerID(context.Context, *GetCustomerIDRequest) (*GetCustomerIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerID not implemented")
}
func (UnimplementedCrmServiceServer) UpdateFixedVa(context.Context, *UpdateFixedVaRequest) (*UpdateFixedVaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFixedVa not implemented")
}

// UnsafeCrmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrmServiceServer will
// result in compilation errors.
type UnsafeCrmServiceServer interface {
	mustEmbedUnimplementedCrmServiceServer()
}

func RegisterCrmServiceServer(s grpc.ServiceRegistrar, srv CrmServiceServer) {
	s.RegisterService(&CrmService_ServiceDesc, srv)
}

func _CrmService_GetProspectiveCustomerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProspectiveCustomerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).GetProspectiveCustomerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/GetProspectiveCustomerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).GetProspectiveCustomerList(ctx, req.(*GetProspectiveCustomerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_GetProspectiveCustomerDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProspectiveCustomerDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).GetProspectiveCustomerDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/GetProspectiveCustomerDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).GetProspectiveCustomerDetail(ctx, req.(*GetProspectiveCustomerDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_DeleteProspectiveCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProspectiveCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).DeleteProspectiveCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/DeleteProspectiveCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).DeleteProspectiveCustomer(ctx, req.(*DeleteProspectiveCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_GetSalesAssignmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesAssignmentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).GetSalesAssignmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/GetSalesAssignmentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).GetSalesAssignmentList(ctx, req.(*GetSalesAssignmentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_GetSalesAssignmentDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesAssignmentDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).GetSalesAssignmentDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/GetSalesAssignmentDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).GetSalesAssignmentDetail(ctx, req.(*GetSalesAssignmentDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_GetSalesAssignmentItemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesAssignmentItemListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).GetSalesAssignmentItemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/GetSalesAssignmentItemList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).GetSalesAssignmentItemList(ctx, req.(*GetSalesAssignmentItemListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_GetSalesAssignmentItemDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesAssignmentItemDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).GetSalesAssignmentItemDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/GetSalesAssignmentItemDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).GetSalesAssignmentItemDetail(ctx, req.(*GetSalesAssignmentItemDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_GetSalesAssignmentObjectiveList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesAssignmentObjectiveListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).GetSalesAssignmentObjectiveList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/GetSalesAssignmentObjectiveList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).GetSalesAssignmentObjectiveList(ctx, req.(*GetSalesAssignmentObjectiveListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_GetSalesAssignmentObjectiveDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesAssignmentObjectiveDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).GetSalesAssignmentObjectiveDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/GetSalesAssignmentObjectiveDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).GetSalesAssignmentObjectiveDetail(ctx, req.(*GetSalesAssignmentObjectiveDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_CheckTaskCustomerAcquisitionActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTaskCustomerAcquisitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).CheckTaskCustomerAcquisitionActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/CheckTaskCustomerAcquisitionActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).CheckTaskCustomerAcquisitionActive(ctx, req.(*CheckTaskCustomerAcquisitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_CheckTaskSalesAssignmentItemActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTaskSalesAssignmentItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).CheckTaskSalesAssignmentItemActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/CheckTaskSalesAssignmentItemActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).CheckTaskSalesAssignmentItemActive(ctx, req.(*CheckTaskSalesAssignmentItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_SubmitTaskVisitFU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubmitTaskVisitFURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).SubmitTaskVisitFU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/SubmitTaskVisitFU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).SubmitTaskVisitFU(ctx, req.(*UpdateSubmitTaskVisitFURequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_CheckoutTaskVisitFU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckoutTaskVisitFURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).CheckoutTaskVisitFU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/CheckoutTaskVisitFU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).CheckoutTaskVisitFU(ctx, req.(*CheckoutTaskVisitFURequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_BulkCheckoutTaskVisitFU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCheckoutTaskVisitFURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).BulkCheckoutTaskVisitFU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/BulkCheckoutTaskVisitFU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).BulkCheckoutTaskVisitFU(ctx, req.(*BulkCheckoutTaskVisitFURequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_SubmitTaskCustomerAcquisition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTaskCustomerAcquisitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).SubmitTaskCustomerAcquisition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/SubmitTaskCustomerAcquisition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).SubmitTaskCustomerAcquisition(ctx, req.(*SubmitTaskCustomerAcquisitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_SubmitTaskFailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTaskFailedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).SubmitTaskFailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/SubmitTaskFailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).SubmitTaskFailed(ctx, req.(*SubmitTaskFailedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_CreateSalesAssignmentItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSalesAssignmentItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).CreateSalesAssignmentItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/CreateSalesAssignmentItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).CreateSalesAssignmentItem(ctx, req.(*CreateSalesAssignmentItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_GetCustomerAcquisitionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerAcquisitionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).GetCustomerAcquisitionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/GetCustomerAcquisitionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).GetCustomerAcquisitionById(ctx, req.(*GetCustomerAcquisitionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_GetCustomerAcquisitionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerAcquisitionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).GetCustomerAcquisitionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/GetCustomerAcquisitionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).GetCustomerAcquisitionList(ctx, req.(*GetCustomerAcquisitionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_GetCustomerAcquisitionListWithExcludedIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerAcquisitionListWithExcludedIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).GetCustomerAcquisitionListWithExcludedIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/GetCustomerAcquisitionListWithExcludedIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).GetCustomerAcquisitionListWithExcludedIds(ctx, req.(*GetCustomerAcquisitionListWithExcludedIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_GetCountCustomerAcquisition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountCustomerAcquisitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).GetCountCustomerAcquisition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/GetCountCustomerAcquisition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).GetCountCustomerAcquisition(ctx, req.(*GetCountCustomerAcquisitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_GetSalesSubmissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesSubmissionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).GetSalesSubmissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/GetSalesSubmissionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).GetSalesSubmissionList(ctx, req.(*GetSalesSubmissionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_GetCustomerDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).GetCustomerDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/GetCustomerDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).GetCustomerDetail(ctx, req.(*GetCustomerDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_UpdateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).UpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/UpdateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).UpdateCustomer(ctx, req.(*UpdateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/CreateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).CreateCustomer(ctx, req.(*CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_CreateProspectiveCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProspectiveCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).CreateProspectiveCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/CreateProspectiveCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).CreateProspectiveCustomer(ctx, req.(*CreateProspectiveCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_GetCustomerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).GetCustomerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/GetCustomerID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).GetCustomerID(ctx, req.(*GetCustomerIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_UpdateFixedVa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFixedVaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).UpdateFixedVa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.crm_service.CrmService/UpdateFixedVa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).UpdateFixedVa(ctx, req.(*UpdateFixedVaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CrmService_ServiceDesc is the grpc.ServiceDesc for CrmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CrmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.crm_service.CrmService",
	HandlerType: (*CrmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProspectiveCustomerList",
			Handler:    _CrmService_GetProspectiveCustomerList_Handler,
		},
		{
			MethodName: "GetProspectiveCustomerDetail",
			Handler:    _CrmService_GetProspectiveCustomerDetail_Handler,
		},
		{
			MethodName: "DeleteProspectiveCustomer",
			Handler:    _CrmService_DeleteProspectiveCustomer_Handler,
		},
		{
			MethodName: "GetSalesAssignmentList",
			Handler:    _CrmService_GetSalesAssignmentList_Handler,
		},
		{
			MethodName: "GetSalesAssignmentDetail",
			Handler:    _CrmService_GetSalesAssignmentDetail_Handler,
		},
		{
			MethodName: "GetSalesAssignmentItemList",
			Handler:    _CrmService_GetSalesAssignmentItemList_Handler,
		},
		{
			MethodName: "GetSalesAssignmentItemDetail",
			Handler:    _CrmService_GetSalesAssignmentItemDetail_Handler,
		},
		{
			MethodName: "GetSalesAssignmentObjectiveList",
			Handler:    _CrmService_GetSalesAssignmentObjectiveList_Handler,
		},
		{
			MethodName: "GetSalesAssignmentObjectiveDetail",
			Handler:    _CrmService_GetSalesAssignmentObjectiveDetail_Handler,
		},
		{
			MethodName: "CheckTaskCustomerAcquisitionActive",
			Handler:    _CrmService_CheckTaskCustomerAcquisitionActive_Handler,
		},
		{
			MethodName: "CheckTaskSalesAssignmentItemActive",
			Handler:    _CrmService_CheckTaskSalesAssignmentItemActive_Handler,
		},
		{
			MethodName: "SubmitTaskVisitFU",
			Handler:    _CrmService_SubmitTaskVisitFU_Handler,
		},
		{
			MethodName: "CheckoutTaskVisitFU",
			Handler:    _CrmService_CheckoutTaskVisitFU_Handler,
		},
		{
			MethodName: "BulkCheckoutTaskVisitFU",
			Handler:    _CrmService_BulkCheckoutTaskVisitFU_Handler,
		},
		{
			MethodName: "SubmitTaskCustomerAcquisition",
			Handler:    _CrmService_SubmitTaskCustomerAcquisition_Handler,
		},
		{
			MethodName: "SubmitTaskFailed",
			Handler:    _CrmService_SubmitTaskFailed_Handler,
		},
		{
			MethodName: "CreateSalesAssignmentItem",
			Handler:    _CrmService_CreateSalesAssignmentItem_Handler,
		},
		{
			MethodName: "GetCustomerAcquisitionById",
			Handler:    _CrmService_GetCustomerAcquisitionById_Handler,
		},
		{
			MethodName: "GetCustomerAcquisitionList",
			Handler:    _CrmService_GetCustomerAcquisitionList_Handler,
		},
		{
			MethodName: "GetCustomerAcquisitionListWithExcludedIds",
			Handler:    _CrmService_GetCustomerAcquisitionListWithExcludedIds_Handler,
		},
		{
			MethodName: "GetCountCustomerAcquisition",
			Handler:    _CrmService_GetCountCustomerAcquisition_Handler,
		},
		{
			MethodName: "GetSalesSubmissionList",
			Handler:    _CrmService_GetSalesSubmissionList_Handler,
		},
		{
			MethodName: "GetCustomerDetail",
			Handler:    _CrmService_GetCustomerDetail_Handler,
		},
		{
			MethodName: "UpdateCustomer",
			Handler:    _CrmService_UpdateCustomer_Handler,
		},
		{
			MethodName: "CreateCustomer",
			Handler:    _CrmService_CreateCustomer_Handler,
		},
		{
			MethodName: "CreateProspectiveCustomer",
			Handler:    _CrmService_CreateProspectiveCustomer_Handler,
		},
		{
			MethodName: "GetCustomerID",
			Handler:    _CrmService_GetCustomerID_Handler,
		},
		{
			MethodName: "UpdateFixedVa",
			Handler:    _CrmService_UpdateFixedVa_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/crm_service/crm_service.proto",
}
