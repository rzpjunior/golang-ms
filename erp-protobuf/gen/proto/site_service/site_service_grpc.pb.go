// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: proto/site_service/site_service.proto

package site_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SiteServiceClient is the client API for SiteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SiteServiceClient interface {
	GetKoliList(ctx context.Context, in *GetKoliListRequest, opts ...grpc.CallOption) (*GetKoliListResponse, error)
	GetKoliDetail(ctx context.Context, in *GetKoliDetailRequest, opts ...grpc.CallOption) (*GetKoliDetailResponse, error)
	GetSalesOrderDeliveryKoli(ctx context.Context, in *GetSalesOrderDeliveryKoliRequest, opts ...grpc.CallOption) (*GetSalesOrderDeliveryKoliResponse, error)
	LoginHelper(ctx context.Context, in *LoginHelperRequest, opts ...grpc.CallOption) (*LoginHelperResponse, error)
	// picker
	GetPickingOrderHeader(ctx context.Context, in *GetPickingOrderHeaderRequest, opts ...grpc.CallOption) (*GetPickingOrderHeaderResponse, error)
	GetPickingOrderDetail(ctx context.Context, in *GetPickingOrderDetailRequest, opts ...grpc.CallOption) (*GetPickingOrderDetailResponse, error)
	GetAggregatedProductSalesOrder(ctx context.Context, in *GetAggregatedProductSalesOrderRequest, opts ...grpc.CallOption) (*GetAggregatedProductSalesOrderResponse, error)
	StartPickingOrder(ctx context.Context, in *StartPickingOrderRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	SubmitPicking(ctx context.Context, in *SubmitPickingRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	GetSalesOrderPicking(ctx context.Context, in *GetSalesOrderPickingRequest, opts ...grpc.CallOption) (*GetSalesOrderPickingResponse, error)
	GetSalesOrderPickingDetail(ctx context.Context, in *GetSalesOrderPickingDetailRequest, opts ...grpc.CallOption) (*GetSalesOrderPickingDetailResponse, error)
	SubmitSalesOrder(ctx context.Context, in *SubmitSalesOrderRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
	HistoryDetail(ctx context.Context, in *HistoryDetailRequest, opts ...grpc.CallOption) (*HistoryDetailResponse, error)
	PickerWidget(ctx context.Context, in *PickerWidgetRequest, opts ...grpc.CallOption) (*PickerWidgetResponse, error)
	// spv & checker
	GetSalesOrderToCheck(ctx context.Context, in *GetSalesOrderToCheckRequest, opts ...grpc.CallOption) (*GetSalesOrderToCheckResponse, error)
	// spv
	SPVGetSalesOrderToCheckDetail(ctx context.Context, in *GetSalesOrderToCheckDetailRequest, opts ...grpc.CallOption) (*GetSalesOrderToCheckDetailResponse, error)
	SPVRejectSalesOrder(ctx context.Context, in *SPVRejectSalesOrderRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	SPVAcceptSalesOrder(ctx context.Context, in *SPVAcceptSalesOrderRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	SPVWidget(ctx context.Context, in *SPVWidgetRequest, opts ...grpc.CallOption) (*SPVWidgetResponse, error)
	SPVWrtMonitoring(ctx context.Context, in *GetWrtMonitoringListRequest, opts ...grpc.CallOption) (*GetWrtMonitoringListResponse, error)
	SPVWrtMonitoringDetail(ctx context.Context, in *GetWrtMonitoringDetailRequest, opts ...grpc.CallOption) (*GetWrtMonitoringDetailResponse, error)
	// checker
	CheckerGetSalesOrderToCheckDetail(ctx context.Context, in *GetSalesOrderToCheckDetailRequest, opts ...grpc.CallOption) (*GetSalesOrderToCheckDetailResponse, error)
	CheckerStartChecking(ctx context.Context, in *CheckerStartCheckingRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	CheckerSubmitChecking(ctx context.Context, in *CheckerSubmitCheckingRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	CheckerRejectSalesOrder(ctx context.Context, in *CheckerRejectSalesOrderRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	CheckerGetDeliveryKoli(ctx context.Context, in *CheckerGetDeliveryKoliRequest, opts ...grpc.CallOption) (*CheckerGetDeliveryKoliResponse, error)
	CheckerAcceptSalesOrder(ctx context.Context, in *CheckerAcceptSalesOrderRequest, opts ...grpc.CallOption) (*CheckerAcceptSalesOrderResponse, error)
	CheckerHistory(ctx context.Context, in *CheckerHistoryRequest, opts ...grpc.CallOption) (*CheckerHistoryResponse, error)
	CheckerHistoryDetail(ctx context.Context, in *CheckerHistoryDetailRequest, opts ...grpc.CallOption) (*CheckerHistoryDetailResponse, error)
	CheckerWidget(ctx context.Context, in *CheckerWidgetRequest, opts ...grpc.CallOption) (*CheckerWidgetResponse, error)
}

type siteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSiteServiceClient(cc grpc.ClientConnInterface) SiteServiceClient {
	return &siteServiceClient{cc}
}

func (c *siteServiceClient) GetKoliList(ctx context.Context, in *GetKoliListRequest, opts ...grpc.CallOption) (*GetKoliListResponse, error) {
	out := new(GetKoliListResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/GetKoliList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) GetKoliDetail(ctx context.Context, in *GetKoliDetailRequest, opts ...grpc.CallOption) (*GetKoliDetailResponse, error) {
	out := new(GetKoliDetailResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/GetKoliDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) GetSalesOrderDeliveryKoli(ctx context.Context, in *GetSalesOrderDeliveryKoliRequest, opts ...grpc.CallOption) (*GetSalesOrderDeliveryKoliResponse, error) {
	out := new(GetSalesOrderDeliveryKoliResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/GetSalesOrderDeliveryKoli", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) LoginHelper(ctx context.Context, in *LoginHelperRequest, opts ...grpc.CallOption) (*LoginHelperResponse, error) {
	out := new(LoginHelperResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/LoginHelper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) GetPickingOrderHeader(ctx context.Context, in *GetPickingOrderHeaderRequest, opts ...grpc.CallOption) (*GetPickingOrderHeaderResponse, error) {
	out := new(GetPickingOrderHeaderResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/GetPickingOrderHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) GetPickingOrderDetail(ctx context.Context, in *GetPickingOrderDetailRequest, opts ...grpc.CallOption) (*GetPickingOrderDetailResponse, error) {
	out := new(GetPickingOrderDetailResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/GetPickingOrderDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) GetAggregatedProductSalesOrder(ctx context.Context, in *GetAggregatedProductSalesOrderRequest, opts ...grpc.CallOption) (*GetAggregatedProductSalesOrderResponse, error) {
	out := new(GetAggregatedProductSalesOrderResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/GetAggregatedProductSalesOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) StartPickingOrder(ctx context.Context, in *StartPickingOrderRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/StartPickingOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) SubmitPicking(ctx context.Context, in *SubmitPickingRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/SubmitPicking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) GetSalesOrderPicking(ctx context.Context, in *GetSalesOrderPickingRequest, opts ...grpc.CallOption) (*GetSalesOrderPickingResponse, error) {
	out := new(GetSalesOrderPickingResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/GetSalesOrderPicking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) GetSalesOrderPickingDetail(ctx context.Context, in *GetSalesOrderPickingDetailRequest, opts ...grpc.CallOption) (*GetSalesOrderPickingDetailResponse, error) {
	out := new(GetSalesOrderPickingDetailResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/GetSalesOrderPickingDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) SubmitSalesOrder(ctx context.Context, in *SubmitSalesOrderRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/SubmitSalesOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	out := new(HistoryResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/History", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) HistoryDetail(ctx context.Context, in *HistoryDetailRequest, opts ...grpc.CallOption) (*HistoryDetailResponse, error) {
	out := new(HistoryDetailResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/HistoryDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) PickerWidget(ctx context.Context, in *PickerWidgetRequest, opts ...grpc.CallOption) (*PickerWidgetResponse, error) {
	out := new(PickerWidgetResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/PickerWidget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) GetSalesOrderToCheck(ctx context.Context, in *GetSalesOrderToCheckRequest, opts ...grpc.CallOption) (*GetSalesOrderToCheckResponse, error) {
	out := new(GetSalesOrderToCheckResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/GetSalesOrderToCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) SPVGetSalesOrderToCheckDetail(ctx context.Context, in *GetSalesOrderToCheckDetailRequest, opts ...grpc.CallOption) (*GetSalesOrderToCheckDetailResponse, error) {
	out := new(GetSalesOrderToCheckDetailResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/SPVGetSalesOrderToCheckDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) SPVRejectSalesOrder(ctx context.Context, in *SPVRejectSalesOrderRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/SPVRejectSalesOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) SPVAcceptSalesOrder(ctx context.Context, in *SPVAcceptSalesOrderRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/SPVAcceptSalesOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) SPVWidget(ctx context.Context, in *SPVWidgetRequest, opts ...grpc.CallOption) (*SPVWidgetResponse, error) {
	out := new(SPVWidgetResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/SPVWidget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) SPVWrtMonitoring(ctx context.Context, in *GetWrtMonitoringListRequest, opts ...grpc.CallOption) (*GetWrtMonitoringListResponse, error) {
	out := new(GetWrtMonitoringListResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/SPVWrtMonitoring", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) SPVWrtMonitoringDetail(ctx context.Context, in *GetWrtMonitoringDetailRequest, opts ...grpc.CallOption) (*GetWrtMonitoringDetailResponse, error) {
	out := new(GetWrtMonitoringDetailResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/SPVWrtMonitoringDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) CheckerGetSalesOrderToCheckDetail(ctx context.Context, in *GetSalesOrderToCheckDetailRequest, opts ...grpc.CallOption) (*GetSalesOrderToCheckDetailResponse, error) {
	out := new(GetSalesOrderToCheckDetailResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/CheckerGetSalesOrderToCheckDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) CheckerStartChecking(ctx context.Context, in *CheckerStartCheckingRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/CheckerStartChecking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) CheckerSubmitChecking(ctx context.Context, in *CheckerSubmitCheckingRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/CheckerSubmitChecking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) CheckerRejectSalesOrder(ctx context.Context, in *CheckerRejectSalesOrderRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/CheckerRejectSalesOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) CheckerGetDeliveryKoli(ctx context.Context, in *CheckerGetDeliveryKoliRequest, opts ...grpc.CallOption) (*CheckerGetDeliveryKoliResponse, error) {
	out := new(CheckerGetDeliveryKoliResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/CheckerGetDeliveryKoli", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) CheckerAcceptSalesOrder(ctx context.Context, in *CheckerAcceptSalesOrderRequest, opts ...grpc.CallOption) (*CheckerAcceptSalesOrderResponse, error) {
	out := new(CheckerAcceptSalesOrderResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/CheckerAcceptSalesOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) CheckerHistory(ctx context.Context, in *CheckerHistoryRequest, opts ...grpc.CallOption) (*CheckerHistoryResponse, error) {
	out := new(CheckerHistoryResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/CheckerHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) CheckerHistoryDetail(ctx context.Context, in *CheckerHistoryDetailRequest, opts ...grpc.CallOption) (*CheckerHistoryDetailResponse, error) {
	out := new(CheckerHistoryDetailResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/CheckerHistoryDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) CheckerWidget(ctx context.Context, in *CheckerWidgetRequest, opts ...grpc.CallOption) (*CheckerWidgetResponse, error) {
	out := new(CheckerWidgetResponse)
	err := c.cc.Invoke(ctx, "/proto.site_service.SiteService/CheckerWidget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SiteServiceServer is the server API for SiteService service.
// All implementations should embed UnimplementedSiteServiceServer
// for forward compatibility
type SiteServiceServer interface {
	GetKoliList(context.Context, *GetKoliListRequest) (*GetKoliListResponse, error)
	GetKoliDetail(context.Context, *GetKoliDetailRequest) (*GetKoliDetailResponse, error)
	GetSalesOrderDeliveryKoli(context.Context, *GetSalesOrderDeliveryKoliRequest) (*GetSalesOrderDeliveryKoliResponse, error)
	LoginHelper(context.Context, *LoginHelperRequest) (*LoginHelperResponse, error)
	// picker
	GetPickingOrderHeader(context.Context, *GetPickingOrderHeaderRequest) (*GetPickingOrderHeaderResponse, error)
	GetPickingOrderDetail(context.Context, *GetPickingOrderDetailRequest) (*GetPickingOrderDetailResponse, error)
	GetAggregatedProductSalesOrder(context.Context, *GetAggregatedProductSalesOrderRequest) (*GetAggregatedProductSalesOrderResponse, error)
	StartPickingOrder(context.Context, *StartPickingOrderRequest) (*SuccessResponse, error)
	SubmitPicking(context.Context, *SubmitPickingRequest) (*SuccessResponse, error)
	GetSalesOrderPicking(context.Context, *GetSalesOrderPickingRequest) (*GetSalesOrderPickingResponse, error)
	GetSalesOrderPickingDetail(context.Context, *GetSalesOrderPickingDetailRequest) (*GetSalesOrderPickingDetailResponse, error)
	SubmitSalesOrder(context.Context, *SubmitSalesOrderRequest) (*SuccessResponse, error)
	History(context.Context, *HistoryRequest) (*HistoryResponse, error)
	HistoryDetail(context.Context, *HistoryDetailRequest) (*HistoryDetailResponse, error)
	PickerWidget(context.Context, *PickerWidgetRequest) (*PickerWidgetResponse, error)
	// spv & checker
	GetSalesOrderToCheck(context.Context, *GetSalesOrderToCheckRequest) (*GetSalesOrderToCheckResponse, error)
	// spv
	SPVGetSalesOrderToCheckDetail(context.Context, *GetSalesOrderToCheckDetailRequest) (*GetSalesOrderToCheckDetailResponse, error)
	SPVRejectSalesOrder(context.Context, *SPVRejectSalesOrderRequest) (*SuccessResponse, error)
	SPVAcceptSalesOrder(context.Context, *SPVAcceptSalesOrderRequest) (*SuccessResponse, error)
	SPVWidget(context.Context, *SPVWidgetRequest) (*SPVWidgetResponse, error)
	SPVWrtMonitoring(context.Context, *GetWrtMonitoringListRequest) (*GetWrtMonitoringListResponse, error)
	SPVWrtMonitoringDetail(context.Context, *GetWrtMonitoringDetailRequest) (*GetWrtMonitoringDetailResponse, error)
	// checker
	CheckerGetSalesOrderToCheckDetail(context.Context, *GetSalesOrderToCheckDetailRequest) (*GetSalesOrderToCheckDetailResponse, error)
	CheckerStartChecking(context.Context, *CheckerStartCheckingRequest) (*SuccessResponse, error)
	CheckerSubmitChecking(context.Context, *CheckerSubmitCheckingRequest) (*SuccessResponse, error)
	CheckerRejectSalesOrder(context.Context, *CheckerRejectSalesOrderRequest) (*SuccessResponse, error)
	CheckerGetDeliveryKoli(context.Context, *CheckerGetDeliveryKoliRequest) (*CheckerGetDeliveryKoliResponse, error)
	CheckerAcceptSalesOrder(context.Context, *CheckerAcceptSalesOrderRequest) (*CheckerAcceptSalesOrderResponse, error)
	CheckerHistory(context.Context, *CheckerHistoryRequest) (*CheckerHistoryResponse, error)
	CheckerHistoryDetail(context.Context, *CheckerHistoryDetailRequest) (*CheckerHistoryDetailResponse, error)
	CheckerWidget(context.Context, *CheckerWidgetRequest) (*CheckerWidgetResponse, error)
}

// UnimplementedSiteServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSiteServiceServer struct {
}

func (UnimplementedSiteServiceServer) GetKoliList(context.Context, *GetKoliListRequest) (*GetKoliListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKoliList not implemented")
}
func (UnimplementedSiteServiceServer) GetKoliDetail(context.Context, *GetKoliDetailRequest) (*GetKoliDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKoliDetail not implemented")
}
func (UnimplementedSiteServiceServer) GetSalesOrderDeliveryKoli(context.Context, *GetSalesOrderDeliveryKoliRequest) (*GetSalesOrderDeliveryKoliResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesOrderDeliveryKoli not implemented")
}
func (UnimplementedSiteServiceServer) LoginHelper(context.Context, *LoginHelperRequest) (*LoginHelperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginHelper not implemented")
}
func (UnimplementedSiteServiceServer) GetPickingOrderHeader(context.Context, *GetPickingOrderHeaderRequest) (*GetPickingOrderHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPickingOrderHeader not implemented")
}
func (UnimplementedSiteServiceServer) GetPickingOrderDetail(context.Context, *GetPickingOrderDetailRequest) (*GetPickingOrderDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPickingOrderDetail not implemented")
}
func (UnimplementedSiteServiceServer) GetAggregatedProductSalesOrder(context.Context, *GetAggregatedProductSalesOrderRequest) (*GetAggregatedProductSalesOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregatedProductSalesOrder not implemented")
}
func (UnimplementedSiteServiceServer) StartPickingOrder(context.Context, *StartPickingOrderRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPickingOrder not implemented")
}
func (UnimplementedSiteServiceServer) SubmitPicking(context.Context, *SubmitPickingRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPicking not implemented")
}
func (UnimplementedSiteServiceServer) GetSalesOrderPicking(context.Context, *GetSalesOrderPickingRequest) (*GetSalesOrderPickingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesOrderPicking not implemented")
}
func (UnimplementedSiteServiceServer) GetSalesOrderPickingDetail(context.Context, *GetSalesOrderPickingDetailRequest) (*GetSalesOrderPickingDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesOrderPickingDetail not implemented")
}
func (UnimplementedSiteServiceServer) SubmitSalesOrder(context.Context, *SubmitSalesOrderRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSalesOrder not implemented")
}
func (UnimplementedSiteServiceServer) History(context.Context, *HistoryRequest) (*HistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method History not implemented")
}
func (UnimplementedSiteServiceServer) HistoryDetail(context.Context, *HistoryDetailRequest) (*HistoryDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryDetail not implemented")
}
func (UnimplementedSiteServiceServer) PickerWidget(context.Context, *PickerWidgetRequest) (*PickerWidgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PickerWidget not implemented")
}
func (UnimplementedSiteServiceServer) GetSalesOrderToCheck(context.Context, *GetSalesOrderToCheckRequest) (*GetSalesOrderToCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesOrderToCheck not implemented")
}
func (UnimplementedSiteServiceServer) SPVGetSalesOrderToCheckDetail(context.Context, *GetSalesOrderToCheckDetailRequest) (*GetSalesOrderToCheckDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPVGetSalesOrderToCheckDetail not implemented")
}
func (UnimplementedSiteServiceServer) SPVRejectSalesOrder(context.Context, *SPVRejectSalesOrderRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPVRejectSalesOrder not implemented")
}
func (UnimplementedSiteServiceServer) SPVAcceptSalesOrder(context.Context, *SPVAcceptSalesOrderRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPVAcceptSalesOrder not implemented")
}
func (UnimplementedSiteServiceServer) SPVWidget(context.Context, *SPVWidgetRequest) (*SPVWidgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPVWidget not implemented")
}
func (UnimplementedSiteServiceServer) SPVWrtMonitoring(context.Context, *GetWrtMonitoringListRequest) (*GetWrtMonitoringListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPVWrtMonitoring not implemented")
}
func (UnimplementedSiteServiceServer) SPVWrtMonitoringDetail(context.Context, *GetWrtMonitoringDetailRequest) (*GetWrtMonitoringDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPVWrtMonitoringDetail not implemented")
}
func (UnimplementedSiteServiceServer) CheckerGetSalesOrderToCheckDetail(context.Context, *GetSalesOrderToCheckDetailRequest) (*GetSalesOrderToCheckDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckerGetSalesOrderToCheckDetail not implemented")
}
func (UnimplementedSiteServiceServer) CheckerStartChecking(context.Context, *CheckerStartCheckingRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckerStartChecking not implemented")
}
func (UnimplementedSiteServiceServer) CheckerSubmitChecking(context.Context, *CheckerSubmitCheckingRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckerSubmitChecking not implemented")
}
func (UnimplementedSiteServiceServer) CheckerRejectSalesOrder(context.Context, *CheckerRejectSalesOrderRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckerRejectSalesOrder not implemented")
}
func (UnimplementedSiteServiceServer) CheckerGetDeliveryKoli(context.Context, *CheckerGetDeliveryKoliRequest) (*CheckerGetDeliveryKoliResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckerGetDeliveryKoli not implemented")
}
func (UnimplementedSiteServiceServer) CheckerAcceptSalesOrder(context.Context, *CheckerAcceptSalesOrderRequest) (*CheckerAcceptSalesOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckerAcceptSalesOrder not implemented")
}
func (UnimplementedSiteServiceServer) CheckerHistory(context.Context, *CheckerHistoryRequest) (*CheckerHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckerHistory not implemented")
}
func (UnimplementedSiteServiceServer) CheckerHistoryDetail(context.Context, *CheckerHistoryDetailRequest) (*CheckerHistoryDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckerHistoryDetail not implemented")
}
func (UnimplementedSiteServiceServer) CheckerWidget(context.Context, *CheckerWidgetRequest) (*CheckerWidgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckerWidget not implemented")
}

// UnsafeSiteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SiteServiceServer will
// result in compilation errors.
type UnsafeSiteServiceServer interface {
	mustEmbedUnimplementedSiteServiceServer()
}

func RegisterSiteServiceServer(s grpc.ServiceRegistrar, srv SiteServiceServer) {
	s.RegisterService(&SiteService_ServiceDesc, srv)
}

func _SiteService_GetKoliList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKoliListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).GetKoliList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/GetKoliList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).GetKoliList(ctx, req.(*GetKoliListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_GetKoliDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKoliDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).GetKoliDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/GetKoliDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).GetKoliDetail(ctx, req.(*GetKoliDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_GetSalesOrderDeliveryKoli_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesOrderDeliveryKoliRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).GetSalesOrderDeliveryKoli(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/GetSalesOrderDeliveryKoli",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).GetSalesOrderDeliveryKoli(ctx, req.(*GetSalesOrderDeliveryKoliRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_LoginHelper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginHelperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).LoginHelper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/LoginHelper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).LoginHelper(ctx, req.(*LoginHelperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_GetPickingOrderHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPickingOrderHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).GetPickingOrderHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/GetPickingOrderHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).GetPickingOrderHeader(ctx, req.(*GetPickingOrderHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_GetPickingOrderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPickingOrderDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).GetPickingOrderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/GetPickingOrderDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).GetPickingOrderDetail(ctx, req.(*GetPickingOrderDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_GetAggregatedProductSalesOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAggregatedProductSalesOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).GetAggregatedProductSalesOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/GetAggregatedProductSalesOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).GetAggregatedProductSalesOrder(ctx, req.(*GetAggregatedProductSalesOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_StartPickingOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPickingOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).StartPickingOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/StartPickingOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).StartPickingOrder(ctx, req.(*StartPickingOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_SubmitPicking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitPickingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).SubmitPicking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/SubmitPicking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).SubmitPicking(ctx, req.(*SubmitPickingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_GetSalesOrderPicking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesOrderPickingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).GetSalesOrderPicking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/GetSalesOrderPicking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).GetSalesOrderPicking(ctx, req.(*GetSalesOrderPickingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_GetSalesOrderPickingDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesOrderPickingDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).GetSalesOrderPickingDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/GetSalesOrderPickingDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).GetSalesOrderPickingDetail(ctx, req.(*GetSalesOrderPickingDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_SubmitSalesOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitSalesOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).SubmitSalesOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/SubmitSalesOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).SubmitSalesOrder(ctx, req.(*SubmitSalesOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/History",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).History(ctx, req.(*HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_HistoryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).HistoryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/HistoryDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).HistoryDetail(ctx, req.(*HistoryDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_PickerWidget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickerWidgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).PickerWidget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/PickerWidget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).PickerWidget(ctx, req.(*PickerWidgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_GetSalesOrderToCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesOrderToCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).GetSalesOrderToCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/GetSalesOrderToCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).GetSalesOrderToCheck(ctx, req.(*GetSalesOrderToCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_SPVGetSalesOrderToCheckDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesOrderToCheckDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).SPVGetSalesOrderToCheckDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/SPVGetSalesOrderToCheckDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).SPVGetSalesOrderToCheckDetail(ctx, req.(*GetSalesOrderToCheckDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_SPVRejectSalesOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SPVRejectSalesOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).SPVRejectSalesOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/SPVRejectSalesOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).SPVRejectSalesOrder(ctx, req.(*SPVRejectSalesOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_SPVAcceptSalesOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SPVAcceptSalesOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).SPVAcceptSalesOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/SPVAcceptSalesOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).SPVAcceptSalesOrder(ctx, req.(*SPVAcceptSalesOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_SPVWidget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SPVWidgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).SPVWidget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/SPVWidget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).SPVWidget(ctx, req.(*SPVWidgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_SPVWrtMonitoring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWrtMonitoringListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).SPVWrtMonitoring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/SPVWrtMonitoring",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).SPVWrtMonitoring(ctx, req.(*GetWrtMonitoringListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_SPVWrtMonitoringDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWrtMonitoringDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).SPVWrtMonitoringDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/SPVWrtMonitoringDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).SPVWrtMonitoringDetail(ctx, req.(*GetWrtMonitoringDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_CheckerGetSalesOrderToCheckDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesOrderToCheckDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).CheckerGetSalesOrderToCheckDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/CheckerGetSalesOrderToCheckDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).CheckerGetSalesOrderToCheckDetail(ctx, req.(*GetSalesOrderToCheckDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_CheckerStartChecking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckerStartCheckingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).CheckerStartChecking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/CheckerStartChecking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).CheckerStartChecking(ctx, req.(*CheckerStartCheckingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_CheckerSubmitChecking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckerSubmitCheckingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).CheckerSubmitChecking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/CheckerSubmitChecking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).CheckerSubmitChecking(ctx, req.(*CheckerSubmitCheckingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_CheckerRejectSalesOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckerRejectSalesOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).CheckerRejectSalesOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/CheckerRejectSalesOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).CheckerRejectSalesOrder(ctx, req.(*CheckerRejectSalesOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_CheckerGetDeliveryKoli_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckerGetDeliveryKoliRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).CheckerGetDeliveryKoli(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/CheckerGetDeliveryKoli",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).CheckerGetDeliveryKoli(ctx, req.(*CheckerGetDeliveryKoliRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_CheckerAcceptSalesOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckerAcceptSalesOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).CheckerAcceptSalesOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/CheckerAcceptSalesOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).CheckerAcceptSalesOrder(ctx, req.(*CheckerAcceptSalesOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_CheckerHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckerHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).CheckerHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/CheckerHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).CheckerHistory(ctx, req.(*CheckerHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_CheckerHistoryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckerHistoryDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).CheckerHistoryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/CheckerHistoryDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).CheckerHistoryDetail(ctx, req.(*CheckerHistoryDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_CheckerWidget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckerWidgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).CheckerWidget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.site_service.SiteService/CheckerWidget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).CheckerWidget(ctx, req.(*CheckerWidgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SiteService_ServiceDesc is the grpc.ServiceDesc for SiteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SiteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.site_service.SiteService",
	HandlerType: (*SiteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKoliList",
			Handler:    _SiteService_GetKoliList_Handler,
		},
		{
			MethodName: "GetKoliDetail",
			Handler:    _SiteService_GetKoliDetail_Handler,
		},
		{
			MethodName: "GetSalesOrderDeliveryKoli",
			Handler:    _SiteService_GetSalesOrderDeliveryKoli_Handler,
		},
		{
			MethodName: "LoginHelper",
			Handler:    _SiteService_LoginHelper_Handler,
		},
		{
			MethodName: "GetPickingOrderHeader",
			Handler:    _SiteService_GetPickingOrderHeader_Handler,
		},
		{
			MethodName: "GetPickingOrderDetail",
			Handler:    _SiteService_GetPickingOrderDetail_Handler,
		},
		{
			MethodName: "GetAggregatedProductSalesOrder",
			Handler:    _SiteService_GetAggregatedProductSalesOrder_Handler,
		},
		{
			MethodName: "StartPickingOrder",
			Handler:    _SiteService_StartPickingOrder_Handler,
		},
		{
			MethodName: "SubmitPicking",
			Handler:    _SiteService_SubmitPicking_Handler,
		},
		{
			MethodName: "GetSalesOrderPicking",
			Handler:    _SiteService_GetSalesOrderPicking_Handler,
		},
		{
			MethodName: "GetSalesOrderPickingDetail",
			Handler:    _SiteService_GetSalesOrderPickingDetail_Handler,
		},
		{
			MethodName: "SubmitSalesOrder",
			Handler:    _SiteService_SubmitSalesOrder_Handler,
		},
		{
			MethodName: "History",
			Handler:    _SiteService_History_Handler,
		},
		{
			MethodName: "HistoryDetail",
			Handler:    _SiteService_HistoryDetail_Handler,
		},
		{
			MethodName: "PickerWidget",
			Handler:    _SiteService_PickerWidget_Handler,
		},
		{
			MethodName: "GetSalesOrderToCheck",
			Handler:    _SiteService_GetSalesOrderToCheck_Handler,
		},
		{
			MethodName: "SPVGetSalesOrderToCheckDetail",
			Handler:    _SiteService_SPVGetSalesOrderToCheckDetail_Handler,
		},
		{
			MethodName: "SPVRejectSalesOrder",
			Handler:    _SiteService_SPVRejectSalesOrder_Handler,
		},
		{
			MethodName: "SPVAcceptSalesOrder",
			Handler:    _SiteService_SPVAcceptSalesOrder_Handler,
		},
		{
			MethodName: "SPVWidget",
			Handler:    _SiteService_SPVWidget_Handler,
		},
		{
			MethodName: "SPVWrtMonitoring",
			Handler:    _SiteService_SPVWrtMonitoring_Handler,
		},
		{
			MethodName: "SPVWrtMonitoringDetail",
			Handler:    _SiteService_SPVWrtMonitoringDetail_Handler,
		},
		{
			MethodName: "CheckerGetSalesOrderToCheckDetail",
			Handler:    _SiteService_CheckerGetSalesOrderToCheckDetail_Handler,
		},
		{
			MethodName: "CheckerStartChecking",
			Handler:    _SiteService_CheckerStartChecking_Handler,
		},
		{
			MethodName: "CheckerSubmitChecking",
			Handler:    _SiteService_CheckerSubmitChecking_Handler,
		},
		{
			MethodName: "CheckerRejectSalesOrder",
			Handler:    _SiteService_CheckerRejectSalesOrder_Handler,
		},
		{
			MethodName: "CheckerGetDeliveryKoli",
			Handler:    _SiteService_CheckerGetDeliveryKoli_Handler,
		},
		{
			MethodName: "CheckerAcceptSalesOrder",
			Handler:    _SiteService_CheckerAcceptSalesOrder_Handler,
		},
		{
			MethodName: "CheckerHistory",
			Handler:    _SiteService_CheckerHistory_Handler,
		},
		{
			MethodName: "CheckerHistoryDetail",
			Handler:    _SiteService_CheckerHistoryDetail_Handler,
		},
		{
			MethodName: "CheckerWidget",
			Handler:    _SiteService_CheckerWidget_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/site_service/site_service.proto",
}
