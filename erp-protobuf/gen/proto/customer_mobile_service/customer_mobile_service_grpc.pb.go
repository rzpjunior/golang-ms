// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: proto/customer_mobile_service/customer_mobile_service.proto

package customer_mobile_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerMobileServiceClient is the client API for CustomerMobileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerMobileServiceClient interface {
	GetUserCustomerDetail(ctx context.Context, in *GetUserCustomerDetailRequest, opts ...grpc.CallOption) (*GetUserCustomerDetailResponse, error)
	GetUserCustomerFirebaseToken(ctx context.Context, in *GetUserCustomerFirebaseTokenRequest, opts ...grpc.CallOption) (*GetUserCustomerFirebaseTokenResponse, error)
}

type customerMobileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerMobileServiceClient(cc grpc.ClientConnInterface) CustomerMobileServiceClient {
	return &customerMobileServiceClient{cc}
}

func (c *customerMobileServiceClient) GetUserCustomerDetail(ctx context.Context, in *GetUserCustomerDetailRequest, opts ...grpc.CallOption) (*GetUserCustomerDetailResponse, error) {
	out := new(GetUserCustomerDetailResponse)
	err := c.cc.Invoke(ctx, "/proto.customer_mobile_service.CustomerMobileService/GetUserCustomerDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerMobileServiceClient) GetUserCustomerFirebaseToken(ctx context.Context, in *GetUserCustomerFirebaseTokenRequest, opts ...grpc.CallOption) (*GetUserCustomerFirebaseTokenResponse, error) {
	out := new(GetUserCustomerFirebaseTokenResponse)
	err := c.cc.Invoke(ctx, "/proto.customer_mobile_service.CustomerMobileService/GetUserCustomerFirebaseToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerMobileServiceServer is the server API for CustomerMobileService service.
// All implementations should embed UnimplementedCustomerMobileServiceServer
// for forward compatibility
type CustomerMobileServiceServer interface {
	GetUserCustomerDetail(context.Context, *GetUserCustomerDetailRequest) (*GetUserCustomerDetailResponse, error)
	GetUserCustomerFirebaseToken(context.Context, *GetUserCustomerFirebaseTokenRequest) (*GetUserCustomerFirebaseTokenResponse, error)
}

// UnimplementedCustomerMobileServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCustomerMobileServiceServer struct {
}

func (UnimplementedCustomerMobileServiceServer) GetUserCustomerDetail(context.Context, *GetUserCustomerDetailRequest) (*GetUserCustomerDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCustomerDetail not implemented")
}
func (UnimplementedCustomerMobileServiceServer) GetUserCustomerFirebaseToken(context.Context, *GetUserCustomerFirebaseTokenRequest) (*GetUserCustomerFirebaseTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCustomerFirebaseToken not implemented")
}

// UnsafeCustomerMobileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerMobileServiceServer will
// result in compilation errors.
type UnsafeCustomerMobileServiceServer interface {
	mustEmbedUnimplementedCustomerMobileServiceServer()
}

func RegisterCustomerMobileServiceServer(s grpc.ServiceRegistrar, srv CustomerMobileServiceServer) {
	s.RegisterService(&CustomerMobileService_ServiceDesc, srv)
}

func _CustomerMobileService_GetUserCustomerDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCustomerDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerMobileServiceServer).GetUserCustomerDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.customer_mobile_service.CustomerMobileService/GetUserCustomerDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerMobileServiceServer).GetUserCustomerDetail(ctx, req.(*GetUserCustomerDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerMobileService_GetUserCustomerFirebaseToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCustomerFirebaseTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerMobileServiceServer).GetUserCustomerFirebaseToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.customer_mobile_service.CustomerMobileService/GetUserCustomerFirebaseToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerMobileServiceServer).GetUserCustomerFirebaseToken(ctx, req.(*GetUserCustomerFirebaseTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerMobileService_ServiceDesc is the grpc.ServiceDesc for CustomerMobileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerMobileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.customer_mobile_service.CustomerMobileService",
	HandlerType: (*CustomerMobileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserCustomerDetail",
			Handler:    _CustomerMobileService_GetUserCustomerDetail_Handler,
		},
		{
			MethodName: "GetUserCustomerFirebaseToken",
			Handler:    _CustomerMobileService_GetUserCustomerFirebaseToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/customer_mobile_service/customer_mobile_service.proto",
}
